# -*- coding: utf-8 -*-

"""
This module provides an access to the HITRAN data.
Data is downloaded and cached.

This module serves as a simple database manager front end.

API is aimed to be RESTful, which means that interaction
between local API and remote data-server will be held
via sending RESTful queries (API->remote) and
receiving data preferably in text format (remote->API).

Object are supposed to be implemented by structures/dicts
as they are present in almost any programming language.

Trying to retain functional style for this API.
"""

import json
import os
import os.path
import pydoc
import re
import sys
from bisect import bisect
from os import listdir
from warnings import simplefilter, warn

import numpy as np
from numpy import (
    abs,
    any,
    arange,
    array,
    complex128,
    convolve,
    cos,
    exp,
    flipud,
    float32,
    float64,
    floor,
    int64,
    linspace,
    log,
    maximum,
    minimum,
    ndarray,
    pi,
    place,
    polyval,
    real,
    setdiff1d,
    sin,
)
from numpy import sort as npsort
from numpy import sqrt, tan, where, zeros
from numpy.fft import fft, fftshift

# Enable warning repetitions
simplefilter("always", UserWarning)

# Python 3 compatibility
try:
    import urllib.request as urllib2
except ImportError:
    import urllib2
if "io" in sys.modules:  # define open using Linux-style line endings
    import io

    def open_(*args, **argv):
        argv.update(dict(newline="\n"))
        return io.open(*args, **argv)

else:
    open_ = open

HAPI_VERSION = "1.1.1.0"
__version__ = HAPI_VERSION
HAPI_HISTORY = [
    "FIXED GRID BUG (ver. 1.1.0.1)",
    "FIXED OUTPUT FORMAT FOR CROSS-SECTIONS (ver. 1.1.0.1)",
    "ADDED CPF BY SCHREIER (JQSRT_112_2011) (ver. 1.1.0.2)",
    "OPTIMIZED EXPRESSION EVALUATIONS FOR SELECT (ver. 1.1.0.3)",
    "ADDED SUPPORT FOR MIXTURES (ver. 1.1.0.4)",
    "ADDED SUPPORT FOR USER-DEFINED ENV DEPENDENCES (ver. 1.1.0.5)",
    "ADDED PROFILE SELECTION (ALPHA) (ver. 1.1.0.6)",
    "ADDED METADATA FOR HTP, FIXED NORMALIZATION IN CONVOLVESPECTRUMSAME (ver. 1.1.0.7)",
    'FIXED A "LONELY HEADER" BUG IN CACHE2STORAGE (ver. 1.1.0.7.1)',
    "ADDED SUPPORT FOR PHOSGENE AND CYANOGEN (ver. 1.1.0.7.2)",
    "OPTIMIZED STORAGE2CACHE (by Nils-Holger Loeber) (ver. 1.1.0.7.3)",
    "ADDED SKIPABLE PARAMETERS IN HEADERS (ver. 1.1.0.7.4)",
    "ADDED SUPPORT FOR FORTRAN D-NOTATION (ver. 1.1.0.7.5)",
    'ADDED SUPPORT FOR WEIRD-FORMATTED INTENSITY VALUES E.G. "2.700-164" (ver. 1.1.0.7.6)',
    "ADDED TIPS-2017 (ver. 1.1.0.8)",
    "ADDED SUPPORT FOR CUSTOM EXTENSIONS OF THE DATA FILES (ver. 1.1.0.8.1)",
    "FIXED LINK TO (2,0) ISOTOPOLOGUE IN TIPS-2017 (ver. 1.1.0.8.2)",
    "ADDED SAVEHEADER FUNCTION (ver. 1.1.0.8.3)",
    "ADDED METADATA FOR SF6 (ver. 1.1.0.8.4)",
    "ADDED D2O ISOTOPOLOGUE OF WATER TO DESCRIPTION (ver. 1.1.0.8.5)",
    "FIXED LINE ENDINGS IN STORAGE2CACHE AND QUERYHITRAN (ver. 1.1.0.8.6)",
    "ADDED SUPPORT FOR NON-INTEGER LOCAL ISO IDS (ver. 1.1.0.8.7)",
    "FIXED PARAMETER NAME CASE BUG (by Robert J. Hargreaves) (ver. 1.1.0.8.8)",
    "CAST LOCAL_ISO_ID=0 TO 10 FOR CARBON DIOXIDE (ver. 1.1.0.8.9)",
    "USING NUMPY.ARRAYS FOR NUMERIC COLUMNS OF LOCAL_TABLE_CACHE (ver. 1.1.0.9.0)",
    "ADDED DESCRIPTIONS FOR BROADENING BY H2O (ver. 1.1.0.9.1)",
    "ADDED PROXY SUPPORT IN FETCH AND FETCH_BY_IDS (ver. 1.1.0.9.2)",
    "ADDED LIMIT FOR NUMBER OF LINES DURING TABLE READ (ver. 1.1.0.9.3)",
    "FIXED ABSOLUTE PATH BUG IN TABLE NAMES (ver. 1.1.0.9.4)",
    "CORRECTED ABUNDANCE OF THE HD ISOTOPOLOGUE (ver. 1.1.0.9.5)",
    "ADDED UNIFIED INTERFACES FOR ABSCOEF AND XSC CALCULATIONS (ver. 1.1.0.9.6)",
    "ADDED PARLISTS FOR LINE MIXING (VOIGT AND SDVOIGT) (ver. 1.1.0.9.7)",
    "ADDED SUPPORT FOR ROSENKRANZ LM PARAMETERS TO PCQSDHC AND LORENTZ (ver. 1.1.1.0)",
]

# version header
print("HAPI version: %s" % HAPI_VERSION)
print("To get the most up-to-date version please check http://hitran.org/hapi")
print(
    "ATTENTION: Python versions of partition sums from TIPS-2017 are now available in HAPI code"
)
# print('ATTENTION: Python versions of partition sums from TIPS-2017 are available at http://hitran.org/suppl/TIPS/')
# print('           To use them in HAPI ver. 1.1.0.7, use partitionFunction parameter of the absorptionCoefficient_ routine.')
print("")
print(
    "           It is free to use HAPI. If you use HAPI in your research or software development,"
)
print("           please cite it using the following reference:")
print(
    "           R.V. Kochanov, I.E. Gordon, L.S. Rothman, P. Wcislo, C. Hill, J.S. Wilzewski,"
)
print(
    "           HITRAN Application Programming Interface (HAPI): A comprehensive approach"
)
print(
    "           to working with spectroscopic data, J. Quant. Spectrosc. Radiat. Transfer 177, 15-30 (2016)"
)
print("           DOI: 10.1016/j.jqsrt.2016.03.005")

# define precision
__ComplexType__ = complex128
__IntegerType__ = int64
__FloatType__ = float64

# define zero
cZero = __FloatType__(0.0)

# physical constants
cBolts = 1.380648813e-16  # erg/K, CGS
cc = 2.99792458e10  # cm/s, CGS
hh = 6.626196e-27  # erg*s, CGS

# computational constants
cSqrtLn2divSqrtPi = 0.469718639319144059835
cLn2 = 0.6931471805599
cSqrtLn2 = 0.8325546111577
cSqrt2Ln2 = 1.1774100225

# initialize global variables
VARIABLES = {}

VARIABLES["DEBUG"] = False
if VARIABLES["DEBUG"]:
    warn("DEBUG is set to True!")

GLOBAL_DEBUG = False
if GLOBAL_DEBUG:
    warn("GLOBAL_DEBUG is set to True!")

LOCAL_HOST = "http://localhost"

# DEBUG switch
if GLOBAL_DEBUG:
    GLOBAL_HOST = LOCAL_HOST + ":8000"  # localhost
else:
    GLOBAL_HOST = "http://hitran.org"

VARIABLES["PROXY"] = {}
# EXAMPLE OF PROXY:
# VARIABLES['PROXY'] = {'http': '127.0.0.1:80'}

# make it changeable
VARIABLES["GLOBAL_HOST"] = GLOBAL_HOST

# display the fetch URL (debug)
VARIABLES["DISPLAY_FETCH_URL"] = False

# In this "robust" version of arange the grid doesn't suffer
# from the shift of the nodes due to error accumulation.
# This effect is pronounced only if the step is sufficiently small.
def arange_(lower, upper, step):
    npnt = floor((upper - lower) / step) + 1
    upper_new = lower + step * (npnt - 1)
    if abs((upper - upper_new) - step) < 1e-10:
        upper_new += step
        npnt += 1
    return linspace(lower, upper_new, int(npnt))


# ---------------------------------------------------------------
# ---------------------------------------------------------------
# LOCAL DATABASE MANAGEMENT SYSTEM
# ---------------------------------------------------------------
# ---------------------------------------------------------------

# ---------------------------------------------------------------
# DATABASE BACKEND: simple text files, parsed into a python lists
# Use a directory as a database. Each table is stored in a
# separate text file. Parameters in text are position-fixed.

BACKEND_DATABASE_NAME_DEFAULT = "."

VARIABLES["BACKEND_DATABASE_NAME"] = BACKEND_DATABASE_NAME_DEFAULT

# For this node local DB is schema-dependent!
LOCAL_TABLE_CACHE = {
    "sampletab": {  # table
        "header": {  # header
            "order": ("column1", "column2", "column3"),
            "format": {"column1": "%10d", "column2": "%20f", "column3": "%30s"},
            "default": {"column1": 0, "column2": 0.0, "column3": ""},
            "number_of_rows": 3,
            "size_in_bytes": None,
            "table_name": "sampletab",
            "table_type": "strict",
        },  # /header
        "data": {
            "column1": [1, 2, 3],
            "column2": [10.5, 11.5, 12.5],
            "column3": ["one", "two", "three"],
        },  # /data
    }  # /table
}  # hash-map of tables

# FORMAT CONVERSION LAYER

# converts between TRANSPORT_FORMAT and OBJECT_FORMAT
HITRAN_FORMAT_160 = {
    "M": {"pos": 1, "len": 2, "format": "%2d"},
    "I": {"pos": 3, "len": 1, "format": "%1d"},
    "nu": {"pos": 4, "len": 12, "format": "%12f"},
    "S": {"pos": 16, "len": 10, "format": "%10f"},
    "R": {"pos": 26, "len": 0, "format": "%0f"},
    "A": {"pos": 26, "len": 10, "format": "%10f"},
    "gamma_air": {"pos": 36, "len": 5, "format": "%5f"},
    "gamma_self": {"pos": 41, "len": 5, "format": "%5f"},
    "E_": {"pos": 46, "len": 10, "format": "%10f"},
    "n_air": {"pos": 56, "len": 4, "format": "%4f"},
    "delta_air": {"pos": 60, "len": 8, "format": "%8f"},
    "V": {"pos": 68, "len": 15, "format": "%15s"},
    "V_": {"pos": 83, "len": 15, "format": "%15s"},
    "Q": {"pos": 98, "len": 15, "format": "%15s"},
    "Q_": {"pos": 113, "len": 15, "format": "%15s"},
    "Ierr": {"pos": 128, "len": 6, "format": "%6s"},
    "Iref": {"pos": 134, "len": 12, "format": "%12s"},
    "flag": {"pos": 146, "len": 1, "format": "%1s"},
    "g": {"pos": 147, "len": 7, "format": "%7f"},
    "g_": {"pos": 154, "len": 7, "format": "%7f"},
}

# This should be generating from the server's response
HITRAN_DEFAULT_HEADER = {
    "table_type": "column-fixed",
    "size_in_bytes": -1,
    "table_name": "###",
    "number_of_rows": -1,
    "order": [
        "molec_id",
        "local_iso_id",
        "nu",
        "sw",
        "a",
        "gamma_air",
        "gamma_self",
        "elower",
        "n_air",
        "delta_air",
        "global_upper_quanta",
        "global_lower_quanta",
        "local_upper_quanta",
        "local_lower_quanta",
        "ierr",
        "iref",
        "line_mixing_flag",
        "gp",
        "gpp",
    ],
    "format": {
        "a": "%10.3E",
        "gamma_air": "%5.4f",
        "gp": "%7.1f",
        "local_iso_id": "%1d",
        "molec_id": "%2d",
        "sw": "%10.3E",
        "local_lower_quanta": "%15s",
        "local_upper_quanta": "%15s",
        "gpp": "%7.1f",
        "elower": "%10.4f",
        "n_air": "%4.2f",
        "delta_air": "%8.6f",
        "global_upper_quanta": "%15s",
        "iref": "%12s",
        "line_mixing_flag": "%1s",
        "ierr": "%6s",
        "nu": "%12.6f",
        "gamma_self": "%5.3f",
        "global_lower_quanta": "%15s",
    },
    "default": {
        "a": 0.0,
        "gamma_air": 0.0,
        "gp": "FFF",
        "local_iso_id": 0,
        "molec_id": 0,
        "sw": 0.0,
        "local_lower_quanta": "000",
        "local_upper_quanta": "000",
        "gpp": "FFF",
        "elower": 0.0,
        "n_air": 0.0,
        "delta_air": 0.0,
        "global_upper_quanta": "000",
        "iref": "EEE",
        "line_mixing_flag": "EEE",
        "ierr": "EEE",
        "nu": 0.0,
        "gamma_self": 0.0,
        "global_lower_quanta": "000",
    },
    "description": {
        "a": "Einstein A-coefficient in s-1",
        "gamma_air": "Air-broadened Lorentzian half-width at half-maximum at p = 1 atm and T = 296 K",
        "gp": "Upper state degeneracy",
        "local_iso_id": "Integer ID of a particular Isotopologue, unique only to a given molecule, in order or abundance (1 = most abundant)",
        "molec_id": "The HITRAN integer ID for this molecule in all its isotopologue forms",
        "sw": "Line intensity, multiplied by isotopologue abundance, at T = 296 K",
        "local_lower_quanta": "Rotational, hyperfine and other quantum numbers and labels for the lower state of a transition",
        "local_upper_quanta": "Rotational, hyperfine and other quantum numbers and labels for the upper state of a transition",
        "gpp": "Lower state degeneracy",
        "elower": "Lower-state energy",
        "n_air": "Temperature exponent for the air-broadened HWHM",
        "delta_air": "Pressure shift induced by air, referred to p=1 atm",
        "global_upper_quanta": "Electronic and vibrational quantum numbers and labels for the upper state of a transition",
        "iref": "Ordered list of reference identifiers for transition parameters",
        "line_mixing_flag": "A flag indicating the presence of additional data and code relating to line-mixing",
        "ierr": "Ordered list of indices corresponding to uncertainty estimates of transition parameters",
        "nu": "Transition wavenumber",
        "gamma_self": "Self-broadened HWHM at 1 atm pressure and 296 K",
        "global_lower_quanta": "Electronic and vibrational quantum numbers and labels for the lower state of a transition",
    },
    "position": {
        "molec_id": 0,
        "local_iso_id": 2,
        "nu": 3,
        "sw": 15,
        "a": 25,
        "gamma_air": 35,
        "gamma_self": 40,
        "elower": 45,
        "n_air": 55,
        "delta_air": 59,
        "global_upper_quanta": 67,
        "global_lower_quanta": 82,
        "local_upper_quanta": 97,
        "local_lower_quanta": 112,
        "ierr": 127,
        "iref": 133,
        "line_mixing_flag": 145,
        "gp": 146,
        "gpp": 153,
    },
    "cast": {
        "molec_id": "uint8",
        "local_iso_id": "uint8",
        "nu": "float32",
        "sw": "float62",
        "a": "float62",
        "gamma_air": "float16",
        "gamma_self": "float16",
        "elower": "float32",
        "n_air": "float16",
        "delta_air": "float16",
        "global_upper_quanta": "str",
        "global_lower_quanta": "str",
        "local_upper_quanta": "str",
        "local_upper_quanta": "str",
        "ierr": "str",
        "iref": "str",
        "line_mixing_flag": "str",
        "gp": "int16",
        "gpp": "int16",
    },
}

PARAMETER_META_ = {
    "global_iso_id": {
        "id": 1,
        "name": "global_iso_id",
        "name_html": "Global isotopologue ID",
        "table_name": "",
        "description": "Unique integer ID of a particular isotopologue: every global isotopologue ID is unique to a particular species, even between different molecules. The number itself is, however arbitrary.",
        "description_html": "Unique integer ID of a particular isotopologue: every global isotopologue ID is unique to a particular species, even between different molecules. The number itself is, however arbitrary.",
        "default_fmt": "%5d",
        "default_units": "",
        "data_type": "int",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "molec_id": {
        "id": 2,
        "name": "molec_id",
        "name_html": "Molecule ID",
        "table_name": "",
        "description": "The HITRAN integer ID for this molecule in all its isotopologue forms",
        "description_html": "The HITRAN integer ID for this molecule in all its isotopologue forms",
        "default_fmt": "%2d",
        "default_units": None,
        "data_type": "int",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "local_iso_id": {
        "id": 3,
        "name": "local_iso_id",
        "name_html": "Isotopologue ID",
        "table_name": "",
        "description": "Integer ID of a particular Isotopologue, unique only to a given molecule, in order or abundance (1 = most abundant)",
        "description_html": "Integer ID of a particular Isotopologue, unique only to a given molecule, in order or abundance (1 = most abundant)",
        "default_fmt": "%1d",
        "default_units": "",
        "data_type": "int",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "nu": {
        "id": 4,
        "name": "nu",
        "name_html": "<em>&nu;</em>",
        "table_name": "prm_nu",
        "description": "Transition wavenumber",
        "description_html": "Transition wavenumber",
        "default_fmt": "%12.6f",
        "default_units": "cm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "sw": {
        "id": 5,
        "name": "sw",
        "name_html": "<em>S</em>",
        "table_name": "prm_sw",
        "description": "Line intensity, multiplied by isotopologue abundance, at T = 296 K",
        "description_html": "Line intensity, multiplied by isotopologue abundance, at T&nbsp;=&nbsp;296&nbsp;K",
        "default_fmt": "%10.3e",
        "default_units": "cm-1/(molec.cm-2)",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "a": {
        "id": 6,
        "name": "a",
        "name_html": "<em>A</em>",
        "table_name": "prm_a",
        "description": "Einstein A-coefficient in s-1",
        "description_html": "Einstein <em>A</em>-coefficient",
        "default_fmt": "%10.3e",
        "default_units": "s-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "gamma_air": {
        "id": 7,
        "name": "gamma_air",
        "name_html": "<em>&gamma;</em><sub>air</sub>",
        "table_name": "prm_gamma_air",
        "description": "Air-broadened Lorentzian half-width at half-maximum at p = 1 atm and T = 296 K",
        "description_html": "Air-broadened Lorentzian half-width at half-maximum at p&nbsp;=&nbsp;1&nbsp;atm and T&nbsp;=&nbsp;296&nbsp;K",
        "default_fmt": "%6.4f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "gamma_self": {
        "id": 8,
        "name": "gamma_self",
        "name_html": "<em>&gamma;</em><sub>self</sub>",
        "table_name": "prm_gamma_self",
        "description": "Self-broadened HWHM at 1 atm pressure and 296 K",
        "description_html": "Self-broadened HWHM at 1&nbsp;atm pressure and 296&nbsp;K",
        "default_fmt": "%5.3f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "n_air": {
        "id": 9,
        "name": "n_air",
        "name_html": "<em>n</em><sub>air</sub>",
        "table_name": "prm_n_air",
        "description": "Temperature exponent for the air-broadened HWHM",
        "description_html": "Temperature exponent for the air-broadened HWHM",
        "default_fmt": "%7.4f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "delta_air": {
        "id": 10,
        "name": "delta_air",
        "name_html": "<em>&delta;</em><sub>air</sub>",
        "table_name": "prm_delta_air",
        "description": "Pressure shift induced by air, referred to p=1 atm",
        "description_html": "Pressure shift induced by air, referred to <em>p</em>=1&nbsp;atm",
        "default_fmt": "%9.6f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "elower": {
        "id": 11,
        "name": "elower",
        "name_html": '<em>E"</em>',
        "table_name": "",
        "description": "Lower-state energy",
        "description_html": "Lower-state energy",
        "default_fmt": "%10.4f",
        "default_units": "cm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "gp": {
        "id": 12,
        "name": "gp",
        "name_html": "<em>g</em>'",
        "table_name": "",
        "description": "Upper state degeneracy",
        "description_html": "Upper state degeneracy",
        "default_fmt": "%5d",
        "default_units": "",
        "data_type": "int",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "gpp": {
        "id": 13,
        "name": "gpp",
        "name_html": '<em>g</em>"',
        "table_name": "",
        "description": "Lower state degeneracy",
        "description_html": "Lower state degeneracy",
        "default_fmt": "%5d",
        "default_units": "",
        "data_type": "int",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "global_upper_quanta": {
        "id": 14,
        "name": "global_upper_quanta",
        "name_html": "Global upper quanta",
        "table_name": "",
        "description": "Electronic and vibrational quantum numbers and labels for the upper state of a transition",
        "description_html": "Electronic and vibrational quantum numbers and labels for the upper state of a transition",
        "default_fmt": "%15s",
        "default_units": None,
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "global_lower_quanta": {
        "id": 15,
        "name": "global_lower_quanta",
        "name_html": "Global lower quanta",
        "table_name": "",
        "description": "Electronic and vibrational quantum numbers and labels for the lower state of a transition",
        "description_html": "Electronic and vibrational quantum numbers and labels for the lower state of a transition",
        "default_fmt": "%15s",
        "default_units": None,
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "local_upper_quanta": {
        "id": 16,
        "name": "local_upper_quanta",
        "name_html": "Local upper quanta",
        "table_name": "",
        "description": "Rotational, hyperfine and other quantum numbers and labels for the upper state of a transition",
        "description_html": "Rotational, hyperfine and other quantum numbers and labels for the upper state of a transition",
        "default_fmt": "%15s",
        "default_units": None,
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "local_lower_quanta": {
        "id": 17,
        "name": "local_lower_quanta",
        "name_html": "Local lower quanta",
        "table_name": "",
        "description": "Rotational, hyperfine and other quantum numbers and labels for the lower state of a transition",
        "description_html": "Rotational, hyperfine and other quantum numbers and labels for the lower state of a transition",
        "default_fmt": "%15s",
        "default_units": None,
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "line_mixing_flag": {
        "id": 18,
        "name": "line_mixing_flag",
        "name_html": "Line mixing flag",
        "table_name": "",
        "description": "A flag indicating the presence of additional data and code relating to line-mixing",
        "description_html": "A flag indicating the presence of additional data and code relating to line-mixing",
        "default_fmt": "%1s",
        "default_units": "",
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "ierr": {
        "id": 19,
        "name": "ierr",
        "name_html": "Error indices",
        "table_name": "",
        "description": "Ordered list of indices corresponding to uncertainty estimates of transition parameters",
        "description_html": "Ordered list of indices corresponding to uncertainty estimates of transition parameters",
        "default_fmt": "%s",
        "default_units": "",
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "iref": {
        "id": 20,
        "name": "iref",
        "name_html": "References",
        "table_name": "",
        "description": "Ordered list of reference identifiers for transition parameters",
        "description_html": "Ordered list of reference identifiers for transition parameters",
        "default_fmt": "%s",
        "default_units": None,
        "data_type": "str",
        "selectable": 0,
        "has_reference": 0,
        "has_error": 0,
    },
    "deltap_air": {
        "id": 21,
        "name": "deltap_air",
        "name_html": "<em>&delta;'</em><sub>air</sub>",
        "table_name": "prm_deltap_air",
        "description": "Linear temperature dependence coefficient for air-induced pressure shift",
        "description_html": "Linear temperature dependence coefficient for air-induced pressure shift",
        "default_fmt": "%10.3e",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "n_self": {
        "id": 22,
        "name": "n_self",
        "name_html": "<em>n</em><sub>self</sub>",
        "table_name": "prm_n_self",
        "description": "Temperature exponent for the self-broadened HWHM",
        "description_html": "Temperature exponent for the self-broadened HWHM",
        "default_fmt": "%7.4f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "delta_self": {
        "id": 23,
        "name": "delta_self",
        "name_html": "<em>&delta;</em><sub>self</sub>",
        "table_name": "prm_delta_self",
        "description": "Self-induced pressure shift, referred to p=1 atm",
        "description_html": "Self-induced pressure shift, referred to <em>p</em>=1&nbsp;atm",
        "default_fmt": "%9.6f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "deltap_self": {
        "id": 24,
        "name": "deltap_self",
        "name_html": "<em>&delta;'</em><sub>self</sub>",
        "table_name": "prm_deltap_self",
        "description": "Linear temperature dependence coefficient for self-induced pressure shift",
        "description_html": "Linear temperature dependence coefficient for self-induced pressure shift",
        "default_fmt": "%10.3e",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "SD_air": {
        "id": 28,
        "name": "SD_air",
        "name_html": "SD</sub>air</sub>",
        "table_name": "prm_sd_air",
        "description": "Speed-dependence parameter, air-broadened lines",
        "description_html": "Speed-dependence parameter, air-broadened lines",
        "default_fmt": "%9.6f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "SD_self": {
        "id": 29,
        "name": "SD_self",
        "name_html": "SD</sub>self</sub>",
        "table_name": "prm_sd_self",
        "description": "Speed-dependence parameter, self-broadened lines",
        "description_html": "Speed-dependence parameter, self-broadened lines",
        "default_fmt": "%9.6f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "beta_g_air": {
        "id": 30,
        "name": "beta_g_air",
        "name_html": "<em>&beta;</em><sub>G, air</sub>",
        "table_name": "prm_beta_g_air",
        "description": "Dicke narrowing parameter for the air broadened Galatry line profile",
        "description_html": "Dicke narrowing parameter for the air broadened Galatry line profile",
        "default_fmt": "%9.6f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "y_self": {
        "id": 31,
        "name": "y_self",
        "name_html": "<em>Y</em><sub>self</sub>",
        "table_name": "prm_y_self",
        "description": "First-order (Rosenkranz) line coupling coefficient; self-broadened environment",
        "description_html": "First-order (Rosenkranz) line coupling coefficient; self-broadened environment",
        "default_fmt": "%10.3e",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "y_air": {
        "id": 32,
        "name": "y_air",
        "name_html": "<em>Y</em><sub>air</sub>",
        "table_name": "prm_y_air",
        "description": "First-order (Rosenkranz) line coupling coefficient; air-broadened environment",
        "description_html": "First-order (Rosenkranz) line coupling coefficient; air-broadened environment",
        "default_fmt": "%10.3e",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "statep": {
        "id": 33,
        "name": "statep",
        "name_html": "qns'",
        "table_name": "",
        "description": "Upper state quantum numbers",
        "description_html": "Upper state quantum numbers",
        "default_fmt": "%256s",
        "default_units": "",
        "data_type": "str",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "statepp": {
        "id": 34,
        "name": "statepp",
        "name_html": 'qns"',
        "table_name": "",
        "description": "Lower state quantum numbers",
        "description_html": "Lower state quantum numbers",
        "default_fmt": "%256s",
        "default_units": "",
        "data_type": "str",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "beta_g_self": {
        "id": 35,
        "name": "beta_g_self",
        "name_html": "<em>&beta;</em><sub>G, self</sub>",
        "table_name": "prm_beta_g_self",
        "description": "Dicke narrowing parameter for the self-broadened Galatry line profile",
        "description_html": "Dicke narrowing parameter for the self-broadened Galatry line profile",
        "default_fmt": "%9.6f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "trans_id": {
        "id": 36,
        "name": "trans_id",
        "name_html": "Transition ID",
        "table_name": "",
        "description": "Unique integer ID of a particular transition entry in the database. (The same physical transition may have different IDs if its parameters have been revised or updated).",
        "description_html": "Unique integer ID of a particular transition entry in the database. (The same physical transition may have different IDs if its parameters have been revised or updated).",
        "default_fmt": "%12d",
        "default_units": "",
        "data_type": "int",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "par_line": {
        "id": 37,
        "name": "par_line",
        "name_html": ".par line",
        "table_name": "",
        "description": "Native 160-character formatted HITRAN line",
        "description_html": "Native 160-character formatted HITRAN line",
        "default_fmt": "%160s",
        "default_units": "",
        "data_type": "str",
        "selectable": 1,
        "has_reference": 0,
        "has_error": 0,
    },
    "gamma_H2": {
        "id": 38,
        "name": "gamma_H2",
        "name_html": "<em>&gamma;</em><sub>H2</sub> ",
        "table_name": "prm_gamma_H2",
        "description": "Lorentzian lineshape HWHM due to pressure broadening by H2 at 1 atm pressure",
        "description_html": "Lorentzian lineshape HWHM due to pressure broadening by H<sub>2</sub> at 1&nbsp;atm pressure",
        "default_fmt": "%6.4f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "n_H2": {
        "id": 39,
        "name": "n_H2",
        "name_html": "<em>n</em><sub>H2</sub>",
        "table_name": "prm_n_H2",
        "description": "Temperature exponent for the H2-broadened HWHM",
        "description_html": "Temperature exponent for the H<sub>2</sub>-broadened HWHM",
        "default_fmt": "%7.4f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "delta_H2": {
        "id": 40,
        "name": "delta_H2",
        "name_html": "<em>&delta;</em><sub>H2</sub>",
        "table_name": "prm_delta_H2",
        "description": "Pressure shift induced by H2, referred to p=1 atm",
        "description_html": "Pressure shift induced by H<sub>2</sub>, referred to <em>p</em>=1&nbsp;atm",
        "default_fmt": "%9.6f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "deltap_H2": {
        "id": 41,
        "name": "deltap_H2",
        "name_html": "<em>&delta;'</em><sub>H2</sub>",
        "table_name": "prm_deltap_H2",
        "description": "Linear temperature dependence coefficient for H2-induced pressure shift",
        "description_html": "Linear temperature dependence coefficient for H<sub>2</sub>-induced pressure shift",
        "default_fmt": "%10.3e",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "gamma_He": {
        "id": 42,
        "name": "gamma_He",
        "name_html": "<em>&gamma;</em><sub>He</sub> ",
        "table_name": "prm_gamma_He",
        "description": "Lorentzian lineshape HWHM due to pressure broadening by He at 1 atm pressure",
        "description_html": "Lorentzian lineshape HWHM due to pressure broadening by He at 1&nbsp;atm pressure",
        "default_fmt": "%6.4f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "n_He": {
        "id": 43,
        "name": "n_He",
        "name_html": "<em>n</em><sub>He</sub>",
        "table_name": "prm_n_He",
        "description": "Temperature exponent for the He-broadened HWHM",
        "description_html": "Temperature exponent for the He-broadened HWHM",
        "default_fmt": "%7.4f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "delta_He": {
        "id": 44,
        "name": "delta_He",
        "name_html": "<em>&delta;</em><sub>He</sub>",
        "table_name": "prm_delta_He",
        "description": "Pressure shift induced by He, referred to p=1 atm",
        "description_html": "Pressure shift induced by He, referred to <em>p</em>=1&nbsp;atm",
        "default_fmt": "%9.6f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "gamma_CO2": {
        "id": 45,
        "name": "gamma_CO2",
        "name_html": "<em>&gamma;</em><sub>CO2</sub> ",
        "table_name": "prm_gamma_CO2",
        "description": "Lorentzian lineshape HWHM due to pressure broadening by CO2 at 1 atm pressure",
        "description_html": "Lorentzian lineshape HWHM due to pressure broadening by CO<sub>2</sub> at 1&nbsp;atm pressure",
        "default_fmt": "%6.4f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "n_CO2": {
        "id": 46,
        "name": "n_CO2",
        "name_html": "<em>n</em><sub>CO2</sub>",
        "table_name": "prm_n_CO2",
        "description": "Temperature exponent for the CO2-broadened HWHM",
        "description_html": "Temperature exponent for the CO<sub>2</sub>-broadened HWHM",
        "default_fmt": "%7.4f",
        "default_units": "",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "delta_CO2": {
        "id": 47,
        "name": "delta_CO2",
        "name_html": "<em>&delta;</em><sub>CO2</sub>",
        "table_name": "prm_delta_CO2",
        "description": "Pressure shift induced by CO2, referred to p=1 atm",
        "description_html": "Pressure shift induced by CO<sub>2</sub>, referred to <em>p</em>=1&nbsp;atm",
        "default_fmt": "%9.6f",
        "default_units": "cm-1.atm-1",
        "data_type": "float",
        "selectable": 1,
        "has_reference": 1,
        "has_error": 1,
    },
    "gamma_HT_0_self_50": {
        "default_fmt": "%6.4f",
    },
    "n_HT_self_50": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_self_50": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_self_50": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_self_50": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_self_50": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_self_150": {
        "default_fmt": "%6.4f",
    },
    "n_HT_self_150": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_self_150": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_self_150": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_self_150": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_self_150": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_self_296": {
        "default_fmt": "%6.4f",
    },
    "n_HT_self_296": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_self_296": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_self_296": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_self_296": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_self_296": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_self_700": {
        "default_fmt": "%6.4f",
    },
    "n_HT_self_700": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_self_700": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_self_700": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_self_700": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_self_700": {
        "default_fmt": "%9.6f",
    },
    "nu_HT_self": {
        "default_fmt": "%6.4f",
    },
    "kappa_HT_self": {
        "default_fmt": "%9.6f",
    },
    "eta_HT_self": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_air_50": {
        "default_fmt": "%6.4f",
    },
    "n_HT_air_50": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_air_50": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_air_50": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_air_50": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_air_50": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_air_150": {
        "default_fmt": "%6.4f",
    },
    "n_HT_air_150": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_air_150": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_air_150": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_air_150": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_air_150": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_air_296": {
        "default_fmt": "%6.4f",
    },
    "n_HT_air_296": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_air_296": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_air_296": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_air_296": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_air_296": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_0_air_700": {
        "default_fmt": "%6.4f",
    },
    "n_HT_air_700": {
        "default_fmt": "%9.6f",
    },
    "gamma_HT_2_air_700": {
        "default_fmt": "%6.4f",
    },
    "delta_HT_0_air_700": {
        "default_fmt": "%9.6f",
    },
    "deltap_HT_air_700": {
        "default_fmt": "%9.6f",
    },
    "delta_HT_2_air_700": {
        "default_fmt": "%9.6f",
    },
    "nu_HT_air": {
        "default_fmt": "%6.4f",
    },
    "kappa_HT_air": {
        "default_fmt": "%9.6f",
    },
    "eta_HT_air": {
        "default_fmt": "%9.6f",
    },
    "gamma_H2O": {
        "default_fmt": "%6.4f",
    },
    "n_H2O": {
        "default_fmt": "%9.6f",
    },
    "Y_SDV_air_296": {
        "default_fmt": "%10.3e",
    },
    "Y_SDV_self_296": {
        "default_fmt": "%10.3e",
    },
    "Y_HT_air_296": {
        "default_fmt": "%10.3e",
    },
    "Y_HT_self_296": {
        "default_fmt": "%10.3e",
    },
}

# lower the case of all parameter names (fix for case-sensitive databases)
PARAMETER_META = {}
for param in PARAMETER_META_:
    PARAMETER_META[param.lower()] = PARAMETER_META_[param]


def getFullTableAndHeaderName(TableName, ext=None):
    # print('TableName=',TableName)
    if ext is None:
        ext = "data"
    flag_abspath = (
        False  # check if the supplied table name already contains absolute path
    )
    if os.path.isabs(TableName):
        flag_abspath = True
    fullpath_data = TableName + "." + ext
    if not flag_abspath:
        fullpath_data = os.path.join(VARIABLES["BACKEND_DATABASE_NAME"], fullpath_data)
    if not os.path.isfile(fullpath_data):
        fullpath_data = VARIABLES["BACKEND_DATABASE_NAME"] + "/" + TableName + ".par"
        if not os.path.isfile(fullpath_data) and TableName != "sampletab":
            raise Exception('Lonely header "%s"' % fullpath_data)
    fullpath_header = TableName + ".header"
    if not flag_abspath:
        fullpath_header = os.path.join(
            VARIABLES["BACKEND_DATABASE_NAME"], fullpath_header
        )
    return fullpath_data, fullpath_header


def getParameterFormat(ParameterName, TableName):
    return LOCAL_TABLE_CACHE[TableName]["header"]["format"]


def getTableHeader(TableName):
    return LOCAL_TABLE_CACHE[TableName]["header"]


def getRowObject(RowID, TableName):
    # return RowObject from TableObject in CACHE
    RowObject = []
    for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
        par_value = LOCAL_TABLE_CACHE[TableName]["data"][par_name][RowID]
        par_format = LOCAL_TABLE_CACHE[TableName]["header"]["format"][par_name]
        RowObject.append((par_name, par_value, par_format))
    return RowObject


# INCREASE ROW COUNT
def addRowObject(RowObject, TableName):
    # print 'addRowObject: '
    # print 'RowObject: '+str(RowObject)
    # print 'TableName:'+TableName
    for par_name, par_value, par_format in RowObject:
        # print 'par_name,par_value,par_format: '+str((par_name,par_value,par_format))
        # print '>>> '+ str(LOCAL_TABLE_CACHE[TableName]['data'][par_name])
        # LOCAL_TABLE_CACHE[TableName]['data'][par_name] += [par_value]
        LOCAL_TABLE_CACHE[TableName]["data"][par_name].append(par_value)


def setRowObject(RowID, RowObject, TableName):
    number_of_rows = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    if RowID >= 0 and RowID < number_of_rows:
        for par_name, par_value, par_format in RowObject:
            LOCAL_TABLE_CACHE[TableName]["data"][par_name][RowID] = par_value
    else:
        # !!! XXX ATTENTION: THIS IS A TEMPORARY INSERTION XXX !!!
        LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"] += 1
        addRowObject(RowObject, TableName)


def getDefaultRowObject(TableName):
    # get a default RowObject from a table
    RowObject = []
    for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
        par_value = LOCAL_TABLE_CACHE[TableName]["header"]["default"][par_name]
        par_format = LOCAL_TABLE_CACHE[TableName]["header"]["format"][par_name]
        RowObject.append((par_name, par_value, par_format))
    return RowObject


def subsetOfRowObject(ParameterNames, RowObject):
    # return a subset of RowObject according to
    # RowObjectNew = []
    # for par_name,par_value,par_format in RowObject:
    #     if par_name in ParameterNames:
    #        RowObjectNew.append((par_name,par_value,par_format))
    # return RowObjectNew
    dct = {}
    for par_name, par_value, par_format in RowObject:
        dct[par_name] = (par_name, par_value, par_format)
    RowObjectNew = []
    for par_name in ParameterNames:
        RowObjectNew.append(dct[par_name])
    return RowObjectNew


# FORMAT_PYTHON_REGEX = '^\%([0-9]*)\.?([0-9]*)([dfs])$'
FORMAT_PYTHON_REGEX = "^\%(\d*)(\.(\d*))?([edfsEDFS])$"

# Fortran string formatting
#  based on a pythonic format string
def formatString(par_format, par_value, lang="FORTRAN"):
    # Fortran format rules:
    #  %M.NP
    #        M - total field length (optional)
    #             (minus sign included in M)
    #        . - decimal ceparator (optional)
    #        N - number of digits after . (optional)
    #        P - [dfs] int/float/string
    # PYTHON RULE: if N is abcent, default value is 6
    regex = FORMAT_PYTHON_REGEX
    (lng, trail, lngpnt, ty) = re.search(regex, par_format).groups()
    result = par_format % par_value
    if ty.lower() in set(["f", "e"]):
        lng = int(lng) if lng else 0
        lngpnt = int(lngpnt) if lngpnt else 0
        result = par_format % par_value
        res = result.strip()
        if lng == lngpnt + 1:
            if res[0:1] == "0":
                result = "%%%ds" % lng % res[1:]
        if par_value < 0:
            if res[1:2] == "0":
                result = "%%%ds" % lng % (res[0:1] + res[2:])
    return result


def putRowObjectToString(RowObject):
    # serialize RowObject to string
    # TODO: support different languages (C,Fortran)
    output_string = ""
    for par_name, par_value, par_format in RowObject:
        # Python formatting
        # output_string += par_format % par_value
        # Fortran formatting
        # print 'par_name,par_value,par_format: '+str((par_name,par_value,par_format))
        output_string += formatString(par_format, par_value)
    return output_string


# Parameter nicknames are hard-coded.
PARAMETER_NICKNAMES = {
    "a": "A",
    "gamma_air": "gair",
    "gp": "g",
    "local_iso_id": "I",
    "molec_id": "M",
    "sw": "S",
    "local_lower_quanta": "Q_",
    "local_upper_quanta": "Q",
    "gpp": "g_",
    "elower": "E_",
    "n_air": "nair",
    "delta_air": "dair",
    "global_upper_quanta": "V",
    "iref": "Iref",
    "line_mixing_flag": "f",
    "ierr": "ierr",
    "nu": "nu",
    "gamma_self": "gsel",
    "global_lower_quanta": "V_",
}


def putTableHeaderToString(TableName):
    output_string = ""
    regex = FORMAT_PYTHON_REGEX
    for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
        par_format = LOCAL_TABLE_CACHE[TableName]["header"]["format"][par_name]
        (lng, trail, lngpnt, ty) = re.search(regex, par_format).groups()
        fmt = "%%%ss" % lng
        try:
            par_name_short = PARAMETER_NICKNAMES[par_name]
        except:
            par_name_short = par_name
        # output_string += fmt % par_name
        output_string += (fmt % par_name_short)[: int(lng)]
    return output_string


def getRowObjectFromString(input_string, TableName):
    # restore RowObject from string, get formats and names in TableName
    # print 'getRowObjectFromString:'
    pos = 0
    RowObject = []
    for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
        par_format = LOCAL_TABLE_CACHE[TableName]["header"]["format"][par_name]
        regex = "^\%([0-9]+)\.?[0-9]*([dfs])$"  #
        regex = FORMAT_PYTHON_REGEX
        (lng, trail, lngpnt, ty) = re.search(regex, par_format).groups()
        lng = int(lng)
        par_value = input_string[pos : (pos + lng)]
        if ty == "d":  # integer value
            par_value = int(par_value)
        elif ty.lower() in set(["e", "f"]):  # float value
            par_value = float(par_value)
        elif ty == "s":  # string value
            pass  # don't strip string value
        else:
            print("err1")
            raise Exception('Format "%s" is unknown' % par_format)
        RowObject.append((par_name, par_value, par_format))
        pos += lng
    # Do the same but now for extra (comma-separated) parameters
    if "extra" in set(LOCAL_TABLE_CACHE[TableName]["header"]):
        csv_chunks = input_string.split(
            LOCAL_TABLE_CACHE[TableName]["header"].get("extra_separator", ",")
        )
        # Disregard the first "column-fixed" container if it presents:
        if LOCAL_TABLE_CACHE[TableName]["header"].get("order", []):
            pos = 1
        else:
            pos = 0
        for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["extra"]:
            par_format = LOCAL_TABLE_CACHE[TableName]["header"]["extra_format"][
                par_name
            ]
            regex = "^\%([0-9]+)\.?[0-9]*([dfs])$"  #
            regex = FORMAT_PYTHON_REGEX
            (lng, trail, lngpnt, ty) = re.search(regex, par_format).groups()
            lng = int(lng)
            par_value = csv_chunks[pos]
            if ty == "d":  # integer value
                try:
                    par_value = int(par_value)
                except:
                    par_value = 0
            elif ty.lower() in set(["e", "f"]):  # float value
                try:
                    par_value = float(par_value)
                except:
                    par_value = 0.0
            elif ty == "s":  # string value
                pass  # don't strip string value
            else:
                print("err")
                raise Exception('Format "%s" is unknown' % par_format)
            RowObject.append((par_name, par_value, par_format))
            pos += 1
    return RowObject


# Conversion between OBJECT_FORMAT and STORAGE_FORMAT
# This will substitute putTableToStorage and getTableFromStorage
def cache2storage(TableName):
    try:
        os.mkdir(VARIABLES["BACKEND_DATABASE_NAME"])
    except:
        pass
    # fullpath_data,fullpath_header = getFullTableAndHeaderName(TableName) # "lonely header" bug
    fullpath_data = (
        VARIABLES["BACKEND_DATABASE_NAME"] + "/" + TableName + ".data"
    )  # bugfix
    fullpath_header = (
        VARIABLES["BACKEND_DATABASE_NAME"] + "/" + TableName + ".header"
    )  # bugfix
    OutfileData = open(fullpath_data, "w")
    OutfileHeader = open(fullpath_header, "w")
    # write table data
    line_count = 1
    line_number = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    for RowID in range(0, line_number):
        line_count += 1
        RowObject = getRowObject(RowID, TableName)
        raw_string = putRowObjectToString(RowObject)
        OutfileData.write(raw_string + "\n")
    # write table header
    TableHeader = getTableHeader(TableName)
    OutfileHeader.write(json.dumps(TableHeader, indent=2))


def storage2cache(TableName, cast=True, ext=None, nlines=None, pos=None):
    """edited by NHL
    TableName: name of the HAPI table to read in
    ext: file extension
    nlines: number of line in the block; if None, read all line at once
    pos: file position to seek
    """
    # print 'storage2cache:'
    # print('TableName',TableName)
    if nlines is not None:
        print(
            "WARNING: storage2cache is reading the block of maximum %d lines" % nlines
        )
    fullpath_data, fullpath_header = getFullTableAndHeaderName(TableName, ext)
    if (
        TableName in LOCAL_TABLE_CACHE
        and "filehandler" in LOCAL_TABLE_CACHE[TableName]
        and LOCAL_TABLE_CACHE[TableName]["filehandler"] is not None
    ):
        InfileData = LOCAL_TABLE_CACHE[TableName]["filehandler"]
    else:
        InfileData = open_(fullpath_data, "r")
    InfileHeader = open(fullpath_header, "r")
    # try:
    header_text = InfileHeader.read()
    try:
        Header = json.loads(header_text)
    except:
        print("HEADER:")
        print(header_text)
        raise Exception("Invalid header")
    # print 'Header:'+str(Header)
    LOCAL_TABLE_CACHE[TableName] = {}
    LOCAL_TABLE_CACHE[TableName]["header"] = Header
    LOCAL_TABLE_CACHE[TableName]["data"] = {}
    LOCAL_TABLE_CACHE[TableName]["filehandler"] = InfileData
    # Check if Header['order'] and Header['extra'] contain
    #  parameters with same names, raise exception if true.
    # intersct = set(Header['order']).intersection(set(Header.get('extra',[])))
    intersct = set(Header.get("order", [])).intersection(set(Header.get("extra", [])))
    if intersct:
        raise Exception("Parameters with the same names: {}".format(intersct))
    # initialize empty data to avoid problems
    glob_order = []
    glob_format = {}
    glob_default = {}
    if "order" in LOCAL_TABLE_CACHE[TableName]["header"].keys():
        glob_order += LOCAL_TABLE_CACHE[TableName]["header"]["order"]
        glob_format.update(LOCAL_TABLE_CACHE[TableName]["header"]["format"])
        glob_default.update(LOCAL_TABLE_CACHE[TableName]["header"]["default"])
        for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
            LOCAL_TABLE_CACHE[TableName]["data"][par_name] = []
    if "extra" in LOCAL_TABLE_CACHE[TableName]["header"].keys():
        glob_order += LOCAL_TABLE_CACHE[TableName]["header"]["extra"]
        glob_format.update(LOCAL_TABLE_CACHE[TableName]["header"]["extra_format"])
        for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["extra"]:
            glob_default[par_name] = PARAMETER_META[par_name]["default_fmt"]
            LOCAL_TABLE_CACHE[TableName]["data"][par_name] = []

    header = LOCAL_TABLE_CACHE[TableName]["header"]
    if "extra" in header and header["extra"]:
        line_count = 0
        flag_EOF = False
        # line_number = LOCAL_TABLE_CACHE[TableName]['header']['number_of_rows']
        # for line in InfileData:
        while True:
            # print '%d line from %d' % (line_count,line_number)
            # print 'line: '+line #
            if nlines is not None and line_count >= nlines:
                break
            line = InfileData.readline()
            if line == "":  # end of file is represented by an empty string
                flag_EOF = True
                break
            try:
                RowObject = getRowObjectFromString(line, TableName)
                line_count += 1
            except:
                continue
            # print 'RowObject: '+str(RowObject)
            addRowObject(RowObject, TableName)
        # except:
        #    raise Exception('TABLE FETCHING ERROR')
        LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"] = line_count
    else:
        quantities = header["order"]
        formats = [header["format"][qnt] for qnt in quantities]
        types = {"d": int, "f": float, "E": float, "s": str}
        converters = []
        end = 0
        for qnt, fmt in zip(quantities, formats):
            # pre-defined positions are needed to skip the existing parameters in headers (new feature)
            if "position" in header:
                start = header["position"][qnt]
            else:
                start = end
            dtype = types[fmt[-1]]
            aux = fmt[fmt.index("%") + 1 : -1]
            if "." in aux:
                aux = aux[: aux.index(".")]
            size = int(aux)
            end = start + size

            def cfunc(line, dtype=dtype, start=start, end=end, qnt=qnt):
                # return dtype(line[start:end]) # this will fail on the float number with D exponent (Fortran notation)
                if dtype == float:
                    try:
                        return dtype(line[start:end])
                    except ValueError:  # possible D exponent instead of E
                        try:
                            return dtype(line[start:end].replace("D", "E"))
                        except ValueError:  # this is a special case and it should not be in the main version tree!
                            # Dealing with the weird and unparsable intensity format such as "2.700-164, i.e with no E or D characters.
                            res = re.search("(\d\.\d\d\d)\-(\d\d\d)", line[start:end])
                            if res:
                                return dtype(res.group(1) + "E-" + res.group(2))
                            else:
                                raise Exception(
                                    "PARSE ERROR: unknown format of the par value (%s)"
                                    % line[start:end]
                                )
                elif dtype == int and qnt == "local_iso_id":
                    if line[start:end] == "0":
                        return 10
                    try:
                        return dtype(line[start:end])
                    except ValueError:
                        # convert letters to numbers: A->11, B->12, etc... ; .par file must be in ASCII or Unicode.
                        return 11 + ord(line[start:end]) - ord("A")
                else:
                    return dtype(line[start:end])

            # cfunc.__doc__ = 'converter {} {}'.format(qnt, fmt) # doesn't work in earlier versions of Python
            converters.append(cfunc)
            # start = end
        # data_matrix = [[cvt(line) for cvt in converters] for line in InfileData]
        flag_EOF = False
        line_count = 0
        data_matrix = []
        while True:
            if nlines is not None and line_count >= nlines:
                break
            line = InfileData.readline()
            if line == "":  # end of file is represented by an empty string
                flag_EOF = True
                break
            data_matrix.append([cvt(line) for cvt in converters])
            line_count += 1
        data_columns = zip(*data_matrix)
        for qnt, col in zip(quantities, data_columns):
            # LOCAL_TABLE_CACHE[TableName]['data'][qnt].extend(col) # old code
            if type(col[0]) in {int, float}:
                LOCAL_TABLE_CACHE[TableName]["data"][qnt] = np.array(col)  # new code
            else:
                LOCAL_TABLE_CACHE[TableName]["data"][qnt].extend(col)  # old code
            # LOCAL_TABLE_CACHE[TableName]['data'][qnt] = list(col)
            # LOCAL_TABLE_CACHE[TableName]['data'][qnt] = col
        header["number_of_rows"] = line_count = len(
            LOCAL_TABLE_CACHE[TableName]["data"][quantities[0]]
        )

    # Delete all character-separated values, treat them as column-fixed.
    try:
        del LOCAL_TABLE_CACHE[TableName]["header"]["extra"]
        del LOCAL_TABLE_CACHE[TableName]["header"]["extra_format"]
        del LOCAL_TABLE_CACHE[TableName]["header"]["extra_separator"]
    except:
        pass
    # Update header.order/format with header.extra/format if exist.
    LOCAL_TABLE_CACHE[TableName]["header"]["order"] = glob_order
    LOCAL_TABLE_CACHE[TableName]["header"]["format"] = glob_format
    LOCAL_TABLE_CACHE[TableName]["header"]["default"] = glob_default
    if flag_EOF:
        InfileData.close()
        LOCAL_TABLE_CACHE[TableName]["filehandler"] = None
    InfileHeader.close()
    print("                     Lines parsed: %d" % line_count)
    return flag_EOF


## old version based on regular expressions
# def storage2cache(TableName):
#    fullpath_data,fullpath_header = getFullTableAndHeaderName(TableName)
#    InfileData = open(fullpath_data,'r')
#    InfileHeader = open(fullpath_header,'r')
#    #try:
#    header_text = InfileHeader.read()
#    try:
#        Header = json.loads(header_text)
#    except:
#        print('HEADER:')
#        print(header_text)
#        raise Exception('Invalid header')
#    LOCAL_TABLE_CACHE[TableName] = {}
#    LOCAL_TABLE_CACHE[TableName]['header'] = Header
#    LOCAL_TABLE_CACHE[TableName]['data'] = {}
#    # Check if Header['order'] and Header['extra'] contain
#    #  parameters with same names, raise exception if true.
#    intersct = set(Header.get('order',[])).intersection(set(Header.get('extra',[])))
#    if intersct:
#        raise Exception('Parameters with the same names: {}'.format(intersct))
#    # initialize empty data to avoid problems
#    glob_order = []; glob_format = {}; glob_default = {}
#    if "order" in LOCAL_TABLE_CACHE[TableName]['header'].keys():
#        glob_order += LOCAL_TABLE_CACHE[TableName]['header']['order']
#        glob_format.update(LOCAL_TABLE_CACHE[TableName]['header']['format'])
#        glob_default.update(LOCAL_TABLE_CACHE[TableName]['header']['default'])
#        for par_name in LOCAL_TABLE_CACHE[TableName]['header']['order']:
#            LOCAL_TABLE_CACHE[TableName]['data'][par_name] = []
#    if "extra" in LOCAL_TABLE_CACHE[TableName]['header'].keys():
#        glob_order += LOCAL_TABLE_CACHE[TableName]['header']['extra']
#        glob_format.update(LOCAL_TABLE_CACHE[TableName]['header']['extra_format'])
#        for par_name in LOCAL_TABLE_CACHE[TableName]['header']['extra']:
#            glob_default[par_name] = PARAMETER_META[par_name]['default_fmt']
#            LOCAL_TABLE_CACHE[TableName]['data'][par_name] = []
#    line_count = 0
#    for line in InfileData:
#        try:
#            RowObject = getRowObjectFromString(line,TableName)
#            line_count += 1
#        except:
#            continue
#        addRowObject(RowObject,TableName)
#    LOCAL_TABLE_CACHE[TableName]['header']['number_of_rows'] = line_count
#    # Delete all character-separated values, treat them as column-fixed.
#    try:
#        del LOCAL_TABLE_CACHE[TableName]['header']['extra']
#        del LOCAL_TABLE_CACHE[TableName]['header']['extra_format']
#        del LOCAL_TABLE_CACHE[TableName]['header']['extra_separator']
#    except:
#        pass
#    # Update header.order/format with header.extra/format if exist.
#    LOCAL_TABLE_CACHE[TableName]['header']['order'] = glob_order
#    LOCAL_TABLE_CACHE[TableName]['header']['format'] = glob_format
#    LOCAL_TABLE_CACHE[TableName]['header']['default'] = glob_default
#    InfileData.close()
#    InfileHeader.close()
#    print('                     Lines parsed: %d' % line_count)
#    pass

# / FORMAT CONVERSION LAYER


def getTableNamesFromStorage(StorageName):
    file_names = listdir(StorageName)
    table_names = []
    for file_name in file_names:
        matchObject = re.search("(.+)\.header$", file_name)
        if matchObject:
            table_names.append(matchObject.group(1))
    return table_names


# FIX POSSIBLE BUG: SIMILAR NAMES OF .PAR AND .DATA FILES
# BUG FIXED BY INTRODUCING A PRIORITY:
#   *.data files have more priority than *.par files
#   See getFullTableAndHeaderName function for explanation
def scanForNewParfiles(StorageName):
    file_names = listdir(StorageName)
    headers = {}  # without extensions!
    parfiles_without_header = []
    for file_name in file_names:
        # create dictionary of unique headers
        try:
            fname, fext = re.search("(.+)\.(\w+)", file_name).groups()
        except:
            continue
        if fext == "header":
            headers[fname] = True
    for file_name in file_names:
        # check if extension is 'par' and the header is absent
        try:
            fname, fext = re.search("(.+)\.(\w+)", file_name).groups()
        except:
            continue
        if fext == "par" and fname not in headers:
            parfiles_without_header.append(fname)
    return parfiles_without_header


def createHeader(TableName):
    fname = TableName + ".header"
    fp = open(VARIABLES["BACKEND_DATABASE_NAME"] + "/" + fname, "w")
    if os.path.isfile(TableName):
        raise Exception('File "%s" already exists!' % fname)
    fp.write(json.dumps(HITRAN_DEFAULT_HEADER, indent=2))
    fp.close()


def loadCache():
    print("Using " + VARIABLES["BACKEND_DATABASE_NAME"] + "\n")
    LOCAL_TABLE_CACHE = {}
    table_names = getTableNamesFromStorage(VARIABLES["BACKEND_DATABASE_NAME"])
    parfiles_without_header = scanForNewParfiles(VARIABLES["BACKEND_DATABASE_NAME"])
    # create headers for new parfiles
    for tab_name in parfiles_without_header:
        # get name without 'par' extension
        createHeader(tab_name)
        table_names.append(tab_name)
    for TableName in table_names:
        print(TableName)
        storage2cache(TableName)


def saveCache():
    try:
        # delete query buffer
        del LOCAL_TABLE_CACHE[QUERY_BUFFER]
    except:
        pass
    for TableName in LOCAL_TABLE_CACHE:
        print(TableName)
        cache2storage(TableName)


# DB backend level, start transaction
def databaseBegin(db=None):
    if db:
        VARIABLES["BACKEND_DATABASE_NAME"] = db
    else:
        VARIABLES["BACKEND_DATABASE_NAME"] = BACKEND_DATABASE_NAME_DEFAULT
    if not os.path.exists(VARIABLES["BACKEND_DATABASE_NAME"]):
        os.mkdir(VARIABLES["BACKEND_DATABASE_NAME"])
    loadCache()


# DB backend level, end transaction
def databaseCommit():
    saveCache()


# ----------------------------------------------------
# ----------------------------------------------------
# CONDITIONS
# ----------------------------------------------------
# ----------------------------------------------------
# ----------------------------------------------------
# hierarchic query.condition language:
# Conditions: CONS = ('and', ('=','p1','p2'), ('<','p1',13))
# String literals are distinguished from variable names
#  by using the operation ('STRING','some_string')
# ----------------------------------------------------

# necessary conditions for hitranonline:
SAMPLE_CONDITIONS = (
    "AND",
    ("SET", "internal_iso_id", [1, 2, 3, 4, 5, 6]),
    (">=", "nu", 0),
    ("<=", "nu", 100),
)

# sample hitranonline protocol
# http://hitran.cloudapp.net/lbl/5?output_format_id=1&iso_ids_list=5&numin=0&numax=100&access=api&key=e20e4bd3-e12c-4931-99e0-4c06e88536bd

CONDITION_OPERATIONS = set(
    [
        "AND",
        "OR",
        "NOT",
        "RANGE",
        "IN",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "!=",
        "LIKE",
        "STR",
        "+",
        "-",
        "*",
        "/",
        "MATCH",
        "SEARCH",
        "FINDALL",
    ]
)

# Operations used in Condition verification
# Basic scheme: operationXXX(args),
# where args - list/array of arguments (>=1)


def operationAND(args):
    # any number if arguments
    for arg in args:
        if not arg:
            return False
    return True


def operationOR(args):
    # any number of arguments
    for arg in args:
        if arg:
            return True
    return False


def operationNOT(arg):
    # one argument
    return not arg


def operationRANGE(x, x_min, x_max):
    return x_min <= x <= x_max


def operationSUBSET(arg1, arg2):
    # True if arg1 is subset of arg2
    # arg1 is an element
    # arg2 is a set
    return arg1 in arg2


def operationLESS(args):
    # any number of args
    for i in range(1, len(args)):
        if args[i - 1] >= args[i]:
            return False
    return True


def operationMORE(args):
    # any number of args
    for i in range(1, len(args)):
        if args[i - 1] <= args[i]:
            return False
    return True


def operationLESSOREQUAL(args):
    # any number of args
    for i in range(1, len(args)):
        if args[i - 1] > args[i]:
            return False
    return True


def operationMOREOREQUAL(args):
    # any number of args
    for i in range(1, len(args)):
        if args[i - 1] < args[i]:
            return False
    return True


def operationEQUAL(args):
    # any number of args
    for i in range(1, len(args)):
        if args[i] != args[i - 1]:
            return False
    return True


def operationNOTEQUAL(arg1, arg2):
    return arg1 != arg2


def operationSUM(args):
    # any numbers of arguments
    if type(args[0]) in set([int, float]):
        result = 0
    elif type(args[0]) in set([str, unicode]):
        result = ""
    else:
        raise Exception("SUM error: unknown arg type")
    for arg in args:
        result += arg
    return result


def operationDIFF(arg1, arg2):
    return arg1 - arg2


def operationMUL(args):
    # any numbers of arguments
    if type(args[0]) in set([int, float]):
        result = 1
    else:
        raise Exception("MUL error: unknown arg type")
    for arg in args:
        result *= arg
    return result


def operationDIV(arg1, arg2):
    return arg1 / arg2


def operationSTR(arg):
    # transform arg to str
    if type(arg) != str:
        raise Exception("Type mismatch: STR")
    return arg


def operationSET(arg):
    # transform arg to list
    if type(arg) not in set([list, tuple, set]):
        raise Exception("Type mismatch: SET")
    return list(arg)


def operationMATCH(arg1, arg2):
    # Match regex (arg1) and string (arg2)
    # return bool(re.match(arg1,arg2)) # works wrong
    return bool(re.search(arg1, arg2))


def operationSEARCH(arg1, arg2):
    # Search regex (arg1) in string (arg2)
    # Output list of entries
    group = re.search(arg1, arg2).groups()
    result = []
    for item in group:
        result.append(("STR", item))
    return result


def operationFINDALL(arg1, arg2):
    # Search all groups of a regex
    # Output a list of groups of entries
    # XXX: If a group has more than 1 entry,
    #    there could be potential problems
    list_of_groups = re.findall(arg1, arg2)
    result = []
    for item in list_of_groups:
        result.append(("STR", item))
    return result


def operationLIST(args):
    # args is a list: do nothing (almost)
    return list(args)


# /operations

# GROUPING ----------------------------------------------

GROUP_INDEX = {}
# GROUP_INDEX has the following structure:
#  GROUP_INDEX[KEY] = VALUE
#    KEY = table line values
#    VALUE = {'FUNCTIONS':DICT,'FLAG':LOGICAL,'ROWID':INTEGER}
#      FUNCTIONS = {'FUNC_NAME':DICT}
#            FUNC_NAME = {'FLAG':LOGICAL,'NAME':STRING}

# name and default value
GROUP_FUNCTION_NAMES = {
    "COUNT": 0,
    "SUM": 0,
    "MUL": 1,
    "AVG": 0,
    "MIN": +1e100,
    "MAX": -1e100,
    "SSQ": 0,
}


def clearGroupIndex():
    # GROUP_INDEX = {}
    for key in GROUP_INDEX.keys():
        del GROUP_INDEX[key]


def getValueFromGroupIndex(GroupIndexKey, FunctionName):
    # If no such index_key, create it and return a value
    if FunctionName not in GROUP_FUNCTION_NAMES:
        raise Exception('No such function "%s"' % FunctionName)
    # In the case if NewRowObjectDefault is requested
    if not GroupIndexKey:
        return GROUP_FUNCTION_NAMES[FunctionName]
    if FunctionName not in GROUP_INDEX[GroupIndexKey]["FUNCTIONS"]:
        GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName] = {}
        GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName]["FLAG"] = True
        GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName][
            "VALUE"
        ] = GROUP_FUNCTION_NAMES[FunctionName]
    return GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName]["VALUE"]


def setValueToGroupIndex(GroupIndexKey, FunctionName, Value):
    GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName]["VALUE"] = Value


GROUP_DESC = {}


def initializeGroup(GroupIndexKey):
    if GroupIndexKey not in GROUP_INDEX:
        print("GROUP_DESC[COUNT]=" + str(GROUP_DESC["COUNT"]))
        GROUP_INDEX[GroupIndexKey] = {}
        GROUP_INDEX[GroupIndexKey]["FUNCTIONS"] = {}
        GROUP_INDEX[GroupIndexKey]["ROWID"] = len(GROUP_INDEX) - 1
    for FunctionName in GROUP_FUNCTION_NAMES:
        # initialize function flags (UpdateFlag)
        if FunctionName in GROUP_INDEX[GroupIndexKey]["FUNCTIONS"]:
            GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName]["FLAG"] = True
    print("initializeGroup: GROUP_INDEX=" + str(GROUP_INDEX))


def groupCOUNT(GroupIndexKey):
    FunctionName = "COUNT"
    Value = getValueFromGroupIndex(GroupIndexKey, FunctionName)
    if GroupIndexKey:
        if GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName]["FLAG"]:
            GROUP_INDEX[GroupIndexKey]["FUNCTIONS"][FunctionName]["FLAG"] = False
            Value = Value + 1
            setValueToGroupIndex(GroupIndexKey, FunctionName, Value)
    return Value


def groupSUM():
    pass


def groupMUL():
    pass


def groupAVG():
    pass


def groupMIN():
    pass


def groupMAX():
    pass


def groupSSQ():
    pass


OPERATORS = {  # List
    "LIST": lambda args: operationLIST(args),
    # And
    "&": lambda args: operationAND(args),
    "&&": lambda args: operationAND(args),
    "AND": lambda args: operationAND(args),
    # Or
    "|": lambda args: operationOR(args),
    "||": lambda args: operationOR(args),
    "OR": lambda args: operationOR(args),
    # Not
    "!": lambda args: operationNOT(args[0]),
    "NOT": lambda args: operationNOT(args[0]),
    # Between
    "RANGE": lambda args: operationRANGE(args[0], args[1], args[2]),
    "BETWEEN": lambda args: operationRANGE(args[0], args[1], args[2]),
    # Subset
    "IN": lambda args: operationSUBSET(args[0], args[1]),
    "SUBSET": lambda args: operationSUBSET(args[0], args[1]),
    # Less
    "<": lambda args: operationLESS(args),
    "LESS": lambda args: operationLESS(args),
    "LT": lambda args: operationLESS(args),
    # More
    ">": lambda args: operationMORE(args),
    "MORE": lambda args: operationMORE(args),
    "MT": lambda args: operationMORE(args),
    # Less or equal
    "<=": lambda args: operationLESSOREQUAL(args),
    "LESSOREQUAL": lambda args: operationLESSOREQUAL(args),
    "LTE": lambda args: operationLESSOREQUAL(args),
    # More or equal
    ">=": lambda args: operationMOREOREQUAL(args),
    "MOREOREQUAL": lambda args: operationMOREOREQUAL(args),
    "MTE": lambda args: operationMOREOREQUAL(args),
    # Equal
    "=": lambda args: operationEQUAL(args),
    "==": lambda args: operationEQUAL(args),
    "EQ": lambda args: operationEQUAL(args),
    "EQUAL": lambda args: operationEQUAL(args),
    "EQUALS": lambda args: operationEQUAL(args),
    # Not equal
    "!=": lambda args: operationNOTEQUAL(args[0], args[1]),
    "<>": lambda args: operationNOTEQUAL(args[0], args[1]),
    "~=": lambda args: operationNOTEQUAL(args[0], args[1]),
    "NE": lambda args: operationNOTEQUAL(args[0], args[1]),
    "NOTEQUAL": lambda args: operationNOTEQUAL(args[0], args[1]),
    # Plus
    "+": lambda args: operationSUM(args),
    "SUM": lambda args: operationSUM(args),
    # Minus
    "-": lambda args: operationDIFF(args[0], args[1]),
    "DIFF": lambda args: operationDIFF(args[0], args[1]),
    # Mul
    "*": lambda args: operationMUL(args),
    "MUL": lambda args: operationMUL(args),
    # Div
    "/": lambda args: operationDIV(args[0], args[1]),
    "DIV": lambda args: operationDIV(args[0], args[1]),
    # Regexp match
    "MATCH": lambda args: operationMATCH(args[0], args[1]),
    "LIKE": lambda args: operationMATCH(args[0], args[1]),
    # Regexp search
    "SEARCH": lambda args: operationSEARCH(args[0], args[1]),
    # Regexp findal
    "FINDALL": lambda args: operationFINDALL(args[0], args[1]),
    # Group count
    "COUNT": lambda args: groupCOUNT(args[0]),
}

# new evaluateExpression function,
#  accounting for groups
"""
def evaluateExpression(root,VarDictionary,GroupIndexKey=None):
    # input = local tree root
    # XXX: this could be very slow due to passing
    #      every time VarDictionary as a parameter
    # Two special cases: 1) root=varname
    #                    2) root=list/tuple
    # These cases must be processed in a separate way
    if type(root) in set([list,tuple]):
       # root is not a leaf
       head = root[0].upper()
       # string constants are treated specially
       if head in set(['STR','STRING']): # one arg
          return operationSTR(root[1])
       elif head in set(['SET']):
          return operationSET(root[1])
       tail = root[1:]
       args = []
       # evaluate arguments recursively
       for element in tail: # resolve tree by recursion
           args.append(evaluateExpression(element,VarDictionary,GroupIndexKey))
       # call functions with evaluated arguments
       if head in set(['LIST']): # list arg
          return operationLIST(args)
       elif head in set(['&','&&','AND']): # many args
          return operationAND(args)
       elif head in set(['|','||','OR']): # many args
          return operationOR(args)
       elif head in set(['!','NOT']): # one args
          return operationNOT(args[0])
       elif head in set(['RANGE','BETWEEN']): # three args
          return operationRANGE(args[0],args[1],args[2])
       elif head in set(['IN','SUBSET']): # two args
          return operationSUBSET(args[0],args[1])
       elif head in set(['<','LESS','LT']): # many args
          return operationLESS(args)
       elif head in set(['>','MORE','MT']): # many args
          return operationMORE(args)
       elif head in set(['<=','LESSOREQUAL','LTE']): # many args
          return operationLESSOREQUAL(args)
       elif head in set(['>=','MOREOREQUAL','MTE']): # many args
          return operationMOREOREQUAL(args)
       elif head in set(['=','==','EQ','EQUAL','EQUALS']): # many args
          return operationEQUAL(args)
       elif head in set(['!=','<>','~=','NE','NOTEQUAL']): # two args
          return operationNOTEQUAL(args[0],args[1])
       elif head in set(['+','SUM']): # many args
          return operationSUM(args)
       elif head in set(['-','DIFF']): # two args
          return operationDIFF(args[0],args[1])
       elif head in set(['*','MUL']): # many args
          return operationMUL(args)
       elif head in set(['/','DIV']): # two args
          return operationDIV(args[0],args[1])
       elif head in set(['MATCH','LIKE']): # two args
          return operationMATCH(args[0],args[1])
       elif head in set(['SEARCH']): # two args
          return operationSEARCH(args[0],args[1])
       elif head in set(['FINDALL']): # two args
          return operationFINDALL(args[0],args[1])
       # --- GROUPING OPERATIONS ---
       elif head in set(['COUNT']):
          return groupCOUNT(GroupIndexKey)
       else:
          raise Exception('Unknown operator: %s' % root[0])
    elif type(root)==str:
       # root is a par_name
       return VarDictionary[root]
    else:
       # root is a non-string constant
       return root
"""


def evaluateExpression(root, VarDictionary, GroupIndexKey=None):
    # input = local tree root
    # XXX: this could be very slow due to passing
    #      every time VarDictionary as a parameter
    # Two special cases: 1) root=varname
    #                    2) root=list/tuple
    # These cases must be processed in a separate way
    if type(root) in set([list, tuple]):
        # root is not a leaf
        head = root[0].upper()
        # string constants are treated specially
        if head in set(["STR", "STRING"]):  # one arg
            return operationSTR(root[1])
        elif head in set(["SET"]):
            return operationSET(root[1])
        tail = root[1:]
        args = []
        # evaluate arguments recursively
        for element in tail:  # resolve tree by recursion
            args.append(evaluateExpression(element, VarDictionary, GroupIndexKey))
        # call functions with evaluated arguments
        try:
            return OPERATORS[head](args)
        except KeyError:
            raise Exception("Unknown operator: %s" % head)
    elif type(root) == str:
        # root is a par_name
        return VarDictionary[root]
    else:
        # root is a non-string constant
        return root


def getVarDictionary(RowObject):
    # get VarDict from RowObject
    # VarDict: par_name => par_value
    VarDictionary = {}
    for par_name, par_value, par_format in RowObject:
        VarDictionary[par_name] = par_value
    return VarDictionary


def checkRowObject(RowObject, Conditions, VarDictionary):
    # VarDictionary = getVarDictionary(RowObject)
    if Conditions:
        Flag = evaluateExpression(Conditions, VarDictionary)
    else:
        Flag = True
    return Flag


# ----------------------------------------------------
# /CONDITIONS
# ----------------------------------------------------


# ----------------------------------------------------
# PARAMETER NAMES (includeing creation of new ones)
# ----------------------------------------------------

# Bind an expression to a new parameter
#   in a form: ('BIND','new_par',('some_exp',...))
def operationBIND(parname, Expression, VarDictionary):
    pass


# This section is for more detailed processing of parlists.

# Table creation must include not only subsets of
#   existing parameters, but also new parameters
#   derived from functions on a special prefix language
# For this reason subsetOfRowObject(..) must be substituted
#   by newRowObject(ParameterNames,RowObject)

# For parsing use the function evaluateExpression

# Get names from expression.
#  Must merge this one with evaluateExrpression.
# This is VERY LIMITED version of what will be
#  when make the language parser is implemented.
# For more ideas and info see LANGUAGE_REFERENCE

# more advansed version of expression evaluator
def evaluateExpressionPAR(ParameterNames, VarDictionary=None):
    # RETURN: 1) Upper-level Expression names
    #         2) Upper-level Expression values
    # Is it reasonable to pass a Context to every parse function?
    # For now the function does the following:
    #   1) iterates through all UPPER-LEVEL list elements
    #   2) if element is a par name: return par name
    #      if element is an BIND expression: return bind name
    #              (see operationBIND)
    #   3) if element is an anonymous expression: return #N(=1,2,3...)
    # N.B. Binds can be only on the 0-th level of Expression
    pass


def getContextFormat(RowObject):
    # Get context format from the whole RowObject
    ContextFormat = {}
    for par_name, par_value, par_format in RowObject:
        ContextFormat[par_name] = par_format
    return ContextFormat


def getDefaultFormat(Type):
    if Type is int:
        return "%10d"
    elif Type is float:
        return "%25.15E"
    elif Type is str:
        return "%20s"
    elif Type is bool:
        return "%2d"
    else:
        raise Exception("Unknown type")


def getDefaultValue(Type):
    if Type is int:
        return 0
    elif Type is float:
        return 0.0
    elif Type is str:
        return ""
    elif Type is bool:
        return False
    else:
        raise Exception("Unknown type")


# VarDictionary = Context (this name is more suitable)

# GroupIndexKey is a key to special structure/dictionary GROUP_INDEX.
# GROUP_INDEX contains information needed to calculate streamed group functions
#  such as COUNT, AVG, MIN, MAX etc...


def newRowObject(
    ParameterNames, RowObject, VarDictionary, ContextFormat, GroupIndexKey=None
):
    # Return a subset of RowObject according to
    # ParameterNames include either par names
    #  or expressions containing par names literals
    # ContextFormat contains format for ParNames
    anoncount = 0
    RowObjectNew = []
    for expr in ParameterNames:
        if type(expr) in set([list, tuple]):  # bind
            head = expr[0]
            if head in set(["let", "bind", "LET", "BIND"]):
                par_name = expr[1]
                par_expr = expr[2]
            else:
                par_name = "#%d" % anoncount
                anoncount += 1
                par_expr = expr
            par_value = evaluateExpression(par_expr, VarDictionary, GroupIndexKey)
            try:
                par_format = expr[3]
            except:
                par_format = getDefaultFormat(type(par_value))
        else:  # parname
            par_name = expr
            par_value = VarDictionary[par_name]
            par_format = ContextFormat[par_name]
        RowObjectNew.append((par_name, par_value, par_format))
    return RowObjectNew


# ----------------------------------------------------
# /PARAMETER NAMES
# ----------------------------------------------------


# ----------------------------------------------------
# OPERATIONS ON TABLES
# ----------------------------------------------------

QUERY_BUFFER = "__BUFFER__"


def getTableList():
    return LOCAL_TABLE_CACHE.keys()


def describeTable(TableName):
    """
    INPUT PARAMETERS:
        TableName: name of the table to describe
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Print information about table, including
        parameter names, formats and wavenumber range.
    ---
    EXAMPLE OF USAGE:
        describeTable('sampletab')
    ---
    """
    print("-----------------------------------------")
    print(TableName + " summary:")
    try:
        print("-----------------------------------------")
        print("Comment: \n" + LOCAL_TABLE_CACHE[TableName]["header"]["comment"])
    except:
        pass
    print(
        "Number of rows: "
        + str(LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"])
    )
    print("Table type: " + str(LOCAL_TABLE_CACHE[TableName]["header"]["table_type"]))
    print("-----------------------------------------")
    print("            PAR_NAME           PAR_FORMAT")
    print("")
    for par_name in LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
        par_format = LOCAL_TABLE_CACHE[TableName]["header"]["format"][par_name]
        print("%20s %20s" % (par_name, par_format))
    print("-----------------------------------------")


# Write a table to File or STDOUT
def outputTable(TableName, Conditions=None, File=None, Header=True):
    # Display or record table with condition checking
    if File:
        Header = False
        OutputFile = open(File, "w")
    if Header:
        headstr = putTableHeaderToString(TableName)
        if File:
            OutputFile.write(headstr)
        else:
            print(headstr)
    for RowID in range(0, LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]):
        RowObject = getRowObject(RowID, TableName)
        VarDictionary = getVarDictionary(RowObject)
        VarDictionary["LineNumber"] = RowID
        if not checkRowObject(RowObject, Conditions, VarDictionary):
            continue
        raw_string = putRowObjectToString(RowObject)
        if File:
            OutputFile.write(raw_string + "\n")
        else:
            print(raw_string)


# Create table "prototype-based" way
def createTable(TableName, RowObjectDefault):
    # create a Table based on a RowObjectDefault
    LOCAL_TABLE_CACHE[TableName] = {}
    header_order = []
    header_format = {}
    header_default = {}
    data = {}
    for par_name, par_value, par_format in RowObjectDefault:
        header_order.append(par_name)
        header_format[par_name] = par_format
        header_default[par_name] = par_value
        data[par_name] = []
    # header_order = tuple(header_order) # XXX ?
    LOCAL_TABLE_CACHE[TableName]["header"] = {}
    LOCAL_TABLE_CACHE[TableName]["header"]["order"] = header_order
    LOCAL_TABLE_CACHE[TableName]["header"]["format"] = header_format
    LOCAL_TABLE_CACHE[TableName]["header"]["default"] = header_default
    LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"] = 0
    LOCAL_TABLE_CACHE[TableName]["header"]["size_in_bytes"] = 0
    LOCAL_TABLE_CACHE[TableName]["header"]["table_name"] = TableName
    LOCAL_TABLE_CACHE[TableName]["header"]["table_type"] = "column-fixed"
    LOCAL_TABLE_CACHE[TableName]["data"] = data


# simple "drop table" capability
def dropTable(TableName):
    """
    INPUT PARAMETERS:
        TableName:  name of the table to delete
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Deletes a table from local database.
    ---
    EXAMPLE OF USAGE:
        dropTable('some_dummy_table')
    ---
    """
    # delete Table from both Cache and Storage
    try:
        # LOCAL_TABLE_CACHE[TableName] = {}
        del LOCAL_TABLE_CACHE[TableName]
    except:
        pass
    # delete from storage
    pass  # TODO


# Returns a column corresponding to parameter name
def getColumn(TableName, ParameterName):
    """
    INPUT PARAMETERS:
        TableName:      source table name     (required)
        ParameterName:  name of column to get (required)
    OUTPUT PARAMETERS:
        ColumnData:     list of values from specified column
    ---
    DESCRIPTION:
        Returns a column with a name ParameterName from
        table TableName. Column is returned as a list of values.
    ---
    EXAMPLE OF USAGE:
        p1 = getColumn('sampletab','p1')
    ---
    """
    return LOCAL_TABLE_CACHE[TableName]["data"][ParameterName]


# Returns a list of columns corresponding to parameter names
def getColumns(TableName, ParameterNames):
    """
    INPUT PARAMETERS:
        TableName:       source table name           (required)
        ParameterNames:  list of column names to get (required)
    OUTPUT PARAMETERS:
        ListColumnData:   tuple of lists of values from specified column
    ---
    DESCRIPTION:
        Returns columns with a names in ParameterNames from
        table TableName. Columns are returned as a tuple of lists.
    ---
    EXAMPLE OF USAGE:
        p1,p2,p3 = getColumns('sampletab',('p1','p2','p3'))
    ---
    """
    Columns = []
    for par_name in ParameterNames:
        Columns.append(LOCAL_TABLE_CACHE[TableName]["data"][par_name])
    return Columns


def addColumn(
    TableName,
    ParameterName,
    Before=None,
    Expression=None,
    Type=None,
    Default=None,
    Format=None,
):
    if ParameterName in LOCAL_TABLE_CACHE[TableName]["header"]["format"]:
        raise Exception('Column "%s" already exists' % ParameterName)
    if not Type:
        Type = float
    if not Default:
        Default = getDefaultValue(Type)
    if not Format:
        Format = getDefaultFormat(Type)
    number_of_rows = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    # Mess with data
    if not Expression:
        LOCAL_TABLE_CACHE[TableName]["data"][ParameterName] = [
            Default for i in range(0, number_of_rows)
        ]
    else:
        data = []
        for RowID in range(0, number_of_rows):
            RowObject = getRowObject(RowID, TableName)
            VarDictionary = getVarDictionary(RowObject)
            VarDictionary["LineNumber"] = RowID
            par_value = evaluateExpression(Expression, VarDictionary)
            data.append(par_value)
            LOCAL_TABLE_CACHE[TableName]["data"][ParameterName] = data
    # Mess with header
    header_order = LOCAL_TABLE_CACHE[TableName]["header"]["order"]
    if not Before:
        header_order.append(ParameterName)
    else:
        # i = 0
        # for par_name in header_order:
        #    if par_name == Before: break
        #    i += 1
        i = header_order.index(Before)
        header_order = (
            header_order[:i]
            + [
                ParameterName,
            ]
            + header_order[i:]
        )
    LOCAL_TABLE_CACHE[TableName]["header"]["order"] = header_order
    LOCAL_TABLE_CACHE[TableName]["header"]["format"][ParameterName] = Format
    LOCAL_TABLE_CACHE[TableName]["header"]["default"][ParameterName] = Default


def deleteColumn(TableName, ParameterName):
    if ParameterName not in LOCAL_TABLE_CACHE[TableName]["header"]["format"]:
        raise Exception('No such column "%s"' % ParameterName)
    # Mess with data
    i = LOCAL_TABLE_CACHE[TableName]["header"]["order"].index(ParameterName)
    del LOCAL_TABLE_CACHE[TableName]["header"]["order"][i]
    del LOCAL_TABLE_CACHE[TableName]["header"]["format"][ParameterName]
    del LOCAL_TABLE_CACHE[TableName]["header"]["default"][ParameterName]
    if not LOCAL_TABLE_CACHE[TableName]["header"]["order"]:
        LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"] = 0
    # Mess with header
    del LOCAL_TABLE_CACHE[TableName]["data"][ParameterName]


def deleteColumns(TableName, ParameterNames):
    if type(ParameterNames) not in set([list, tuple, set]):
        ParameterNames = [ParameterNames]
    for ParameterName in ParameterNames:
        deleteColumn(TableName, ParameterName)


def renameColumn(TableName, OldParameterName, NewParameterName):
    pass


def insertRow():
    pass


def deleteRows(TableName, ParameterNames, Conditions):
    pass


# select from table to another table
def selectInto(DestinationTableName, TableName, ParameterNames, Conditions):
    # TableName must refer to an existing table in cache!!
    # Conditions = Restrictables in specific format
    # Sample conditions: cond = {'par1':{'range',[b_lo,b_hi]},'par2':b}
    # return structure similar to TableObject and put it to QUERY_BUFFER
    # if ParameterNames is '*' then all parameters are used
    # table_columns = LOCAL_TABLE_CACHE[TableName]['data'].keys()
    # table_length = len(TableObject['header']['number_of_rows'])
    # if ParameterNames=='*':
    #   ParameterNames = table_columns
    # check if Conditions contain elements which are not in the TableObject
    # condition_variables = getConditionVariables(Conditions)
    # strange_pars = set(condition_variables)-set(table_variables)
    # if strange_pars:
    #   raise Exception('The following parameters are not in the table \"%s\"' % (TableName,list(strange_pars)))
    # do full scan each time
    if DestinationTableName == TableName:
        raise Exception("Selecting into source table is forbidden")
    table_length = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    row_count = 0
    for RowID in range(0, table_length):
        RowObject = getRowObject(RowID, TableName)
        VarDictionary = getVarDictionary(RowObject)
        VarDictionary["LineNumber"] = RowID
        ContextFormat = getContextFormat(RowObject)
        RowObjectNew = newRowObject(
            ParameterNames, RowObject, VarDictionary, ContextFormat
        )
        if checkRowObject(RowObject, Conditions, VarDictionary):
            addRowObject(RowObjectNew, DestinationTableName)
            row_count += 1
    LOCAL_TABLE_CACHE[DestinationTableName]["header"]["number_of_rows"] += row_count


def length(TableName):
    tab_len = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    # print(str(tab_len)+' rows in '+TableName)
    return tab_len


# Select parameters from a table with certain conditions.
# Parameters can be the names or expressions.
# Conditions contain a list of expressions in a special language.
# Set Output to False to suppress output
# Set File=FileName to redirect output to a file.
def select(
    TableName,
    DestinationTableName=QUERY_BUFFER,
    ParameterNames=None,
    Conditions=None,
    Output=True,
    File=None,
):
    """
    INPUT PARAMETERS:
        TableName:            name of source table              (required)
        DestinationTableName: name of resulting table           (optional)
        ParameterNames:       list of parameters or expressions (optional)
        Conditions:           list of logincal expressions      (optional)
        Output:   enable (True) or suppress (False) text output (optional)
        File:     enable (True) or suppress (False) file output (optional)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Select or filter the data in some table
        either to standard output or to file (if specified)
    ---
    EXAMPLE OF USAGE:
        select('sampletab',DestinationTableName='outtab',ParameterNames=(p1,p2),
                Conditions=(('and',('>=','p1',1),('<',('*','p1','p2'),20))))
        Conditions means (p1>=1 and p1*p2<20)
    ---
    """
    # TODO: Variables defined in ParameterNames ('LET') MUST BE VISIBLE IN Conditions !!
    # check if table exists
    if TableName not in LOCAL_TABLE_CACHE.keys():
        raise Exception(
            "%s: no such table. Check tableList() for more info." % TableName
        )
    if not ParameterNames:
        ParameterNames = LOCAL_TABLE_CACHE[TableName]["header"]["order"]
    LOCAL_TABLE_CACHE[
        DestinationTableName
    ] = {}  # clear QUERY_BUFFER for the new result
    RowObjectDefault = getDefaultRowObject(TableName)
    VarDictionary = getVarDictionary(RowObjectDefault)
    ContextFormat = getContextFormat(RowObjectDefault)
    RowObjectDefaultNew = newRowObject(
        ParameterNames, RowObjectDefault, VarDictionary, ContextFormat
    )
    dropTable(DestinationTableName)  # redundant
    createTable(DestinationTableName, RowObjectDefaultNew)
    selectInto(DestinationTableName, TableName, ParameterNames, Conditions)
    if DestinationTableName != QUERY_BUFFER:
        if File:
            outputTable(DestinationTableName, File=File)
    elif Output:
        outputTable(DestinationTableName, File=File)


# SORTING ===========================================================


def arrangeTable(TableName, DestinationTableName=None, RowIDList=None):
    # print 'AT/'
    # print 'AT: RowIDList = '+str(RowIDList)
    # make a subset of table rows according to RowIDList
    if not DestinationTableName:
        DestinationTableName = TableName
    if DestinationTableName != TableName:
        dropTable(DestinationTableName)
        LOCAL_TABLE_CACHE[DestinationTableName]["header"] = LOCAL_TABLE_CACHE[
            TableName
        ]["header"]
        LOCAL_TABLE_CACHE[DestinationTableName]["data"] = {}
    LOCAL_TABLE_CACHE[DestinationTableName]["header"]["number_of_rows"] = len(RowIDList)
    # print 'AT: RowIDList = '+str(RowIDList)
    for par_name in LOCAL_TABLE_CACHE[DestinationTableName]["header"]["order"]:
        par_data = LOCAL_TABLE_CACHE[TableName]["data"][par_name]
        LOCAL_TABLE_CACHE[DestinationTableName]["data"][par_name] = [
            par_data[i] for i in RowIDList
        ]


def compareLESS(RowObject1, RowObject2, ParameterNames):
    # print 'CL/'
    # arg1 and arg2 are RowObjects
    # Compare them according to ParameterNames
    # Simple validity check:
    # if len(arg1) != len(arg2):
    #   raise Exception('Arguments have different lengths')
    # RowObject1Subset = subsetOfRowObject(ParameterNames,RowObject1)
    # RowObject2Subset = subsetOfRowObject(ParameterNames,RowObject2)
    # return RowObject1Subset < RowObject2Subset
    row1 = []
    row2 = []
    # n = len(RowObject1)
    # for i in range(0,n):
    #    par_name1 = RowObject1[i][0]
    #    if par_name1 in ParameterNames:
    #       par_value1 = RowObject1[i][1]
    #       par_value2 = RowObject2[i][1]
    #       row1 += [par_value1]
    #       row2 += [par_value2]
    VarDictionary1 = getVarDictionary(RowObject1)
    VarDictionary2 = getVarDictionary(RowObject2)
    for par_name in ParameterNames:
        par_value1 = VarDictionary1[par_name]
        par_value2 = VarDictionary2[par_name]
        row1 += [par_value1]
        row2 += [par_value2]
    Flag = row1 < row2
    return Flag


def quickSort(index, TableName, ParameterNames, Accending=True):
    # ParameterNames: names of parameters which are
    #  taking part in the sorting
    if index == []:
        return []
    else:
        PivotID = index[0]
        Pivot = getRowObject(PivotID, TableName)
        lesser_index = []
        greater_index = []
        for RowID in index[1:]:
            RowObject = getRowObject(RowID, TableName)
            if compareLESS(RowObject, Pivot, ParameterNames):
                lesser_index += [RowID]
            else:
                greater_index += [RowID]
        lesser = quickSort(lesser_index, TableName, ParameterNames, Accending)
        greater = quickSort(greater_index, TableName, ParameterNames, Accending)
        if Accending:
            return lesser + [PivotID] + greater
        else:
            return greater + [PivotID] + lesser


# Sorting must work well on the table itself!
def sort(
    TableName,
    DestinationTableName=None,
    ParameterNames=None,
    Accending=True,
    Output=False,
    File=None,
):
    """
    INPUT PARAMETERS:
        TableName:                name of source table          (required)
        DestinationTableName:     name of resulting table       (optional)
        ParameterNames:       list of parameters or expressions to sort by    (optional)
        Accending:       sort in ascending (True) or descending (False) order (optional)
        Output:   enable (True) or suppress (False) text output (optional)
        File:     enable (True) or suppress (False) file output (optional)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Sort a table by a list of it's parameters or expressions.
        The sorted table is saved in DestinationTableName (if specified).
    ---
    EXAMPLE OF USAGE:
        sort('sampletab',ParameterNames=(p1,('+',p1,p2)))
    ---
    """
    number_of_rows = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    index = range(0, number_of_rows)
    if not DestinationTableName:
        DestinationTableName = TableName
    # if names are not provided use all parameters in sorting
    if not ParameterNames:
        ParameterNames = LOCAL_TABLE_CACHE[TableName]["header"]["order"]
    elif type(ParameterNames) not in set([list, tuple]):
        ParameterNames = [ParameterNames]  # fix of stupid bug where ('p1',) != ('p1')
    index_sorted = quickSort(index, TableName, ParameterNames, Accending)
    arrangeTable(TableName, DestinationTableName, index_sorted)
    if Output:
        outputTable(DestinationTableName, File=File)


# /SORTING ==========================================================


# GROUPING ==========================================================

# GROUP_INDEX global auxiliary structure is a Dictionary,
#   which has the following properties:
#      1) Each key is a composite variable:
#          [array of values of ParameterNames variable
#           STREAM_UPDATE_FLAG]
#      2) Each value is an index in LOCAL_TABLE_CACHE[TableName]['data'][...],
#          corresponding to this key
#   STREAM_UPDATE_FLAG = TRUE if value in GROUP_INDEX needs updating
#                      = FALSE otherwise
#   If no grouping variables are specified (GroupParameterNames==None)
#    than the following key is used: "__GLOBAL__"


def group(
    TableName,
    DestinationTableName=QUERY_BUFFER,
    ParameterNames=None,
    GroupParameterNames=None,
    File=None,
    Output=True,
):
    """
    INPUT PARAMETERS:
        TableName:                name of source table          (required)
        DestinationTableName:     name of resulting table       (optional)
        ParameterNames:       list of parameters or expressions to take       (optional)
        GroupParameterNames:  list of parameters or expressions to group by   (optional)
        Accending:       sort in ascending (True) or descending (False) order (optional)
        Output:   enable (True) or suppress (False) text output (optional)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        none
    ---
    EXAMPLE OF USAGE:
        group('sampletab',ParameterNames=('p1',('sum','p2')),GroupParameterNames=('p1'))
        ... makes grouping by p1,p2. For each group it calculates sum of p2 values.
    ---
    """
    # Implements such functions as:
    # count,sum,avg,min,max,ssq etc...
    # 1) ParameterNames can contain group functions
    # 2) GroupParameterNames can't contain group functions
    # 3) If ParameterNames contains parameters defined by LET directive,
    #    it IS visible in the sub-context of GroupParameterNames
    # 4) Parameters defined in GroupParameterNames are NOT visible in ParameterNames
    # 5) ParameterNames variable represents the structure of the resulting table/collection
    # 6) GroupParameterNames can contain either par_names or expressions with par_names
    # Clear old GROUP_INDEX value
    clearGroupIndex()
    # Consistency check
    if TableName == DestinationTableName:
        raise Exception("TableName and DestinationTableName must be different")
    # if not ParameterNames: ParameterNames=LOCAL_TABLE_CACHE[TableName]['header']['order']
    # Prepare the new DestinationTable
    RowObjectDefault = getDefaultRowObject(TableName)
    VarDictionary = getVarDictionary(RowObjectDefault)
    ContextFormat = getContextFormat(RowObjectDefault)
    RowObjectDefaultNew = newRowObject(
        ParameterNames, RowObjectDefault, VarDictionary, ContextFormat
    )
    dropTable(DestinationTableName)  # redundant
    createTable(DestinationTableName, RowObjectDefaultNew)
    # Loop through rows of source Table
    # On each iteration group functions update GROUP_INDEX (see description above)
    number_of_rows = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    # STAGE 1: CREATE GROUPS
    print("LOOP:")
    for RowID in range(0, number_of_rows):
        print("--------------------------------")
        print("RowID=" + str(RowID))
        RowObject = getRowObject(RowID, TableName)  # RowObject from source table
        VarDictionary = getVarDictionary(RowObject)
        print("VarDictionary=" + str(VarDictionary))
        # This is a trick which makes evaluateExpression function
        #   not consider first expression as an operation
        GroupParameterNames_ = ["LIST"] + list(GroupParameterNames)
        GroupIndexKey = evaluateExpression(GroupParameterNames_, VarDictionary)
        # List is an unhashable type in Python!
        GroupIndexKey = tuple(GroupIndexKey)
        initializeGroup(GroupIndexKey)
        print("GROUP_INDEX=" + str(GROUP_INDEX))
        ContextFormat = getContextFormat(RowObject)
        RowObjectNew = newRowObject(
            ParameterNames, RowObject, VarDictionary, ContextFormat, GroupIndexKey
        )
        RowIDGroup = GROUP_INDEX[GroupIndexKey]["ROWID"]
        setRowObject(RowIDGroup, RowObjectNew, DestinationTableName)
    # Output result if required
    if Output and DestinationTableName == QUERY_BUFFER:
        outputTable(DestinationTableName, File=File)


# /GROUPING =========================================================

# EXTRACTING ========================================================

REGEX_INTEGER = "[+-]?\d+"
REGEX_STRING = "[^\s]+"
REGEX_FLOAT_F = "[+-]?\d*\.?\d+"
REGEX_FLOAT_E = "[+-]?\d*\.?\d+[eEfF]?[+-]?\d+"

REGEX_INTEGER_FIXCOL = lambda n: "\d{%d}" % n
REGEX_STRING_FIXCOL = lambda n: "[^\s]{%d}" % n
REGEX_FLOAT_F_FIXCOL = lambda n: "[\+\-\.\d]{%d}" % n
REGEX_FLOAT_E_FIXCOL = lambda n: "[\+\-\.\deEfF]{%d}" % n

# Extract sub-columns from string column
def extractColumns(
    TableName, SourceParameterName, ParameterFormats, ParameterNames=None, FixCol=False
):
    """
    INPUT PARAMETERS:
        TableName:             name of source table              (required)
        SourceParameterName:   name of source column to process  (required)
        ParameterFormats:      c formats of unpacked parameters  (required)
        ParameterNames:        list of resulting parameter names (optional)
        FixCol:      column-fixed (True) format of source column (optional)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Note, that this function is aimed to do some extra job on
        interpreting string parameters which is normally supposed
        to be done by the user.
    ---
    EXAMPLE OF USAGE:
        extractColumns('sampletab',SourceParameterName='p5',
                        ParameterFormats=('%d','%d','%d'),
                        ParameterNames=('p5_1','p5_2','p5_3'))
        This example extracts three integer parameters from
        a source column 'p5' and puts results in ('p5_1','p5_2','p5_3').
    ---
    """
    # ParameterNames = just the names without expressions
    # ParFormats contains python formats for par extraction
    # Example: ParameterNames=('v1','v2','v3')
    #          ParameterFormats=('%1s','%1s','%1s')
    # By default the format of parameters is column-fixed
    if type(
        LOCAL_TABLE_CACHE[TableName]["header"]["default"][SourceParameterName]
    ) not in set([str, unicode]):
        raise Exception("Source parameter must be a string")
    i = -1
    # bug when (a,) != (a)
    if ParameterNames and type(ParameterNames) not in set([list, tuple]):
        ParameterNames = [ParameterNames]
    if ParameterFormats and type(ParameterFormats) not in set([list, tuple]):
        ParameterFormats = [ParameterFormats]
    # if ParameterNames is empty, fill it with #1-2-3-...
    if not ParameterNames:
        ParameterNames = []
        # using naming convension #i, i=0,1,2,3...
        for par_format in ParameterFormats:
            while True:
                i += 1
                par_name = "#%d" % i
                fmt = LOCAL_TABLE_CACHE[TableName]["header"]["format"].get(
                    par_name, None
                )
                if not fmt:
                    break
            ParameterNames.append(par_name)
    # check if ParameterNames are valid
    Intersection = set(ParameterNames).intersection(
        LOCAL_TABLE_CACHE[TableName]["header"]["order"]
    )
    if Intersection:
        raise Exception("Parameters %s already exist" % str(list(Intersection)))
    # loop over ParameterNames to prepare LOCAL_TABLE_CACHE
    i = 0
    for par_name in ParameterNames:
        par_format = ParameterFormats[i]
        LOCAL_TABLE_CACHE[TableName]["header"]["format"][par_name] = par_format
        LOCAL_TABLE_CACHE[TableName]["data"][par_name] = []
        i += 1
    # append new parameters in order list
    LOCAL_TABLE_CACHE[TableName]["header"]["order"] += ParameterNames
    # cope with default values
    i = 0
    format_regex = []
    format_types = []
    for par_format in ParameterFormats:
        par_name = ParameterNames[i]
        regex = FORMAT_PYTHON_REGEX
        (lng, trail, lngpnt, ty) = re.search(regex, par_format).groups()
        ty = ty.lower()
        if ty == "d":
            par_type = int
            if FixCol:
                format_regex_part = REGEX_INTEGER_FIXCOL(lng)
            else:
                format_regex_part = REGEX_INTEGER
        elif ty == "s":
            par_type = str
            if FixCol:
                format_regex_part = REGEX_STRING_FIXCOL(lng)
            else:
                format_regex_part = REGEX_STRING
        elif ty == "f":
            par_type = float
            if FixCol:
                format_regex_part = REGEX_FLOAT_F_FIXCOL(lng)
            else:
                format_regex_part = REGEX_FLOAT_F
        elif ty == "e":
            par_type = float
            if FixCol:
                format_regex_part = REGEX_FLOAT_E_FIXCOL(lng)
            else:
                format_regex_part = REGEX_FLOAT_E
        else:
            raise Exception("Unknown data type")
        format_regex.append("(" + format_regex_part + ")")
        format_types.append(par_type)
        def_val = getDefaultValue(par_type)
        LOCAL_TABLE_CACHE[TableName]["header"]["default"][par_name] = def_val
        i += 1
    format_regex = "\s*".join(format_regex)
    # loop through values of SourceParameter
    for SourceParameterString in LOCAL_TABLE_CACHE[TableName]["data"][
        SourceParameterName
    ]:
        try:
            ExtractedValues = list(
                re.search(format_regex, SourceParameterString).groups()
            )
        except:
            raise Exception('Error with line "%s"' % SourceParameterString)
        i = 0
        # loop through all parameters which are supposed to be extracted
        for par_name in ParameterNames:
            par_value = format_types[i](ExtractedValues[i])
            LOCAL_TABLE_CACHE[TableName]["data"][par_name].append(par_value)
            i += 1
    # explicitly check that number of rows are equal
    number_of_rows = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]
    number_of_rows2 = len(LOCAL_TABLE_CACHE[TableName]["data"][SourceParameterName])
    number_of_rows3 = len(LOCAL_TABLE_CACHE[TableName]["data"][ParameterNames[0]])
    if not (number_of_rows == number_of_rows2 == number_of_rows3):
        raise Exception("Error while extracting parameters: check your regexp")


# Split string columns into sub-columns with given names
def splitColumn(TableName, SourceParameterName, ParameterNames, Splitter):
    pass


# /EXTRACTING =======================================================

# ---------------------------------------------------------------
# ---------------------------------------------------------------
# /LOCAL DATABASE MANAGEMENT SYSTEM
# ---------------------------------------------------------------
# ---------------------------------------------------------------


# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# GLOBAL API FUNCTIONS
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------


def mergeParlist(*arg):
    # Merge parlists and remove duplicates.
    # Argument contains a list of lists/tuples.
    container = []
    for a in arg:
        container += list(a)
    result = []
    index = set()
    for par_name in container:
        if par_name not in index:
            index.add(par_name)
            result.append(par_name)
    return result


# Define parameter groups to simplify the usage of fetch_
PARLIST_DOTPAR = [
    "par_line",
]
PARLIST_ID = [
    "trans_id",
]
PARLIST_STANDARD = [
    "molec_id",
    "local_iso_id",
    "nu",
    "sw",
    "a",
    "elower",
    "gamma_air",
    "delta_air",
    "gamma_self",
    "n_air",
    "n_self",
    "gp",
    "gpp",
]
PARLIST_LABELS = ["statep", "statepp"]
# PARLIST_LINEMIXING = ['y_air','y_self']

PARLIST_VOIGT_AIR = ["gamma_air", "delta_air", "deltap_air", "n_air"]
PARLIST_VOIGT_SELF = ["gamma_self", "delta_self", "deltap_self", "n_self"]
PARLIST_VOIGT_H2 = ["gamma_H2", "delta_H2", "deltap_H2", "n_H2"]
PARLIST_VOIGT_CO2 = ["gamma_CO2", "delta_CO2", "n_CO2"]
PARLIST_VOIGT_HE = ["gamma_He", "delta_He", "n_He"]
PARLIST_VOIGT_H2O = ["gamma_H2O", "n_H2O"]
PARLIST_VOIGT_LINEMIXING = ["y_air", "y_self"]
PARLIST_VOIGT_ALL = mergeParlist(
    PARLIST_VOIGT_AIR,
    PARLIST_VOIGT_SELF,
    PARLIST_VOIGT_H2,
    PARLIST_VOIGT_CO2,
    PARLIST_VOIGT_HE,
    PARLIST_VOIGT_H2O,
    PARLIST_VOIGT_LINEMIXING,
)

PARLIST_SDVOIGT_AIR = ["gamma_air", "delta_air", "deltap_air", "n_air", "SD_air"]
PARLIST_SDVOIGT_SELF = ["gamma_self", "delta_self", "deltap_self", "n_self", "SD_self"]
PARLIST_SDVOIGT_H2 = []
PARLIST_SDVOIGT_CO2 = []
PARLIST_SDVOIGT_HE = []
PARLIST_SDVOIGT_LINEMIXING = ["Y_SDV_air_296", "Y_SDV_self_296"]
PARLIST_SDVOIGT_ALL = mergeParlist(
    PARLIST_SDVOIGT_AIR,
    PARLIST_SDVOIGT_SELF,
    PARLIST_SDVOIGT_H2,
    PARLIST_SDVOIGT_CO2,
    PARLIST_SDVOIGT_HE,
    PARLIST_SDVOIGT_LINEMIXING,
)

PARLIST_GALATRY_AIR = ["gamma_air", "delta_air", "deltap_air", "n_air", "beta_g_air"]
PARLIST_GALATRY_SELF = [
    "gamma_self",
    "delta_self",
    "deltap_self",
    "n_self",
    "beta_g_self",
]
PARLIST_GALATRY_H2 = []
PARLIST_GALATRY_CO2 = []
PARLIST_GALATRY_HE = []
PARLIST_GALATRY_ALL = mergeParlist(
    PARLIST_GALATRY_AIR,
    PARLIST_GALATRY_SELF,
    PARLIST_GALATRY_H2,
    PARLIST_GALATRY_CO2,
    PARLIST_GALATRY_HE,
)

PARLIST_HT_SELF = [
    "gamma_HT_0_self_50",
    "n_HT_self_50",
    "gamma_HT_2_self_50",
    "delta_HT_0_self_50",
    "deltap_HT_self_50",
    "delta_HT_2_self_50",
    "gamma_HT_0_self_150",
    "n_HT_self_150",
    "gamma_HT_2_self_150",
    "delta_HT_0_self_150",
    "deltap_HT_self_150",
    "delta_HT_2_self_150",
    "gamma_HT_0_self_296",
    "n_HT_self_296",
    "gamma_HT_2_self_296",
    "delta_HT_0_self_296",
    "deltap_HT_self_296",
    "delta_HT_2_self_296",
    "gamma_HT_0_self_700",
    "n_HT_self_700",
    "gamma_HT_2_self_700",
    "delta_HT_0_self_700",
    "deltap_HT_self_700",
    "delta_HT_2_self_700",
    "nu_HT_self",
    "kappa_HT_self",
    "eta_HT_self",
    "Y_HT_self_296",
]
# PARLIST_HT_AIR = ['gamma_HT_0_air_50','n_HT_air_50','gamma_HT_2_air_50',
#                  'delta_HT_0_air_50','deltap_HT_air_50','delta_HT_2_air_50',
#                  'gamma_HT_0_air_150','n_HT_air_150','gamma_HT_2_air_150',
#                  'delta_HT_0_air_150','deltap_HT_air_150','delta_HT_2_air_150',
#                  'gamma_HT_0_air_296','n_HT_air_296','gamma_HT_2_air_296',
#                  'delta_HT_0_air_296','deltap_HT_air_296','delta_HT_2_air_296',
#                  'gamma_HT_0_air_700','n_HT_air_700','gamma_HT_2_air_700',
#                  'delta_HT_0_air_700','deltap_HT_air_700','delta_HT_2_air_700',
#                  'nu_HT_air','kappa_HT_air','eta_HT_air']
PARLIST_HT_AIR = [
    "gamma_HT_0_air_296",
    "n_HT_air_296",
    "gamma_HT_2_air_296",
    "delta_HT_0_air_296",
    "deltap_HT_air_296",
    "delta_HT_2_air_296",
    "nu_HT_air",
    "kappa_HT_air",
    "eta_HT_air",
    "Y_HT_air_296",
]
PARLIST_HT_ALL = mergeParlist(PARLIST_HT_SELF, PARLIST_HT_AIR)

PARLIST_ALL = mergeParlist(
    PARLIST_ID,
    PARLIST_DOTPAR,
    PARLIST_STANDARD,
    PARLIST_LABELS,
    PARLIST_VOIGT_ALL,
    PARLIST_SDVOIGT_ALL,
    PARLIST_GALATRY_ALL,
    PARLIST_HT_ALL,
)

PARAMETER_GROUPS = {
    "par_line": PARLIST_DOTPAR,
    "160-char": PARLIST_DOTPAR,
    ".par": PARLIST_DOTPAR,
    "id": PARLIST_ID,
    "standard": PARLIST_STANDARD,
    "labels": PARLIST_LABELS,
    #'linemixing' : PARLIST_LINEMIXING,
    "voigt_air": PARLIST_VOIGT_AIR,
    "voigt_self": PARLIST_VOIGT_SELF,
    "voigt_h2": PARLIST_VOIGT_H2,
    "voigt_co2": PARLIST_VOIGT_CO2,
    "voigt_he": PARLIST_VOIGT_HE,
    "voigt_h2o": PARLIST_VOIGT_H2O,
    "voigt_linemixing": PARLIST_VOIGT_LINEMIXING,
    "voigt": PARLIST_VOIGT_ALL,
    "sdvoigt_air": PARLIST_SDVOIGT_AIR,
    "sdvoigt_self": PARLIST_SDVOIGT_SELF,
    "sdvoigt_h2": PARLIST_SDVOIGT_H2,
    "sdvoigt_co2": PARLIST_SDVOIGT_CO2,
    "sdvoigt_he": PARLIST_SDVOIGT_HE,
    "sdvoigt_linemixing": PARLIST_SDVOIGT_LINEMIXING,
    "sdvoigt": PARLIST_SDVOIGT_ALL,
    "galatry_air": PARLIST_GALATRY_AIR,
    "galatry_self": PARLIST_GALATRY_SELF,
    "galatry_h2": PARLIST_GALATRY_H2,
    "galatry_co2": PARLIST_GALATRY_CO2,
    "galatry_he": PARLIST_GALATRY_HE,
    "galatry": PARLIST_GALATRY_ALL,
    "ht": PARLIST_HT_ALL,
    "all": PARLIST_ALL,
}


def prepareParlist(pargroups=[], params=[], dotpar=True):
    # Apply defaults
    parlist_default = []
    if dotpar:
        parlist_default += ["par_line"]
    # parlist_default += PARAMETER_GROUPS['id']

    # Make a dictionary of "assumed" parameters.
    ASSUMED_PARAMS = {}
    if "par_line" in set(parlist_default):
        ASSUMED_PARAMS = HITRAN_DEFAULT_HEADER["format"]

    parlist = parlist_default

    # Iterate over parameter groups.
    for pargroup in pargroups:
        pargroup = pargroup.lower()
        parlist += PARAMETER_GROUPS[pargroup]

    # Iterate over single parameters.
    for param in params:
        # param = param.lower()
        parlist.append(param)

    # Clean up parameter list.
    parlist = mergeParlist(parlist)
    result = []
    for param in parlist:
        if param not in ASSUMED_PARAMS:
            result.append(param)

    return result


def prepareHeader(parlist):
    HEADER = {
        "table_name": "",
        "number_of_rows": -1,
        "format": {},
        "default": {},
        "table_type": "column-fixed",
        "size_in_bytes": -1,
        "order": [],
        "description": {},
    }

    # Add column-fixed 160-character part, if specified in parlist.
    if "par_line" in set(parlist):
        HEADER["order"] = HITRAN_DEFAULT_HEADER["order"]
        HEADER["format"] = HITRAN_DEFAULT_HEADER["format"]
        HEADER["default"] = HITRAN_DEFAULT_HEADER["default"]
        HEADER["description"] = HITRAN_DEFAULT_HEADER["description"]
        HEADER["position"] = HITRAN_DEFAULT_HEADER["position"]

    # Insert all other parameters in the "extra" section of the header.
    plist = [v for v in parlist if v != "par_line"]
    HEADER["extra"] = []
    HEADER["extra_format"] = {}
    HEADER["extra_separator"] = ","
    for param in plist:
        param = param.lower()
        HEADER["extra"].append(param)
        HEADER["extra_format"][param] = PARAMETER_META[param]["default_fmt"]

    return HEADER


def queryHITRAN(
    TableName,
    iso_id_list,
    numin,
    numax,
    pargroups=[],
    params=[],
    dotpar=True,
    head=False,
):
    ParameterList = prepareParlist(pargroups=pargroups, params=params, dotpar=dotpar)
    TableHeader = prepareHeader(ParameterList)
    TableHeader["table_name"] = TableName
    DataFileName = VARIABLES["BACKEND_DATABASE_NAME"] + "/" + TableName + ".data"
    HeaderFileName = VARIABLES["BACKEND_DATABASE_NAME"] + "/" + TableName + ".header"
    # create URL
    iso_id_list_str = [str(iso_id) for iso_id in iso_id_list]
    iso_id_list_str = ",".join(iso_id_list_str)
    print("\nData is fetched from %s\n" % VARIABLES["GLOBAL_HOST"])
    if pargroups or params:  # custom par search
        url = (
            VARIABLES["GLOBAL_HOST"]
            + "/lbl/api?"
            + "iso_ids_list="
            + iso_id_list_str
            + "&"
            + "numin="
            + str(numin)
            + "&"
            + "numax="
            + str(numax)
            + "&"
            + "head="
            + str(head)
            + "&"
            + "fixwidth=0&sep=[comma]&"
            + "request_params="
            + ",".join(ParameterList)
        )
    else:  # old-fashioned .par search
        url = (
            VARIABLES["GLOBAL_HOST"]
            + "/lbl/api?"
            + "iso_ids_list="
            + iso_id_list_str
            + "&"
            + "numin="
            + str(numin)
            + "&"
            + "numax="
            + str(numax)
        )
    # raise Exception(url)
    # Download data by chunks.
    if VARIABLES["DISPLAY_FETCH_URL"]:
        print(url + "\n")
    try:
        # Proxy handling # https://stackoverflow.com/questions/1450132/proxy-with-urllib2
        if VARIABLES["PROXY"]:
            print("Using proxy " + str(VARIABLES["PROXY"]))
            proxy = urllib2.ProxyHandler(VARIABLES["PROXY"])
            opener = urllib2.build_opener(proxy)
            urllib2.install_opener(opener)
        req = urllib2.urlopen(url)
    except urllib2.HTTPError:
        raise Exception("Failed to retrieve data for given parameters.")
    except urllib2.URLError:
        raise Exception(
            "Cannot connect to %s. Try again or edit GLOBAL_HOST variable."
            % GLOBAL_HOST
        )
    CHUNK = 64 * 1024
    print("BEGIN DOWNLOAD: " + TableName)
    with open_(DataFileName, "w") as fp:
        while True:
            chunk = req.read(CHUNK)
            if not chunk:
                break
            fp.write(chunk.decode("utf-8"))
            print("  %d bytes written to %s" % (CHUNK, DataFileName))
    with open(HeaderFileName, "w") as fp:
        fp.write(json.dumps(TableHeader, indent=2))
        print("Header written to %s" % HeaderFileName)
    print("END DOWNLOAD")
    # Set comment
    # Get this table to LOCAL_TABLE_CACHE
    storage2cache(TableName)
    print("PROCESSED")


def saveHeader(TableName):
    ParameterList = prepareParlist(dotpar=True)
    TableHeader = prepareHeader(ParameterList)
    with open(TableName + ".header", "w") as fp:
        fp.write(json.dumps(TableHeader, indent=2))


# ---------- DATABASE FRONTEND END -------------

# simple implementation of getting a line list from a remote server
def getLinelist(local_name, query, api_key):
    return makeQuery(local_name)


# -------------------------------------------------------------------
# -------------------------------------------------------------------
# / GLOBABL API FUNCTIONS
# -------------------------------------------------------------------
# -------------------------------------------------------------------


# ---------------- FILTER ---------------------------------------------


def filter(TableName, Conditions):
    select(TableName=TableName, Conditions=Conditions, Output=False)


# ---------------------- ISO.PY ---------------------------------------

ISO_ID_INDEX = {"M": 0, "I": 1, "iso_name": 2, "abundance": 3, "mass": 4, "mol_name": 5}

#    id           M    I    iso_name                    abundance           mass        mol_name

ISO_ID = {
    1: [1, 1, "H2(16O)", 0.997317, 18.010565, "H2O"],
    2: [1, 2, "H2(18O)", 0.00199983, 20.014811, "H2O"],
    3: [1, 3, "H2(17O)", 0.000372, 19.01478, "H2O"],
    4: [1, 4, "HD(16O)", 0.00031069, 19.01674, "H2O"],
    5: [1, 5, "HD(18O)", 0.000000623, 21.020985, "H2O"],
    6: [1, 6, "HD(17O)", 0.000000116, 20.020956, "H2O"],
    129: [1, 7, "D2(16O)", 0.000000024197, 20.022915, "H2O"],
    7: [2, 1, "(12C)(16O)2", 0.984204, 43.98983, "CO2"],
    8: [2, 2, "(13C)(16O)2", 0.011057, 44.993185, "CO2"],
    9: [2, 3, "(16O)(12C)(18O)", 0.0039471, 45.994076, "CO2"],
    10: [2, 4, "(16O)(12C)(17O)", 0.000734, 44.994045, "CO2"],
    11: [2, 5, "(16O)(13C)(18O)", 0.00004434, 46.997431, "CO2"],
    12: [2, 6, "(16O)(13C)(17O)", 0.00000825, 45.9974, "CO2"],
    13: [2, 7, "(12C)(18O)2", 0.0000039573, 47.998322, "CO2"],
    14: [2, 8, "(17O)(12C)(18O)", 0.00000147, 46.998291, "CO2"],
    121: [2, 9, "(12C)(17O)2", 0.0000001368, 45.998262, "CO2"],
    15: [2, 10, "(13C)(18O)2", 0.000000044967, 49.001675, "CO2"],  # 0->11
    120: [2, 11, "(18O)(13C)(17O)", 0.00000001654, 48.00165, "CO2"],  # 'A'->11
    122: [2, 12, "(13C)(17O)2", 0.0000000015375, 47.001618, "CO2"],  # 'B'->12
    16: [3, 1, "(16O)3", 0.992901, 47.984745, "O3"],
    17: [3, 2, "(16O)(16O)(18O)", 0.00398194, 49.988991, "O3"],
    18: [3, 3, "(16O)(18O)(16O)", 0.00199097, 49.988991, "O3"],
    19: [3, 4, "(16O)(16O)(17O)", 0.00074, 48.98896, "O3"],
    20: [3, 5, "(16O)(17O)(16O)", 0.00037, 48.98896, "O3"],
    21: [4, 1, "(14N)2(16O)", 0.990333, 44.001062, "N2O"],
    22: [4, 2, "(14N)(15N)(16O)", 0.0036409, 44.998096, "N2O"],
    23: [4, 3, "(15N)(14N)(16O)", 0.0036409, 44.998096, "N2O"],
    24: [4, 4, "(14N)2(18O)", 0.00198582, 46.005308, "N2O"],
    25: [4, 5, "(14N)2(17O)", 0.000369, 45.005278, "N2O"],
    26: [5, 1, "(12C)(16O)", 0.98654, 27.994915, "CO"],
    27: [5, 2, "(13C)(16O)", 0.01108, 28.99827, "CO"],
    28: [5, 3, "(12C)(18O)", 0.0019782, 29.999161, "CO"],
    29: [5, 4, "(12C)(17O)", 0.000368, 28.99913, "CO"],
    30: [5, 5, "(13C)(18O)", 0.00002222, 31.002516, "CO"],
    31: [5, 6, "(13C)(17O)", 0.00000413, 30.002485, "CO"],
    32: [6, 1, "(12C)H4", 0.98827, 16.0313, "CH4"],
    33: [6, 2, "(13C)H4", 0.0111, 17.034655, "CH4"],
    34: [6, 3, "(12C)H3D", 0.00061575, 17.037475, "CH4"],
    35: [6, 4, "(13C)H3D", 0.0000049203, 18.04083, "CH4"],
    36: [7, 1, "(16O)2", 0.995262, 31.98983, "O2"],
    37: [7, 2, "(16O)(18O)", 0.00399141, 33.994076, "O2"],
    38: [7, 3, "(16O)(17O)", 0.000742, 32.994045, "O2"],
    39: [8, 1, "(14N)(16O)", 0.993974, 29.997989, "NO"],
    40: [8, 2, "(15N)(16O)", 0.0036543, 30.995023, "NO"],
    41: [8, 3, "(14N)(18O)", 0.00199312, 32.002234, "NO"],
    42: [9, 1, "(32S)(16O)2", 0.94568, 63.961901, "SO2"],
    43: [9, 2, "(34S)(16O)2", 0.04195, 65.957695, "SO2"],
    44: [10, 1, "(14N)(16O)2", 0.991616, 45.992904, "NO2"],
    45: [11, 1, "(14N)H3", 0.9958715, 17.026549, "NH3"],
    46: [11, 2, "(15N)H3", 0.0036613, 18.023583, "NH3"],
    47: [12, 1, "H(14N)(16O)3", 0.98911, 62.995644, "HNO3"],
    117: [12, 2, "H(15N)(16O)3", 0.003636, 63.99268, "HNO3"],
    48: [13, 1, "(16O)H", 0.997473, 17.00274, "OH"],
    49: [13, 2, "(18O)H", 0.00200014, 19.006986, "OH"],
    50: [13, 3, "(16O)D", 0.00015537, 18.008915, "OH"],
    51: [14, 1, "H(19F)", 0.99984425, 20.006229, "HF"],
    110: [14, 2, "D(19F)", 0.000115, 21.0125049978, "HF"],
    52: [15, 1, "H(35Cl)", 0.757587, 35.976678, "HCl"],
    53: [15, 2, "H(37Cl)", 0.242257, 37.973729, "HCl"],
    107: [15, 3, "D(35Cl)", 0.000118005, 36.9829544578, "HCl"],
    108: [15, 4, "D(37Cl)", 0.000037735, 38.9800043678, "HCl"],
    54: [16, 1, "H(79Br)", 0.50678, 79.92616, "HBr"],
    55: [16, 2, "H(81Br)", 0.49306, 81.924115, "HBr"],
    111: [16, 3, "D(79Br)", 0.0000582935, 80.9324388778, "HBr"],
    112: [16, 4, "D(81Br)", 0.0000567065, 82.9303923778, "HBr"],
    56: [17, 1, "H(127I)", 0.99984425, 127.912297, "HI"],
    113: [17, 2, "D(127I)", 0.000115, 128.918574778, "HI"],
    57: [18, 1, "(35Cl)(16O)", 0.75591, 50.963768, "ClO"],
    58: [18, 2, "(37Cl)(16O)", 0.24172, 52.960819, "ClO"],
    59: [19, 1, "(16O)(12C)(32S)", 0.93739, 59.966986, "OCS"],
    60: [19, 2, "(16O)(12C)(34S)", 0.04158, 61.96278, "OCS"],
    61: [19, 3, "(16O)(13C)(32S)", 0.01053, 60.970341, "OCS"],
    62: [19, 4, "(16O)(12C)(33S)", 0.01053, 60.966371, "OCS"],
    63: [19, 5, "(18O)(12C)(32S)", 0.00188, 61.971231, "OCS"],
    64: [20, 1, "H2(12C)(16O)", 0.98624, 30.010565, "H2CO"],
    65: [20, 2, "H2(13C)(16O)", 0.01108, 31.01392, "H2CO"],
    66: [20, 3, "H2(12C)(18O)", 0.0019776, 32.014811, "H2CO"],
    67: [21, 1, "H(16O)(35Cl)", 0.75579, 51.971593, "HOCl"],
    68: [21, 2, "H(16O)(37Cl)", 0.24168, 53.968644, "HOCl"],
    69: [22, 1, "(14N)2", 0.9926874, 28.006147, "N2"],
    118: [22, 2, "(14N)(15N)", 0.0072535, 29.997989, "N2"],
    70: [23, 1, "H(12C)(14N)", 0.98511, 27.010899, "HCN"],
    71: [23, 2, "H(13C)(14N)", 0.01107, 28.014254, "HCN"],
    72: [23, 3, "H(12C)(15N)", 0.0036217, 28.007933, "HCN"],
    73: [24, 1, "(12C)H3(35Cl)", 0.74894, 49.992328, "CH3Cl"],
    74: [24, 2, "(12C)H3(37Cl)", 0.23949, 51.989379, "CH3Cl"],
    75: [25, 1, "H2(16O)2", 0.994952, 34.00548, "H2O2"],
    76: [26, 1, "(12C)2H2", 0.9776, 26.01565, "C2H2"],
    77: [26, 2, "(12C)(13C)H2", 0.02197, 27.019005, "C2H2"],
    105: [26, 3, "(12C)2HD", 0.00030455, 27.021825, "C2H2"],
    78: [27, 1, "(12C)2H6", 0.97699, 30.04695, "C2H6"],
    106: [27, 2, "(12C)H3(13C)H3", 0.021952611, 31.050305, "C2H6"],
    79: [28, 1, "(31P)H3", 0.99953283, 33.997238, "PH3"],
    80: [29, 1, "(12C)(16O)(19F)2", 0.98654, 65.991722, "COF2"],
    119: [29, 2, "(13C)(16O)(19F)2", 0.0110834, 66.995083, "COF2"],
    126: [30, 1, "(32S)(19F)6", 0.950180, 145.962492, "SF6"],
    81: [31, 1, "H2(32S)", 0.94988, 33.987721, "H2S"],
    82: [31, 2, "H2(34S)", 0.04214, 35.983515, "H2S"],
    83: [31, 3, "H2(33S)", 0.007498, 34.987105, "H2S"],
    84: [32, 1, "H(12C)(16O)(16O)H", 0.983898, 46.00548, "HCOOH"],
    85: [33, 1, "H(16O)2", 0.995107, 32.997655, "HO2"],
    86: [34, 1, "(16O)", 0.997628, 15.994915, "O"],
    87: [36, 1, "(14N)(16O)+", 0.993974, 29.997989, "NOp"],
    88: [37, 1, "H(16O)(79Br)", 0.5056, 95.921076, "HOBr"],
    89: [37, 2, "H(16O)(81Br)", 0.4919, 97.919027, "HOBr"],
    90: [38, 1, "(12C)2H4", 0.9773, 28.0313, "C2H4"],
    91: [38, 2, "(12C)H2(13C)H2", 0.02196, 29.034655, "C2H4"],
    92: [39, 1, "(12C)H3(16O)H", 0.98593, 32.026215, "CH3OH"],
    93: [40, 1, "(12C)H3(79Br)", 0.5013, 93.941811, "CH3Br"],
    94: [40, 2, "(12C)H3(81Br)", 0.48766, 95.939764, "CH3Br"],
    95: [41, 1, "(12C)H3(12C)(14N)", 0.97482, 41.026549, "CH3CN"],
    96: [42, 1, "(12C)(19F)4", 0.9893, 87.993616, "CF4"],
    116: [43, 1, "(12C)4H2", 0.955998, 50.01565, "C4H2"],
    109: [44, 1, "H(12C)3(14N)", 0.9646069, 51.01089903687, "HC3N"],
    103: [45, 1, "H2", 0.999688, 2.01565, "H2"],
    115: [45, 2, "HD", 0.000311432, 3.021825, "H2"],
    97: [46, 1, "(12C)(32S)", 0.939624, 43.971036, "CS"],
    98: [46, 2, "(12C)(34S)", 0.0416817, 45.966787, "CS"],
    99: [46, 3, "(13C)(32S)", 0.0105565, 44.974368, "CS"],
    100: [46, 4, "(12C)(33S)", 0.00741668, 44.970399, "CS"],
    114: [47, 1, "(32S)(16O)3", 0.9423964, 79.95682, "SO3"],
    123: [48, 1, "(12C)2(14N)2", 0.970752433, 52.006148, "C2N2"],
    124: [49, 1, "(12C)(16O)(35Cl)2", 0.566391761, 97.9326199796, "COCl2"],
    125: [49, 2, "(12C)(16O)(35Cl)(37Cl)", 0.362235278, 99.9296698896, "COCl2"],
    #    101 : [    1001,   1,  'H',                         None,               None,           'H'       ],
    #    102 : [    1002,   1,  'He',                        None,               None,           'He'      ],
    #    104 : [    1018,   1,  'Ar',                        None,               None,           'Ar'      ],
}

ISO_INDEX = {"id": 0, "iso_name": 1, "abundance": 2, "mass": 3, "mol_name": 4}

#        M    I             id    iso_name                    abundance           mass        mol_name

ISO = {
    (1, 1): [1, "H2(16O)", 0.997317, 18.010565, "H2O"],
    (1, 2): [2, "H2(18O)", 0.00199983, 20.014811, "H2O"],
    (1, 3): [3, "H2(17O)", 0.000372, 19.01478, "H2O"],
    (1, 4): [4, "HD(16O)", 0.00031069, 19.01674, "H2O"],
    (1, 5): [5, "HD(18O)", 0.000000623, 21.020985, "H2O"],
    (1, 6): [6, "HD(17O)", 0.000000116, 20.020956, "H2O"],
    (1, 7): [129, "D2(16O)", 0.000000024197, 20.022915, "H2O"],
    (2, 1): [7, "(12C)(16O)2", 0.984204, 43.98983, "CO2"],
    (2, 2): [8, "(13C)(16O)2", 0.011057, 44.993185, "CO2"],
    (2, 3): [9, "(16O)(12C)(18O)", 0.0039471, 45.994076, "CO2"],
    (2, 4): [10, "(16O)(12C)(17O)", 0.000734, 44.994045, "CO2"],
    (2, 5): [11, "(16O)(13C)(18O)", 0.00004434, 46.997431, "CO2"],
    (2, 6): [12, "(16O)(13C)(17O)", 0.00000825, 45.9974, "CO2"],
    (2, 7): [13, "(12C)(18O)2", 0.0000039573, 47.998322, "CO2"],
    (2, 8): [14, "(17O)(12C)(18O)", 0.00000147, 46.998291, "CO2"],
    (2, 9): [121, "(12C)(17O)2", 0.0000001368, 45.998262, "CO2"],
    (2, 10): [15, "(13C)(18O)2", 0.000000044967, 49.001675, "CO2"],  # 0->10
    (2, 11): [120, "(18O)(13C)(17O)", 0.00000001654, 48.00165, "CO2"],  # 'A'->11
    (2, 12): [122, "(13C)(17O)2", 0.0000000015375, 47.001618, "CO2"],  # 'B'->12
    (3, 1): [16, "(16O)3", 0.992901, 47.984745, "O3"],
    (3, 2): [17, "(16O)(16O)(18O)", 0.00398194, 49.988991, "O3"],
    (3, 3): [18, "(16O)(18O)(16O)", 0.00199097, 49.988991, "O3"],
    (3, 4): [19, "(16O)(16O)(17O)", 0.00074, 48.98896, "O3"],
    (3, 5): [20, "(16O)(17O)(16O)", 0.00037, 48.98896, "O3"],
    (4, 1): [21, "(14N)2(16O)", 0.990333, 44.001062, "N2O"],
    (4, 2): [22, "(14N)(15N)(16O)", 0.0036409, 44.998096, "N2O"],
    (4, 3): [23, "(15N)(14N)(16O)", 0.0036409, 44.998096, "N2O"],
    (4, 4): [24, "(14N)2(18O)", 0.00198582, 46.005308, "N2O"],
    (4, 5): [25, "(14N)2(17O)", 0.000369, 45.005278, "N2O"],
    (5, 1): [26, "(12C)(16O)", 0.98654, 27.994915, "CO"],
    (5, 2): [27, "(13C)(16O)", 0.01108, 28.99827, "CO"],
    (5, 3): [28, "(12C)(18O)", 0.0019782, 29.999161, "CO"],
    (5, 4): [29, "(12C)(17O)", 0.000368, 28.99913, "CO"],
    (5, 5): [30, "(13C)(18O)", 0.00002222, 31.002516, "CO"],
    (5, 6): [31, "(13C)(17O)", 0.00000413, 30.002485, "CO"],
    (6, 1): [32, "(12C)H4", 0.98827, 16.0313, "CH4"],
    (6, 2): [33, "(13C)H4", 0.0111, 17.034655, "CH4"],
    (6, 3): [34, "(12C)H3D", 0.00061575, 17.037475, "CH4"],
    (6, 4): [35, "(13C)H3D", 0.0000049203, 18.04083, "CH4"],
    (7, 1): [36, "(16O)2", 0.995262, 31.98983, "O2"],
    (7, 2): [37, "(16O)(18O)", 0.00399141, 33.994076, "O2"],
    (7, 3): [38, "(16O)(17O)", 0.000742, 32.994045, "O2"],
    (8, 1): [39, "(14N)(16O)", 0.993974, 29.997989, "NO"],
    (8, 2): [40, "(15N)(16O)", 0.0036543, 30.995023, "NO"],
    (8, 3): [41, "(14N)(18O)", 0.00199312, 32.002234, "NO"],
    (9, 1): [42, "(32S)(16O)2", 0.94568, 63.961901, "SO2"],
    (9, 2): [43, "(34S)(16O)2", 0.04195, 65.957695, "SO2"],
    (10, 1): [44, "(14N)(16O)2", 0.991616, 45.992904, "NO2"],
    (11, 1): [45, "(14N)H3", 0.9958715, 17.026549, "NH3"],
    (11, 2): [46, "(15N)H3", 0.0036613, 18.023583, "NH3"],
    (12, 1): [47, "H(14N)(16O)3", 0.98911, 62.995644, "HNO3"],
    (12, 2): [117, "H(15N)(16O)3", 0.003636, 63.99268, "HNO3"],
    (13, 1): [48, "(16O)H", 0.997473, 17.00274, "OH"],
    (13, 2): [49, "(18O)H", 0.00200014, 19.006986, "OH"],
    (13, 3): [50, "(16O)D", 0.00015537, 18.008915, "OH"],
    (14, 1): [51, "H(19F)", 0.99984425, 20.006229, "HF"],
    (14, 2): [110, "D(19F)", 0.000115, 21.0125049978, "HF"],
    (15, 1): [52, "H(35Cl)", 0.757587, 35.976678, "HCl"],
    (15, 2): [53, "H(37Cl)", 0.242257, 37.973729, "HCl"],
    (15, 3): [107, "D(35Cl)", 0.000118005, 36.9829544578, "HCl"],
    (15, 4): [108, "D(37Cl)", 0.000037735, 38.9800043678, "HCl"],
    (16, 1): [54, "H(79Br)", 0.50678, 79.92616, "HBr"],
    (16, 2): [55, "H(81Br)", 0.49306, 81.924115, "HBr"],
    (16, 3): [111, "D(79Br)", 0.0000582935, 80.9324388778, "HBr"],
    (16, 4): [112, "D(81Br)", 0.0000567065, 82.9303923778, "HBr"],
    (17, 1): [56, "H(127I)", 0.99984425, 127.912297, "HI"],
    (17, 2): [113, "D(127I)", 0.000115, 128.918574778, "HI"],
    (18, 1): [57, "(35Cl)(16O)", 0.75591, 50.963768, "ClO"],
    (18, 2): [58, "(37Cl)(16O)", 0.24172, 52.960819, "ClO"],
    (19, 1): [59, "(16O)(12C)(32S)", 0.93739, 59.966986, "OCS"],
    (19, 2): [60, "(16O)(12C)(34S)", 0.04158, 61.96278, "OCS"],
    (19, 3): [61, "(16O)(13C)(32S)", 0.01053, 60.970341, "OCS"],
    (19, 4): [62, "(16O)(12C)(33S)", 0.01053, 60.966371, "OCS"],
    (19, 5): [63, "(18O)(12C)(32S)", 0.00188, 61.971231, "OCS"],
    (20, 1): [64, "H2(12C)(16O)", 0.98624, 30.010565, "H2CO"],
    (20, 2): [65, "H2(13C)(16O)", 0.01108, 31.01392, "H2CO"],
    (20, 3): [66, "H2(12C)(18O)", 0.0019776, 32.014811, "H2CO"],
    (21, 1): [67, "H(16O)(35Cl)", 0.75579, 51.971593, "HOCl"],
    (21, 2): [68, "H(16O)(37Cl)", 0.24168, 53.968644, "HOCl"],
    (22, 1): [69, "(14N)2", 0.9926874, 28.006147, "N2"],
    (22, 2): [118, "(14N)(15N)", 0.0072535, 29.997989, "N2"],
    (23, 1): [70, "H(12C)(14N)", 0.98511, 27.010899, "HCN"],
    (23, 2): [71, "H(13C)(14N)", 0.01107, 28.014254, "HCN"],
    (23, 3): [72, "H(12C)(15N)", 0.0036217, 28.007933, "HCN"],
    (24, 1): [73, "(12C)H3(35Cl)", 0.74894, 49.992328, "CH3Cl"],
    (24, 2): [74, "(12C)H3(37Cl)", 0.23949, 51.989379, "CH3Cl"],
    (25, 1): [75, "H2(16O)2", 0.994952, 34.00548, "H2O2"],
    (26, 1): [76, "(12C)2H2", 0.9776, 26.01565, "C2H2"],
    (26, 2): [77, "(12C)(13C)H2", 0.02197, 27.019005, "C2H2"],
    (26, 3): [105, "(12C)2HD", 0.00030455, 27.021825, "C2H2"],
    (27, 1): [78, "(12C)2H6", 0.97699, 30.04695, "C2H6"],
    (27, 2): [106, "(12C)H3(13C)H3", 0.021952611, 31.050305, "C2H6"],
    (28, 1): [79, "(31P)H3", 0.99953283, 33.997238, "PH3"],
    (29, 1): [80, "(12C)(16O)(19F)2", 0.98654, 65.991722, "COF2"],
    (29, 2): [119, "(13C)(16O)(19F)2", 0.0110834, 66.995083, "COF2"],
    (30, 1): [126, "(32S)(19F)6", 0.950180, 145.962492, "SF6"],
    (31, 1): [81, "H2(32S)", 0.94988, 33.987721, "H2S"],
    (31, 2): [82, "H2(34S)", 0.04214, 35.983515, "H2S"],
    (31, 3): [83, "H2(33S)", 0.007498, 34.987105, "H2S"],
    (32, 1): [84, "H(12C)(16O)(16O)H", 0.983898, 46.00548, "HCOOH"],
    (33, 1): [85, "H(16O)2", 0.995107, 32.997655, "HO2"],
    (34, 1): [86, "(16O)", 0.997628, 15.994915, "O"],
    (36, 1): [87, "(14N)(16O)+", 0.993974, 29.997989, "NOp"],
    (37, 1): [88, "H(16O)(79Br)", 0.5056, 95.921076, "HOBr"],
    (37, 2): [89, "H(16O)(81Br)", 0.4919, 97.919027, "HOBr"],
    (38, 1): [90, "(12C)2H4", 0.9773, 28.0313, "C2H4"],
    (38, 2): [91, "(12C)H2(13C)H2", 0.02196, 29.034655, "C2H4"],
    (39, 1): [92, "(12C)H3(16O)H", 0.98593, 32.026215, "CH3OH"],
    (40, 1): [93, "(12C)H3(79Br)", 0.5013, 93.941811, "CH3Br"],
    (40, 2): [94, "(12C)H3(81Br)", 0.48766, 95.939764, "CH3Br"],
    (41, 1): [95, "(12C)H3(12C)(14N)", 0.97482, 41.026549, "CH3CN"],
    (42, 1): [96, "(12C)(19F)4", 0.9893, 87.993616, "CF4"],
    (43, 1): [116, "(12C)4H2", 0.955998, 50.01565, "C4H2"],
    (44, 1): [109, "H(12C)3(14N)", 0.9646069, 51.01089903687, "HC3N"],
    (45, 1): [103, "H2", 0.999688, 2.01565, "H2"],
    (45, 2): [115, "HD", 0.000311432, 3.021825, "H2"],
    (46, 1): [97, "(12C)(32S)", 0.939624, 43.971036, "CS"],
    (46, 2): [98, "(12C)(34S)", 0.0416817, 45.966787, "CS"],
    (46, 3): [99, "(13C)(32S)", 0.0105565, 44.974368, "CS"],
    (46, 4): [100, "(12C)(33S)", 0.00741668, 44.970399, "CS"],
    (47, 1): [114, "(32S)(16O)3", 0.9423964, 79.95682, "SO3"],
    (48, 1): [123, "(12C)2(14N)2", 0.970752433, 52.006148, "C2N2"],
    (49, 1): [124, "(12C)(16O)(35Cl)2", 0.566391761, 97.9326199796, "COCl2"],
    (49, 2): [125, "(12C)(16O)(35Cl)(37Cl)", 0.362235278, 99.9296698896, "COCl2"],
    # (     1001,   1    ): [    101,  'H',                         None,               None,           'H'       ],
    # (     1002,   1    ): [    102,  'He',                        None,               None,           'He'      ],
    # (     1018,   1    ): [    104,  'Ar',                        None,               None,           'Ar'      ],
}


def print_iso():
    print('The dictionary "ISO" contains information on isotopologues in HITRAN\n')
    print(
        "   M    I          id                  iso_name   abundance      mass        mol_name"
    )
    for i in ISO:
        ab = ISO[i][ISO_INDEX["abundance"]]
        ma = ISO[i][ISO_INDEX["mass"]]
        ab = ab if ab else -1
        ma = ma if ma else -1
        print(
            "%4i %4i     : %5i %25s %10f %10f %15s"
            % (
                i[0],
                i[1],
                ISO[i][ISO_INDEX["id"]],
                ISO[i][ISO_INDEX["iso_name"]],
                ab,
                ma,
                ISO[i][ISO_INDEX["mol_name"]],
            )
        )


def print_iso_id():
    print(
        'The dictionary "ISO_ID" contains information on "global" IDs of isotopologues in HITRAN\n'
    )
    print(
        "   id            M    I                    iso_name       abundance       mass        mol_name"
    )
    for i in ISO_ID:
        ab = ISO_ID[i][ISO_ID_INDEX["abundance"]]
        ma = ISO_ID[i][ISO_ID_INDEX["mass"]]
        ab = ab if ab else -1
        ma = ma if ma else -1
        print(
            "%5i     :   %4i %4i   %25s %15.10f %10f %15s"
            % (
                i,
                ISO_ID[i][ISO_ID_INDEX["M"]],
                ISO_ID[i][ISO_ID_INDEX["I"]],
                ISO_ID[i][ISO_ID_INDEX["iso_name"]],
                ab,
                ma,
                ISO_ID[i][ISO_ID_INDEX["mol_name"]],
            )
        )


profiles = "profiles"


def print_profiles():
    print("Profiles available:")
    print("  HT        : PROFILE_HT")
    print("  SDRautian : PROFILE_SDRAUTIAN")
    print("  Rautian   : PROFILE_RAUTIAN")
    print("  SDVoigt   : PROFILE_SDVOIGT")
    print("  Voigt     : PROFILE_VOIGT")
    print("  Lorentz   : PROFILE_LORENTZ")
    print("  Doppler   : PROFILE_DOPPLER")


slit_functions = "slit_functions"


def print_slit_functions():
    print("  RECTANGULAR : SLIT_RECTANGULAR")
    print("  TRIANGULAR  : SLIT_TRIANGULAR")
    print("  GAUSSIAN    : SLIT_GAUSSIAN")
    print("  DIFFRACTION : SLIT_DIFFRACTION")
    print("  MICHELSON   : SLIT_MICHELSON")
    print("  DISPERSION/LORENTZ : SLIT_DISPERSION")


tutorial = "tutorial"
units = "units"
index = "index"
data = "data"
spectra = "spectra"
plotting = "plotting"
python = "python"

python_tutorial_text = """
THIS TUTORIAL IS TAKEN FROM http://www.stavros.io/tutorials/python/
AUTHOR: Stavros Korokithakis


----- LEARN PYTHON IN 10 MINUTES -----


PRELIMINARY STUFF

So, you want to learn the Python programming language but can't find a concise
and yet full-featured tutorial. This tutorial will attempt to teach you Python in 10 minutes.
It's probably not so much a tutorial as it is a cross between a tutorial and a cheatsheet,
so it will just show you some basic concepts to start you off. Obviously, if you want to
really learn a language you need to program in it for a while. I will assume that you are
already familiar with programming and will, therefore, skip most of the non-language-specific stuff.
The important keywords will be highlighted so you can easily spot them. Also, pay attention because,
due to the terseness of this tutorial, some things will be introduced directly in code and only
briefly commented on.


PROPERTIES

Python is strongly typed (i.e. types are enforced), dynamically, implicitly typed (i.e. you don't
have to declare variables), case sensitive (i.e. var and VAR are two different variables) and
object-oriented (i.e. everything is an object).


GETTING HELP

Help in Python is always available right in the interpreter. If you want to know how an object works,
all you have to do is call help(<object>)! Also useful are dir(), which shows you all the object's methods,
and <object>.__doc__, which shows you its documentation string:

>>> help(5)
Help on int object:
(etc etc)

>>> dir(5)
['__abs__', '__add__', ...]

>>> abs.__doc__
'abs(number) -> number

Return the absolute value of the argument.'


SYNTAX

Python has no mandatory statement termination characters and blocks are specified by indentation.
Indent to begin a block, dedent to end one. Statements that expect an indentation level end in a colon (:).
Comments start with the pound (#) sign and are single-line, multi-line strings are used for multi-line comments.
Values are assigned (in fact, objects are bound to names) with the _equals_ sign ("="), and equality testing is
done using two _equals_ signs ("=="). You can increment/decrement values using the += and -= operators respectively
by the right-hand amount. This works on many datatypes, strings included. You can also use multiple variables on one
line. For example:

>>> myvar = 3
>>> myvar += 2
>>> myvar
5

>>> myvar -= 1
>>> myvar
4

\"\"\"This is a multiline comment.
The following lines concatenate the two strings.\"\"\"

>>> mystring = "Hello"
>>> mystring += " world."
>>> print mystring
Hello world.

# This swaps the variables in one line(!).
# It doesn't violate strong typing because values aren't
# actually being assigned, but new objects are bound to
# the old names.
>>> myvar, mystring = mystring, myvar


DATA TYPES

The data structures available in python are lists, tuples and dictionaries.
Sets are available in the sets library (but are built-in in Python 2.5 and later).
Lists are like one-dimensional arrays (but you can also have lists of other lists),
dictionaries are associative arrays (a.k.a. hash tables) and tuples are immutable
one-dimensional arrays (Python "arrays" can be of any type, so you can mix e.g. integers,
strings, etc in lists/dictionaries/tuples). The index of the first item in all array types is 0.
Negative numbers count from the end towards the beginning, -1 is the last item. Variables
can point to functions. The usage is as follows:

>>> sample = [1, ["another", "list"], ("a", "tuple")]
>>> mylist = ["List item 1", 2, 3.14]
>>> mylist[0] = "List item 1 again" # We're changing the item.
>>> mylist[-1] = 3.21 # Here, we refer to the last item.
>>> mydict = {"Key 1": "Value 1", 2: 3, "pi": 3.14}
>>> mydict["pi"] = 3.15 # This is how you change dictionary values.
>>> mytuple = (1, 2, 3)
>>> myfunction = len
>>> print myfunction(mylist)
3


You can access array ranges using a colon (:). Leaving the start index empty assumes the first item,
leaving the end index assumes the last item. Negative indexes count from the last item backwards
(thus -1 is the last item) like so:

>>> mylist = ["List item 1", 2, 3.14]
>>> print mylist[:]
['List item 1', 2, 3.1400000000000001]

>>> print mylist[0:2]
['List item 1', 2]

>>> print mylist[-3:-1]
['List item 1', 2]

>>> print mylist[1:]
[2, 3.14]

# Adding a third parameter, "step" will have Python step in
# N item increments, rather than 1.
# E.g., this will return the first item, then go to the third and
# return that (so, items 0 and 2 in 0-indexing).
>>> print mylist[::2]
['List item 1', 3.14]


STRINGS

Its strings can use either single or double quotation marks, and you can have quotation
marks of one kind inside a string that uses the other kind (i.e. "He said 'hello'." is valid).
Multiline strings are enclosed in _triple double (or single) quotes_ (\"\"\").
Python supports Unicode out of the box, using the syntax u"This is a unicode string".
To fill a string with values, you use the % (modulo) operator and a tuple.
Each %s gets replaced with an item from the tuple, left to right, and you can also use
dictionary substitutions, like so:

>>>print "Name: %s\
Number: %s\
String: %s" % (myclass.name, 3, 3 * "-")

Name: Poromenos
Number: 3
String: ---

strString = \"\"\"This is
a multiline
string.\"\"\"

# WARNING: Watch out for the trailing s in "%(key)s".
>>> print "This %(verb)s a %(noun)s." % {"noun": "test", "verb": "is"}
This is a test.


FLOW CONTROL STATEMENTS

Flow control statements are if, for, and while. There is no select; instead, use if.
Use for to enumerate through members of a list. To obtain a list of numbers,
use range(<number>). These statements' syntax is thus:

rangelist = range(10)
>>> print rangelist
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> for number in rangelist:
        # Check if number is one of
        # the numbers in the tuple.
        if number in (3, 4, 7, 9):
            # "Break" terminates a for without
            # executing the "else" clause.
            break
        else:
            # "Continue" starts the next iteration
            # of the loop. It's rather useless here,
            # as it's the last statement of the loop.
            continue
    else:
        # The "else" clause is optional and is
        # executed only if the loop didn't "break".
        pass # Do nothing

>>> if rangelist[1] == 2:
        print "The second item (lists are 0-based) is 2"
    elif rangelist[1] == 3:
        print "The second item (lists are 0-based) is 3"
    else:
        print "Dunno"

>>> while rangelist[1] == 1:
        pass


FUNCTIONS

Functions are declared with the "def" keyword. Optional arguments are set in
the function declaration after the mandatory arguments by being assigned a default
value. For named arguments, the name of the argument is assigned a value.
Functions can return a tuple (and using tuple unpacking you can effectively return
multiple values). Lambda functions are ad hoc functions that are comprised of
a single statement. Parameters are passed by reference, but immutable types (tuples,
ints, strings, etc) *cannot be changed*. This is because only the memory location of
the item is passed, and binding another object to a variable discards the old one,
so immutable types are replaced. For example:

# Same as def funcvar(x): return x + 1
>>> funcvar = lambda x: x + 1
>>> print funcvar(1)
2

# an_int and a_string are optional, they have default values
# if one is not passed (2 and "A default string", respectively).
>>> def passing_example(a_list, an_int=2, a_string="A default string"):
        a_list.append("A new item")
        an_int = 4
        return a_list, an_int, a_string

>>> my_list = [1, 2, 3]
>>> my_int = 10
>>> print passing_example(my_list, my_int)
([1, 2, 3, 'A new item'], 4, "A default string")

>>> my_list
[1, 2, 3, 'A new item']

>>> my_int
10


CLASSES

Python supports a limited form of multiple inheritance in classes.
Private variables and methods can be declared (by convention, this is not enforced
by the language) by adding at least two leading underscores and at most one trailing
one (e.g. "__spam"). We can also bind arbitrary names to class instances.
An example follows:

>>> class MyClass(object):
        common = 10
        def __init__(self):
            self.myvariable = 3
        def myfunction(self, arg1, arg2):
            return self.myvariable

# This is the class instantiation
>>> classinstance = MyClass()
>>> classinstance.myfunction(1, 2)
3

# This variable is shared by all classes.
>>> classinstance2 = MyClass()
>>> classinstance.common
10

>>> classinstance2.common
10

# Note how we use the class name
# instead of the instance.
>>> MyClass.common = 30
>>> classinstance.common
30

>>> classinstance2.common
30

# This will not update the variable on the class,
# instead it will bind a new object to the old
# variable name.
>>> classinstance.common = 10
>>> classinstance.common
10

>>> classinstance2.common
30

>>> MyClass.common = 50
# This has not changed, because "common" is
# now an instance variable.
>>> classinstance.common
10

>>> classinstance2.common
50

# This class inherits from MyClass. The example
# class above inherits from "object", which makes
# it what's called a "new-style class".
# Multiple inheritance is declared as:
# class OtherClass(MyClass1, MyClass2, MyClassN)
>>> class OtherClass(MyClass):
        # The "self" argument is passed automatically
        # and refers to the class instance, so you can set
        # instance variables as above, but from inside the class.
        def __init__(self, arg1):
            self.myvariable = 3
            print arg1

>>> classinstance = OtherClass("hello")
hello

>>> classinstance.myfunction(1, 2)
3

# This class doesn't have a .test member, but
# we can add one to the instance anyway. Note
# that this will only be a member of classinstance.
>>> classinstance.test = 10
>>> classinstance.test
10


EXCEPTIONS

Exceptions in Python are handled with try-except [exceptionname] blocks:

>>> def some_function():
        try:
            # Division by zero raises an exception
            10 / 0
        except ZeroDivisionError:
            print "Oops, invalid."
        else:
            # Exception didn't occur, we're good.
            pass
        finally:
            # This is executed after the code block is run
            # and all exceptions have been handled, even
            # if a new exception is raised while handling.
            print "We're done with that."

>>> some_function()
Oops, invalid.

We're done with that.


IMPORTING:

External libraries are used with the import [libname] keyword.
You can also use from [libname] import [funcname] for individual functions.
Here is an example:

>>> import random
>>> from time import clock

>>> randomint = random.randint(1, 100)
>>> print randomint
64


FILE I/O

Python has a wide array of libraries built in. As an example, here is how serializing
(converting data structures to strings using the pickle library) with file I/O is used:

>>> import pickle
>>> mylist = ["This", "is", 4, 13327]
# Open the file C:\\binary.dat for writing. The letter r before the
# filename string is used to prevent backslash escaping.
>>> yfile = open(r"C:\\binary.dat", "w")
>>> pickle.dump(mylist, myfile)
>>> myfile.close()

>>> myfile = open(r"C:\\text.txt", "w")
>>> myfile.write("This is a sample string")
>>> myfile.close()

>>> myfile = open(r"C:\\text.txt")
>>> print myfile.read()
'This is a sample string'

>>> myfile.close()

# Open the file for reading.
>>> myfile = open(r"C:\\binary.dat")
>>> loadedlist = pickle.load(myfile)
>>> myfile.close()
>>> print loadedlist
['This', 'is', 4, 13327]


MISCELLANEOUS

    -> Conditions can be chained. 1 < a < 3 checks
       that a is both less than 3 and greater than 1.
    -> You can use del to delete variables or items in arrays.
    -> List comprehensions provide a powerful way to create
       and manipulate lists. They consist of an expression
       followed by a for clause followed by zero or more
       if or for clauses, like so:

>>> lst1 = [1, 2, 3]
>>> lst2 = [3, 4, 5]
>>> print [x * y for x in lst1 for y in lst2]
[3, 4, 5, 6, 8, 10, 9, 12, 15]

>>> print [x for x in lst1 if 4 > x > 1]
[2, 3]

# Check if a condition is true for any items.
# "any" returns true if any item in the list is true.
>>> any([i % 3 for i in [3, 3, 4, 4, 3]])
True

# This is because 4 % 3 = 1, and 1 is true, so any()
# returns True.

# Check for how many items a condition is true.
>>> sum(1 for i in [3, 3, 4, 4, 3] if i == 4)
2

>>> del lst1[0]
>>> print lst1
[2, 3]

>>> del lst1



    -> Global variables are declared outside of functions
       and can be read without any special declarations,
       but if you want to write to them you must declare them
       at the beginning of the function with the "global" keyword,
       otherwise Python will bind that object to a new local
       variable (be careful of that, it's a small catch that can
       get you if you don't know it). For example:

>>> number = 5

>>> def myfunc():
        # This will print 5.
        print number

>>> def anotherfunc():
        # This raises an exception because the variable has not
        # been bound before printing. Python knows that it an
        # object will be bound to it later and creates a new, local
        # object instead of accessing the global one.
        print number
        number = 3

>>> def yetanotherfunc():
        global number
        # This will correctly change the global.
        number = 3


EPILOGUE

This tutorial is not meant to be an exhaustive list of all (or even a subset) of Python.
Python has a vast array of libraries and much much more functionality which you will
have to discover through other means, such as the excellent book Dive into Python.
I hope I have made your transition in Python easier. Please leave comments if you believe
there is something that could be improved or added or if there is anything else
you would like to see (classes, error handling, anything).

"""


def print_python_tutorial():
    pydoc.pager(python_tutorial_text)


data_tutorial_text = """

ACCESS YOUR DATA!

Welcome to tutorial on retrieving and processing the data from HITRANonline.


  ///////////////
 /// PREFACE ///
///////////////

HITRANonline API is a set of routines in Python which is aimed to
provide a remote access to functionality and data given by a new project
HITRANonline (http://hitranazure.cloudapp.net).

At the present moment the API can download, filter and process data on
molecular and atomic line-by-line spectra which is provided by HITRANonline portal.

One of the major purposes of introducing API is extending a functionality
of the main site, particularly providing a possibility to calculate several
types of high- and low-resolution spectra based on a flexible HT lineshape.

Each feature of API is represented by a Python function with a set of parameters
providing a flexible approach to the task.


  ///////////////////////
 /// FEATURE SUMMARY ///
///////////////////////

1) Downloading line-by-line data from the HITRANonline site to local database.
2) Filtering and processing the data in SQL-like fashion.
3) Conventional Python structures (lists, tuples, dictionaries) for representing
   a spectroscopic data.
4) Possibility to use a large set of third-party Python libraries to work with a data
5) Python implementation of an HT (Hartmann-Tran [1]) lineshape which is used in spectra.
   simulations. This lineshape can also be reduced to a number of conventional
   line profiles such as Gaussian (Doppler), Lorentzian, Voigt, Rautian,
   Speed-dependent Voigt and Rautian.
6) Python implementation of total internal partition sums (TIPS-2011 [2])
   which is used in spectra simulations.
7) High-resolution spectra simulation accounting pressure,
   temperature and optical path length. The following spectral functions
   can be calculated:
      a) absorption coefficient
      b) absorption spectrum
      c) transmittance spectrum
      d) radiance spectrum
8) Low-resolution spectra simulation using a number of apparatus functions.
9) Possibility to extend with the user's functionality by adding custom lineshapes,
   partitions sums and apparatus functions.

References:

[1] N.H. Ngo, D. Lisak, H. Tran, J.-M. Hartmann.
    An isolated line-shape model to go beyond the Voigt profile in
    spectroscopic databases and radiative transfer codes.
    JQSRT, Volume 129, November 2013, Pages 89–100
    http://dx.doi.org/10.1016/j.jqsrt.2013.05.034

[2] A. L. Laraia, R. R. Gamache, J. Lamouroux, I. E. Gordon, L. S. Rothman.
    Total internal partition sums to support planetary remote sensing.
    Icarus, Volume 215, Issue 1, September 2011, Pages 391–400
    http://dx.doi.org/10.1016/j.icarus.2011.06.004

_______________________________________________________________________


This tutorial will give you an insight of how to use HAPI for Python.

First, let's choose a folder for our local database. Every time you start
your Python project, you have to specify explicitly the name of the
database folder.

>>> db_begin('data')

So, let's download some data from the server and do some processing on it.
Suppose that we want to get line by line data on the main isotopologue of H2O.

For retrieving the data to the local database, user have to specify the following parameters:
1) Name of the local table which will store the downloaded data.
2) Either a pair of molecule and isotopologue HITRAN numbers (M and I),
   or a "global" isotopologue ID (iso_id).
3) Wavenumber range (nu_min and nu_max)

N.B. If you specify the name which already exists in the database,
the existing table with that name will be overrided.

To get additional information on function fetch,
call getHelp:

>>> getHelp(fetch)
...

To download the data, simply call the function "fetch".
This will establish a connection with the main server and get the data using
the parameters listed above:

>>> fetch('H2O',1,1,3400,4100)
BEGIN DOWNLOAD: H2O
  65536 bytes written to data/H2O.data
  65536 bytes written to data/H2O.data
  65536 bytes written to data/H2O.data
...
  65536 bytes written to data/H2O.data
  65536 bytes written to data/H2O.data
  65536 bytes written to data/H2O.data
Header written to data/H2O.header
END DOWNLOAD
                     Lines parsed: 7524
PROCESSED

The output is shown right after the console line ">>>".
To check the file that you've just downloaded you can open the database
folder. The new plain text file should have a name "H2O.data" and
it should contain line-by-line data in HITRAN format.

N.B. If we want several isotopologues in one table, we should
use fetch_by_ids instead of just fetch. Fetch_by_ids takes a "global"
isotopologue ID numbers as an input instead of HITRAN's "local" identification.
See getHelp(fetch_by_ids) to get more information on this.

To get a list of tables which are already in the database,
use tableList() function (it takes no arguments):
>>> tableList()

To learn about the table we just downloaded, let's use a function "describeTable".

>>> describeTable('H2O')
-----------------------------------------
H2O summary:
-----------------------------------------
Comment:
Contains lines for H2(16O)
 in 3400.000-4100.000 wavenumber range
Number of rows: 7524
Table type: column-fixed
-----------------------------------------
            PAR_NAME           PAR_FORMAT

            molec_id                  %2d
        local_iso_id                  %1d
                  nu               %12.6f
                  sw               %10.3E
                   a               %10.3E
           gamma_air                %5.4f
          gamma_self                %5.3f
              elower               %10.4f
               n_air                %4.2f
           delta_air                %8.6f
 global_upper_quanta                 %15s
 global_lower_quanta                 %15s
  local_upper_quanta                 %15s
  local_lower_quanta                 %15s
                ierr                  %6s
                iref                 %12s
    line_mixing_flag                  %1s
                  gp                %7.1f
                 gpp                %7.1f
-----------------------------------------

This output tells how many rows are currenty in the table H2O, which
wavenumber range was used by fetch(). Also this gives a basic information
about parameters stored in the table.

So, having the table downloaded, one can perform different operations on it
using API.

Here is a list of operations currently available with API:
1) FILTERING
2) OUTPUTTING
3) SORTING
4) GROUPING


  ////////////////////////////////
 /// FILTERING AND OUTPUTTING ///
////////////////////////////////

The table data can be filtered with the help of select() function.

Use simple select() call to output the table content:

>>> select('H2O')
MI          nu         S         A gair gsel        E_nair    dair  ...
11 1000.288940 1.957E-24 2.335E-02.07100.350 1813.22270.680.008260  ...
11 1000.532321 2.190E-28 1.305E-05.04630.281 2144.04590.39-.011030  ...
...

This will display the list of line parameters containing in the table "H2O".

That's the simplest way of using the function select(). Full information
on control parameters can be obtained via getHelp(select) statement.

Suppose that we need a lines from a table within some wavenumber range.
That's what filtering is for. Let's apply a simple range filter on a table.

>>> select('H2O',Conditions=('between','nu',4000,4100))
MI          nu         S         A gair gsel        E_nair    dair
 11 4000.188800 1.513E-25 1.105E-02.03340.298 1581.33570.51-.013910 ...
 11 4000.204070 3.482E-24 8.479E-03.08600.454  586.47920.61-.007000 ...
 11 4000.469910 3.268E-23 1.627E+00.05410.375 1255.91150.56-.013050 ...
......

As a result of this operation, we see a list of lines of H2O table,
whose wavenumbers lie between 4000 cm-1 and 4100 cm-1.
The condition is taken as an input parameter to API function "select".

To specify a subset of columns to display, use another control parameter -
ParameterNames:

>>> select('H2O',ParameterNames=('nu','sw'),Conditions=('between','nu',4000,4100))

The usage of ParameterNames is outlined below in the section "Specifying a list
of parameters". So far it worth mentioning that this parameter is a part
of a powerful tool for displaying and processing tables from database.

In the next section we will show how to create quieries
with more complex conditions.


  ////////////////////////////
 /// FILTERING CONDITIONS ///
////////////////////////////

Let's analyze the last example of filtering. Condition input variable is
as follows:

                    ('between','nu',4000,4100)

Thus, this is a python list (or tuple), containing logical expressions
defined under column names of the table. For example, 'nu' is a name of
the column in 'H2O' table, and this column contains a transition wavenumber.
The structure of a simple condition is as follows:

                    (OPERATION,ARG1,ARG2,...)

Where OPERATION must be in a set of predefined operations (see below),
and ARG1,ARG2 etc. are the arguments for this operation.
Conditions can be nested, i.e. ARG can itself be a condition (see examples).
The following operations are available in select (case insensitive):


DESCRIPTION                   LITERAL                     EXAMPLE
---------------------------------------------------------------------------------
Range:               'RANGE','BETWEEN':         ('BETWEEN','nu',0,1000)
Subset:              'IN','SUBSET':             ('IN','local_iso_id',[1,2,3,4])
And:                 '&','&&','AND':            ('AND',('<','nu',1000),('>','nu',10))
Or:                  '|','||','OR':             ('OR',('>','nu',1000),('<','nu',10))
Not:                 '!','NOT':                 ('NOT',('IN','local_iso_id',[1,2,3]))
Less than:           '<','LESS','LT':                 ('<','nu',1000)
More than:           '>','MORE','MT':                 ('>','sw',1.0e-20)
Less or equal than:  '<=','LESSOREQUAL','LTE':        ('<=','local_iso_id',10)
More or equal than   '>=','MOREOREQUAL','MTE':        ('>=','sw',1e-20)
Equal:               '=','==','EQ','EQUAL','EQUALS':  ('<=','local_iso_id',10)
Not equal:           '!=','<>','~=','NE','NOTEQUAL':  ('!=','local_iso_id',1)
Summation:           '+','SUM':                 ('+','v1','v2','v3')
Difference:          '-','DIFF':                ('-','nu','elow')
Multiplication:      '*','MUL':                 ('*','sw',0.98)
Division:            '/','DIV':                 ('/','A',2)
Cast to string:      'STR','STRING':            ('STR','some_string')
Cast to Python list  'LIST':                    ('LIST',[1,2,3,4,5])
Match regexp         'MATCH','LIKE':            ('MATCH','\w+','some string')
Search single match: 'SEARCH':                  ('SEARCH','\d \d \d','1 2 3 4')
Search all matches:  'FINDALL':                 ('FINDALL','\d','1 2 3 4 5')
Count within group:  'COUNT' :                  ('COUNT','local_iso_id')
---------------------------------------------------------------------------------

Let's create a query with more complex condition. Suppese that we are
interested in all lines between 3500 and 4000 with 1e-19 intensity cutoff.
The query will look like this:

>>> Cond = ('AND',('BETWEEN','nu',3500,4000),('>=','Sw',1e-19))
>>> select('H2O',Conditions=Cond,DestinationTableName='tmp')

Here, apart from other parameters, we have used a new parameter
DestinationTableName. This parameter contains a name of the table
where we want to put a result of the query. Thus we have chosen
a name 'tmp' for a new table.


  ////////////////////////////////////
 /// ACCESSING COLUMNS IN A TABLE ///
////////////////////////////////////

To get an access to particular table column (or columns) all we need
is to get a column from a table and put it to Python variable.

For this purpose, there exist two functions:

  getColumn(...)
  getColumns(...)

The first one returns just one column at a time. The second one returns
a list of solumns.

So, here are some examples of how to use both:

>>> nu1 = getColumn('H2O','nu')
>>> nu2,sw2 = getColumns('H2O',['nu','sw'])

N.B. If you don't remember exact names of columns in a particular table,
use describeTable to get an info on it's structure!


  ///////////////////////////////////////
 /// SPECIFYING A LIST OF PARAMETERS ///
///////////////////////////////////////

Suppose that we want not only select a set of parameters/columns
from a table, but do a certain transformations with them (for example,
multiply column on a coefficient, or add one column to another etc...).
We can make it in two ways. First, we can extract a column from table
using one of the functions (getColumn or getColumns) and do the rest
in Python. The second way is to do it on the level of select.
The select function has a control parameter "ParameterNames", which
makes it possible to specify parameters we want to be selected,
and evaluate some simple arithmetic expressions with them.

Assume that we need only wavenumber and intensity from H2O table.
Also we need to scale an intensity to the unitary abundance. To do so,
we must divide an 'sw' parameter by it's natural abundance (0.99731) for
principal isotopologue of water).

Thus, we have to select two columns:
wavenumber (nu) and scaled intensity (sw/0.99731)
>>> select('H2O',)


  ////////////////////////////
 /// SAVING QUERY TO DISK ///
////////////////////////////

To quickly save a result of a query to disk, the user can take an
advantage of an additional parameter "File".
If this parameter is presented in function call, then the query is
saved to file with the name which was specified in "File".

For example, select all lines from H2O and save the result in file 'H2O.txt':
>>> select('H2O',File='H2O.txt')


  ////////////////////////////////////////////
 /// GETTING INFORMATION ON ISOTOPOLOGUES ///
////////////////////////////////////////////

API provides the following auxillary information about isotopologues
present in HITRAN. Corresponding functions use the standard HITRAN
molecule-isotopologue notation:

1) Natural abundances
>>> abundance(mol_id,iso_id)

2) Molecular masses
>>> molecularMass(mol_id,iso_id)

3) Molecule names
>>> moleculeName(mol_id,iso_id)

4) Isotopologue names
>>> isotopologueName(mol_id,iso_id)

5) ISO_ID
>>> getHelp(ISO_ID)

The latter is a dictionary, which contain all information about
isotopologues concentrated in one place.

"""


def print_data_tutorial():
    pydoc.pager(data_tutorial_text)


spectra_tutorial_text = """

CALCULATE YOUR SPECTRA!

Welcome to tutorial on calculating a spectra from line-by-line data.


  ///////////////
 /// PREFACE ///
///////////////

This tutorial will demonstrate how to use different lineshapes and partition
functions, and how to calculate synthetic spectra with respect to different
instruments. It will be shown how to combine different parameters of spectral
calculation to achieve better precision and performance for cross sections.

API provides a powerful tool to calculate cross-sections based on line-by-line
data containing in HITRAN. This features:

*) Python implementation of an HT (Hartmann-Tran [1]) lineshape which is used in
   spectra simulations. This lineshape can also be reduced to a number of
   conventional    line profiles such as Gaussian (Doppler), Lorentzian, Voigt,
   Rautian, Speed-dependent Voigt and Rautian.
*) Python implementation of total internal partition sums (TIPS-2011 [2])
   which is used in spectra simulations.
*) High-resolution spectra simulation accounting pressure,
   temperature and optical path length. The following spectral functions
   can be calculated:
      a) absorption coefficient
      b) absorption spectrum
      c) transmittance spectrum
      d) radiance spectrum
*) Low-resolution spectra simulation using a number of apparatus functions.
*) Possibility to extend with the user's functionality by adding custom lineshapes,
   partitions sums and apparatus functions.
*) An approach to function code is aimed to be flexible enough yet hopefully
   intuitive.

References:

[1] N.H. Ngo, D. Lisak, H. Tran, J.-M. Hartmann.
    An isolated line-shape model to go beyond the Voigt profile in
    spectroscopic databases and radiative transfer codes.
    JQSRT, Volume 129, November 2013, Pages 89–100
    http://dx.doi.org/10.1016/j.jqsrt.2013.05.034

[2] A. L. Laraia, R. R. Gamache, J. Lamouroux, I. E. Gordon, L. S. Rothman.
    Total internal partition sums to support planetary remote sensing.
    Icarus, Volume 215, Issue 1, September 2011, Pages 391–400
    http://dx.doi.org/10.1016/j.icarus.2011.06.004


  ///////////////////////////
 /// USING LINE PROFILES ///
///////////////////////////

Several lineshape (line profile) families are currently available:
1) Gaussian (Doppler) profile
2) Lorentzian profile
3) Voigt profile
4) Speed-dependent Voigt profile
5) Rautian profile
6) Speed-dependent Rautian profile
7) HT profile (Hartmann-Tran)

Each profile has it's own uniwue set of parameters. Normally one should
use profile parameters only in conjunction with their "native" profiles.

So, let's start exploring the available profiles using getHelp:
>>> getHelp(profiles)
Profiles available:
  HTP       : PROFILE_HT
  SDRautian : PROFILE_SDRAUTIAN
  Rautian   : PROFILE_RAUTIAN
  SDVoigt   : PROFILE_SDVOIGT
  Voigt     : PROFILE_VOIGT
  Lorentz   : PROFILE_LORENTZ
  Doppler   : PROFILE_DOPPLER

Output gives all available profiles. We can get additional info on each
of them just by calling getHelp(ProfileName):
>>> getHelp(PROFILE_HT)

Line profiles, adapted for using with HAPI, are written in Python and
heavily using the numerical library "Numpy". This means that the user
can calculate multiple values of particular profile at once having just
pasted a numpy array as a wavenumber grid (array). Let's give a short
example of how to calculate HT profile on a numpy array.

>>> from numpy import arange
    w0 = 1000.
    GammaD = 0.005
    Gamma0 = 0.2
    Gamma2 = 0.01 * Gamma0
    Delta0 = 0.002
    Delta2 = 0.001 * Delta0
    nuVC = 0.2
    eta = 0.5
    Dw = 1.
    ww = arange(w0-Dw, w0+Dw, 0.01)  # GRID WITH THE STEP 0.01
    l1 = PROFILE_HT(w0,GammaD,Gamma0,Gamma2,Delta0,Delta2,nuVC,eta,ww)[0]
    # now l1 contains values of HT profile calculates on the grid ww

On additional information about parameters see getHelp(PROFILE_HT).

It worth noting that PROFILE_HT returns 2 entities: real and imaginary part
of lineshape (as it described in the article given in preface). Apart from
HT, all other profiles return just one entity (the real part).


  ////////////////////////////
 /// USING PARTITION SUMS ///
////////////////////////////

As it was mentioned in the preface to this tutorial, the partition sums
are taken from the TIPS-2011 (the link is given above). Partition sums
are taken for those isotopologues, which are present in HITRAN and in
TIPS-2011 simultaneousely.

N.B. Partition sums are omitted for the following isotopologues which
are in HITRAN at the moment:

ID       M     I         ISO                MOL
--------------------------------------------------
117      12    2     H(15N)(16O)3           HNO3
110      14    2     D(19F)                 HF
107      15    3     D(35Cl)                HCl
108      15    4     D(37Cl)                HCl
111      16    3     D(79Br)                HBr
112      16    4     D(81Br)                HBr
113      17    2     D(127I)                HI
118      22    2     (14N)(15N)             N2
119      29    2     (13C)(16O)(19F)2       COF2
 86      34    1     (16O)                  O
 92      39    1     (12C)H3(16O)H          CH3OH
114      47    1     (32S)(16O)3            SO3
--------------------------------------------------

The data on these isotopologues is not present in TIPS-2011 but is
present in HITRAN. We're planning to add these molecules after TIPS-2013
is released.

To calculate a partition sum for most of the isotopologues in HITRAN,
we will use a function partitionSum (use getHelp for detailed info).
Let's just mention that
The syntax is as follows: partitionSum(M,I,T), where M,I - standard
HITRAN molecule-isotopologue notation, T - definition of temperature
range.

Usecase 1: temperatuer is defined by a list:
>>> Q = partitionSum(1,1,[70,80,90])

Usecase 2: temperature is defined by bounds and the step:
>>> T,Q = partiionSum(1,1,[70,3000],step=1.0)

In the latter example we calculate a partition sum on a range of
temperatures from 70K to 3000K using a step 1.0 K, and having arrays
of temperature (T) and partition sum (Q) at the output.


  ///////////////////////////////////////////
 /// CALCULATING ABSORPTION COEFFICIENTS ///
///////////////////////////////////////////

Currently API can calculate the following spectral function at arbitrary
thermodynamic parameters:

1) Absorption coefficient
2) Absorption spectrum
3) Transmittance spectrum
4) Radiance spectrum

All these functions can be calculated with or without accounting of
an instrument properties (apparatus function, resolution, path length etc...)

As it well known, the spectral functions such as absorption,
transmittance, and radiance spectra, are calculated on the basis
of the absorption coefficient. By that resaon, absorption coefficient
is the most important part of simulating a cross section. This part of
tutorial is devoted to demonstration how to calculate absorption
coefficient from the HITRAN line-by-line data. Here we give a brief
insight on basic parameters of calculation procedure, talk about some
useful practices and precautions.

To calculate an absorption coefficient, we can use one of the following
functions:

-> absorptionCoefficient_HT
-> absorptionCoefficient_Voigt
-> absorptionCoefficient_Lorentz
-> absorptionCoefficient_Doppler

Each of these function calculates cross sections using different
lineshapes (the names a quite self-explanatory).
You can get detailed information on using each of these functions
by calling getHelp(function_name).

Let's look more closely to the cross sections based on the Lorentz profile.
For doing that, let's have a table downloaded from HITRANonline.

# get data on CO2 main isotopologue in the range 2000-2100 cm-1
>>> fetch('CO2',2,1,2000,2100)

OK, now we're ready to run a fast example of how to calculate an
absorption coefficient cross section:

>>> nu,coef = absorptionCoefficient_Lorentz(SourceTables='CO2')

This example calculates a Lorentz cross section using the whole set of
lines in the "co2" table. This is the simplest possible way to use these
functions, because major part of parameters bound to their default values.

If we have matplotlib installed, then we can visualize it using a plotter:
>>> from pylab import plot
>>> plot(nu,coef)

API provides a flexible control over a calculation procedure. This control
can be achieved by using a number of input parameters. So, let's dig
into the depth of the settings.

The input parameters of absorptionCoefficient_Lorentz are as follows:

Name                          Default value
-------------------------------------------------------------------
SourceTables                  '__BUFFER__'
Components                    All isotopologues in SourceTables
partitionFunction             PYTIPS
Environment                   {'T':296.,'p':1.}
WavenumberRange               depends on Components
WavenumberStep                0.01 cm-1
WavenumberWing                10 cm-1
WavenumberWingHW              50 HWHMs
IntensityThreshold            0 cm/molec
GammaL                        'gamma_air'
HITRAN_units                  True
File                          None
Format                        '%e %e'
-------------------------------------------------------------------

Newt we'll give a brief explanation for each parameter. After each description
we'll make some notes about the usage of the correspondent parameter.


SourceTables:     (required parameter)

  List of source tables to take line-by-line data from.
  NOTE: User must provide at least one table in the list.

Components:    (optional parameter)

  List of tuples (M,I,D) to consider in cross section calculation.
  M here is a molecule number, I is an isotopologue number,
  D is an abundance of the component.
  NOTE: If this input contains more than one tuple, then the output
        is an absorption coefficient for mixture of corresponding gases.
  NOTE2: If omitted, then all data from the source tables is involved.

partitionFunction:    (optional parameter)

  Instance of partition function of the following format:
  Func(M,I,T), where Func - numae of function, (M,I) - HITRAN numbers
  for molecule and isotopologue, T - temperature.
  Function must return only one output - value of partition sum.
  NOTE: Deafult value is PYTIPS - python version of TIPS-2011

Environment:    (optional parameter)

  Python dictionary containing value of pressure and temperature.
  The format is as follows: Environment = {'p':pval,'T':tval},
  where "pval" and "tval" are corresponding values in atm and K
  respectively.
  NOTE: Default value is {'p':1.0,'T':296.0}

WavenumberRange:    (optional parameter)

  List containing minimum and maximum value of wavenumber to consider
  in cross-section calculation. All lines that are out of htese bounds
  will be skipped. The firmat is as follows: WavenumberRange=[wn_low,wn_high]
  NOTE: If this parameter os skipped, then min and max are taken
  from the data from SourceTables. Deprecated name is OmegaRange.

WavenumberStep:    (optional parameter)

  Value for the wavenumber step.
  NOTE: Default value is 0.01 cm-1.
  NOTE2: Normally user would want to take the step under 0.001 when
         calculating absorption coefficient with Doppler profile
         because of very narrow spectral lines. Deprecated name is OmegaStep.

WavenumberWing:    (optional parameter)

  Absolute value of the line wing in cm-1, i.e. distance from the center
  of each line to the most far point where the profile is considered
  to be non zero. Deprecated name is OmegaStep.
  NOTE: if omitted, then only OmegaWingHW is taken into account.

WavenumberWingHW:    (optional parameter)

  Relative value of the line wing in halfwidths. Deprecated name is OmegaWingHW.
  NOTE: The resulting wing is a maximum value from both OmegaWing and
  OmegaWingHW.

IntensityThreshold:    (optional parameter)

  Absolute value of minimum intensity in cm/molec to consider.
  NOTE: default value is 0.

GammaL:    (optional parameter)

  This is the name of broadening parameter to consider a "Lorentzian"
  part in the Voigt profile. In the current 160-char format there is
  a choise between "gamma_air" and "gamma_self".
  NOTE: If the table has custom columns with a broadening coefficients,
        the user can specify the name of this column in GammaL. This
        would let the function calculate an absorption with custom
        broadening parameter.

HITRAN_units:    (optional parameter)

  Logical flag for units, in which the absorption coefficient shoould be
  calculated. Currently, the choises are: cm^2/molec (if True) and
  cm-1 (if False).
  NOTE: to calculate other spectral functions like transmitance,
  radiance and absorption spectra, user should set HITRAN_units to False.

File:    (optional parameter)

  The name of the file to save the calculated absorption coefficient.
  The file is saved only if this parameter is specified.

Format:    (optional parameter)

  C-style format for the text data to be saved. Default value is "%e %e".
  NOTE: C-style output format specification (which are mostly valid for Python)
        can be found, for instance, by the link:
  http://www.gnu.org/software/libc/manual/html_node/Formatted-Output.html


N.B. Other functions such as absorptionCoefficient_Voigt(_HT,_Doppler) have
identical parameter sets so the description is the same for each function.


  ///////////////////////////////////////////////////////////////////
 /// CALCULATING ABSORPTION, TRANSMITTANCE, AND RADIANCE SPECTRA ///
///////////////////////////////////////////////////////////////////

Let's calculate an absorption, transmittance, and radiance
spectra on the basis of apsorption coefficient. In order to be consistent
with internal API's units, we need to have an absorption coefficient cm-1:

>>> nu,coef = absorptionCoefficient_Lorentz(SourceTables='CO2',HITRAN_units=False)

To calculate absorption spectrum, use the function absorptionSpectrum():
>>> nu,absorp = absorptionSpectrum(nu,coef)

To calculate transmittance spectrum, use function transmittanceSpectrum():
>>> nu,trans = transmittanceSpectrum(nu,coef)

To calculate radiance spectrum, use function radianceSpectrum():
>>> nu,radi = radianceSpectrum(nu,coef)


The last three commands used a default path length (1 m).
To see complete info on all three functions, look for section
"calculating spectra" in getHelp()

Generally, all these three functions use similar set of parameters:

Wavenumber:       (required parameter)

  Wavenumber grid to for spectrum. Deprecated name is Omegas.

AbsorptionCoefficient        (optional parameter)

  Absorption coefficient as input.

Environment={'T': 296.0, 'l': 100.0}       (optional parameter)

  Environmental parameters for calculating  spectrum.
  This parameter is a bit specific for each of functions:
  For absorptionSpectrum() and transmittanceSpectrum() the default
  value is as follows: Environment={'l': 100.0}
  For transmittanceSpectrum() the default value, besides path length,
  contains a temperature: Environment={'T': 296.0, 'l': 100.0}
  NOTE: temperature must be equal to that which was used in
  absorptionCoefficient_ routine!

File         (optional parameter)

  Filename of output file for calculated spectrum.
  If omitted, then the file is not created.

Format        (optional parameter)

  C-style format for spectra output file.
  NOTE: Default value is as follows: Format='%e %e'


  ///////////////////////////////////////
 /// APPLYING INSTRUMENTAL FUNCTIONS ///
///////////////////////////////////////

For comparison of the theoretical spectra with the real-world
instruments output it's necessary to take into account instrumental resolution.
For this purpose HAPI has a function convolveSpectrum() which can emulate
spectra with lower resolution using custom instrumental functions.

The following instrumental functions are available:
1) Rectangular
2) Triangular
3) Gaussian
4) Diffraction
5) Michelson
6) Dispersion
7) Lorentz

To get a description of each instrumental function we can use getHelp():
>>> getHelp(slit_functions)
  RECTANGULAR : SLIT_RECTANGULAR
  TRIANGULAR  : SLIT_TRIANGULAR
  GAUSSIAN    : SLIT_GAUSSIAN
  DIFFRACTION : SLIT_DIFFRACTION
  MICHELSON   : SLIT_MICHELSON
  DISPERSION/LORENTZ : SLIT_DISPERSION

For instance,
>>> getHelp(SLIT_MICHELSON)
... will give a datailed info about Michelson's instrumental function.


The function convolveSpectrum() convolutes a high-resulution spectrum
with one of supplied instrumental (slit) functions. The folowing
parameters of this function are provided:

Wavenumber     (required parameter)

  Array of wavenumbers in high-resolution input spectrum.
  Deprecated name is Omega.

CrossSection     (required parameter)

  Values of high-resolution input spectrum.

Resolution     (optional parameter)

  This parameter is passed to the slit function. It represents
  the resolution of corresponding instrument.
  NOTE: default value is 0.1 cm-1

AF_wing     (optional parameter)

  Width of an instrument function where it is considered non-zero.
  NOTE: default value is 10.0 cm-1

SlitFunction     (optional parameter)

  Custom instrumental function to convolve with spectrum.
  Format of the instrumental function must be as follows:
  Func(x,g), where Func - function name, x - wavenumber,
  g - resolution.
  NOTE: if omitted, then the default value is SLIT_RECTANGULAR


Before using the convolution procedure it worth giving some practical
advices and remarks:
1) Quality of a convolution depends on many things: quality of calculated
spectra, width of AF_wing and WavenumberRange, Resolution, WavenumberStep etc ...
Most of these factors are taken from previus stages of spectral calculation.
Right choise of all these factors is crucial for the correct computation.
2) Dispersion, Diffraction and Michelson AF's don't work well in narrow
wavenumber range because of their broad wings.
3) Generally one must consider WavenumberRange and AF_wing as wide as possible.
4) After applying a convolution, the resulting spectral range for
the lower-resolution spectra is reduced by the doubled value of AF_wing.
For this reason, try to make an initial spectral range for high-resolution
spectrum (absorption, transmittance, radiance) sufficiently broad.

The following command will calculate a lower-resolution spectra from
the CO2 transmittance, which was calculated in a previous section.
The Spectral resolution is 1 cm-1,

>>> nu_,trans_,i1,i2,slit = convolveSpectrum(nu,trans)

The outputs are:

nu_, trans_ - wavenumbers and transmittance for the resulting
              low-resolution spectrum.

i1,i2 - indexes for initial nu,trans spectrum denoting the part of
        wavenumber range which was taken for lower resolution spectrum.
        => Low-res spectrum is calculated on nu[i1:i2]

Note, than to achieve more flexibility, one have to specify most of
the optional parameters. For instance, more complete call is as follows:
>>> nu_,trans_,i1,i2,slit = convolveSpectrum(nu,trans,SlitFunction=SLIT_MICHELSON,Resolution=1.0,AF_wing=20.0)

"""


def print_spectra_tutorial():
    pydoc.pager(spectra_tutorial_text)


plotting_tutorial_text = """

PLOTTING THE SPECTRA WITH MATPLOTLIB

This tutorial briefly explains how to make plots using
the Matplotlib - Python library for plotting.

Prerequisites:
   To tun through this tutorial, user must have the following
   Python libraries installed:
   1) Matplotlib
       Matplotlib can be obtained by the link http://matplotlib.org/
   2) Numpy  (required by HAPI itself)
       Numpy can be obtained via pip:
          sudo pip install numpy (under Linux and Mac)
          pip install numpy (under Windows)
       Or by the link http://www.numpy.org/

As an option, user can download one of the many scientific Python
distributions, such as Anaconda, Canopy etc...

So, let's calculate plot the basic entities which ar provided by HAPI.
To do so, we will do all necessary steps to download, filter and
calculate cross sections "from scratch". To demonstrate the different
possibilities of matplotlib, we will mostly use Pylab - a part of
Matplotlib with the interface similar to Matlab. Please note, that it's
not the only way to use Matplotlib. More information can be found on it's site.

The next part is a step-by-step guide, demonstrating basic possilities
of HITRANonline API in conjunction with Matplotlib.

First, do some preliminary imports:
>>> from hapi import *
>>> from pylab import show,plot,subplot,xlim,ylim,title,legend,xlabel,ylabel,hold

Start the database 'data':
>>> db_begin('data')

Download lines for main isotopologue of ozone in [3900,4050] range:
>>> fetch('O3',3,1,3900,4050)

PLot a sick spectrum using the function getStickXY()
>>> x,y = getStickXY('O3')
>>> plot(x,y); show()

Zoom in spectral region [4020,4035] cm-1:
>>> plot(x,y); xlim([4020,4035]); show()

Calculate and plot difference between Voigt and Lorentzian lineshape:
>>> wn = arange(3002,3008,0.01) # get wavenumber range of interest
>>> voi = PROFILE_VOIGT(3005,0.1,0.3,wn)[0]   # calc Voigt
>>> lor = PROFILE_LORENTZ(3005,0.3,wn)   # calc Lorentz
>>> diff = voi-lor    # calc difference
>>> subplot(2,1,1)   # upper panel
>>> plot(wn,voi,'red',wn,lor,'blue')  # plot both profiles
>>> legend(['Voigt','Lorentz'])   # show legend
>>> title('Voigt and Lorentz profiles')   # show title
>>> subplot(2,1,2)   # lower panel
>>> plot(wn,diff)   # plot diffenence
>>> title('Voigt-Lorentz residual')   # show title
>>> show()   # show all figures

Calculate and plot absorption coefficients for ozone using Voigt
profile. Spectra are calculated for 4 cases of thermodynamic parameters:
(1 atm, 296 K), (5 atm, 296 K), (1 atm, 500 K), and (5 atm, 500 K)
>>> nu1,coef1 = absorptionCoefficient_Voigt(((3,1),),'O3',
        WavenumberStep=0.01,HITRAN_units=False,GammaL='gamma_self',
        Environment={'p':1,'T':296.})
>>> nu2,coef2 = absorptionCoefficient_Voigt(((3,1),),'O3',
        WavenumberStep=0.01,HITRAN_units=False,GammaL='gamma_self',
        Environment={'p':5,'T':296.})
>>> nu3,coef3 = absorptionCoefficient_Voigt(((3,1),),'O3',
        WavenumberStep=0.01,HITRAN_units=False,GammaL='gamma_self',
        Environment={'p':1,'T':500.})
>>> nu4,coef4 = absorptionCoefficient_Voigt(((3,1),),'O3',
        WavenumberStep=0.01,HITRAN_units=False,GammaL='gamma_self',
        Environment={'p':5,'T':500.})
>>> subplot(2,2,1); plot(nu1,coef1); title('O3 k(w): p=1 atm, T=296K')
>>> subplot(2,2,2); plot(nu2,coef2); title('O3 k(w): p=5 atm, T=296K')
>>> subplot(2,2,3); plot(nu3,coef3); title('O3 k(w): p=1 atm, T=500K')
>>> subplot(2,2,4); plot(nu4,coef4); title('O3 k(w): p=5 atm, T=500K')
>>> show()

Calculate and plot absorption, transmittance and radiance spectra for 1 atm
and 296K. Path length is set to 10 m.
>>> nu,absorp = absorptionSpectrum(nu1,coef1,Environment={'l':1000.})
>>> nu,transm = transmittanceSpectrum(nu1,coef1,Environment={'l':1000.})
>>> nu,radian = radianceSpectrum(nu1,coef1,Environment={'l':1000.,'T':296.})
>>> subplot(2,2,1); plot(nu1,coef1,'r'); title('O3 k(w): p=1 atm, T=296K')
>>> subplot(2,2,2); plot(nu,absorp,'g'); title('O3 absorption: p=1 atm, T=296K')
>>> subplot(2,2,3); plot(nu,transm,'b'); title('O3 transmittance: p=1 atm, T=296K')
>>> subplot(2,2,4); plot(nu,radian,'y'); title('O3 radiance: p=1 atm, T=296K')
>>> show()

Calculate and compare high resolution spectrum for O3 with lower resolution
spectrum convoluted with an instrumental function of ideal Michelson interferometer.
>>> nu_,trans_,i1,i2,slit = convolveSpectrum(nu,transm,SlitFunction=SLIT_MICHELSON,Resolution=1.0,AF_wing=20.0)
>>> plot(nu,transm,'red',nu_,trans_,'blue'); legend(['HI-RES','Michelson']); show()

"""


def print_plotting_tutorial():
    pydoc.pager(plotting_tutorial_text)


def getHelp(arg=None):
    """
    This function provides interactive manuals and tutorials.
    """
    if arg == None:
        print("--------------------------------------------------------------")
        print("Hello, this is an interactive help system of HITRANonline API.")
        print("--------------------------------------------------------------")
        print("Run getHelp(.) with one of the following arguments:")
        print("    tutorial  -  interactive tutorials on HAPI")
        print("    units     -  units used in calculations")
        print("    index     -  index of available HAPI functions")
    elif arg == "tutorial":
        print("-----------------------------------")
        print("This is a tutorial section of help.")
        print("-----------------------------------")
        print("Please choose the subject of tutorial:")
        print("    data      -  downloading the data and working with it")
        print("    spectra   -  calculating spectral functions")
        print("    plotting  -  visualizing data with matplotlib")
        print("    python    -  Python quick start guide")
    elif arg == "python":
        print_python_tutorial()
    elif arg == "data":
        print_data_tutorial()
    elif arg == "spectra":
        print_spectra_tutorial()
    elif arg == "plotting":
        print_plotting_tutorial()
    elif arg == "index":
        print("------------------------------")
        print("FETCHING DATA:")
        print("------------------------------")
        print("  fetch")
        print("  fetch_by_ids")
        print("")
        print("------------------------------")
        print("WORKING WITH DATA:")
        print("------------------------------")
        print("  db_begin")
        print("  db_commit")
        print("  tableList")
        print("  describe")
        print("  select")
        print("  sort")
        print("  extractColumns")
        print("  getColumn")
        print("  getColumns")
        print("  dropTable")
        print("")
        print("------------------------------")
        print("CALCULATING SPECTRA:")
        print("------------------------------")
        print("  profiles")
        print("  partitionSum")
        print("  absorptionCoefficient_HT")
        print("  absorptionCoefficient_Voigt")
        print("  absorptionCoefficient_SDVoigt")
        print("  absorptionCoefficient_Lorentz")
        print("  absorptionCoefficient_Doppler")
        print("  transmittanceSpectrum")
        print("  absorptionSpectrum")
        print("  radianceSpectrum")
        print("")
        print("------------------------------")
        print("CONVOLVING SPECTRA:")
        print("------------------------------")
        print("  convolveSpectrum")
        print("  slit_functions")
        print("")
        print("------------------------------")
        print("INFO ON ISOTOPOLOGUES:")
        print("------------------------------")
        print("  ISO_ID")
        print("  abundance")
        print("  molecularMass")
        print("  moleculeName")
        print("  isotopologueName")
        print("")
        print("------------------------------")
        print("MISCELLANEOUS:")
        print("------------------------------")
        print("  getStickXY")
        print("  read_hotw")
    elif arg == ISO:
        print_iso()
    elif arg == ISO_ID:
        print_iso_id()
    elif arg == profiles:
        print_profiles()
    elif arg == slit_functions:
        print_slit_functions()
    else:
        help(arg)


# Get atmospheric (natural) abundance
# for a specified isotopologue
# M - molecule number
# I - isotopologue number
def abundance(M, I):
    """
    INPUT PARAMETERS:
        M: HITRAN molecule number
        I: HITRAN isotopologue number
    OUTPUT PARAMETERS:
        Abbundance: natural abundance
    ---
    DESCRIPTION:
        Return natural (Earth) abundance of HITRAN isotolopogue.
    ---
    EXAMPLE OF USAGE:
        ab = abundance(1,1) # H2O
    ---
    """
    return ISO[(M, I)][ISO_INDEX["abundance"]]


# Get molecular mass
# for a specified isotopologue
# M - molecule number
# I - isotopologue number
def molecularMass(M, I):
    """
    INPUT PARAMETERS:
        M: HITRAN molecule number
        I: HITRAN isotopologue number
    OUTPUT PARAMETERS:
        MolMass: molecular mass
    ---
    DESCRIPTION:
        Return molecular mass of HITRAN isotolopogue.
    ---
    EXAMPLE OF USAGE:
        mass = molecularMass(1,1) # H2O
    ---
    """
    return ISO[(M, I)][ISO_INDEX["mass"]]


# Get molecule name
# for a specified isotopologue
# M - molecule number
# I - isotopologue number
def moleculeName(M):
    """
    INPUT PARAMETERS:
        M: HITRAN molecule number
    OUTPUT PARAMETERS:
        MolName: molecular name
    ---
    DESCRIPTION:
        Return name of HITRAN molecule.
    ---
    EXAMPLE OF USAGE:
        molname = moleculeName(1) # H2O
    ---
    """
    return ISO[(M, 1)][ISO_INDEX["mol_name"]]


# Get isotopologue name
# for a specified isotopologue
# M - molecule number
# I - isotopologue number
def isotopologueName(M, I):
    """
    INPUT PARAMETERS:
        M: HITRAN molecule number
        I: HITRAN isotopologue number
    OUTPUT PARAMETERS:
        IsoMass: isotopologue mass
    ---
    DESCRIPTION:
        Return name of HITRAN isotolopogue.
    ---
    EXAMPLE OF USAGE:
        isoname = isotopologueName(1,1) # H2O
    ---
    """
    return ISO[(M, I)][ISO_INDEX["iso_name"]]


# ----------------------- table list ----------------------------------
def tableList():
    """
    INPUT PARAMETERS:
        none
    OUTPUT PARAMETERS:
        TableList: a list of available tables
    ---
    DESCRIPTION:
        Return a list of tables present in database.
    ---
    EXAMPLE OF USAGE:
        lst = tableList()
    ---
    """

    return getTableList()


# ----------------------- describe ----------------------------------
def describe(TableName):
    """
    INPUT PARAMETERS:
        TableName: name of the table to describe
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Print information about table, including
        parameter names, formats and wavenumber range.
    ---
    EXAMPLE OF USAGE:
        describe('sampletab')
    ---
    """
    describeTable(TableName)


# ---------------------- /ISO.PY ---------------------------------------


def db_begin(db=None):
    """
    INPUT PARAMETERS:
        db: database name (optional)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Open a database connection. A database is stored
        in a folder given in db input parameter.
        Default=data
    ---
    EXAMPLE OF USAGE:
        db_begin('bar')
    ---
    """
    databaseBegin(db)


def db_commit():
    """
    INPUT PARAMETERS:
        none
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Commit all changes made to opened database.
        All tables will be saved in corresponding files.
    ---
    EXAMPLE OF USAGE:
        db_commit()
    ---
    """
    databaseCommit()


# ------------------ QUERY HITRAN ---------------------------------------


def comment(TableName, Comment):
    LOCAL_TABLE_CACHE[TableName]["header"]["comment"] = Comment


def fetch_by_ids(
    TableName, iso_id_list, numin, numax, ParameterGroups=[], Parameters=[]
):
    """
    INPUT PARAMETERS:
        TableName:   local table name to fetch in (required)
        iso_id_list: list of isotopologue id's    (required)
        numin:       lower wavenumber bound       (required)
        numax:       upper wavenumber bound       (required)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Download line-by-line data from HITRANonline server
        and save it to local table. The input parameter iso_id_list
        contains list of "global" isotopologue Ids (see help on ISO_ID).
        Note: this function is required if user wants to download
        multiple species into single table.
    ---
    EXAMPLE OF USAGE:
        fetch_by_ids('water',[1,2,3,4],4000,4100)
    ---
    """
    if type(iso_id_list) not in set([list, tuple]):
        iso_id_list = [iso_id_list]
    queryHITRAN(
        TableName,
        iso_id_list,
        numin,
        numax,
        pargroups=ParameterGroups,
        params=Parameters,
    )
    iso_names = [ISO_ID[i][ISO_ID_INDEX["iso_name"]] for i in iso_id_list]
    Comment = "Contains lines for " + ",".join(iso_names)
    Comment += "\n in %.3f-%.3f wavenumber range" % (numin, numax)
    comment(TableName, Comment)


# def queryHITRAN(TableName,iso_id_list,numin,numax):
def fetch(TableName, M, I, numin, numax, ParameterGroups=[], Parameters=[]):
    """
    INPUT PARAMETERS:
        TableName:   local table name to fetch in (required)
        M:           HITRAN molecule number       (required)
        I:           HITRAN isotopologue number   (required)
        numin:       lower wavenumber bound       (required)
        numax:       upper wavenumber bound       (required)
    OUTPUT PARAMETERS:
        none
    ---
    DESCRIPTION:
        Download line-by-line data from HITRANonline server
        and save it to local table. The input parameters M and I
        are the HITRAN molecule and isotopologue numbers.
        This function results in a table containing single
        isotopologue specie. To have multiple species in a
        single table use fetch_by_ids instead.
    ---
    EXAMPLE OF USAGE:
        fetch('HOH',1,1,4000,4100)
    ---
    """
    queryHITRAN(
        TableName,
        [ISO[(M, I)][ISO_INDEX["id"]]],
        numin,
        numax,
        pargroups=ParameterGroups,
        params=Parameters,
    )
    iso_name = ISO[(M, I)][ISO_INDEX["iso_name"]]
    Comment = "Contains lines for " + iso_name
    Comment += "\n in %.3f-%.3f wavenumber range" % (numin, numax)
    comment(TableName, Comment)


# ------------------ partition sum --------------------------------------

# ------------------- LAGRANGE INTERPOLATION ----------------------

# def AtoB(aa,bb,A,B,npt)
def AtoB(aa, A, B, npt):
    # ***************************
    # ...LaGrange 3- and 4-point interpolation
    # ...arrays A and B are the npt data points,  given aa, a value of the
    # ...A variable, the routine will find the corresponding bb value
    #
    # ...input:  aa
    # ...output: bb
    for I in range(2, npt + 1):
        if A[I - 1] >= aa:
            if I < 3 or I == npt:
                J = I
                if I < 3:
                    J = 3
                if I == npt:
                    J = npt
                J = J - 1  # zero index correction
                A0D1 = A[J - 2] - A[J - 1]
                if A0D1 == 0.0:
                    A0D1 = 0.0001
                A0D2 = A[J - 2] - A[J]
                if A0D2 == 0.0:
                    A0D2 = 0.0000
                A1D1 = A[J - 1] - A[J - 2]
                if A1D1 == 0.0:
                    A1D1 = 0.0001
                A1D2 = A[J - 1] - A[J]
                if A1D2 == 0.0:
                    A1D2 = 0.0001
                A2D1 = A[J] - A[J - 2]
                if A2D1 == 0.0:
                    A2D1 = 0.0001
                A2D2 = A[J] - A[J - 1]
                if A2D2 == 0.0:
                    A2D2 = 0.0001

                A0 = (aa - A[J - 1]) * (aa - A[J]) / (A0D1 * A0D2)
                A1 = (aa - A[J - 2]) * (aa - A[J]) / (A1D1 * A1D2)
                A2 = (aa - A[J - 2]) * (aa - A[J - 1]) / (A2D1 * A2D2)

                bb = A0 * B[J - 2] + A1 * B[J - 1] + A2 * B[J]

            else:
                J = I
                J = J - 1  # zero index correction
                A0D1 = A[J - 2] - A[J - 1]
                if A0D1 == 0.0:
                    A0D1 = 0.0001
                A0D2 = A[J - 2] - A[J]
                if A0D2 == 0.0:
                    A0D2 = 0.0001
                A0D3 = A[J - 2] - A[J + 1]
                if A0D3 == 0.0:
                    A0D3 = 0.0001
                A1D1 = A[J - 1] - A[J - 2]
                if A1D1 == 0.0:
                    A1D1 = 0.0001
                A1D2 = A[J - 1] - A[J]
                if A1D2 == 0.0:
                    A1D2 = 0.0001
                A1D3 = A[J - 1] - A[J + 1]
                if A1D3 == 0.0:
                    A1D3 = 0.0001

                A2D1 = A[J] - A[J - 2]
                if A2D1 == 0.0:
                    A2D1 = 0.0001
                A2D2 = A[J] - A[J - 1]
                if A2D2 == 0.0:
                    A2D2 = 0.0001
                A2D3 = A[J] - A[J + 1]
                if A2D3 == 0.0:
                    A2D3 = 0.0001

                A3D1 = A[J + 1] - A[J - 2]
                if A3D1 == 0.0:
                    A3D1 = 0.0001
                A3D2 = A[J + 1] - A[J - 1]
                if A3D2 == 0.0:
                    A3D2 = 0.0001
                A3D3 = A[J + 1] - A[J]
                if A3D3 == 0.0:
                    A3D3 = 0.0001

                A0 = (aa - A[J - 1]) * (aa - A[J]) * (aa - A[J + 1])
                A0 = A0 / (A0D1 * A0D2 * A0D3)
                A1 = (aa - A[J - 2]) * (aa - A[J]) * (aa - A[J + 1])
                A1 = A1 / (A1D1 * A1D2 * A1D3)
                A2 = (aa - A[J - 2]) * (aa - A[J - 1]) * (aa - A[J + 1])
                A2 = A2 / (A2D1 * A2D2 * A2D3)
                A3 = (aa - A[J - 2]) * (aa - A[J - 1]) * (aa - A[J])
                A3 = A3 / (A3D1 * A3D2 * A3D3)

                bb = A0 * B[J - 2] + A1 * B[J - 1] + A2 * B[J] + A3 * B[J + 1]

            break

    return bb


#  --------------- ISOTOPOLOGUE HASH ----------------------

TIPS_ISO_HASH = {}

#  --------------- STATISTICAL WEIGHT HASH ----------------------

TIPS_GSI_HASH = {}

#  --------------- INTERPOLATION NODES ----------------------

Tdat = __FloatType__(
    [
        60.0,
        85.0,
        110.0,
        135.0,
        160.0,
        185.0,
        210.0,
        235.0,
        260.0,
        285.0,
        310.0,
        335.0,
        360.0,
        385.0,
        410.0,
        435.0,
        460.0,
        485.0,
        510.0,
        535.0,
        560.0,
        585.0,
        610.0,
        635.0,
        660.0,
        685.0,
        710.0,
        735.0,
        760.0,
        785.0,
        810.0,
        835.0,
        860.0,
        885.0,
        910.0,
        935.0,
        960.0,
        985.0,
        1010.0,
        1035.0,
        1060.0,
        1085.0,
        1110.0,
        1135.0,
        1160.0,
        1185.0,
        1210.0,
        1235.0,
        1260.0,
        1285.0,
        1310.0,
        1335.0,
        1360.0,
        1385.0,
        1410.0,
        1435.0,
        1460.0,
        1485.0,
        1510.0,
        1535.0,
        1560.0,
        1585.0,
        1610.0,
        1635.0,
        1660.0,
        1685.0,
        1710.0,
        1735.0,
        1760.0,
        1785.0,
        1810.0,
        1835.0,
        1860.0,
        1885.0,
        1910.0,
        1935.0,
        1960.0,
        1985.0,
        2010.0,
        2035.0,
        2060.0,
        2085.0,
        2110.0,
        2135.0,
        2160.0,
        2185.0,
        2210.0,
        2235.0,
        2260.0,
        2285.0,
        2310.0,
        2335.0,
        2360.0,
        2385.0,
        2410.0,
        2435.0,
        2460.0,
        2485.0,
        2510.0,
        2535.0,
        2560.0,
        2585.0,
        2610.0,
        2635.0,
        2660.0,
        2685.0,
        2710.0,
        2735.0,
        2760.0,
        2785.0,
        2810.0,
        2835.0,
        2860.0,
        2885.0,
        2910.0,
        2935.0,
        2960.0,
        2985.0,
        3010.0,
    ]
)

TIPS_NPT = len(Tdat)


# REMARK
# float32 gives exactly the same results as fortran TIPS, because
# all constants in the fortran code given as xx.xxE+-XX, i.e.
# in single precision. By this fact all unsignificant figures
# over single precision are filled with digital garbage


#  --------------- H2O 161: M = 1, I = 1 ---------------------
M = 1
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.16824e02,
        0.27771e02,
        0.40408e02,
        0.54549e02,
        0.70054e02,
        0.86817e02,
        0.10475e03,
        0.12380e03,
        0.14391e03,
        0.16503e03,
        0.18714e03,
        0.21021e03,
        0.23425e03,
        0.25924e03,
        0.28518e03,
        0.31209e03,
        0.33997e03,
        0.36883e03,
        0.39870e03,
        0.42959e03,
        0.46152e03,
        0.49452e03,
        0.52860e03,
        0.56380e03,
        0.60015e03,
        0.63766e03,
        0.67637e03,
        0.71631e03,
        0.75750e03,
        0.79999e03,
        0.84380e03,
        0.88897e03,
        0.93553e03,
        0.98353e03,
        0.10330e04,
        0.10840e04,
        0.11365e04,
        0.11906e04,
        0.12463e04,
        0.13037e04,
        0.13628e04,
        0.14237e04,
        0.14863e04,
        0.15509e04,
        0.16173e04,
        0.16856e04,
        0.17559e04,
        0.18283e04,
        0.19028e04,
        0.19793e04,
        0.20581e04,
        0.21391e04,
        0.22224e04,
        0.23080e04,
        0.24067e04,
        0.24975e04,
        0.25908e04,
        0.26867e04,
        0.27853e04,
        0.28865e04,
        0.29904e04,
        0.30972e04,
        0.32068e04,
        0.33194e04,
        0.34349e04,
        0.35535e04,
        0.36752e04,
        0.38001e04,
        0.39282e04,
        0.40597e04,
        0.41945e04,
        0.43327e04,
        0.44745e04,
        0.46199e04,
        0.47688e04,
        0.49215e04,
        0.50780e04,
        0.52384e04,
        0.54027e04,
        0.55710e04,
        0.57434e04,
        0.59200e04,
        0.61008e04,
        0.62859e04,
        0.64754e04,
        0.66693e04,
        0.68679e04,
        0.70710e04,
        0.72788e04,
        0.74915e04,
        0.77090e04,
        0.79315e04,
        0.81590e04,
        0.83917e04,
        0.86296e04,
        0.88728e04,
        0.91214e04,
        0.93755e04,
        0.96351e04,
        0.99005e04,
        0.10171e05,
        0.10448e05,
        0.10731e05,
        0.11020e05,
        0.11315e05,
        0.11617e05,
        0.11924e05,
        0.12238e05,
        0.12559e05,
        0.12886e05,
        0.13220e05,
        0.13561e05,
        0.13909e05,
        0.14263e05,
        0.14625e05,
        0.14995e05,
        0.15371e05,
        0.15755e05,
        0.16147e05,
    ]
)


#  --------------- H2O 181: M = 1, I = 2 ---------------------
M = 1
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.15960e02,
        0.26999e02,
        0.39743e02,
        0.54003e02,
        0.69639e02,
        0.86543e02,
        0.10463e03,
        0.12384e03,
        0.14412e03,
        0.16542e03,
        0.18773e03,
        0.21103e03,
        0.23531e03,
        0.26057e03,
        0.28681e03,
        0.31406e03,
        0.34226e03,
        0.37130e03,
        0.40135e03,
        0.43243e03,
        0.46456e03,
        0.49777e03,
        0.53206e03,
        0.56748e03,
        0.60405e03,
        0.64179e03,
        0.68074e03,
        0.72093e03,
        0.76238e03,
        0.80513e03,
        0.84922e03,
        0.89467e03,
        0.94152e03,
        0.98982e03,
        0.10396e04,
        0.10909e04,
        0.11437e04,
        0.11982e04,
        0.12543e04,
        0.13120e04,
        0.13715e04,
        0.14328e04,
        0.14959e04,
        0.15608e04,
        0.16276e04,
        0.16964e04,
        0.17672e04,
        0.18401e04,
        0.19151e04,
        0.19922e04,
        0.20715e04,
        0.21531e04,
        0.22370e04,
        0.23232e04,
        0.24118e04,
        0.25030e04,
        0.25967e04,
        0.26929e04,
        0.27918e04,
        0.28934e04,
        0.29978e04,
        0.31050e04,
        0.32151e04,
        0.33281e04,
        0.34441e04,
        0.35632e04,
        0.36854e04,
        0.38108e04,
        0.39395e04,
        0.40715e04,
        0.42070e04,
        0.43459e04,
        0.44883e04,
        0.46343e04,
        0.47840e04,
        0.49374e04,
        0.50946e04,
        0.52558e04,
        0.54209e04,
        0.55900e04,
        0.57632e04,
        0.59407e04,
        0.61224e04,
        0.63084e04,
        0.64988e04,
        0.66938e04,
        0.68933e04,
        0.70975e04,
        0.73064e04,
        0.75202e04,
        0.77389e04,
        0.79625e04,
        0.81913e04,
        0.84252e04,
        0.86644e04,
        0.89089e04,
        0.91588e04,
        0.94143e04,
        0.96754e04,
        0.99422e04,
        0.10215e05,
        0.10493e05,
        0.10778e05,
        0.11068e05,
        0.11365e05,
        0.11668e05,
        0.11977e05,
        0.12293e05,
        0.12616e05,
        0.12945e05,
        0.13281e05,
        0.13624e05,
        0.13973e05,
        0.14330e05,
        0.14694e05,
        0.15066e05,
        0.15445e05,
        0.15831e05,
        0.16225e05,
    ]
)


#  --------------- H2O 171: M = 1, I = 3 ---------------------
M = 1
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.95371e02,
        0.16134e03,
        0.23750e03,
        0.32273e03,
        0.41617e03,
        0.51722e03,
        0.62540e03,
        0.74036e03,
        0.86185e03,
        0.98970e03,
        0.11238e04,
        0.12642e04,
        0.14097e04,
        0.15599e04,
        0.17159e04,
        0.18777e04,
        0.20453e04,
        0.22188e04,
        0.23983e04,
        0.25840e04,
        0.27760e04,
        0.29743e04,
        0.31792e04,
        0.33907e04,
        0.36091e04,
        0.38346e04,
        0.40672e04,
        0.43072e04,
        0.45547e04,
        0.48100e04,
        0.50732e04,
        0.53446e04,
        0.56244e04,
        0.59128e04,
        0.62100e04,
        0.65162e04,
        0.68317e04,
        0.71567e04,
        0.74915e04,
        0.78363e04,
        0.81914e04,
        0.85571e04,
        0.89335e04,
        0.93211e04,
        0.97200e04,
        0.10131e05,
        0.10553e05,
        0.10988e05,
        0.11435e05,
        0.11895e05,
        0.12368e05,
        0.12855e05,
        0.13356e05,
        0.13870e05,
        0.14399e05,
        0.14943e05,
        0.15502e05,
        0.16076e05,
        0.16666e05,
        0.17272e05,
        0.17895e05,
        0.18534e05,
        0.19191e05,
        0.19865e05,
        0.20557e05,
        0.21267e05,
        0.21996e05,
        0.22744e05,
        0.23512e05,
        0.24299e05,
        0.25106e05,
        0.25935e05,
        0.26784e05,
        0.27655e05,
        0.28547e05,
        0.29462e05,
        0.30400e05,
        0.31361e05,
        0.32345e05,
        0.33353e05,
        0.34386e05,
        0.35444e05,
        0.36527e05,
        0.37637e05,
        0.38772e05,
        0.39934e05,
        0.41124e05,
        0.42341e05,
        0.43587e05,
        0.44861e05,
        0.46165e05,
        0.47498e05,
        0.48862e05,
        0.50256e05,
        0.51682e05,
        0.53139e05,
        0.54629e05,
        0.56152e05,
        0.57708e05,
        0.59299e05,
        0.60923e05,
        0.62583e05,
        0.64279e05,
        0.66011e05,
        0.67779e05,
        0.69585e05,
        0.71429e05,
        0.73312e05,
        0.75234e05,
        0.77195e05,
        0.79197e05,
        0.81240e05,
        0.83325e05,
        0.85452e05,
        0.87622e05,
        0.89835e05,
        0.92093e05,
        0.94395e05,
        0.96743e05,
    ]
)


#  --------------- H2O 162: M = 1, I = 4 ---------------------
M = 1
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.75792e02,
        0.12986e03,
        0.19244e03,
        0.26253e03,
        0.33942e03,
        0.42259e03,
        0.51161e03,
        0.60619e03,
        0.70609e03,
        0.81117e03,
        0.92132e03,
        0.10365e04,
        0.11567e04,
        0.12820e04,
        0.14124e04,
        0.15481e04,
        0.16891e04,
        0.18355e04,
        0.19876e04,
        0.21455e04,
        0.23092e04,
        0.24791e04,
        0.26551e04,
        0.28376e04,
        0.30268e04,
        0.32258e04,
        0.34288e04,
        0.36392e04,
        0.38571e04,
        0.40828e04,
        0.43165e04,
        0.45584e04,
        0.48089e04,
        0.50681e04,
        0.53363e04,
        0.56139e04,
        0.59009e04,
        0.61979e04,
        0.65049e04,
        0.68224e04,
        0.71506e04,
        0.74898e04,
        0.78403e04,
        0.82024e04,
        0.85765e04,
        0.89628e04,
        0.93618e04,
        0.97736e04,
        0.10199e05,
        0.10637e05,
        0.11090e05,
        0.11557e05,
        0.12039e05,
        0.12535e05,
        0.13047e05,
        0.13575e05,
        0.14119e05,
        0.14679e05,
        0.15257e05,
        0.15851e05,
        0.16464e05,
        0.17094e05,
        0.17743e05,
        0.18411e05,
        0.19098e05,
        0.19805e05,
        0.20532e05,
        0.21280e05,
        0.22049e05,
        0.22840e05,
        0.23652e05,
        0.24487e05,
        0.25345e05,
        0.26227e05,
        0.27132e05,
        0.28062e05,
        0.29016e05,
        0.29997e05,
        0.31002e05,
        0.32035e05,
        0.33094e05,
        0.34180e05,
        0.35295e05,
        0.36438e05,
        0.37610e05,
        0.38812e05,
        0.40044e05,
        0.41306e05,
        0.42600e05,
        0.43926e05,
        0.45284e05,
        0.46675e05,
        0.48100e05,
        0.49559e05,
        0.51053e05,
        0.52583e05,
        0.54148e05,
        0.55750e05,
        0.57390e05,
        0.59067e05,
        0.60783e05,
        0.62539e05,
        0.64334e05,
        0.66170e05,
        0.68047e05,
        0.69967e05,
        0.71929e05,
        0.73934e05,
        0.75983e05,
        0.78078e05,
        0.80217e05,
        0.82403e05,
        0.84636e05,
        0.86917e05,
        0.89246e05,
        0.91625e05,
        0.94053e05,
        0.96533e05,
        0.99064e05,
    ]
)


#  --------------- H2O 182: M = 1, I = 5 ---------------------
M = 1
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.82770e02,
        0.13749e03,
        0.20083e03,
        0.27176e03,
        0.34955e03,
        0.43370e03,
        0.52376e03,
        0.61944e03,
        0.72050e03,
        0.82679e03,
        0.93821e03,
        0.10547e04,
        0.11763e04,
        0.13031e04,
        0.14350e04,
        0.15723e04,
        0.17150e04,
        0.18633e04,
        0.20172e04,
        0.21770e04,
        0.23429e04,
        0.25149e04,
        0.26934e04,
        0.28784e04,
        0.30702e04,
        0.32690e04,
        0.34750e04,
        0.36885e04,
        0.39096e04,
        0.41386e04,
        0.43758e04,
        0.46213e04,
        0.48755e04,
        0.51386e04,
        0.54109e04,
        0.56927e04,
        0.59841e04,
        0.62856e04,
        0.65973e04,
        0.69197e04,
        0.72529e04,
        0.75973e04,
        0.79533e04,
        0.83210e04,
        0.87009e04,
        0.90933e04,
        0.94985e04,
        0.99168e04,
        0.10348e05,
        0.10794e05,
        0.11254e05,
        0.11728e05,
        0.12217e05,
        0.12722e05,
        0.13242e05,
        0.13778e05,
        0.14331e05,
        0.14900e05,
        0.15486e05,
        0.16091e05,
        0.16713e05,
        0.17353e05,
        0.18012e05,
        0.18691e05,
        0.19389e05,
        0.20108e05,
        0.20847e05,
        0.21607e05,
        0.22388e05,
        0.23191e05,
        0.24017e05,
        0.24866e05,
        0.25738e05,
        0.26633e05,
        0.27553e05,
        0.28498e05,
        0.29468e05,
        0.30464e05,
        0.31486e05,
        0.32536e05,
        0.33612e05,
        0.34716e05,
        0.35849e05,
        0.37011e05,
        0.38202e05,
        0.39424e05,
        0.40676e05,
        0.41959e05,
        0.43274e05,
        0.44622e05,
        0.46002e05,
        0.47416e05,
        0.48864e05,
        0.50348e05,
        0.51866e05,
        0.53421e05,
        0.55012e05,
        0.56640e05,
        0.58307e05,
        0.60012e05,
        0.61757e05,
        0.63541e05,
        0.65366e05,
        0.67233e05,
        0.69141e05,
        0.71092e05,
        0.73087e05,
        0.75125e05,
        0.77209e05,
        0.79338e05,
        0.81513e05,
        0.83736e05,
        0.86006e05,
        0.88324e05,
        0.90693e05,
        0.93111e05,
        0.95580e05,
        0.98100e05,
        0.10067e06,
    ]
)


#  --------------- H2O 172: M = 1, I = 6 ---------------------
M = 1
I = 6
TIPS_GSI_HASH[(M, I)] = __FloatType__(36.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.49379e03,
        0.82021e03,
        0.11980e04,
        0.16211e04,
        0.20851e04,
        0.25870e04,
        0.31242e04,
        0.36949e04,
        0.42977e04,
        0.49317e04,
        0.55963e04,
        0.62911e04,
        0.70164e04,
        0.77722e04,
        0.85591e04,
        0.93777e04,
        0.10228e05,
        0.11112e05,
        0.12030e05,
        0.12983e05,
        0.13971e05,
        0.14997e05,
        0.16061e05,
        0.17163e05,
        0.18306e05,
        0.19491e05,
        0.20719e05,
        0.21991e05,
        0.23309e05,
        0.24673e05,
        0.26086e05,
        0.27549e05,
        0.29064e05,
        0.30631e05,
        0.32254e05,
        0.33932e05,
        0.35669e05,
        0.37464e05,
        0.39321e05,
        0.41242e05,
        0.43227e05,
        0.45279e05,
        0.47399e05,
        0.49589e05,
        0.51852e05,
        0.54189e05,
        0.56602e05,
        0.59094e05,
        0.61666e05,
        0.64320e05,
        0.67058e05,
        0.69883e05,
        0.72796e05,
        0.75801e05,
        0.78899e05,
        0.82092e05,
        0.85382e05,
        0.88773e05,
        0.92266e05,
        0.95863e05,
        0.99568e05,
        0.10338e06,
        0.10731e06,
        0.11135e06,
        0.11551e06,
        0.11979e06,
        0.12419e06,
        0.12871e06,
        0.13337e06,
        0.13815e06,
        0.14307e06,
        0.14812e06,
        0.15331e06,
        0.15865e06,
        0.16412e06,
        0.16975e06,
        0.17553e06,
        0.18146e06,
        0.18754e06,
        0.19379e06,
        0.20020e06,
        0.20678e06,
        0.21352e06,
        0.22044e06,
        0.22753e06,
        0.23480e06,
        0.24226e06,
        0.24990e06,
        0.25773e06,
        0.26575e06,
        0.27397e06,
        0.28239e06,
        0.29102e06,
        0.29985e06,
        0.30889e06,
        0.31814e06,
        0.32762e06,
        0.33731e06,
        0.34724e06,
        0.35739e06,
        0.36777e06,
        0.37840e06,
        0.38926e06,
        0.40038e06,
        0.41174e06,
        0.42335e06,
        0.43523e06,
        0.44737e06,
        0.45977e06,
        0.47245e06,
        0.48540e06,
        0.49863e06,
        0.51214e06,
        0.52595e06,
        0.54005e06,
        0.55444e06,
        0.56914e06,
        0.58415e06,
        0.59947e06,
    ]
)


#  --------------- CO2 626: M = 2, I = 1 ---------------------
M = 2
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.53642e02,
        0.75947e02,
        0.98292e02,
        0.12078e03,
        0.14364e03,
        0.16714e03,
        0.19160e03,
        0.21731e03,
        0.24454e03,
        0.27355e03,
        0.30456e03,
        0.33778e03,
        0.37343e03,
        0.41170e03,
        0.45280e03,
        0.49692e03,
        0.54427e03,
        0.59505e03,
        0.64948e03,
        0.70779e03,
        0.77019e03,
        0.83693e03,
        0.90825e03,
        0.98440e03,
        0.10656e04,
        0.11522e04,
        0.12445e04,
        0.13427e04,
        0.14471e04,
        0.15580e04,
        0.16759e04,
        0.18009e04,
        0.19334e04,
        0.20739e04,
        0.22225e04,
        0.23798e04,
        0.25462e04,
        0.27219e04,
        0.29074e04,
        0.31032e04,
        0.33097e04,
        0.35272e04,
        0.37564e04,
        0.39976e04,
        0.42514e04,
        0.45181e04,
        0.47985e04,
        0.50929e04,
        0.54019e04,
        0.57260e04,
        0.60659e04,
        0.64221e04,
        0.67952e04,
        0.71859e04,
        0.75946e04,
        0.80222e04,
        0.84691e04,
        0.89362e04,
        0.94241e04,
        0.99335e04,
        0.10465e05,
        0.11020e05,
        0.11598e05,
        0.12201e05,
        0.12828e05,
        0.13482e05,
        0.14163e05,
        0.14872e05,
        0.15609e05,
        0.16376e05,
        0.17173e05,
        0.18001e05,
        0.18861e05,
        0.19754e05,
        0.20682e05,
        0.21644e05,
        0.22643e05,
        0.23678e05,
        0.24752e05,
        0.25865e05,
        0.27018e05,
        0.28212e05,
        0.29449e05,
        0.30730e05,
        0.32055e05,
        0.33426e05,
        0.34845e05,
        0.36312e05,
        0.37828e05,
        0.39395e05,
        0.41015e05,
        0.42688e05,
        0.44416e05,
        0.46199e05,
        0.48041e05,
        0.49942e05,
        0.51902e05,
        0.53925e05,
        0.56011e05,
        0.58162e05,
        0.60379e05,
        0.62664e05,
        0.65019e05,
        0.67444e05,
        0.69942e05,
        0.72515e05,
        0.75163e05,
        0.77890e05,
        0.80695e05,
        0.83582e05,
        0.86551e05,
        0.89605e05,
        0.92746e05,
        0.95975e05,
        0.99294e05,
        0.10271e06,
        0.10621e06,
        0.10981e06,
        0.11351e06,
    ]
)


#  --------------- CO2 636: M = 2, I = 2 ---------------------
M = 2
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.10728e03,
        0.15189e03,
        0.19659e03,
        0.24164e03,
        0.28753e03,
        0.33486e03,
        0.38429e03,
        0.43643e03,
        0.49184e03,
        0.55104e03,
        0.61449e03,
        0.68263e03,
        0.75589e03,
        0.83468e03,
        0.91943e03,
        0.10106e04,
        0.11085e04,
        0.12137e04,
        0.13266e04,
        0.14477e04,
        0.15774e04,
        0.17163e04,
        0.18649e04,
        0.20237e04,
        0.21933e04,
        0.23743e04,
        0.25673e04,
        0.27729e04,
        0.29917e04,
        0.32245e04,
        0.34718e04,
        0.37345e04,
        0.40132e04,
        0.43087e04,
        0.46218e04,
        0.49533e04,
        0.53041e04,
        0.56749e04,
        0.60668e04,
        0.64805e04,
        0.69171e04,
        0.73774e04,
        0.78626e04,
        0.83736e04,
        0.89114e04,
        0.94772e04,
        0.10072e05,
        0.10697e05,
        0.11353e05,
        0.12042e05,
        0.12765e05,
        0.13523e05,
        0.14317e05,
        0.15148e05,
        0.16019e05,
        0.16930e05,
        0.17883e05,
        0.18879e05,
        0.19920e05,
        0.21008e05,
        0.22143e05,
        0.23328e05,
        0.24563e05,
        0.25852e05,
        0.27195e05,
        0.28594e05,
        0.30051e05,
        0.31568e05,
        0.33146e05,
        0.34788e05,
        0.36496e05,
        0.38271e05,
        0.40115e05,
        0.42031e05,
        0.44021e05,
        0.46086e05,
        0.48230e05,
        0.50453e05,
        0.52759e05,
        0.55150e05,
        0.57628e05,
        0.60195e05,
        0.62854e05,
        0.65608e05,
        0.68459e05,
        0.71409e05,
        0.74461e05,
        0.77618e05,
        0.80883e05,
        0.84258e05,
        0.87746e05,
        0.91350e05,
        0.95073e05,
        0.98918e05,
        0.10289e06,
        0.10698e06,
        0.11121e06,
        0.11558e06,
        0.12008e06,
        0.12472e06,
        0.12950e06,
        0.13443e06,
        0.13952e06,
        0.14475e06,
        0.15015e06,
        0.15571e06,
        0.16143e06,
        0.16732e06,
        0.17338e06,
        0.17962e06,
        0.18604e06,
        0.19264e06,
        0.19943e06,
        0.20642e06,
        0.21360e06,
        0.22098e06,
        0.22856e06,
        0.23636e06,
        0.24436e06,
    ]
)


#  --------------- CO2 628: M = 2, I = 3 ---------------------
M = 2
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11368e03,
        0.16096e03,
        0.20833e03,
        0.25603e03,
        0.30452e03,
        0.35442e03,
        0.40640e03,
        0.46110e03,
        0.51910e03,
        0.58093e03,
        0.64709e03,
        0.71804e03,
        0.79422e03,
        0.87607e03,
        0.96402e03,
        0.10585e04,
        0.11600e04,
        0.12689e04,
        0.13857e04,
        0.15108e04,
        0.16449e04,
        0.17883e04,
        0.19416e04,
        0.21054e04,
        0.22803e04,
        0.24668e04,
        0.26655e04,
        0.28770e04,
        0.31021e04,
        0.33414e04,
        0.35956e04,
        0.38654e04,
        0.41516e04,
        0.44549e04,
        0.47761e04,
        0.51160e04,
        0.54755e04,
        0.58555e04,
        0.62568e04,
        0.66804e04,
        0.71273e04,
        0.75982e04,
        0.80944e04,
        0.86169e04,
        0.91666e04,
        0.97446e04,
        0.10352e05,
        0.10990e05,
        0.11660e05,
        0.12363e05,
        0.13101e05,
        0.13874e05,
        0.14683e05,
        0.15531e05,
        0.16418e05,
        0.17347e05,
        0.18317e05,
        0.19332e05,
        0.20392e05,
        0.21499e05,
        0.22654e05,
        0.23859e05,
        0.25116e05,
        0.26426e05,
        0.27792e05,
        0.29214e05,
        0.30695e05,
        0.32236e05,
        0.33840e05,
        0.35508e05,
        0.37242e05,
        0.39045e05,
        0.40917e05,
        0.42862e05,
        0.44881e05,
        0.46977e05,
        0.49152e05,
        0.51407e05,
        0.53746e05,
        0.56171e05,
        0.58683e05,
        0.61286e05,
        0.63981e05,
        0.66772e05,
        0.69661e05,
        0.72650e05,
        0.75742e05,
        0.78940e05,
        0.82246e05,
        0.85664e05,
        0.89196e05,
        0.92845e05,
        0.96613e05,
        0.10050e06,
        0.10452e06,
        0.10867e06,
        0.11295e06,
        0.11736e06,
        0.12191e06,
        0.12661e06,
        0.13145e06,
        0.13643e06,
        0.14157e06,
        0.14687e06,
        0.15232e06,
        0.15794e06,
        0.16372e06,
        0.16968e06,
        0.17580e06,
        0.18211e06,
        0.18859e06,
        0.19526e06,
        0.20213e06,
        0.20918e06,
        0.21643e06,
        0.22388e06,
        0.23154e06,
        0.23941e06,
        0.24750e06,
    ]
)


#  --------------- CO2 627: M = 2, I = 4 ---------------------
M = 2
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.66338e03,
        0.93923e03,
        0.12156e04,
        0.14938e04,
        0.17766e04,
        0.20676e04,
        0.23705e04,
        0.26891e04,
        0.30267e04,
        0.33866e04,
        0.37714e04,
        0.41839e04,
        0.46267e04,
        0.51023e04,
        0.56132e04,
        0.61618e04,
        0.67508e04,
        0.73827e04,
        0.80603e04,
        0.87863e04,
        0.95636e04,
        0.10395e05,
        0.11284e05,
        0.12233e05,
        0.13246e05,
        0.14326e05,
        0.15477e05,
        0.16702e05,
        0.18005e05,
        0.19390e05,
        0.20861e05,
        0.22422e05,
        0.24077e05,
        0.25832e05,
        0.27689e05,
        0.29655e05,
        0.31734e05,
        0.33931e05,
        0.36250e05,
        0.38698e05,
        0.41280e05,
        0.44002e05,
        0.46869e05,
        0.49886e05,
        0.53062e05,
        0.56400e05,
        0.59909e05,
        0.63594e05,
        0.67462e05,
        0.71521e05,
        0.75777e05,
        0.80238e05,
        0.84911e05,
        0.89804e05,
        0.94925e05,
        0.10028e06,
        0.10588e06,
        0.11173e06,
        0.11785e06,
        0.12423e06,
        0.13090e06,
        0.13785e06,
        0.14510e06,
        0.15265e06,
        0.16053e06,
        0.16873e06,
        0.17727e06,
        0.18615e06,
        0.19540e06,
        0.20501e06,
        0.21501e06,
        0.22540e06,
        0.23619e06,
        0.24740e06,
        0.25904e06,
        0.27112e06,
        0.28365e06,
        0.29664e06,
        0.31012e06,
        0.32409e06,
        0.33856e06,
        0.35356e06,
        0.36908e06,
        0.38516e06,
        0.40180e06,
        0.41902e06,
        0.43683e06,
        0.45525e06,
        0.47429e06,
        0.49397e06,
        0.51431e06,
        0.53532e06,
        0.55702e06,
        0.57943e06,
        0.60256e06,
        0.62644e06,
        0.65107e06,
        0.67648e06,
        0.70269e06,
        0.72972e06,
        0.75758e06,
        0.78629e06,
        0.81588e06,
        0.84636e06,
        0.87775e06,
        0.91008e06,
        0.94337e06,
        0.97763e06,
        0.10129e07,
        0.10492e07,
        0.10865e07,
        0.11249e07,
        0.11644e07,
        0.12050e07,
        0.12467e07,
        0.12896e07,
        0.13337e07,
        0.13789e07,
        0.14255e07,
    ]
)


#  --------------- CO2 638: M = 2, I = 5 ---------------------
M = 2
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.22737e03,
        0.32194e03,
        0.41671e03,
        0.51226e03,
        0.60963e03,
        0.71017e03,
        0.81528e03,
        0.92628e03,
        0.10444e04,
        0.11707e04,
        0.13061e04,
        0.14518e04,
        0.16085e04,
        0.17772e04,
        0.19588e04,
        0.21542e04,
        0.23644e04,
        0.25903e04,
        0.28330e04,
        0.30934e04,
        0.33726e04,
        0.36717e04,
        0.39918e04,
        0.43342e04,
        0.47001e04,
        0.50907e04,
        0.55074e04,
        0.59515e04,
        0.64244e04,
        0.69276e04,
        0.74626e04,
        0.80310e04,
        0.86344e04,
        0.92744e04,
        0.99528e04,
        0.10671e05,
        0.11432e05,
        0.12236e05,
        0.13086e05,
        0.13984e05,
        0.14932e05,
        0.15932e05,
        0.16985e05,
        0.18096e05,
        0.19265e05,
        0.20495e05,
        0.21788e05,
        0.23148e05,
        0.24576e05,
        0.26075e05,
        0.27648e05,
        0.29298e05,
        0.31027e05,
        0.32839e05,
        0.34736e05,
        0.36721e05,
        0.38798e05,
        0.40970e05,
        0.43240e05,
        0.45611e05,
        0.48087e05,
        0.50671e05,
        0.53368e05,
        0.56180e05,
        0.59111e05,
        0.62165e05,
        0.65347e05,
        0.68659e05,
        0.72107e05,
        0.75694e05,
        0.79425e05,
        0.83303e05,
        0.87334e05,
        0.91522e05,
        0.95872e05,
        0.10039e06,
        0.10507e06,
        0.10994e06,
        0.11498e06,
        0.12021e06,
        0.12563e06,
        0.13125e06,
        0.13707e06,
        0.14309e06,
        0.14933e06,
        0.15579e06,
        0.16247e06,
        0.16938e06,
        0.17653e06,
        0.18392e06,
        0.19156e06,
        0.19946e06,
        0.20761e06,
        0.21604e06,
        0.22473e06,
        0.23371e06,
        0.24298e06,
        0.25254e06,
        0.26240e06,
        0.27258e06,
        0.28307e06,
        0.29388e06,
        0.30502e06,
        0.31651e06,
        0.32834e06,
        0.34052e06,
        0.35307e06,
        0.36599e06,
        0.37929e06,
        0.39298e06,
        0.40706e06,
        0.42155e06,
        0.43645e06,
        0.45178e06,
        0.46753e06,
        0.48373e06,
        0.50038e06,
        0.51748e06,
        0.53506e06,
    ]
)


#  --------------- CO2 637: M = 2, I = 6 ---------------------
M = 2
I = 6
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.13267e04,
        0.18785e04,
        0.24314e04,
        0.29888e04,
        0.35566e04,
        0.41426e04,
        0.47550e04,
        0.54013e04,
        0.60886e04,
        0.68232e04,
        0.76109e04,
        0.84574e04,
        0.93678e04,
        0.10348e05,
        0.11402e05,
        0.12536e05,
        0.13755e05,
        0.15065e05,
        0.16471e05,
        0.17980e05,
        0.19598e05,
        0.21330e05,
        0.23184e05,
        0.25166e05,
        0.27283e05,
        0.29543e05,
        0.31953e05,
        0.34521e05,
        0.37256e05,
        0.40164e05,
        0.43256e05,
        0.46541e05,
        0.50026e05,
        0.53723e05,
        0.57641e05,
        0.61790e05,
        0.66180e05,
        0.70823e05,
        0.75729e05,
        0.80910e05,
        0.86378e05,
        0.92145e05,
        0.98224e05,
        0.10463e06,
        0.11137e06,
        0.11846e06,
        0.12592e06,
        0.13375e06,
        0.14198e06,
        0.15062e06,
        0.15969e06,
        0.16920e06,
        0.17916e06,
        0.18959e06,
        0.20052e06,
        0.21196e06,
        0.22392e06,
        0.23642e06,
        0.24949e06,
        0.26314e06,
        0.27740e06,
        0.29227e06,
        0.30779e06,
        0.32398e06,
        0.34085e06,
        0.35842e06,
        0.37673e06,
        0.39579e06,
        0.41563e06,
        0.43626e06,
        0.45772e06,
        0.48003e06,
        0.50322e06,
        0.52730e06,
        0.55232e06,
        0.57829e06,
        0.60524e06,
        0.63320e06,
        0.66219e06,
        0.69226e06,
        0.72342e06,
        0.75571e06,
        0.78916e06,
        0.82380e06,
        0.85966e06,
        0.89678e06,
        0.93518e06,
        0.97490e06,
        0.10160e07,
        0.10585e07,
        0.11023e07,
        0.11477e07,
        0.11946e07,
        0.12430e07,
        0.12929e07,
        0.13445e07,
        0.13977e07,
        0.14526e07,
        0.15093e07,
        0.15677e07,
        0.16280e07,
        0.16901e07,
        0.17541e07,
        0.18200e07,
        0.18880e07,
        0.19579e07,
        0.20300e07,
        0.21042e07,
        0.21805e07,
        0.22591e07,
        0.23400e07,
        0.24232e07,
        0.25087e07,
        0.25967e07,
        0.26871e07,
        0.27801e07,
        0.28757e07,
        0.29739e07,
        0.30747e07,
    ]
)


#  --------------- CO2 828: M = 2, I = 7 ---------------------
M = 2
I = 7
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.60334e02,
        0.85430e02,
        0.11058e03,
        0.13590e03,
        0.16167e03,
        0.18821e03,
        0.21588e03,
        0.24502e03,
        0.27595e03,
        0.30896e03,
        0.34431e03,
        0.38225e03,
        0.42301e03,
        0.46684e03,
        0.51397e03,
        0.56464e03,
        0.61907e03,
        0.67753e03,
        0.74027e03,
        0.80753e03,
        0.87961e03,
        0.95676e03,
        0.10393e04,
        0.11275e04,
        0.12217e04,
        0.13222e04,
        0.14293e04,
        0.15434e04,
        0.16648e04,
        0.17940e04,
        0.19312e04,
        0.20769e04,
        0.22315e04,
        0.23954e04,
        0.25691e04,
        0.27529e04,
        0.29474e04,
        0.31530e04,
        0.33702e04,
        0.35995e04,
        0.38414e04,
        0.40965e04,
        0.43654e04,
        0.46484e04,
        0.49464e04,
        0.52598e04,
        0.55892e04,
        0.59353e04,
        0.62988e04,
        0.66803e04,
        0.70804e04,
        0.74998e04,
        0.79394e04,
        0.83998e04,
        0.88817e04,
        0.93859e04,
        0.99132e04,
        0.10464e05,
        0.11040e05,
        0.11642e05,
        0.12270e05,
        0.12925e05,
        0.13609e05,
        0.14321e05,
        0.15064e05,
        0.15838e05,
        0.16643e05,
        0.17482e05,
        0.18355e05,
        0.19263e05,
        0.20207e05,
        0.21188e05,
        0.22208e05,
        0.23267e05,
        0.24366e05,
        0.25508e05,
        0.26692e05,
        0.27921e05,
        0.29195e05,
        0.30516e05,
        0.31886e05,
        0.33304e05,
        0.34773e05,
        0.36294e05,
        0.37869e05,
        0.39499e05,
        0.41185e05,
        0.42929e05,
        0.44732e05,
        0.46596e05,
        0.48522e05,
        0.50513e05,
        0.52569e05,
        0.54692e05,
        0.56884e05,
        0.59146e05,
        0.61481e05,
        0.63890e05,
        0.66375e05,
        0.68937e05,
        0.71578e05,
        0.74301e05,
        0.77107e05,
        0.79998e05,
        0.82976e05,
        0.86043e05,
        0.89201e05,
        0.92452e05,
        0.95799e05,
        0.99242e05,
        0.10278e06,
        0.10643e06,
        0.11018e06,
        0.11403e06,
        0.11799e06,
        0.12206e06,
        0.12625e06,
        0.13055e06,
        0.13497e06,
    ]
)


#  --------------- CO2 728: M = 2, I = 8 ---------------------
M = 2
I = 8
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.70354e03,
        0.99615e03,
        0.12893e04,
        0.15846e04,
        0.18848e04,
        0.21940e04,
        0.25162e04,
        0.28554e04,
        0.32152e04,
        0.35991e04,
        0.40099e04,
        0.44507e04,
        0.49242e04,
        0.54332e04,
        0.59802e04,
        0.65681e04,
        0.71996e04,
        0.78776e04,
        0.86050e04,
        0.93847e04,
        0.10220e05,
        0.11114e05,
        0.12070e05,
        0.13091e05,
        0.14182e05,
        0.15345e05,
        0.16585e05,
        0.17906e05,
        0.19311e05,
        0.20805e05,
        0.22393e05,
        0.24078e05,
        0.25865e05,
        0.27760e05,
        0.29768e05,
        0.31893e05,
        0.34140e05,
        0.36516e05,
        0.39025e05,
        0.41674e05,
        0.44469e05,
        0.47416e05,
        0.50520e05,
        0.53789e05,
        0.57229e05,
        0.60847e05,
        0.64650e05,
        0.68645e05,
        0.72840e05,
        0.77242e05,
        0.81859e05,
        0.86699e05,
        0.91770e05,
        0.97081e05,
        0.10264e06,
        0.10846e06,
        0.11454e06,
        0.12090e06,
        0.12754e06,
        0.13447e06,
        0.14171e06,
        0.14927e06,
        0.15715e06,
        0.16536e06,
        0.17392e06,
        0.18284e06,
        0.19213e06,
        0.20179e06,
        0.21185e06,
        0.22231e06,
        0.23319e06,
        0.24450e06,
        0.25625e06,
        0.26845e06,
        0.28112e06,
        0.29427e06,
        0.30791e06,
        0.32206e06,
        0.33674e06,
        0.35196e06,
        0.36772e06,
        0.38406e06,
        0.40098e06,
        0.41850e06,
        0.43663e06,
        0.45539e06,
        0.47480e06,
        0.49488e06,
        0.51564e06,
        0.53710e06,
        0.55928e06,
        0.58219e06,
        0.60586e06,
        0.63029e06,
        0.65553e06,
        0.68157e06,
        0.70844e06,
        0.73616e06,
        0.76476e06,
        0.79424e06,
        0.82464e06,
        0.85597e06,
        0.88826e06,
        0.92153e06,
        0.95580e06,
        0.99108e06,
        0.10274e07,
        0.10648e07,
        0.11033e07,
        0.11429e07,
        0.11837e07,
        0.12256e07,
        0.12687e07,
        0.13131e07,
        0.13586e07,
        0.14055e07,
        0.14536e07,
        0.15031e07,
        0.15539e07,
    ]
)


#  --------------- CO2 727: M = 2, I = 9 ---------------------
M = 2
I = 9
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.20518e04,
        0.29051e04,
        0.37601e04,
        0.46209e04,
        0.54961e04,
        0.63969e04,
        0.73353e04,
        0.83227e04,
        0.93698e04,
        0.10486e05,
        0.11681e05,
        0.12962e05,
        0.14337e05,
        0.15815e05,
        0.17403e05,
        0.19110e05,
        0.20942e05,
        0.22909e05,
        0.25018e05,
        0.27278e05,
        0.29699e05,
        0.32290e05,
        0.35060e05,
        0.38019e05,
        0.41177e05,
        0.44545e05,
        0.48135e05,
        0.51957e05,
        0.56023e05,
        0.60346e05,
        0.64938e05,
        0.69812e05,
        0.74981e05,
        0.80461e05,
        0.86264e05,
        0.92406e05,
        0.98902e05,
        0.10577e06,
        0.11302e06,
        0.12067e06,
        0.12875e06,
        0.13726e06,
        0.14622e06,
        0.15566e06,
        0.16559e06,
        0.17604e06,
        0.18702e06,
        0.19855e06,
        0.21066e06,
        0.22336e06,
        0.23669e06,
        0.25065e06,
        0.26528e06,
        0.28061e06,
        0.29664e06,
        0.31342e06,
        0.33096e06,
        0.34930e06,
        0.36845e06,
        0.38845e06,
        0.40933e06,
        0.43111e06,
        0.45383e06,
        0.47751e06,
        0.50219e06,
        0.52790e06,
        0.55466e06,
        0.58252e06,
        0.61151e06,
        0.64166e06,
        0.67300e06,
        0.70558e06,
        0.73943e06,
        0.77458e06,
        0.81108e06,
        0.84896e06,
        0.88827e06,
        0.92904e06,
        0.97131e06,
        0.10151e07,
        0.10605e07,
        0.11076e07,
        0.11563e07,
        0.12068e07,
        0.12590e07,
        0.13130e07,
        0.13689e07,
        0.14267e07,
        0.14865e07,
        0.15483e07,
        0.16121e07,
        0.16781e07,
        0.17462e07,
        0.18165e07,
        0.18892e07,
        0.19641e07,
        0.20415e07,
        0.21213e07,
        0.22036e07,
        0.22884e07,
        0.23759e07,
        0.24661e07,
        0.25590e07,
        0.26547e07,
        0.27533e07,
        0.28549e07,
        0.29594e07,
        0.30670e07,
        0.31778e07,
        0.32918e07,
        0.34090e07,
        0.35296e07,
        0.36536e07,
        0.37812e07,
        0.39123e07,
        0.40470e07,
        0.41855e07,
        0.43278e07,
        0.44739e07,
    ]
)


#  --------------- CO2 838: M = 2, I = 10 ---------------------
M = 2
I = 10
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.12066e03,
        0.17085e03,
        0.22116e03,
        0.27190e03,
        0.32364e03,
        0.37711e03,
        0.43305e03,
        0.49219e03,
        0.55516e03,
        0.62256e03,
        0.69492e03,
        0.77276e03,
        0.85657e03,
        0.94685e03,
        0.10441e04,
        0.11488e04,
        0.12614e04,
        0.13826e04,
        0.15127e04,
        0.16525e04,
        0.18024e04,
        0.19630e04,
        0.21351e04,
        0.23191e04,
        0.25158e04,
        0.27260e04,
        0.29502e04,
        0.31892e04,
        0.34438e04,
        0.37148e04,
        0.40031e04,
        0.43094e04,
        0.46346e04,
        0.49797e04,
        0.53455e04,
        0.57331e04,
        0.61434e04,
        0.65775e04,
        0.70364e04,
        0.75212e04,
        0.80330e04,
        0.85730e04,
        0.91424e04,
        0.97423e04,
        0.10374e05,
        0.11039e05,
        0.11738e05,
        0.12474e05,
        0.13246e05,
        0.14057e05,
        0.14908e05,
        0.15801e05,
        0.16737e05,
        0.17717e05,
        0.18744e05,
        0.19819e05,
        0.20944e05,
        0.22120e05,
        0.23349e05,
        0.24634e05,
        0.25975e05,
        0.27376e05,
        0.28837e05,
        0.30361e05,
        0.31950e05,
        0.33605e05,
        0.35330e05,
        0.37126e05,
        0.38996e05,
        0.40942e05,
        0.42965e05,
        0.45069e05,
        0.47256e05,
        0.49528e05,
        0.51888e05,
        0.54338e05,
        0.56882e05,
        0.59521e05,
        0.62259e05,
        0.65097e05,
        0.68040e05,
        0.71090e05,
        0.74249e05,
        0.77522e05,
        0.80910e05,
        0.84417e05,
        0.88046e05,
        0.91801e05,
        0.95684e05,
        0.99699e05,
        0.10385e06,
        0.10814e06,
        0.11257e06,
        0.11715e06,
        0.12187e06,
        0.12675e06,
        0.13179e06,
        0.13699e06,
        0.14235e06,
        0.14788e06,
        0.15358e06,
        0.15946e06,
        0.16552e06,
        0.17176e06,
        0.17819e06,
        0.18482e06,
        0.19164e06,
        0.19867e06,
        0.20590e06,
        0.21335e06,
        0.22101e06,
        0.22889e06,
        0.23699e06,
        0.24533e06,
        0.25390e06,
        0.26271e06,
        0.27177e06,
        0.28108e06,
        0.29064e06,
    ]
)

#  --------------- CO2 838: M = 2, I = 0 ALIAS-----------------
TIPS_GSI_HASH[(M, 0)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, 0)] = TIPS_ISO_HASH[(M, I)]

#  --------------- CO2 837: M = 2, I = 11 ---------------------
M = 2
I = 11
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.14071e04,
        0.19923e04,
        0.25789e04,
        0.31704e04,
        0.37733e04,
        0.43962e04,
        0.50477e04,
        0.57360e04,
        0.64687e04,
        0.72525e04,
        0.80938e04,
        0.89984e04,
        0.99723e04,
        0.11021e05,
        0.12150e05,
        0.13366e05,
        0.14673e05,
        0.16079e05,
        0.17589e05,
        0.19211e05,
        0.20949e05,
        0.22812e05,
        0.24807e05,
        0.26940e05,
        0.29221e05,
        0.31656e05,
        0.34254e05,
        0.37023e05,
        0.39972e05,
        0.43111e05,
        0.46449e05,
        0.49996e05,
        0.53762e05,
        0.57756e05,
        0.61991e05,
        0.66477e05,
        0.71226e05,
        0.76249e05,
        0.81558e05,
        0.87167e05,
        0.93088e05,
        0.99334e05,
        0.10592e06,
        0.11286e06,
        0.12016e06,
        0.12785e06,
        0.13594e06,
        0.14444e06,
        0.15337e06,
        0.16274e06,
        0.17258e06,
        0.18290e06,
        0.19371e06,
        0.20504e06,
        0.21691e06,
        0.22933e06,
        0.24233e06,
        0.25592e06,
        0.27012e06,
        0.28496e06,
        0.30046e06,
        0.31663e06,
        0.33351e06,
        0.35111e06,
        0.36946e06,
        0.38858e06,
        0.40850e06,
        0.42924e06,
        0.45083e06,
        0.47329e06,
        0.49666e06,
        0.52095e06,
        0.54620e06,
        0.57243e06,
        0.59967e06,
        0.62796e06,
        0.65732e06,
        0.68778e06,
        0.71938e06,
        0.75214e06,
        0.78611e06,
        0.82131e06,
        0.85777e06,
        0.89553e06,
        0.93463e06,
        0.97511e06,
        0.10170e07,
        0.10603e07,
        0.11051e07,
        0.11514e07,
        0.11993e07,
        0.12488e07,
        0.12999e07,
        0.13527e07,
        0.14073e07,
        0.14636e07,
        0.15217e07,
        0.15816e07,
        0.16435e07,
        0.17072e07,
        0.17730e07,
        0.18408e07,
        0.19107e07,
        0.19827e07,
        0.20569e07,
        0.21334e07,
        0.22121e07,
        0.22931e07,
        0.23765e07,
        0.24624e07,
        0.25507e07,
        0.26416e07,
        0.27351e07,
        0.28312e07,
        0.29301e07,
        0.30317e07,
        0.31361e07,
        0.32434e07,
        0.33537e07,
    ]
)


#  --------------- O3 666: M = 3, I = 1 ---------------------
M = 3
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.30333e03,
        0.51126e03,
        0.75274e03,
        0.10241e04,
        0.13236e04,
        0.16508e04,
        0.20068e04,
        0.23935e04,
        0.28136e04,
        0.32703e04,
        0.37672e04,
        0.43082e04,
        0.48975e04,
        0.55395e04,
        0.62386e04,
        0.69996e04,
        0.78272e04,
        0.87264e04,
        0.97026e04,
        0.10761e05,
        0.11907e05,
        0.13146e05,
        0.14485e05,
        0.15929e05,
        0.17484e05,
        0.19158e05,
        0.20957e05,
        0.22887e05,
        0.24956e05,
        0.27172e05,
        0.29541e05,
        0.32072e05,
        0.34773e05,
        0.37652e05,
        0.40718e05,
        0.43979e05,
        0.47444e05,
        0.51123e05,
        0.55026e05,
        0.59161e05,
        0.63540e05,
        0.68172e05,
        0.73069e05,
        0.78240e05,
        0.83698e05,
        0.89453e05,
        0.95517e05,
        0.10190e06,
        0.10862e06,
        0.11569e06,
        0.12311e06,
        0.13091e06,
        0.13909e06,
        0.14767e06,
        0.15666e06,
        0.16608e06,
        0.17594e06,
        0.18626e06,
        0.19706e06,
        0.20834e06,
        0.22012e06,
        0.23242e06,
        0.24526e06,
        0.25866e06,
        0.27262e06,
        0.28717e06,
        0.30233e06,
        0.31811e06,
        0.33453e06,
        0.35161e06,
        0.36937e06,
        0.38784e06,
        0.40702e06,
        0.42694e06,
        0.44762e06,
        0.46909e06,
        0.49135e06,
        0.51444e06,
        0.53838e06,
        0.56318e06,
        0.58887e06,
        0.61548e06,
        0.64303e06,
        0.67153e06,
        0.70102e06,
        0.73153e06,
        0.76306e06,
        0.79566e06,
        0.82934e06,
        0.86413e06,
        0.90006e06,
        0.93716e06,
        0.97545e06,
        0.10150e07,
        0.10557e07,
        0.10977e07,
        0.11411e07,
        0.11858e07,
        0.12318e07,
        0.12792e07,
        0.13281e07,
        0.13784e07,
        0.14302e07,
        0.14835e07,
        0.15384e07,
        0.15948e07,
        0.16529e07,
        0.17126e07,
        0.17740e07,
        0.18371e07,
        0.19020e07,
        0.19686e07,
        0.20371e07,
        0.21074e07,
        0.21797e07,
        0.22538e07,
        0.23300e07,
        0.24081e07,
        0.24883e07,
    ]
)


#  --------------- O3 668: M = 3, I = 2 ---------------------
M = 3
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.64763e03,
        0.10916e04,
        0.16073e04,
        0.21870e04,
        0.28271e04,
        0.35272e04,
        0.42900e04,
        0.51197e04,
        0.60225e04,
        0.70057e04,
        0.80771e04,
        0.92455e04,
        0.10520e05,
        0.11911e05,
        0.13427e05,
        0.15079e05,
        0.16878e05,
        0.18834e05,
        0.20960e05,
        0.23267e05,
        0.25767e05,
        0.28472e05,
        0.31397e05,
        0.34553e05,
        0.37957e05,
        0.41620e05,
        0.45559e05,
        0.49790e05,
        0.54327e05,
        0.59187e05,
        0.64387e05,
        0.69944e05,
        0.75877e05,
        0.82203e05,
        0.88943e05,
        0.96114e05,
        0.10374e06,
        0.11184e06,
        0.12043e06,
        0.12954e06,
        0.13918e06,
        0.14939e06,
        0.16018e06,
        0.17159e06,
        0.18362e06,
        0.19632e06,
        0.20970e06,
        0.22380e06,
        0.23863e06,
        0.25423e06,
        0.27063e06,
        0.28786e06,
        0.30594e06,
        0.32490e06,
        0.34478e06,
        0.36561e06,
        0.38743e06,
        0.41026e06,
        0.43413e06,
        0.45909e06,
        0.48517e06,
        0.51241e06,
        0.54084e06,
        0.57049e06,
        0.60141e06,
        0.63365e06,
        0.66722e06,
        0.70219e06,
        0.73858e06,
        0.77644e06,
        0.81581e06,
        0.85674e06,
        0.89927e06,
        0.94345e06,
        0.98932e06,
        0.10369e07,
        0.10863e07,
        0.11375e07,
        0.11906e07,
        0.12457e07,
        0.13027e07,
        0.13618e07,
        0.14229e07,
        0.14862e07,
        0.15517e07,
        0.16194e07,
        0.16894e07,
        0.17618e07,
        0.18366e07,
        0.19139e07,
        0.19937e07,
        0.20761e07,
        0.21612e07,
        0.22490e07,
        0.23395e07,
        0.24330e07,
        0.25293e07,
        0.26286e07,
        0.27309e07,
        0.28363e07,
        0.29449e07,
        0.30568e07,
        0.31720e07,
        0.32905e07,
        0.34125e07,
        0.35381e07,
        0.36672e07,
        0.38000e07,
        0.39366e07,
        0.40770e07,
        0.42213e07,
        0.43696e07,
        0.45220e07,
        0.46785e07,
        0.48392e07,
        0.50043e07,
        0.51737e07,
        0.53476e07,
        0.55261e07,
    ]
)


#  --------------- O3 686: M = 3, I = 3 ---------------------
M = 3
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.31656e03,
        0.53355e03,
        0.78557e03,
        0.10688e04,
        0.13815e04,
        0.17235e04,
        0.20960e04,
        0.25011e04,
        0.29420e04,
        0.34223e04,
        0.39459e04,
        0.45172e04,
        0.51408e04,
        0.58213e04,
        0.65639e04,
        0.73735e04,
        0.82555e04,
        0.92152e04,
        0.10259e05,
        0.11391e05,
        0.12619e05,
        0.13949e05,
        0.15387e05,
        0.16940e05,
        0.18614e05,
        0.20417e05,
        0.22357e05,
        0.24440e05,
        0.26675e05,
        0.29070e05,
        0.31633e05,
        0.34374e05,
        0.37299e05,
        0.40420e05,
        0.43746e05,
        0.47285e05,
        0.51049e05,
        0.55047e05,
        0.59289e05,
        0.63788e05,
        0.68554e05,
        0.73598e05,
        0.78932e05,
        0.84568e05,
        0.90519e05,
        0.96796e05,
        0.10341e06,
        0.11039e06,
        0.11772e06,
        0.12544e06,
        0.13356e06,
        0.14208e06,
        0.15103e06,
        0.16041e06,
        0.17026e06,
        0.18057e06,
        0.19137e06,
        0.20268e06,
        0.21450e06,
        0.22687e06,
        0.23979e06,
        0.25328e06,
        0.26736e06,
        0.28206e06,
        0.29738e06,
        0.31336e06,
        0.33000e06,
        0.34733e06,
        0.36537e06,
        0.38414e06,
        0.40366e06,
        0.42396e06,
        0.44505e06,
        0.46696e06,
        0.48971e06,
        0.51332e06,
        0.53782e06,
        0.56323e06,
        0.58958e06,
        0.61689e06,
        0.64518e06,
        0.67448e06,
        0.70482e06,
        0.73623e06,
        0.76872e06,
        0.80234e06,
        0.83710e06,
        0.87303e06,
        0.91017e06,
        0.94853e06,
        0.98816e06,
        0.10291e07,
        0.10713e07,
        0.11149e07,
        0.11599e07,
        0.12063e07,
        0.12541e07,
        0.13034e07,
        0.13542e07,
        0.14066e07,
        0.14606e07,
        0.15161e07,
        0.15733e07,
        0.16322e07,
        0.16928e07,
        0.17552e07,
        0.18194e07,
        0.18854e07,
        0.19532e07,
        0.20230e07,
        0.20947e07,
        0.21684e07,
        0.22441e07,
        0.23219e07,
        0.24018e07,
        0.24838e07,
        0.25680e07,
        0.26545e07,
        0.27432e07,
    ]
)


#  --------------- O3 667: M = 3, I = 4 ---------------------
M = 3
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.37657e04,
        0.63472e04,
        0.93454e04,
        0.12715e05,
        0.16435e05,
        0.20502e05,
        0.24929e05,
        0.29742e05,
        0.34975e05,
        0.40668e05,
        0.46868e05,
        0.53624e05,
        0.60990e05,
        0.69018e05,
        0.77768e05,
        0.87296e05,
        0.97666e05,
        0.10894e06,
        0.12118e06,
        0.13446e06,
        0.14885e06,
        0.16441e06,
        0.18123e06,
        0.19938e06,
        0.21894e06,
        0.23998e06,
        0.26261e06,
        0.28690e06,
        0.31295e06,
        0.34084e06,
        0.37068e06,
        0.40256e06,
        0.43659e06,
        0.47287e06,
        0.51151e06,
        0.55262e06,
        0.59632e06,
        0.64272e06,
        0.69194e06,
        0.74412e06,
        0.79937e06,
        0.85783e06,
        0.91963e06,
        0.98492e06,
        0.10538e07,
        0.11265e07,
        0.12031e07,
        0.12837e07,
        0.13686e07,
        0.14579e07,
        0.15517e07,
        0.16502e07,
        0.17536e07,
        0.18621e07,
        0.19758e07,
        0.20949e07,
        0.22196e07,
        0.23501e07,
        0.24866e07,
        0.26292e07,
        0.27783e07,
        0.29339e07,
        0.30963e07,
        0.32658e07,
        0.34425e07,
        0.36266e07,
        0.38184e07,
        0.40181e07,
        0.42260e07,
        0.44422e07,
        0.46671e07,
        0.49008e07,
        0.51437e07,
        0.53959e07,
        0.56578e07,
        0.59296e07,
        0.62116e07,
        0.65040e07,
        0.68071e07,
        0.71213e07,
        0.74468e07,
        0.77838e07,
        0.81328e07,
        0.84939e07,
        0.88676e07,
        0.92541e07,
        0.96536e07,
        0.10067e08,
        0.10493e08,
        0.10934e08,
        0.11390e08,
        0.11860e08,
        0.12345e08,
        0.12846e08,
        0.13363e08,
        0.13895e08,
        0.14445e08,
        0.15011e08,
        0.15595e08,
        0.16196e08,
        0.16815e08,
        0.17453e08,
        0.18110e08,
        0.18786e08,
        0.19482e08,
        0.20198e08,
        0.20934e08,
        0.21691e08,
        0.22470e08,
        0.23270e08,
        0.24093e08,
        0.24939e08,
        0.25807e08,
        0.26699e08,
        0.27616e08,
        0.28556e08,
        0.29522e08,
        0.30514e08,
        0.31531e08,
    ]
)


#  --------------- O3 676: M = 3, I = 5 ---------------------
M = 3
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.18608e04,
        0.31363e04,
        0.46177e04,
        0.62826e04,
        0.81202e04,
        0.10129e05,
        0.12316e05,
        0.14693e05,
        0.17277e05,
        0.20089e05,
        0.23153e05,
        0.26492e05,
        0.30133e05,
        0.34103e05,
        0.38430e05,
        0.43145e05,
        0.48277e05,
        0.53858e05,
        0.59920e05,
        0.66497e05,
        0.73624e05,
        0.81336e05,
        0.89671e05,
        0.98668e05,
        0.10836e06,
        0.11880e06,
        0.13002e06,
        0.14207e06,
        0.15500e06,
        0.16884e06,
        0.18365e06,
        0.19947e06,
        0.21636e06,
        0.23438e06,
        0.25356e06,
        0.27398e06,
        0.29568e06,
        0.31873e06,
        0.34318e06,
        0.36911e06,
        0.39656e06,
        0.42561e06,
        0.45632e06,
        0.48877e06,
        0.52302e06,
        0.55914e06,
        0.59722e06,
        0.63732e06,
        0.67952e06,
        0.72390e06,
        0.77055e06,
        0.81954e06,
        0.87097e06,
        0.92491e06,
        0.98146e06,
        0.10407e07,
        0.11027e07,
        0.11677e07,
        0.12356e07,
        0.13066e07,
        0.13807e07,
        0.14582e07,
        0.15390e07,
        0.16233e07,
        0.17113e07,
        0.18029e07,
        0.18984e07,
        0.19978e07,
        0.21012e07,
        0.22089e07,
        0.23208e07,
        0.24372e07,
        0.25581e07,
        0.26837e07,
        0.28141e07,
        0.29494e07,
        0.30898e07,
        0.32354e07,
        0.33864e07,
        0.35428e07,
        0.37049e07,
        0.38728e07,
        0.40466e07,
        0.42264e07,
        0.44125e07,
        0.46050e07,
        0.48040e07,
        0.50098e07,
        0.52224e07,
        0.54420e07,
        0.56689e07,
        0.59031e07,
        0.61449e07,
        0.63943e07,
        0.66517e07,
        0.69172e07,
        0.71909e07,
        0.74731e07,
        0.77639e07,
        0.80635e07,
        0.83721e07,
        0.86900e07,
        0.90172e07,
        0.93541e07,
        0.97008e07,
        0.10058e08,
        0.10424e08,
        0.10802e08,
        0.11190e08,
        0.11589e08,
        0.11999e08,
        0.12420e08,
        0.12853e08,
        0.13298e08,
        0.13755e08,
        0.14223e08,
        0.14705e08,
        0.15199e08,
        0.15706e08,
    ]
)


#  --------------- O3 886: M = 3, I = 6 ---------------------
M = 3
I = 6
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.67639e03,
        0.11401e04,
        0.16787e04,
        0.22843e04,
        0.29532e04,
        0.36856e04,
        0.44842e04,
        0.53545e04,
        0.63030e04,
        0.73381e04,
        0.84686e04,
        0.97040e04,
        0.11054e05,
        0.12530e05,
        0.14143e05,
        0.15903e05,
        0.17823e05,
        0.19915e05,
        0.22190e05,
        0.24663e05,
        0.27346e05,
        0.30254e05,
        0.33400e05,
        0.36800e05,
        0.40469e05,
        0.44423e05,
        0.48678e05,
        0.53251e05,
        0.58160e05,
        0.63423e05,
        0.69058e05,
        0.75085e05,
        0.81524e05,
        0.88395e05,
        0.95719e05,
        0.10352e06,
        0.11181e06,
        0.12063e06,
        0.12999e06,
        0.13991e06,
        0.15043e06,
        0.16157e06,
        0.17335e06,
        0.18580e06,
        0.19895e06,
        0.21283e06,
        0.22746e06,
        0.24288e06,
        0.25911e06,
        0.27619e06,
        0.29415e06,
        0.31301e06,
        0.33283e06,
        0.35362e06,
        0.37542e06,
        0.39827e06,
        0.42221e06,
        0.44726e06,
        0.47348e06,
        0.50089e06,
        0.52954e06,
        0.55947e06,
        0.59072e06,
        0.62332e06,
        0.65733e06,
        0.69279e06,
        0.72973e06,
        0.76821e06,
        0.80827e06,
        0.84996e06,
        0.89332e06,
        0.93840e06,
        0.98526e06,
        0.10339e07,
        0.10845e07,
        0.11370e07,
        0.11914e07,
        0.12479e07,
        0.13065e07,
        0.13672e07,
        0.14302e07,
        0.14953e07,
        0.15628e07,
        0.16327e07,
        0.17050e07,
        0.17798e07,
        0.18571e07,
        0.19371e07,
        0.20197e07,
        0.21051e07,
        0.21933e07,
        0.22844e07,
        0.23785e07,
        0.24755e07,
        0.25757e07,
        0.26790e07,
        0.27855e07,
        0.28954e07,
        0.30086e07,
        0.31253e07,
        0.32455e07,
        0.33693e07,
        0.34967e07,
        0.36280e07,
        0.37631e07,
        0.39021e07,
        0.40451e07,
        0.41922e07,
        0.43435e07,
        0.44990e07,
        0.46589e07,
        0.48232e07,
        0.49920e07,
        0.51654e07,
        0.53436e07,
        0.55265e07,
        0.57143e07,
        0.59071e07,
        0.61050e07,
    ]
)


#  --------------- O3 868: M = 3, I = 7 ---------------------
M = 3
I = 7
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.34615e03,
        0.58348e03,
        0.85915e03,
        0.11692e04,
        0.15117e04,
        0.18868e04,
        0.22960e04,
        0.27419e04,
        0.32278e04,
        0.37579e04,
        0.43366e04,
        0.49686e04,
        0.56591e04,
        0.64134e04,
        0.72369e04,
        0.81354e04,
        0.91148e04,
        0.10181e05,
        0.11341e05,
        0.12600e05,
        0.13966e05,
        0.15446e05,
        0.17046e05,
        0.18775e05,
        0.20640e05,
        0.22649e05,
        0.24810e05,
        0.27132e05,
        0.29624e05,
        0.32295e05,
        0.35154e05,
        0.38211e05,
        0.41475e05,
        0.44958e05,
        0.48670e05,
        0.52621e05,
        0.56823e05,
        0.61288e05,
        0.66026e05,
        0.71052e05,
        0.76376e05,
        0.82011e05,
        0.87972e05,
        0.94271e05,
        0.10092e06,
        0.10794e06,
        0.11534e06,
        0.12313e06,
        0.13134e06,
        0.13997e06,
        0.14905e06,
        0.15858e06,
        0.16859e06,
        0.17909e06,
        0.19010e06,
        0.20164e06,
        0.21373e06,
        0.22638e06,
        0.23962e06,
        0.25346e06,
        0.26792e06,
        0.28302e06,
        0.29879e06,
        0.31524e06,
        0.33240e06,
        0.35029e06,
        0.36892e06,
        0.38833e06,
        0.40853e06,
        0.42956e06,
        0.45142e06,
        0.47416e06,
        0.49778e06,
        0.52233e06,
        0.54781e06,
        0.57427e06,
        0.60172e06,
        0.63019e06,
        0.65971e06,
        0.69031e06,
        0.72201e06,
        0.75485e06,
        0.78886e06,
        0.82405e06,
        0.86048e06,
        0.89815e06,
        0.93711e06,
        0.97739e06,
        0.10190e07,
        0.10620e07,
        0.11065e07,
        0.11523e07,
        0.11997e07,
        0.12485e07,
        0.12990e07,
        0.13510e07,
        0.14046e07,
        0.14599e07,
        0.15169e07,
        0.15756e07,
        0.16361e07,
        0.16984e07,
        0.17626e07,
        0.18287e07,
        0.18966e07,
        0.19666e07,
        0.20386e07,
        0.21126e07,
        0.21887e07,
        0.22669e07,
        0.23474e07,
        0.24300e07,
        0.25150e07,
        0.26022e07,
        0.26919e07,
        0.27839e07,
        0.28784e07,
        0.29753e07,
        0.30749e07,
    ]
)


#  --------------- O3 678: M = 3, I = 8 ---------------------
M = 3
I = 8
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.39745e04,
        0.66993e04,
        0.98642e04,
        0.13422e05,
        0.17352e05,
        0.21652e05,
        0.26339e05,
        0.31442e05,
        0.37000e05,
        0.43058e05,
        0.49669e05,
        0.56885e05,
        0.64766e05,
        0.73372e05,
        0.82765e05,
        0.93011e05,
        0.10418e06,
        0.11633e06,
        0.12955e06,
        0.14390e06,
        0.15946e06,
        0.17632e06,
        0.19455e06,
        0.21424e06,
        0.23547e06,
        0.25835e06,
        0.28296e06,
        0.30939e06,
        0.33776e06,
        0.36816e06,
        0.40070e06,
        0.43549e06,
        0.47264e06,
        0.51228e06,
        0.55451e06,
        0.59947e06,
        0.64728e06,
        0.69807e06,
        0.75198e06,
        0.80915e06,
        0.86971e06,
        0.93381e06,
        0.10016e07,
        0.10733e07,
        0.11489e07,
        0.12287e07,
        0.13128e07,
        0.14015e07,
        0.14948e07,
        0.15930e07,
        0.16961e07,
        0.18045e07,
        0.19183e07,
        0.20378e07,
        0.21629e07,
        0.22942e07,
        0.24316e07,
        0.25754e07,
        0.27258e07,
        0.28831e07,
        0.30475e07,
        0.32192e07,
        0.33984e07,
        0.35855e07,
        0.37805e07,
        0.39838e07,
        0.41956e07,
        0.44162e07,
        0.46458e07,
        0.48847e07,
        0.51332e07,
        0.53916e07,
        0.56601e07,
        0.59390e07,
        0.62286e07,
        0.65292e07,
        0.68412e07,
        0.71647e07,
        0.75002e07,
        0.78479e07,
        0.82081e07,
        0.85813e07,
        0.89676e07,
        0.93676e07,
        0.97814e07,
        0.10209e08,
        0.10652e08,
        0.11110e08,
        0.11583e08,
        0.12071e08,
        0.12576e08,
        0.13097e08,
        0.13635e08,
        0.14190e08,
        0.14763e08,
        0.15354e08,
        0.15963e08,
        0.16592e08,
        0.17239e08,
        0.17906e08,
        0.18593e08,
        0.19301e08,
        0.20030e08,
        0.20780e08,
        0.21553e08,
        0.22347e08,
        0.23165e08,
        0.24006e08,
        0.24870e08,
        0.25759e08,
        0.26673e08,
        0.27612e08,
        0.28577e08,
        0.29568e08,
        0.30585e08,
        0.31631e08,
        0.32704e08,
        0.33805e08,
        0.34936e08,
    ]
)


#  --------------- O3 768: M = 3, I = 9 ---------------------
M = 3
I = 9
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.40228e04,
        0.67808e04,
        0.99842e04,
        0.13586e05,
        0.17564e05,
        0.21919e05,
        0.26665e05,
        0.31833e05,
        0.37461e05,
        0.43596e05,
        0.50286e05,
        0.57589e05,
        0.65562e05,
        0.74264e05,
        0.83761e05,
        0.94115e05,
        0.10540e06,
        0.11767e06,
        0.13102e06,
        0.14550e06,
        0.16121e06,
        0.17822e06,
        0.19661e06,
        0.21646e06,
        0.23788e06,
        0.26094e06,
        0.28574e06,
        0.31239e06,
        0.34097e06,
        0.37160e06,
        0.40437e06,
        0.43941e06,
        0.47683e06,
        0.51673e06,
        0.55925e06,
        0.60451e06,
        0.65262e06,
        0.70374e06,
        0.75799e06,
        0.81550e06,
        0.87643e06,
        0.94092e06,
        0.10091e07,
        0.10812e07,
        0.11572e07,
        0.12375e07,
        0.13221e07,
        0.14112e07,
        0.15050e07,
        0.16037e07,
        0.17074e07,
        0.18164e07,
        0.19307e07,
        0.20507e07,
        0.21765e07,
        0.23084e07,
        0.24464e07,
        0.25909e07,
        0.27421e07,
        0.29001e07,
        0.30652e07,
        0.32377e07,
        0.34177e07,
        0.36055e07,
        0.38014e07,
        0.40055e07,
        0.42182e07,
        0.44397e07,
        0.46703e07,
        0.49102e07,
        0.51597e07,
        0.54191e07,
        0.56886e07,
        0.59686e07,
        0.62593e07,
        0.65611e07,
        0.68742e07,
        0.71989e07,
        0.75356e07,
        0.78846e07,
        0.82461e07,
        0.86206e07,
        0.90083e07,
        0.94097e07,
        0.98249e07,
        0.10254e08,
        0.10699e08,
        0.11158e08,
        0.11632e08,
        0.12123e08,
        0.12629e08,
        0.13152e08,
        0.13691e08,
        0.14248e08,
        0.14823e08,
        0.15416e08,
        0.16027e08,
        0.16657e08,
        0.17307e08,
        0.17976e08,
        0.18665e08,
        0.19375e08,
        0.20106e08,
        0.20858e08,
        0.21633e08,
        0.22430e08,
        0.23250e08,
        0.24093e08,
        0.24960e08,
        0.25851e08,
        0.26767e08,
        0.27709e08,
        0.28676e08,
        0.29670e08,
        0.30691e08,
        0.31739e08,
        0.32815e08,
        0.33919e08,
        0.35053e08,
    ]
)


#  --------------- O3 786: M = 3, I = 10 ---------------------
M = 3
I = 10
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.39315e04,
        0.66267e04,
        0.97569e04,
        0.13276e05,
        0.17162e05,
        0.21414e05,
        0.26048e05,
        0.31094e05,
        0.36590e05,
        0.42581e05,
        0.49120e05,
        0.56260e05,
        0.64061e05,
        0.72580e05,
        0.81882e05,
        0.92031e05,
        0.10309e06,
        0.11514e06,
        0.12824e06,
        0.14247e06,
        0.15791e06,
        0.17463e06,
        0.19272e06,
        0.21226e06,
        0.23333e06,
        0.25604e06,
        0.28047e06,
        0.30673e06,
        0.33490e06,
        0.36510e06,
        0.39743e06,
        0.43200e06,
        0.46892e06,
        0.50831e06,
        0.55029e06,
        0.59498e06,
        0.64251e06,
        0.69301e06,
        0.74662e06,
        0.80347e06,
        0.86370e06,
        0.92747e06,
        0.99491e06,
        0.10662e07,
        0.11414e07,
        0.12208e07,
        0.13046e07,
        0.13928e07,
        0.14856e07,
        0.15833e07,
        0.16860e07,
        0.17939e07,
        0.19072e07,
        0.20261e07,
        0.21508e07,
        0.22814e07,
        0.24182e07,
        0.25614e07,
        0.27112e07,
        0.28679e07,
        0.30316e07,
        0.32026e07,
        0.33811e07,
        0.35674e07,
        0.37617e07,
        0.39642e07,
        0.41752e07,
        0.43950e07,
        0.46237e07,
        0.48618e07,
        0.51094e07,
        0.53668e07,
        0.56343e07,
        0.59123e07,
        0.62009e07,
        0.65005e07,
        0.68113e07,
        0.71338e07,
        0.74681e07,
        0.78147e07,
        0.81737e07,
        0.85457e07,
        0.89308e07,
        0.93295e07,
        0.97420e07,
        0.10169e08,
        0.10610e08,
        0.11066e08,
        0.11538e08,
        0.12025e08,
        0.12528e08,
        0.13048e08,
        0.13584e08,
        0.14138e08,
        0.14709e08,
        0.15298e08,
        0.15906e08,
        0.16532e08,
        0.17178e08,
        0.17843e08,
        0.18528e08,
        0.19234e08,
        0.19961e08,
        0.20710e08,
        0.21480e08,
        0.22272e08,
        0.23088e08,
        0.23926e08,
        0.24789e08,
        0.25675e08,
        0.26587e08,
        0.27523e08,
        0.28485e08,
        0.29474e08,
        0.30489e08,
        0.31532e08,
        0.32603e08,
        0.33701e08,
        0.34829e08,
    ]
)


#  --------------- O3 776: M = 3, I = 11 ---------------------
M = 3
I = 11
TIPS_GSI_HASH[(M, I)] = __FloatType__(36.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.23106e05,
        0.38945e05,
        0.57342e05,
        0.78021e05,
        0.10085e06,
        0.12582e06,
        0.15302e06,
        0.18262e06,
        0.21482e06,
        0.24989e06,
        0.28812e06,
        0.32983e06,
        0.37535e06,
        0.42501e06,
        0.47919e06,
        0.53825e06,
        0.60258e06,
        0.67256e06,
        0.74862e06,
        0.83118e06,
        0.92069e06,
        0.10176e07,
        0.11223e07,
        0.12354e07,
        0.13574e07,
        0.14887e07,
        0.16299e07,
        0.17816e07,
        0.19443e07,
        0.21187e07,
        0.23052e07,
        0.25047e07,
        0.27176e07,
        0.29447e07,
        0.31866e07,
        0.34441e07,
        0.37179e07,
        0.40087e07,
        0.43173e07,
        0.46444e07,
        0.49910e07,
        0.53578e07,
        0.57456e07,
        0.61554e07,
        0.65880e07,
        0.70444e07,
        0.75255e07,
        0.80322e07,
        0.85656e07,
        0.91266e07,
        0.97163e07,
        0.10336e08,
        0.10986e08,
        0.11668e08,
        0.12383e08,
        0.13133e08,
        0.13918e08,
        0.14739e08,
        0.15598e08,
        0.16496e08,
        0.17435e08,
        0.18415e08,
        0.19438e08,
        0.20505e08,
        0.21619e08,
        0.22779e08,
        0.23987e08,
        0.25246e08,
        0.26556e08,
        0.27920e08,
        0.29337e08,
        0.30811e08,
        0.32343e08,
        0.33934e08,
        0.35585e08,
        0.37300e08,
        0.39079e08,
        0.40924e08,
        0.42837e08,
        0.44819e08,
        0.46873e08,
        0.49001e08,
        0.51203e08,
        0.53483e08,
        0.55842e08,
        0.58282e08,
        0.60805e08,
        0.63414e08,
        0.66109e08,
        0.68894e08,
        0.71770e08,
        0.74740e08,
        0.77806e08,
        0.80970e08,
        0.84234e08,
        0.87600e08,
        0.91072e08,
        0.94651e08,
        0.98339e08,
        0.10214e09,
        0.10605e09,
        0.11009e09,
        0.11424e09,
        0.11851e09,
        0.12291e09,
        0.12744e09,
        0.13209e09,
        0.13688e09,
        0.14180e09,
        0.14687e09,
        0.15207e09,
        0.15742e09,
        0.16291e09,
        0.16855e09,
        0.17435e09,
        0.18030e09,
        0.18641e09,
        0.19268e09,
        0.19912e09,
    ]
)


#  --------------- O3 767: M = 3, I = 12 ---------------------
M = 3
I = 12
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11692e05,
        0.19707e05,
        0.29017e05,
        0.39482e05,
        0.51038e05,
        0.63680e05,
        0.77450e05,
        0.92432e05,
        0.10873e06,
        0.12649e06,
        0.14584e06,
        0.16694e06,
        0.18996e06,
        0.21507e06,
        0.24245e06,
        0.27229e06,
        0.30478e06,
        0.34013e06,
        0.37853e06,
        0.42020e06,
        0.46536e06,
        0.51424e06,
        0.56708e06,
        0.62411e06,
        0.68559e06,
        0.75178e06,
        0.82296e06,
        0.89939e06,
        0.98137e06,
        0.10692e07,
        0.11631e07,
        0.12636e07,
        0.13708e07,
        0.14851e07,
        0.16069e07,
        0.17365e07,
        0.18742e07,
        0.20206e07,
        0.21758e07,
        0.23404e07,
        0.25148e07,
        0.26992e07,
        0.28943e07,
        0.31004e07,
        0.33179e07,
        0.35474e07,
        0.37892e07,
        0.40440e07,
        0.43121e07,
        0.45940e07,
        0.48904e07,
        0.52017e07,
        0.55285e07,
        0.58713e07,
        0.62306e07,
        0.66071e07,
        0.70014e07,
        0.74140e07,
        0.78456e07,
        0.82967e07,
        0.87681e07,
        0.92604e07,
        0.97742e07,
        0.10310e08,
        0.10869e08,
        0.11452e08,
        0.12059e08,
        0.12691e08,
        0.13348e08,
        0.14033e08,
        0.14745e08,
        0.15484e08,
        0.16253e08,
        0.17052e08,
        0.17881e08,
        0.18741e08,
        0.19634e08,
        0.20560e08,
        0.21520e08,
        0.22515e08,
        0.23546e08,
        0.24613e08,
        0.25718e08,
        0.26862e08,
        0.28046e08,
        0.29270e08,
        0.30536e08,
        0.31845e08,
        0.33197e08,
        0.34594e08,
        0.36037e08,
        0.37527e08,
        0.39065e08,
        0.40652e08,
        0.42289e08,
        0.43977e08,
        0.45719e08,
        0.47514e08,
        0.49363e08,
        0.51270e08,
        0.53233e08,
        0.55255e08,
        0.57337e08,
        0.59480e08,
        0.61686e08,
        0.63956e08,
        0.66290e08,
        0.68691e08,
        0.71160e08,
        0.73699e08,
        0.76307e08,
        0.78988e08,
        0.81743e08,
        0.84572e08,
        0.87478e08,
        0.90462e08,
        0.93525e08,
        0.96669e08,
        0.99896e08,
    ]
)


#  --------------- O3 888: M = 3, I = 13 ---------------------
M = 3
I = 13
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.36175e03,
        0.60978e03,
        0.89790e03,
        0.12219e04,
        0.15802e04,
        0.19728e04,
        0.24016e04,
        0.28696e04,
        0.33807e04,
        0.39394e04,
        0.45506e04,
        0.52196e04,
        0.59521e04,
        0.67538e04,
        0.76308e04,
        0.85894e04,
        0.96361e04,
        0.10777e05,
        0.12021e05,
        0.13373e05,
        0.14841e05,
        0.16434e05,
        0.18158e05,
        0.20023e05,
        0.22037e05,
        0.24208e05,
        0.26547e05,
        0.29061e05,
        0.31762e05,
        0.34659e05,
        0.37762e05,
        0.41083e05,
        0.44632e05,
        0.48421e05,
        0.52462e05,
        0.56766e05,
        0.61346e05,
        0.66215e05,
        0.71386e05,
        0.76873e05,
        0.82688e05,
        0.88848e05,
        0.95365e05,
        0.10226e06,
        0.10954e06,
        0.11722e06,
        0.12532e06,
        0.13387e06,
        0.14286e06,
        0.15233e06,
        0.16229e06,
        0.17275e06,
        0.18374e06,
        0.19528e06,
        0.20737e06,
        0.22006e06,
        0.23335e06,
        0.24726e06,
        0.26182e06,
        0.27705e06,
        0.29297e06,
        0.30960e06,
        0.32696e06,
        0.34509e06,
        0.36399e06,
        0.38371e06,
        0.40425e06,
        0.42566e06,
        0.44794e06,
        0.47114e06,
        0.49527e06,
        0.52036e06,
        0.54644e06,
        0.57354e06,
        0.60169e06,
        0.63091e06,
        0.66124e06,
        0.69270e06,
        0.72533e06,
        0.75916e06,
        0.79421e06,
        0.83053e06,
        0.86814e06,
        0.90708e06,
        0.94737e06,
        0.98907e06,
        0.10322e07,
        0.10768e07,
        0.11229e07,
        0.11705e07,
        0.12197e07,
        0.12705e07,
        0.13230e07,
        0.13771e07,
        0.14330e07,
        0.14906e07,
        0.15501e07,
        0.16114e07,
        0.16745e07,
        0.17397e07,
        0.18067e07,
        0.18759e07,
        0.19470e07,
        0.20203e07,
        0.20957e07,
        0.21733e07,
        0.22532e07,
        0.23353e07,
        0.24198e07,
        0.25067e07,
        0.25960e07,
        0.26878e07,
        0.27821e07,
        0.28790e07,
        0.29785e07,
        0.30807e07,
        0.31857e07,
        0.32934e07,
        0.34040e07,
    ]
)


#  --------------- O3 887: M = 3, I = 14 ---------------------
M = 3
I = 14
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.42000e04,
        0.70796e04,
        0.10424e05,
        0.14186e05,
        0.18342e05,
        0.22896e05,
        0.27866e05,
        0.33285e05,
        0.39199e05,
        0.45659e05,
        0.52720e05,
        0.60444e05,
        0.68895e05,
        0.78139e05,
        0.88246e05,
        0.99288e05,
        0.11134e06,
        0.12447e06,
        0.13877e06,
        0.15431e06,
        0.17119e06,
        0.18949e06,
        0.20930e06,
        0.23071e06,
        0.25383e06,
        0.27875e06,
        0.30558e06,
        0.33442e06,
        0.36539e06,
        0.39861e06,
        0.43418e06,
        0.47224e06,
        0.51291e06,
        0.55632e06,
        0.60260e06,
        0.65189e06,
        0.70434e06,
        0.76008e06,
        0.81927e06,
        0.88206e06,
        0.94862e06,
        0.10191e07,
        0.10937e07,
        0.11725e07,
        0.12558e07,
        0.13436e07,
        0.14363e07,
        0.15340e07,
        0.16368e07,
        0.17450e07,
        0.18588e07,
        0.19784e07,
        0.21040e07,
        0.22358e07,
        0.23741e07,
        0.25190e07,
        0.26708e07,
        0.28297e07,
        0.29961e07,
        0.31700e07,
        0.33518e07,
        0.35417e07,
        0.37400e07,
        0.39469e07,
        0.41628e07,
        0.43878e07,
        0.46224e07,
        0.48667e07,
        0.51210e07,
        0.53858e07,
        0.56611e07,
        0.59475e07,
        0.62451e07,
        0.65544e07,
        0.68755e07,
        0.72089e07,
        0.75550e07,
        0.79139e07,
        0.82861e07,
        0.86720e07,
        0.90719e07,
        0.94861e07,
        0.99151e07,
        0.10359e08,
        0.10819e08,
        0.11294e08,
        0.11786e08,
        0.12294e08,
        0.12820e08,
        0.13363e08,
        0.13924e08,
        0.14503e08,
        0.15101e08,
        0.15719e08,
        0.16356e08,
        0.17013e08,
        0.17690e08,
        0.18389e08,
        0.19109e08,
        0.19851e08,
        0.20616e08,
        0.21404e08,
        0.22215e08,
        0.23050e08,
        0.23910e08,
        0.24794e08,
        0.25704e08,
        0.26640e08,
        0.27603e08,
        0.28593e08,
        0.29610e08,
        0.30656e08,
        0.31731e08,
        0.32835e08,
        0.33969e08,
        0.35133e08,
        0.36329e08,
        0.37556e08,
        0.38816e08,
    ]
)


#  --------------- O3 878: M = 3, I = 15 ---------------------
M = 3
I = 15
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.21250e04,
        0.35820e04,
        0.52744e04,
        0.71778e04,
        0.92814e04,
        0.11586e05,
        0.14102e05,
        0.16845e05,
        0.19839e05,
        0.23108e05,
        0.26680e05,
        0.30588e05,
        0.34861e05,
        0.39534e05,
        0.44642e05,
        0.50219e05,
        0.56305e05,
        0.62937e05,
        0.70155e05,
        0.78001e05,
        0.86516e05,
        0.95747e05,
        0.10574e06,
        0.11653e06,
        0.12819e06,
        0.14075e06,
        0.15427e06,
        0.16881e06,
        0.18441e06,
        0.20114e06,
        0.21906e06,
        0.23823e06,
        0.25871e06,
        0.28056e06,
        0.30386e06,
        0.32867e06,
        0.35507e06,
        0.38312e06,
        0.41291e06,
        0.44450e06,
        0.47799e06,
        0.51344e06,
        0.55095e06,
        0.59060e06,
        0.63248e06,
        0.67667e06,
        0.72327e06,
        0.77238e06,
        0.82409e06,
        0.87850e06,
        0.93571e06,
        0.99583e06,
        0.10590e07,
        0.11252e07,
        0.11947e07,
        0.12675e07,
        0.13438e07,
        0.14237e07,
        0.15072e07,
        0.15946e07,
        0.16859e07,
        0.17814e07,
        0.18810e07,
        0.19849e07,
        0.20934e07,
        0.22064e07,
        0.23242e07,
        0.24469e07,
        0.25747e07,
        0.27076e07,
        0.28459e07,
        0.29897e07,
        0.31391e07,
        0.32944e07,
        0.34557e07,
        0.36231e07,
        0.37968e07,
        0.39770e07,
        0.41639e07,
        0.43576e07,
        0.45583e07,
        0.47663e07,
        0.49816e07,
        0.52045e07,
        0.54352e07,
        0.56739e07,
        0.59207e07,
        0.61759e07,
        0.64396e07,
        0.67121e07,
        0.69936e07,
        0.72844e07,
        0.75845e07,
        0.78943e07,
        0.82139e07,
        0.85436e07,
        0.88837e07,
        0.92342e07,
        0.95956e07,
        0.99680e07,
        0.10352e08,
        0.10747e08,
        0.11154e08,
        0.11573e08,
        0.12004e08,
        0.12448e08,
        0.12904e08,
        0.13374e08,
        0.13857e08,
        0.14353e08,
        0.14864e08,
        0.15388e08,
        0.15927e08,
        0.16481e08,
        0.17050e08,
        0.17634e08,
        0.18234e08,
        0.18849e08,
        0.19481e08,
    ]
)


#  --------------- O3 778: M = 3, I = 16 ---------------------
M = 3
I = 16
TIPS_GSI_HASH[(M, I)] = __FloatType__(36.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.24692e05,
        0.41621e05,
        0.61284e05,
        0.83394e05,
        0.10782e06,
        0.13457e06,
        0.16375e06,
        0.19554e06,
        0.23020e06,
        0.26801e06,
        0.30930e06,
        0.35443e06,
        0.40375e06,
        0.45763e06,
        0.51650e06,
        0.58075e06,
        0.65080e06,
        0.72711e06,
        0.81012e06,
        0.90030e06,
        0.99815e06,
        0.11042e07,
        0.12189e07,
        0.13428e07,
        0.14765e07,
        0.16206e07,
        0.17757e07,
        0.19423e07,
        0.21212e07,
        0.23129e07,
        0.25181e07,
        0.27377e07,
        0.29721e07,
        0.32223e07,
        0.34890e07,
        0.37729e07,
        0.40750e07,
        0.43959e07,
        0.47365e07,
        0.50978e07,
        0.54807e07,
        0.58860e07,
        0.63147e07,
        0.67678e07,
        0.72463e07,
        0.77512e07,
        0.82836e07,
        0.88445e07,
        0.94351e07,
        0.10056e08,
        0.10710e08,
        0.11396e08,
        0.12117e08,
        0.12873e08,
        0.13666e08,
        0.14497e08,
        0.15367e08,
        0.16279e08,
        0.17232e08,
        0.18229e08,
        0.19271e08,
        0.20359e08,
        0.21495e08,
        0.22681e08,
        0.23917e08,
        0.25206e08,
        0.26549e08,
        0.27948e08,
        0.29404e08,
        0.30920e08,
        0.32496e08,
        0.34135e08,
        0.35838e08,
        0.37608e08,
        0.39445e08,
        0.41353e08,
        0.43332e08,
        0.45385e08,
        0.47514e08,
        0.49721e08,
        0.52007e08,
        0.54376e08,
        0.56829e08,
        0.59367e08,
        0.61995e08,
        0.64712e08,
        0.67523e08,
        0.70429e08,
        0.73432e08,
        0.76535e08,
        0.79740e08,
        0.83050e08,
        0.86467e08,
        0.89993e08,
        0.93632e08,
        0.97385e08,
        0.10126e09,
        0.10525e09,
        0.10936e09,
        0.11360e09,
        0.11796e09,
        0.12246e09,
        0.12709e09,
        0.13186e09,
        0.13677e09,
        0.14182e09,
        0.14701e09,
        0.15236e09,
        0.15785e09,
        0.16350e09,
        0.16931e09,
        0.17528e09,
        0.18141e09,
        0.18771e09,
        0.19418e09,
        0.20082e09,
        0.20764e09,
        0.21465e09,
        0.22183e09,
    ]
)


#  --------------- O3 787: M = 3, I = 17 ---------------------
M = 3
I = 17
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.12211e05,
        0.20582e05,
        0.30305e05,
        0.41237e05,
        0.53314e05,
        0.66536e05,
        0.80957e05,
        0.96672e05,
        0.11380e06,
        0.13250e06,
        0.15292e06,
        0.17524e06,
        0.19965e06,
        0.22632e06,
        0.25546e06,
        0.28728e06,
        0.32199e06,
        0.35980e06,
        0.40094e06,
        0.44565e06,
        0.49417e06,
        0.54676e06,
        0.60366e06,
        0.66516e06,
        0.73152e06,
        0.80305e06,
        0.88002e06,
        0.96276e06,
        0.10516e07,
        0.11468e07,
        0.12488e07,
        0.13578e07,
        0.14743e07,
        0.15987e07,
        0.17312e07,
        0.18723e07,
        0.20225e07,
        0.21820e07,
        0.23514e07,
        0.25310e07,
        0.27214e07,
        0.29230e07,
        0.31362e07,
        0.33616e07,
        0.35997e07,
        0.38509e07,
        0.41158e07,
        0.43949e07,
        0.46887e07,
        0.49980e07,
        0.53231e07,
        0.56647e07,
        0.60234e07,
        0.63998e07,
        0.67946e07,
        0.72084e07,
        0.76418e07,
        0.80955e07,
        0.85702e07,
        0.90666e07,
        0.95854e07,
        0.10127e08,
        0.10693e08,
        0.11284e08,
        0.11900e08,
        0.12542e08,
        0.13211e08,
        0.13907e08,
        0.14633e08,
        0.15388e08,
        0.16173e08,
        0.16990e08,
        0.17838e08,
        0.18720e08,
        0.19636e08,
        0.20586e08,
        0.21573e08,
        0.22596e08,
        0.23657e08,
        0.24757e08,
        0.25896e08,
        0.27077e08,
        0.28299e08,
        0.29565e08,
        0.30874e08,
        0.32229e08,
        0.33630e08,
        0.35079e08,
        0.36576e08,
        0.38123e08,
        0.39721e08,
        0.41371e08,
        0.43075e08,
        0.44833e08,
        0.46647e08,
        0.48518e08,
        0.50448e08,
        0.52438e08,
        0.54489e08,
        0.56603e08,
        0.58780e08,
        0.61023e08,
        0.63332e08,
        0.65710e08,
        0.68157e08,
        0.70676e08,
        0.73266e08,
        0.75931e08,
        0.78672e08,
        0.81490e08,
        0.84386e08,
        0.87363e08,
        0.90422e08,
        0.93564e08,
        0.96791e08,
        0.10011e09,
        0.10351e09,
        0.10700e09,
        0.11059e09,
    ]
)


#  --------------- O3 777: M = 3, I = 18 ---------------------
M = 3
I = 18
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.71750e05,
        0.12094e06,
        0.17807e06,
        0.24230e06,
        0.31324e06,
        0.39088e06,
        0.47550e06,
        0.56764e06,
        0.66800e06,
        0.77740e06,
        0.89677e06,
        0.10271e07,
        0.11694e07,
        0.13249e07,
        0.14945e07,
        0.16796e07,
        0.18813e07,
        0.21009e07,
        0.23396e07,
        0.25989e07,
        0.28801e07,
        0.31847e07,
        0.35140e07,
        0.38698e07,
        0.42535e07,
        0.46669e07,
        0.51115e07,
        0.55893e07,
        0.61019e07,
        0.66513e07,
        0.72393e07,
        0.78680e07,
        0.85395e07,
        0.92558e07,
        0.10019e08,
        0.10832e08,
        0.11696e08,
        0.12614e08,
        0.13588e08,
        0.14621e08,
        0.15716e08,
        0.16875e08,
        0.18100e08,
        0.19395e08,
        0.20762e08,
        0.22205e08,
        0.23726e08,
        0.25328e08,
        0.27015e08,
        0.28789e08,
        0.30654e08,
        0.32614e08,
        0.34671e08,
        0.36830e08,
        0.39093e08,
        0.41465e08,
        0.43949e08,
        0.46549e08,
        0.49269e08,
        0.52112e08,
        0.55084e08,
        0.58188e08,
        0.61428e08,
        0.64809e08,
        0.68335e08,
        0.72010e08,
        0.75840e08,
        0.79828e08,
        0.83979e08,
        0.88299e08,
        0.92792e08,
        0.97463e08,
        0.10232e09,
        0.10736e09,
        0.11260e09,
        0.11803e09,
        0.12367e09,
        0.12952e09,
        0.13559e09,
        0.14187e09,
        0.14839e09,
        0.15513e09,
        0.16212e09,
        0.16935e09,
        0.17683e09,
        0.18457e09,
        0.19257e09,
        0.20085e09,
        0.20940e09,
        0.21824e09,
        0.22736e09,
        0.23678e09,
        0.24651e09,
        0.25655e09,
        0.26691e09,
        0.27759e09,
        0.28861e09,
        0.29997e09,
        0.31167e09,
        0.32374e09,
        0.33616e09,
        0.34896e09,
        0.36214e09,
        0.37571e09,
        0.38967e09,
        0.40404e09,
        0.41882e09,
        0.43403e09,
        0.44966e09,
        0.46573e09,
        0.48226e09,
        0.49923e09,
        0.51668e09,
        0.53460e09,
        0.55301e09,
        0.57191e09,
        0.59131e09,
        0.61123e09,
        0.63167e09,
    ]
)


#  --------------- N2O 446: M = 4, I = 1 ---------------------
M = 4
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(9.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.89943e03,
        0.12734e04,
        0.16489e04,
        0.20293e04,
        0.24205e04,
        0.28289e04,
        0.32609e04,
        0.37222e04,
        0.42180e04,
        0.47529e04,
        0.53312e04,
        0.59572e04,
        0.66348e04,
        0.73683e04,
        0.81616e04,
        0.90190e04,
        0.99450e04,
        0.10944e05,
        0.12021e05,
        0.13180e05,
        0.14426e05,
        0.15766e05,
        0.17203e05,
        0.18745e05,
        0.20396e05,
        0.22162e05,
        0.24051e05,
        0.26069e05,
        0.28222e05,
        0.30517e05,
        0.32962e05,
        0.35564e05,
        0.38331e05,
        0.41271e05,
        0.44393e05,
        0.47704e05,
        0.51214e05,
        0.54932e05,
        0.58868e05,
        0.63030e05,
        0.67429e05,
        0.72075e05,
        0.76979e05,
        0.82151e05,
        0.87604e05,
        0.93348e05,
        0.99395e05,
        0.10576e06,
        0.11245e06,
        0.11948e06,
        0.12686e06,
        0.13461e06,
        0.14275e06,
        0.15128e06,
        0.16021e06,
        0.16958e06,
        0.17938e06,
        0.18964e06,
        0.20037e06,
        0.21159e06,
        0.22331e06,
        0.23556e06,
        0.24834e06,
        0.26169e06,
        0.27561e06,
        0.29012e06,
        0.30525e06,
        0.32101e06,
        0.33743e06,
        0.35452e06,
        0.37230e06,
        0.39080e06,
        0.41004e06,
        0.43004e06,
        0.45082e06,
        0.47241e06,
        0.49483e06,
        0.51810e06,
        0.54225e06,
        0.56730e06,
        0.59329e06,
        0.62022e06,
        0.64814e06,
        0.67707e06,
        0.70703e06,
        0.73806e06,
        0.77018e06,
        0.80342e06,
        0.83781e06,
        0.87338e06,
        0.91016e06,
        0.94818e06,
        0.98748e06,
        0.10281e07,
        0.10700e07,
        0.11133e07,
        0.11581e07,
        0.12042e07,
        0.12519e07,
        0.13010e07,
        0.13517e07,
        0.14040e07,
        0.14579e07,
        0.15134e07,
        0.15707e07,
        0.16297e07,
        0.16905e07,
        0.17530e07,
        0.18175e07,
        0.18838e07,
        0.19521e07,
        0.20224e07,
        0.20947e07,
        0.21690e07,
        0.22455e07,
        0.23242e07,
        0.24050e07,
        0.24881e07,
        0.25735e07,
    ]
)


#  --------------- N2O 456: M = 4, I = 2 ---------------------
M = 4
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.59966e03,
        0.84903e03,
        0.10995e04,
        0.13538e04,
        0.16158e04,
        0.18903e04,
        0.21815e04,
        0.24934e04,
        0.28295e04,
        0.31927e04,
        0.35862e04,
        0.40128e04,
        0.44752e04,
        0.49763e04,
        0.55189e04,
        0.61059e04,
        0.67404e04,
        0.74256e04,
        0.81646e04,
        0.89609e04,
        0.98180e04,
        0.10740e05,
        0.11729e05,
        0.12791e05,
        0.13930e05,
        0.15149e05,
        0.16453e05,
        0.17847e05,
        0.19335e05,
        0.20922e05,
        0.22614e05,
        0.24416e05,
        0.26333e05,
        0.28371e05,
        0.30535e05,
        0.32833e05,
        0.35269e05,
        0.37851e05,
        0.40585e05,
        0.43478e05,
        0.46537e05,
        0.49769e05,
        0.53182e05,
        0.56783e05,
        0.60580e05,
        0.64582e05,
        0.68796e05,
        0.73232e05,
        0.77898e05,
        0.82803e05,
        0.87957e05,
        0.93369e05,
        0.99048e05,
        0.10501e06,
        0.11125e06,
        0.11780e06,
        0.12465e06,
        0.13182e06,
        0.13933e06,
        0.14718e06,
        0.15539e06,
        0.16396e06,
        0.17291e06,
        0.18226e06,
        0.19201e06,
        0.20218e06,
        0.21278e06,
        0.22383e06,
        0.23534e06,
        0.24733e06,
        0.25980e06,
        0.27278e06,
        0.28628e06,
        0.30032e06,
        0.31491e06,
        0.33007e06,
        0.34581e06,
        0.36216e06,
        0.37912e06,
        0.39673e06,
        0.41499e06,
        0.43392e06,
        0.45355e06,
        0.47389e06,
        0.49496e06,
        0.51678e06,
        0.53937e06,
        0.56276e06,
        0.58695e06,
        0.61199e06,
        0.63788e06,
        0.66464e06,
        0.69231e06,
        0.72090e06,
        0.75044e06,
        0.78094e06,
        0.81244e06,
        0.84496e06,
        0.87853e06,
        0.91316e06,
        0.94889e06,
        0.98573e06,
        0.10237e07,
        0.10629e07,
        0.11033e07,
        0.11449e07,
        0.11877e07,
        0.12319e07,
        0.12773e07,
        0.13241e07,
        0.13723e07,
        0.14219e07,
        0.14729e07,
        0.15254e07,
        0.15793e07,
        0.16349e07,
        0.16919e07,
        0.17506e07,
        0.18109e07,
    ]
)


#  --------------- N2O 546: M = 4, I = 3 ---------------------
M = 4
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.62051e03,
        0.87856e03,
        0.11377e04,
        0.14003e04,
        0.16705e04,
        0.19529e04,
        0.22518e04,
        0.25713e04,
        0.29149e04,
        0.32859e04,
        0.36873e04,
        0.41220e04,
        0.45929e04,
        0.51028e04,
        0.56547e04,
        0.62515e04,
        0.68963e04,
        0.75923e04,
        0.83428e04,
        0.91511e04,
        0.10021e05,
        0.10956e05,
        0.11960e05,
        0.13036e05,
        0.14190e05,
        0.15425e05,
        0.16746e05,
        0.18158e05,
        0.19664e05,
        0.21271e05,
        0.22984e05,
        0.24806e05,
        0.26745e05,
        0.28806e05,
        0.30995e05,
        0.33317e05,
        0.35780e05,
        0.38389e05,
        0.41151e05,
        0.44073e05,
        0.47162e05,
        0.50425e05,
        0.53871e05,
        0.57505e05,
        0.61338e05,
        0.65375e05,
        0.69628e05,
        0.74102e05,
        0.78808e05,
        0.83755e05,
        0.88951e05,
        0.94407e05,
        0.10013e06,
        0.10614e06,
        0.11243e06,
        0.11902e06,
        0.12593e06,
        0.13316e06,
        0.14072e06,
        0.14862e06,
        0.15689e06,
        0.16552e06,
        0.17453e06,
        0.18394e06,
        0.19376e06,
        0.20399e06,
        0.21466e06,
        0.22578e06,
        0.23737e06,
        0.24942e06,
        0.26198e06,
        0.27503e06,
        0.28861e06,
        0.30273e06,
        0.31741e06,
        0.33265e06,
        0.34848e06,
        0.36492e06,
        0.38197e06,
        0.39967e06,
        0.41803e06,
        0.43706e06,
        0.45679e06,
        0.47723e06,
        0.49840e06,
        0.52033e06,
        0.54303e06,
        0.56653e06,
        0.59084e06,
        0.61599e06,
        0.64200e06,
        0.66888e06,
        0.69667e06,
        0.72539e06,
        0.75506e06,
        0.78569e06,
        0.81733e06,
        0.84998e06,
        0.88369e06,
        0.91846e06,
        0.95433e06,
        0.99132e06,
        0.10295e07,
        0.10688e07,
        0.11093e07,
        0.11511e07,
        0.11941e07,
        0.12384e07,
        0.12840e07,
        0.13310e07,
        0.13793e07,
        0.14291e07,
        0.14803e07,
        0.15329e07,
        0.15871e07,
        0.16428e07,
        0.17000e07,
        0.17589e07,
        0.18194e07,
    ]
)


#  --------------- N2O 448: M = 4, I = 4 ---------------------
M = 4
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(9.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.95253e03,
        0.13487e04,
        0.17465e04,
        0.21498e04,
        0.25648e04,
        0.29986e04,
        0.34580e04,
        0.39493e04,
        0.44779e04,
        0.50488e04,
        0.56669e04,
        0.63366e04,
        0.70625e04,
        0.78488e04,
        0.87003e04,
        0.96216e04,
        0.10617e05,
        0.11692e05,
        0.12852e05,
        0.14102e05,
        0.15447e05,
        0.16893e05,
        0.18446e05,
        0.20112e05,
        0.21898e05,
        0.23811e05,
        0.25856e05,
        0.28042e05,
        0.30377e05,
        0.32866e05,
        0.35520e05,
        0.38345e05,
        0.41351e05,
        0.44545e05,
        0.47939e05,
        0.51540e05,
        0.55359e05,
        0.59405e05,
        0.63689e05,
        0.68222e05,
        0.73015e05,
        0.78078e05,
        0.83424e05,
        0.89064e05,
        0.95012e05,
        0.10128e06,
        0.10788e06,
        0.11482e06,
        0.12213e06,
        0.12981e06,
        0.13788e06,
        0.14635e06,
        0.15524e06,
        0.16456e06,
        0.17433e06,
        0.18457e06,
        0.19530e06,
        0.20652e06,
        0.21827e06,
        0.23055e06,
        0.24338e06,
        0.25679e06,
        0.27079e06,
        0.28541e06,
        0.30066e06,
        0.31656e06,
        0.33314e06,
        0.35042e06,
        0.36841e06,
        0.38715e06,
        0.40666e06,
        0.42695e06,
        0.44805e06,
        0.46999e06,
        0.49279e06,
        0.51649e06,
        0.54109e06,
        0.56664e06,
        0.59315e06,
        0.62066e06,
        0.64919e06,
        0.67877e06,
        0.70943e06,
        0.74121e06,
        0.77413e06,
        0.80822e06,
        0.84351e06,
        0.88004e06,
        0.91783e06,
        0.95693e06,
        0.99737e06,
        0.10392e07,
        0.10824e07,
        0.11270e07,
        0.11732e07,
        0.12208e07,
        0.12700e07,
        0.13208e07,
        0.13732e07,
        0.14272e07,
        0.14830e07,
        0.15405e07,
        0.15999e07,
        0.16610e07,
        0.17240e07,
        0.17890e07,
        0.18559e07,
        0.19248e07,
        0.19957e07,
        0.20687e07,
        0.21439e07,
        0.22213e07,
        0.23009e07,
        0.23828e07,
        0.24671e07,
        0.25537e07,
        0.26428e07,
        0.27343e07,
        0.28284e07,
    ]
)


#  --------------- N2O 447: M = 4, I = 5 ---------------------
M = 4
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(54.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.55598e04,
        0.78718e04,
        0.10193e05,
        0.12546e05,
        0.14966e05,
        0.17495e05,
        0.20171e05,
        0.23031e05,
        0.26106e05,
        0.29426e05,
        0.33018e05,
        0.36908e05,
        0.41121e05,
        0.45684e05,
        0.50622e05,
        0.55962e05,
        0.61731e05,
        0.67958e05,
        0.74671e05,
        0.81902e05,
        0.89681e05,
        0.98043e05,
        0.10702e06,
        0.11665e06,
        0.12697e06,
        0.13801e06,
        0.14983e06,
        0.16244e06,
        0.17591e06,
        0.19028e06,
        0.20558e06,
        0.22188e06,
        0.23920e06,
        0.25762e06,
        0.27718e06,
        0.29793e06,
        0.31993e06,
        0.34323e06,
        0.36791e06,
        0.39401e06,
        0.42160e06,
        0.45074e06,
        0.48151e06,
        0.51397e06,
        0.54819e06,
        0.58424e06,
        0.62221e06,
        0.66215e06,
        0.70416e06,
        0.74832e06,
        0.79470e06,
        0.84340e06,
        0.89450e06,
        0.94808e06,
        0.10042e07,
        0.10631e07,
        0.11247e07,
        0.11892e07,
        0.12567e07,
        0.13272e07,
        0.14009e07,
        0.14779e07,
        0.15583e07,
        0.16422e07,
        0.17298e07,
        0.18211e07,
        0.19163e07,
        0.20154e07,
        0.21187e07,
        0.22263e07,
        0.23382e07,
        0.24546e07,
        0.25757e07,
        0.27016e07,
        0.28324e07,
        0.29683e07,
        0.31095e07,
        0.32560e07,
        0.34081e07,
        0.35659e07,
        0.37295e07,
        0.38991e07,
        0.40750e07,
        0.42572e07,
        0.44459e07,
        0.46414e07,
        0.48437e07,
        0.50531e07,
        0.52698e07,
        0.54939e07,
        0.57257e07,
        0.59653e07,
        0.62129e07,
        0.64688e07,
        0.67331e07,
        0.70061e07,
        0.72880e07,
        0.75790e07,
        0.78792e07,
        0.81891e07,
        0.85086e07,
        0.88382e07,
        0.91780e07,
        0.95283e07,
        0.98893e07,
        0.10261e08,
        0.10644e08,
        0.11039e08,
        0.11445e08,
        0.11864e08,
        0.12294e08,
        0.12738e08,
        0.13194e08,
        0.13663e08,
        0.14145e08,
        0.14641e08,
        0.15151e08,
        0.15675e08,
        0.16214e08,
    ]
)


#  --------------- CO 26: M = 5, I = 1 ---------------------
M = 5
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.21948e02,
        0.30961e02,
        0.39980e02,
        0.49004e02,
        0.58035e02,
        0.67071e02,
        0.76112e02,
        0.85160e02,
        0.94213e02,
        0.10327e03,
        0.11234e03,
        0.12142e03,
        0.13050e03,
        0.13960e03,
        0.14872e03,
        0.15787e03,
        0.16704e03,
        0.17624e03,
        0.18548e03,
        0.19477e03,
        0.20411e03,
        0.21350e03,
        0.22295e03,
        0.23248e03,
        0.24207e03,
        0.25175e03,
        0.26151e03,
        0.27136e03,
        0.28130e03,
        0.29134e03,
        0.30148e03,
        0.31172e03,
        0.32207e03,
        0.33253e03,
        0.34312e03,
        0.35381e03,
        0.36463e03,
        0.37557e03,
        0.38663e03,
        0.39782e03,
        0.40914e03,
        0.42060e03,
        0.43218e03,
        0.44389e03,
        0.45575e03,
        0.46774e03,
        0.47987e03,
        0.49213e03,
        0.50454e03,
        0.51708e03,
        0.52978e03,
        0.54261e03,
        0.55559e03,
        0.56871e03,
        0.58198e03,
        0.59540e03,
        0.60896e03,
        0.62267e03,
        0.63653e03,
        0.65055e03,
        0.66470e03,
        0.67901e03,
        0.69347e03,
        0.70808e03,
        0.72284e03,
        0.73776e03,
        0.75283e03,
        0.76805e03,
        0.78342e03,
        0.79895e03,
        0.81463e03,
        0.83047e03,
        0.84646e03,
        0.86260e03,
        0.87891e03,
        0.89536e03,
        0.91197e03,
        0.92874e03,
        0.94566e03,
        0.96275e03,
        0.97998e03,
        0.99738e03,
        0.10149e04,
        0.10326e04,
        0.10505e04,
        0.10685e04,
        0.10867e04,
        0.11051e04,
        0.11236e04,
        0.11422e04,
        0.11611e04,
        0.11800e04,
        0.11992e04,
        0.12185e04,
        0.12380e04,
        0.12576e04,
        0.12774e04,
        0.12973e04,
        0.13174e04,
        0.13377e04,
        0.13581e04,
        0.13787e04,
        0.13994e04,
        0.14203e04,
        0.14414e04,
        0.14627e04,
        0.14841e04,
        0.15056e04,
        0.15273e04,
        0.15492e04,
        0.15713e04,
        0.15935e04,
        0.16159e04,
        0.16384e04,
        0.16611e04,
        0.16840e04,
        0.17070e04,
        0.17302e04,
        0.17536e04,
    ]
)


#  --------------- CO 36: M = 5, I = 2 ---------------------
M = 5
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.45888e02,
        0.64745e02,
        0.83615e02,
        0.10250e03,
        0.12139e03,
        0.14030e03,
        0.15921e03,
        0.17814e03,
        0.19708e03,
        0.21604e03,
        0.23501e03,
        0.25400e03,
        0.27302e03,
        0.29207e03,
        0.31117e03,
        0.33031e03,
        0.34952e03,
        0.36880e03,
        0.38817e03,
        0.40764e03,
        0.42723e03,
        0.44694e03,
        0.46679e03,
        0.48679e03,
        0.50696e03,
        0.52730e03,
        0.54783e03,
        0.56855e03,
        0.58948e03,
        0.61061e03,
        0.63198e03,
        0.65357e03,
        0.67539e03,
        0.69747e03,
        0.71979e03,
        0.74237e03,
        0.76521e03,
        0.78832e03,
        0.81169e03,
        0.83534e03,
        0.85927e03,
        0.88348e03,
        0.90798e03,
        0.93277e03,
        0.95784e03,
        0.98322e03,
        0.10089e04,
        0.10349e04,
        0.10611e04,
        0.10877e04,
        0.11146e04,
        0.11418e04,
        0.11693e04,
        0.11971e04,
        0.12253e04,
        0.12537e04,
        0.12825e04,
        0.13115e04,
        0.13409e04,
        0.13707e04,
        0.14007e04,
        0.14311e04,
        0.14617e04,
        0.14928e04,
        0.15241e04,
        0.15558e04,
        0.15877e04,
        0.16200e04,
        0.16527e04,
        0.16857e04,
        0.17190e04,
        0.17526e04,
        0.17866e04,
        0.18209e04,
        0.18555e04,
        0.18905e04,
        0.19258e04,
        0.19614e04,
        0.19974e04,
        0.20337e04,
        0.20703e04,
        0.21073e04,
        0.21446e04,
        0.21823e04,
        0.22203e04,
        0.22586e04,
        0.22973e04,
        0.23363e04,
        0.23756e04,
        0.24153e04,
        0.24553e04,
        0.24957e04,
        0.25364e04,
        0.25775e04,
        0.26189e04,
        0.26606e04,
        0.27027e04,
        0.27451e04,
        0.27879e04,
        0.28310e04,
        0.28745e04,
        0.29183e04,
        0.29625e04,
        0.30070e04,
        0.30518e04,
        0.30970e04,
        0.31425e04,
        0.31885e04,
        0.32347e04,
        0.32813e04,
        0.33282e04,
        0.33755e04,
        0.34231e04,
        0.34711e04,
        0.35194e04,
        0.35681e04,
        0.36172e04,
        0.36666e04,
        0.37163e04,
    ]
)


#  --------------- CO 28: M = 5, I = 3 ---------------------
M = 5
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.23030e02,
        0.32495e02,
        0.41966e02,
        0.51443e02,
        0.60926e02,
        0.70415e02,
        0.79910e02,
        0.89410e02,
        0.98918e02,
        0.10843e03,
        0.11795e03,
        0.12749e03,
        0.13703e03,
        0.14659e03,
        0.15618e03,
        0.16579e03,
        0.17543e03,
        0.18511e03,
        0.19483e03,
        0.20461e03,
        0.21444e03,
        0.22434e03,
        0.23430e03,
        0.24435e03,
        0.25447e03,
        0.26468e03,
        0.27499e03,
        0.28540e03,
        0.29591e03,
        0.30652e03,
        0.31725e03,
        0.32810e03,
        0.33906e03,
        0.35014e03,
        0.36136e03,
        0.37270e03,
        0.38417e03,
        0.39577e03,
        0.40752e03,
        0.41940e03,
        0.43142e03,
        0.44358e03,
        0.45589e03,
        0.46834e03,
        0.48094e03,
        0.49369e03,
        0.50659e03,
        0.51964e03,
        0.53284e03,
        0.54619e03,
        0.55971e03,
        0.57337e03,
        0.58719e03,
        0.60117e03,
        0.61530e03,
        0.62959e03,
        0.64405e03,
        0.65866e03,
        0.67343e03,
        0.68837e03,
        0.70346e03,
        0.71872e03,
        0.73414e03,
        0.74972e03,
        0.76547e03,
        0.78138e03,
        0.79745e03,
        0.81369e03,
        0.83010e03,
        0.84667e03,
        0.86341e03,
        0.88031e03,
        0.89738e03,
        0.91462e03,
        0.93202e03,
        0.94960e03,
        0.96734e03,
        0.98524e03,
        0.10033e04,
        0.10216e04,
        0.10400e04,
        0.10586e04,
        0.10773e04,
        0.10962e04,
        0.11153e04,
        0.11346e04,
        0.11540e04,
        0.11737e04,
        0.11934e04,
        0.12134e04,
        0.12335e04,
        0.12538e04,
        0.12743e04,
        0.12949e04,
        0.13157e04,
        0.13367e04,
        0.13578e04,
        0.13792e04,
        0.14007e04,
        0.14223e04,
        0.14442e04,
        0.14662e04,
        0.14884e04,
        0.15108e04,
        0.15333e04,
        0.15560e04,
        0.15789e04,
        0.16020e04,
        0.16252e04,
        0.16486e04,
        0.16722e04,
        0.16960e04,
        0.17199e04,
        0.17441e04,
        0.17684e04,
        0.17928e04,
        0.18175e04,
        0.18423e04,
        0.18673e04,
    ]
)


#  --------------- CO 27: M = 5, I = 4 ---------------------
M = 5
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.13505e03,
        0.19054e03,
        0.24606e03,
        0.30161e03,
        0.35720e03,
        0.41283e03,
        0.46848e03,
        0.52418e03,
        0.57991e03,
        0.63568e03,
        0.69149e03,
        0.74737e03,
        0.80332e03,
        0.85937e03,
        0.91553e03,
        0.97183e03,
        0.10283e04,
        0.10850e04,
        0.11420e04,
        0.11992e04,
        0.12568e04,
        0.13147e04,
        0.13730e04,
        0.14318e04,
        0.14910e04,
        0.15507e04,
        0.16110e04,
        0.16718e04,
        0.17332e04,
        0.17952e04,
        0.18579e04,
        0.19212e04,
        0.19852e04,
        0.20499e04,
        0.21153e04,
        0.21815e04,
        0.22484e04,
        0.23161e04,
        0.23846e04,
        0.24539e04,
        0.25240e04,
        0.25949e04,
        0.26666e04,
        0.27392e04,
        0.28127e04,
        0.28869e04,
        0.29621e04,
        0.30381e04,
        0.31150e04,
        0.31928e04,
        0.32715e04,
        0.33511e04,
        0.34316e04,
        0.35129e04,
        0.35952e04,
        0.36785e04,
        0.37626e04,
        0.38477e04,
        0.39336e04,
        0.40206e04,
        0.41084e04,
        0.41972e04,
        0.42869e04,
        0.43776e04,
        0.44692e04,
        0.45618e04,
        0.46553e04,
        0.47498e04,
        0.48452e04,
        0.49416e04,
        0.50390e04,
        0.51373e04,
        0.52366e04,
        0.53368e04,
        0.54381e04,
        0.55403e04,
        0.56435e04,
        0.57476e04,
        0.58527e04,
        0.59588e04,
        0.60659e04,
        0.61739e04,
        0.62829e04,
        0.63930e04,
        0.65040e04,
        0.66160e04,
        0.67290e04,
        0.68429e04,
        0.69579e04,
        0.70739e04,
        0.71908e04,
        0.73088e04,
        0.74277e04,
        0.75477e04,
        0.76686e04,
        0.77905e04,
        0.79135e04,
        0.80374e04,
        0.81624e04,
        0.82883e04,
        0.84153e04,
        0.85432e04,
        0.86722e04,
        0.88022e04,
        0.89331e04,
        0.90651e04,
        0.91982e04,
        0.93322e04,
        0.94672e04,
        0.96033e04,
        0.97404e04,
        0.98785e04,
        0.10018e05,
        0.10158e05,
        0.10299e05,
        0.10441e05,
        0.10584e05,
        0.10728e05,
        0.10874e05,
    ]
)


#  --------------- CO 38: M = 5, I = 5 ---------------------
M = 5
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.48264e02,
        0.68112e02,
        0.87974e02,
        0.10785e03,
        0.12773e03,
        0.14763e03,
        0.16754e03,
        0.18747e03,
        0.20741e03,
        0.22736e03,
        0.24733e03,
        0.26732e03,
        0.28735e03,
        0.30741e03,
        0.32752e03,
        0.34770e03,
        0.36794e03,
        0.38828e03,
        0.40871e03,
        0.42926e03,
        0.44994e03,
        0.47077e03,
        0.49175e03,
        0.51290e03,
        0.53424e03,
        0.55578e03,
        0.57752e03,
        0.59948e03,
        0.62166e03,
        0.64409e03,
        0.66676e03,
        0.68969e03,
        0.71287e03,
        0.73633e03,
        0.76006e03,
        0.78407e03,
        0.80836e03,
        0.83295e03,
        0.85784e03,
        0.88302e03,
        0.90851e03,
        0.93431e03,
        0.96042e03,
        0.98686e03,
        0.10136e04,
        0.10407e04,
        0.10681e04,
        0.10958e04,
        0.11238e04,
        0.11522e04,
        0.11809e04,
        0.12100e04,
        0.12393e04,
        0.12691e04,
        0.12991e04,
        0.13295e04,
        0.13603e04,
        0.13914e04,
        0.14228e04,
        0.14546e04,
        0.14867e04,
        0.15192e04,
        0.15520e04,
        0.15852e04,
        0.16187e04,
        0.16526e04,
        0.16869e04,
        0.17215e04,
        0.17564e04,
        0.17917e04,
        0.18274e04,
        0.18634e04,
        0.18998e04,
        0.19365e04,
        0.19736e04,
        0.20111e04,
        0.20489e04,
        0.20871e04,
        0.21256e04,
        0.21645e04,
        0.22038e04,
        0.22434e04,
        0.22834e04,
        0.23238e04,
        0.23645e04,
        0.24056e04,
        0.24471e04,
        0.24889e04,
        0.25311e04,
        0.25736e04,
        0.26166e04,
        0.26599e04,
        0.27035e04,
        0.27476e04,
        0.27920e04,
        0.28368e04,
        0.28819e04,
        0.29275e04,
        0.29733e04,
        0.30196e04,
        0.30662e04,
        0.31133e04,
        0.31606e04,
        0.32084e04,
        0.32565e04,
        0.33050e04,
        0.33539e04,
        0.34032e04,
        0.34528e04,
        0.35028e04,
        0.35532e04,
        0.36040e04,
        0.36551e04,
        0.37067e04,
        0.37586e04,
        0.38108e04,
        0.38635e04,
        0.39165e04,
        0.39699e04,
    ]
)


#  --------------- CO 37: M = 5, I = 6 ---------------------
M = 5
I = 6
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.28271e03,
        0.39894e03,
        0.51524e03,
        0.63162e03,
        0.74807e03,
        0.86459e03,
        0.98119e03,
        0.10979e04,
        0.12146e04,
        0.13314e04,
        0.14484e04,
        0.15654e04,
        0.16826e04,
        0.18000e04,
        0.19176e04,
        0.20355e04,
        0.21538e04,
        0.22725e04,
        0.23916e04,
        0.25114e04,
        0.26318e04,
        0.27529e04,
        0.28749e04,
        0.29977e04,
        0.31215e04,
        0.32463e04,
        0.33721e04,
        0.34991e04,
        0.36274e04,
        0.37568e04,
        0.38876e04,
        0.40197e04,
        0.41533e04,
        0.42882e04,
        0.44247e04,
        0.45626e04,
        0.47022e04,
        0.48433e04,
        0.49860e04,
        0.51304e04,
        0.52763e04,
        0.54240e04,
        0.55735e04,
        0.57246e04,
        0.58775e04,
        0.60321e04,
        0.61886e04,
        0.63468e04,
        0.65068e04,
        0.66687e04,
        0.68324e04,
        0.69980e04,
        0.71654e04,
        0.73347e04,
        0.75058e04,
        0.76789e04,
        0.78539e04,
        0.80307e04,
        0.82096e04,
        0.83903e04,
        0.85729e04,
        0.87576e04,
        0.89441e04,
        0.91326e04,
        0.93230e04,
        0.95154e04,
        0.97098e04,
        0.99061e04,
        0.10104e05,
        0.10305e05,
        0.10507e05,
        0.10711e05,
        0.10918e05,
        0.11126e05,
        0.11336e05,
        0.11549e05,
        0.11763e05,
        0.11979e05,
        0.12198e05,
        0.12418e05,
        0.12640e05,
        0.12865e05,
        0.13091e05,
        0.13320e05,
        0.13550e05,
        0.13783e05,
        0.14018e05,
        0.14254e05,
        0.14493e05,
        0.14734e05,
        0.14977e05,
        0.15221e05,
        0.15468e05,
        0.15718e05,
        0.15969e05,
        0.16222e05,
        0.16477e05,
        0.16734e05,
        0.16994e05,
        0.17255e05,
        0.17519e05,
        0.17784e05,
        0.18052e05,
        0.18322e05,
        0.18594e05,
        0.18868e05,
        0.19144e05,
        0.19422e05,
        0.19703e05,
        0.19985e05,
        0.20270e05,
        0.20556e05,
        0.20845e05,
        0.21136e05,
        0.21429e05,
        0.21724e05,
        0.22021e05,
        0.22320e05,
        0.22622e05,
    ]
)


#  --------------- CH4 211: M = 6, I = 1 ---------------------
M = 6
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.54800e02,
        0.91500e02,
        0.13410e03,
        0.18180e03,
        0.23410e03,
        0.29070e03,
        0.35140e03,
        0.41600e03,
        0.48450e03,
        0.55720e03,
        0.63420e03,
        0.71600e03,
        0.80310e03,
        0.89590e03,
        0.99520e03,
        0.11017e04,
        0.12161e04,
        0.13393e04,
        0.14721e04,
        0.16155e04,
        0.17706e04,
        0.19384e04,
        0.21202e04,
        0.23172e04,
        0.25307e04,
        0.27624e04,
        0.30137e04,
        0.32864e04,
        0.35823e04,
        0.39034e04,
        0.42519e04,
        0.46300e04,
        0.50402e04,
        0.54853e04,
        0.59679e04,
        0.64913e04,
        0.70588e04,
        0.76739e04,
        0.83404e04,
        0.90625e04,
        0.98446e04,
        0.10691e05,
        0.11608e05,
        0.12600e05,
        0.13674e05,
        0.14835e05,
        0.16090e05,
        0.17447e05,
        0.18914e05,
        0.20500e05,
        0.22212e05,
        0.24063e05,
        0.26061e05,
        0.28218e05,
        0.30548e05,
        0.33063e05,
        0.35778e05,
        0.38708e05,
        0.41871e05,
        0.45284e05,
        0.48970e05,
        0.52940e05,
        0.57230e05,
        0.61860e05,
        0.66860e05,
        0.72250e05,
        0.78070e05,
        0.84350e05,
        0.91130e05,
        0.98450e05,
        0.10635e06,
        0.11488e06,
        0.12408e06,
        0.13403e06,
        0.14480e06,
        0.15640e06,
        0.16890e06,
        0.18240e06,
        0.19700e06,
        0.21280e06,
        0.22980e06,
        0.24830e06,
        0.26820e06,
        0.28970e06,
        0.31290e06,
        0.33800e06,
        0.36520e06,
        0.39450e06,
        0.42600e06,
        0.46000e06,
        0.49700e06,
        0.53700e06,
        0.58100e06,
        0.62700e06,
        0.67800e06,
        0.73300e06,
        0.79200e06,
        0.85600e06,
        0.92500e06,
        0.10000e07,
        0.10800e07,
        0.11670e07,
        0.12610e07,
        0.13620e07,
        0.14720e07,
        0.15910e07,
        0.17190e07,
        0.18600e07,
        0.20100e07,
        0.21700e07,
        0.23400e07,
        0.25300e07,
        0.27300e07,
        0.29500e07,
        0.31800e07,
        0.34300e07,
        0.37000e07,
        0.39900e07,
        0.42856e07,
    ]
)


#  --------------- CH4 311: M = 6, I = 2 ---------------------
M = 6
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.10958e03,
        0.18304e03,
        0.26818e03,
        0.36356e03,
        0.46820e03,
        0.58141e03,
        0.70270e03,
        0.83186e03,
        0.96893e03,
        0.11142e04,
        0.12682e04,
        0.14316e04,
        0.16055e04,
        0.17909e04,
        0.19891e04,
        0.22016e04,
        0.24297e04,
        0.26752e04,
        0.29399e04,
        0.32255e04,
        0.35342e04,
        0.38680e04,
        0.42294e04,
        0.46208e04,
        0.50449e04,
        0.55046e04,
        0.60030e04,
        0.65434e04,
        0.71293e04,
        0.77646e04,
        0.84535e04,
        0.92004e04,
        0.10010e05,
        0.10888e05,
        0.11838e05,
        0.12869e05,
        0.13984e05,
        0.15193e05,
        0.16501e05,
        0.17916e05,
        0.19448e05,
        0.21104e05,
        0.22895e05,
        0.24830e05,
        0.26921e05,
        0.29180e05,
        0.31618e05,
        0.34250e05,
        0.37090e05,
        0.40152e05,
        0.43454e05,
        0.47012e05,
        0.50845e05,
        0.54973e05,
        0.59416e05,
        0.64197e05,
        0.69340e05,
        0.74870e05,
        0.80813e05,
        0.87198e05,
        0.94055e05,
        0.10142e06,
        0.10932e06,
        0.11779e06,
        0.12688e06,
        0.13662e06,
        0.14706e06,
        0.15824e06,
        0.17021e06,
        0.18302e06,
        0.19673e06,
        0.21139e06,
        0.22706e06,
        0.24381e06,
        0.26171e06,
        0.28082e06,
        0.30122e06,
        0.32299e06,
        0.34621e06,
        0.37097e06,
        0.39737e06,
        0.42551e06,
        0.45548e06,
        0.48739e06,
        0.52136e06,
        0.55752e06,
        0.59598e06,
        0.63688e06,
        0.68036e06,
        0.72657e06,
        0.77566e06,
        0.82780e06,
        0.88316e06,
        0.94191e06,
        0.10043e07,
        0.10704e07,
        0.11405e07,
        0.12148e07,
        0.12936e07,
        0.13770e07,
        0.14654e07,
        0.15589e07,
        0.16579e07,
        0.17627e07,
        0.18736e07,
        0.19908e07,
        0.21147e07,
        0.22456e07,
        0.23840e07,
        0.25301e07,
        0.26844e07,
        0.28474e07,
        0.30193e07,
        0.32007e07,
        0.33921e07,
        0.35939e07,
        0.38067e07,
        0.40310e07,
        0.42673e07,
    ]
)


#  --------------- CH4 212: M = 6, I = 3 ---------------------
M = 6
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.44079e03,
        0.73786e03,
        0.10822e04,
        0.14679e04,
        0.18913e04,
        0.23497e04,
        0.28415e04,
        0.33665e04,
        0.39257e04,
        0.45211e04,
        0.51562e04,
        0.58349e04,
        0.65624e04,
        0.73445e04,
        0.81872e04,
        0.90978e04,
        0.10084e05,
        0.11153e05,
        0.12315e05,
        0.13579e05,
        0.14955e05,
        0.16455e05,
        0.18089e05,
        0.19871e05,
        0.21816e05,
        0.23937e05,
        0.26251e05,
        0.28776e05,
        0.31531e05,
        0.34535e05,
        0.37811e05,
        0.41384e05,
        0.45278e05,
        0.49521e05,
        0.54144e05,
        0.59178e05,
        0.64657e05,
        0.70621e05,
        0.77108e05,
        0.84161e05,
        0.91828e05,
        0.10016e06,
        0.10921e06,
        0.11903e06,
        0.12968e06,
        0.14124e06,
        0.15378e06,
        0.16736e06,
        0.18207e06,
        0.19800e06,
        0.21524e06,
        0.23389e06,
        0.25405e06,
        0.27585e06,
        0.29939e06,
        0.32482e06,
        0.35226e06,
        0.38186e06,
        0.41379e06,
        0.44821e06,
        0.48529e06,
        0.52522e06,
        0.56821e06,
        0.61447e06,
        0.66422e06,
        0.71771e06,
        0.77519e06,
        0.83693e06,
        0.90323e06,
        0.97438e06,
        0.10507e07,
        0.11326e07,
        0.12203e07,
        0.13143e07,
        0.14150e07,
        0.15228e07,
        0.16382e07,
        0.17616e07,
        0.18935e07,
        0.20346e07,
        0.21853e07,
        0.23463e07,
        0.25181e07,
        0.27016e07,
        0.28973e07,
        0.31060e07,
        0.33284e07,
        0.35655e07,
        0.38181e07,
        0.40870e07,
        0.43733e07,
        0.46780e07,
        0.50020e07,
        0.53467e07,
        0.57130e07,
        0.61023e07,
        0.65158e07,
        0.69549e07,
        0.74211e07,
        0.79158e07,
        0.84407e07,
        0.89973e07,
        0.95874e07,
        0.10213e08,
        0.10875e08,
        0.11577e08,
        0.12320e08,
        0.13107e08,
        0.13940e08,
        0.14820e08,
        0.15752e08,
        0.16736e08,
        0.17777e08,
        0.18877e08,
        0.20038e08,
        0.21265e08,
        0.22560e08,
        0.23927e08,
        0.25369e08,
    ]
)


#  --------------- CH4 312: M = 6, I = 4 ---------------------
M = 6
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.88231e03,
        0.14770e04,
        0.21661e04,
        0.29384e04,
        0.37859e04,
        0.47034e04,
        0.56879e04,
        0.67388e04,
        0.78581e04,
        0.90501e04,
        0.10321e05,
        0.11680e05,
        0.13136e05,
        0.14702e05,
        0.16389e05,
        0.18212e05,
        0.20186e05,
        0.22328e05,
        0.24654e05,
        0.27185e05,
        0.29941e05,
        0.32943e05,
        0.36216e05,
        0.39786e05,
        0.43681e05,
        0.47930e05,
        0.52567e05,
        0.57625e05,
        0.63144e05,
        0.69164e05,
        0.75730e05,
        0.82890e05,
        0.90693e05,
        0.99198e05,
        0.10846e06,
        0.11855e06,
        0.12954e06,
        0.14149e06,
        0.15450e06,
        0.16864e06,
        0.18402e06,
        0.20072e06,
        0.21886e06,
        0.23856e06,
        0.25993e06,
        0.28312e06,
        0.30825e06,
        0.33550e06,
        0.36501e06,
        0.39696e06,
        0.43155e06,
        0.46896e06,
        0.50942e06,
        0.55315e06,
        0.60039e06,
        0.65141e06,
        0.70648e06,
        0.76589e06,
        0.82997e06,
        0.89904e06,
        0.97346e06,
        0.10536e07,
        0.11399e07,
        0.12327e07,
        0.13326e07,
        0.14400e07,
        0.15554e07,
        0.16793e07,
        0.18124e07,
        0.19553e07,
        0.21085e07,
        0.22729e07,
        0.24490e07,
        0.26378e07,
        0.28400e07,
        0.30565e07,
        0.32881e07,
        0.35360e07,
        0.38010e07,
        0.40843e07,
        0.43870e07,
        0.47103e07,
        0.50555e07,
        0.54239e07,
        0.58169e07,
        0.62361e07,
        0.66830e07,
        0.71592e07,
        0.76666e07,
        0.82069e07,
        0.87820e07,
        0.93940e07,
        0.10045e08,
        0.10737e08,
        0.11473e08,
        0.12256e08,
        0.13086e08,
        0.13969e08,
        0.14905e08,
        0.15899e08,
        0.16954e08,
        0.18072e08,
        0.19258e08,
        0.20515e08,
        0.21847e08,
        0.23257e08,
        0.24750e08,
        0.26331e08,
        0.28004e08,
        0.29774e08,
        0.31646e08,
        0.33625e08,
        0.35716e08,
        0.37926e08,
        0.40261e08,
        0.42726e08,
        0.45329e08,
        0.48077e08,
        0.50975e08,
    ]
)


#  --------------- O2 66: M = 7, I = 1 ---------------------
M = 7
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.44334e02,
        0.62460e02,
        0.80596e02,
        0.98738e02,
        0.11688e03,
        0.13503e03,
        0.15319e03,
        0.17136e03,
        0.18954e03,
        0.20775e03,
        0.22600e03,
        0.24431e03,
        0.26270e03,
        0.28119e03,
        0.29981e03,
        0.31857e03,
        0.33750e03,
        0.35662e03,
        0.37594e03,
        0.39550e03,
        0.41529e03,
        0.43535e03,
        0.45568e03,
        0.47630e03,
        0.49722e03,
        0.51844e03,
        0.53998e03,
        0.56185e03,
        0.58406e03,
        0.60660e03,
        0.62949e03,
        0.65274e03,
        0.67635e03,
        0.70031e03,
        0.72465e03,
        0.74936e03,
        0.77444e03,
        0.79990e03,
        0.82574e03,
        0.85197e03,
        0.87858e03,
        0.90558e03,
        0.93297e03,
        0.96076e03,
        0.98895e03,
        0.10175e04,
        0.10465e04,
        0.10759e04,
        0.11057e04,
        0.11359e04,
        0.11665e04,
        0.11976e04,
        0.12290e04,
        0.12609e04,
        0.12931e04,
        0.13258e04,
        0.13590e04,
        0.13925e04,
        0.14265e04,
        0.14609e04,
        0.14958e04,
        0.15311e04,
        0.15669e04,
        0.16031e04,
        0.16397e04,
        0.16768e04,
        0.17144e04,
        0.17524e04,
        0.17909e04,
        0.18298e04,
        0.18692e04,
        0.19091e04,
        0.19495e04,
        0.19904e04,
        0.20318e04,
        0.20736e04,
        0.21160e04,
        0.21588e04,
        0.22022e04,
        0.22461e04,
        0.22905e04,
        0.23354e04,
        0.23809e04,
        0.24268e04,
        0.24734e04,
        0.25204e04,
        0.25680e04,
        0.26162e04,
        0.26649e04,
        0.27142e04,
        0.27641e04,
        0.28145e04,
        0.28655e04,
        0.29171e04,
        0.29693e04,
        0.30221e04,
        0.30755e04,
        0.31295e04,
        0.31841e04,
        0.32393e04,
        0.32951e04,
        0.33516e04,
        0.34087e04,
        0.34665e04,
        0.35249e04,
        0.35839e04,
        0.36436e04,
        0.37040e04,
        0.37650e04,
        0.38267e04,
        0.38891e04,
        0.39522e04,
        0.40159e04,
        0.40804e04,
        0.41455e04,
        0.42114e04,
        0.42780e04,
        0.43452e04,
        0.44132e04,
    ]
)


#  --------------- O2 68: M = 7, I = 2 ---------------------
M = 7
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.89206e02,
        0.12759e03,
        0.16600e03,
        0.20442e03,
        0.24285e03,
        0.28128e03,
        0.31973e03,
        0.35821e03,
        0.39672e03,
        0.43530e03,
        0.47398e03,
        0.51281e03,
        0.55183e03,
        0.59108e03,
        0.63062e03,
        0.67051e03,
        0.71078e03,
        0.75148e03,
        0.79265e03,
        0.83435e03,
        0.87659e03,
        0.91941e03,
        0.96285e03,
        0.10069e04,
        0.10517e04,
        0.10971e04,
        0.11432e04,
        0.11901e04,
        0.12377e04,
        0.12861e04,
        0.13352e04,
        0.13851e04,
        0.14358e04,
        0.14872e04,
        0.15395e04,
        0.15926e04,
        0.16466e04,
        0.17013e04,
        0.17569e04,
        0.18134e04,
        0.18706e04,
        0.19288e04,
        0.19877e04,
        0.20476e04,
        0.21083e04,
        0.21698e04,
        0.22323e04,
        0.22956e04,
        0.23598e04,
        0.24248e04,
        0.24908e04,
        0.25576e04,
        0.26253e04,
        0.26940e04,
        0.27635e04,
        0.28339e04,
        0.29052e04,
        0.29775e04,
        0.30506e04,
        0.31247e04,
        0.31997e04,
        0.32756e04,
        0.33524e04,
        0.34302e04,
        0.35089e04,
        0.35885e04,
        0.36691e04,
        0.37506e04,
        0.38331e04,
        0.39166e04,
        0.40010e04,
        0.40864e04,
        0.41727e04,
        0.42601e04,
        0.43484e04,
        0.44377e04,
        0.45280e04,
        0.46193e04,
        0.47116e04,
        0.48049e04,
        0.48992e04,
        0.49946e04,
        0.50909e04,
        0.51883e04,
        0.52868e04,
        0.53863e04,
        0.54868e04,
        0.55884e04,
        0.56911e04,
        0.57949e04,
        0.58997e04,
        0.60056e04,
        0.61126e04,
        0.62207e04,
        0.63298e04,
        0.64401e04,
        0.65516e04,
        0.66641e04,
        0.67778e04,
        0.68926e04,
        0.70085e04,
        0.71256e04,
        0.72439e04,
        0.73633e04,
        0.74839e04,
        0.76056e04,
        0.77286e04,
        0.78527e04,
        0.79781e04,
        0.81046e04,
        0.82324e04,
        0.83613e04,
        0.84915e04,
        0.86229e04,
        0.87556e04,
        0.88895e04,
        0.90247e04,
        0.91611e04,
        0.92988e04,
    ]
)


#  --------------- O2 67: M = 7, I = 3 ---------------------
M = 7
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.52071e03,
        0.74484e03,
        0.96908e03,
        0.11934e04,
        0.14177e04,
        0.16422e04,
        0.18667e04,
        0.20913e04,
        0.23161e04,
        0.25413e04,
        0.27671e04,
        0.29936e04,
        0.32212e04,
        0.34501e04,
        0.36806e04,
        0.39130e04,
        0.41476e04,
        0.43846e04,
        0.46242e04,
        0.48668e04,
        0.51125e04,
        0.53615e04,
        0.56140e04,
        0.58701e04,
        0.61300e04,
        0.63938e04,
        0.66617e04,
        0.69337e04,
        0.72099e04,
        0.74904e04,
        0.77754e04,
        0.80647e04,
        0.83586e04,
        0.86571e04,
        0.89602e04,
        0.92680e04,
        0.95805e04,
        0.98977e04,
        0.10220e05,
        0.10547e05,
        0.10878e05,
        0.11215e05,
        0.11556e05,
        0.11903e05,
        0.12254e05,
        0.12611e05,
        0.12972e05,
        0.13338e05,
        0.13710e05,
        0.14086e05,
        0.14468e05,
        0.14855e05,
        0.15247e05,
        0.15644e05,
        0.16046e05,
        0.16453e05,
        0.16866e05,
        0.17283e05,
        0.17706e05,
        0.18135e05,
        0.18568e05,
        0.19007e05,
        0.19452e05,
        0.19901e05,
        0.20356e05,
        0.20817e05,
        0.21283e05,
        0.21754e05,
        0.22231e05,
        0.22713e05,
        0.23201e05,
        0.23695e05,
        0.24194e05,
        0.24699e05,
        0.25209e05,
        0.25725e05,
        0.26247e05,
        0.26775e05,
        0.27308e05,
        0.27847e05,
        0.28393e05,
        0.28944e05,
        0.29500e05,
        0.30063e05,
        0.30632e05,
        0.31207e05,
        0.31788e05,
        0.32375e05,
        0.32968e05,
        0.33568e05,
        0.34173e05,
        0.34785e05,
        0.35403e05,
        0.36028e05,
        0.36659e05,
        0.37296e05,
        0.37939e05,
        0.38590e05,
        0.39246e05,
        0.39909e05,
        0.40579e05,
        0.41256e05,
        0.41939e05,
        0.42629e05,
        0.43325e05,
        0.44029e05,
        0.44739e05,
        0.45456e05,
        0.46180e05,
        0.46911e05,
        0.47649e05,
        0.48394e05,
        0.49146e05,
        0.49905e05,
        0.50671e05,
        0.51445e05,
        0.52226e05,
        0.53014e05,
        0.53809e05,
    ]
)


#  --------------- NO 46: M = 8, I = 1 ---------------------
M = 8
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.15840e03,
        0.23971e03,
        0.33080e03,
        0.42907e03,
        0.53251e03,
        0.63972e03,
        0.74975e03,
        0.86195e03,
        0.97582e03,
        0.10911e04,
        0.12074e04,
        0.13248e04,
        0.14430e04,
        0.15621e04,
        0.16820e04,
        0.18027e04,
        0.19243e04,
        0.20468e04,
        0.21703e04,
        0.22948e04,
        0.24204e04,
        0.25472e04,
        0.26753e04,
        0.28046e04,
        0.29354e04,
        0.30676e04,
        0.32013e04,
        0.33365e04,
        0.34734e04,
        0.36120e04,
        0.37522e04,
        0.38942e04,
        0.40379e04,
        0.41835e04,
        0.43310e04,
        0.44803e04,
        0.46316e04,
        0.47849e04,
        0.49400e04,
        0.50972e04,
        0.52564e04,
        0.54176e04,
        0.55809e04,
        0.57462e04,
        0.59137e04,
        0.60832e04,
        0.62548e04,
        0.64286e04,
        0.66045e04,
        0.67825e04,
        0.69628e04,
        0.71451e04,
        0.73297e04,
        0.75164e04,
        0.77053e04,
        0.78964e04,
        0.80897e04,
        0.82853e04,
        0.84830e04,
        0.86830e04,
        0.88852e04,
        0.90896e04,
        0.92963e04,
        0.95052e04,
        0.97164e04,
        0.99297e04,
        0.10145e05,
        0.10363e05,
        0.10583e05,
        0.10806e05,
        0.11031e05,
        0.11258e05,
        0.11487e05,
        0.11718e05,
        0.11952e05,
        0.12188e05,
        0.12426e05,
        0.12667e05,
        0.12910e05,
        0.13155e05,
        0.13403e05,
        0.13652e05,
        0.13905e05,
        0.14159e05,
        0.14416e05,
        0.14675e05,
        0.14936e05,
        0.15199e05,
        0.15465e05,
        0.15733e05,
        0.16004e05,
        0.16277e05,
        0.16552e05,
        0.16829e05,
        0.17109e05,
        0.17391e05,
        0.17675e05,
        0.17962e05,
        0.18251e05,
        0.18542e05,
        0.18836e05,
        0.19131e05,
        0.19430e05,
        0.19730e05,
        0.20033e05,
        0.20338e05,
        0.20646e05,
        0.20955e05,
        0.21268e05,
        0.21582e05,
        0.21899e05,
        0.22218e05,
        0.22539e05,
        0.22863e05,
        0.23189e05,
        0.23518e05,
        0.23848e05,
        0.24181e05,
        0.24517e05,
    ]
)


#  --------------- NO 56: M = 8, I = 2 ---------------------
M = 8
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.10942e03,
        0.16560e03,
        0.22856e03,
        0.29647e03,
        0.36795e03,
        0.44204e03,
        0.51808e03,
        0.59561e03,
        0.67432e03,
        0.75396e03,
        0.83439e03,
        0.91551e03,
        0.99725e03,
        0.10796e04,
        0.11625e04,
        0.12460e04,
        0.13302e04,
        0.14150e04,
        0.15005e04,
        0.15868e04,
        0.16739e04,
        0.17618e04,
        0.18506e04,
        0.19404e04,
        0.20311e04,
        0.21229e04,
        0.22158e04,
        0.23098e04,
        0.24050e04,
        0.25013e04,
        0.25989e04,
        0.26976e04,
        0.27977e04,
        0.28991e04,
        0.30018e04,
        0.31058e04,
        0.32112e04,
        0.33180e04,
        0.34262e04,
        0.35358e04,
        0.36468e04,
        0.37593e04,
        0.38732e04,
        0.39885e04,
        0.41054e04,
        0.42237e04,
        0.43436e04,
        0.44649e04,
        0.45877e04,
        0.47121e04,
        0.48379e04,
        0.49654e04,
        0.50943e04,
        0.52248e04,
        0.53568e04,
        0.54904e04,
        0.56255e04,
        0.57622e04,
        0.59004e04,
        0.60403e04,
        0.61816e04,
        0.63246e04,
        0.64692e04,
        0.66152e04,
        0.67630e04,
        0.69123e04,
        0.70631e04,
        0.72156e04,
        0.73696e04,
        0.75253e04,
        0.76825e04,
        0.78414e04,
        0.80018e04,
        0.81638e04,
        0.83275e04,
        0.84927e04,
        0.86596e04,
        0.88280e04,
        0.89981e04,
        0.91698e04,
        0.93430e04,
        0.95180e04,
        0.96945e04,
        0.98726e04,
        0.10052e05,
        0.10234e05,
        0.10417e05,
        0.10601e05,
        0.10788e05,
        0.10975e05,
        0.11165e05,
        0.11356e05,
        0.11549e05,
        0.11743e05,
        0.11939e05,
        0.12137e05,
        0.12336e05,
        0.12537e05,
        0.12739e05,
        0.12943e05,
        0.13149e05,
        0.13356e05,
        0.13565e05,
        0.13776e05,
        0.13988e05,
        0.14202e05,
        0.14418e05,
        0.14635e05,
        0.14853e05,
        0.15074e05,
        0.15296e05,
        0.15520e05,
        0.15745e05,
        0.15972e05,
        0.16200e05,
        0.16431e05,
        0.16663e05,
        0.16896e05,
        0.17131e05,
    ]
)


#  --------------- NO 48: M = 8, I = 3 ---------------------
M = 8
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.16695e03,
        0.25269e03,
        0.34876e03,
        0.45239e03,
        0.56148e03,
        0.67455e03,
        0.79059e03,
        0.90891e03,
        0.10290e04,
        0.11506e04,
        0.12733e04,
        0.13971e04,
        0.15219e04,
        0.16476e04,
        0.17742e04,
        0.19017e04,
        0.20302e04,
        0.21598e04,
        0.22904e04,
        0.24223e04,
        0.25553e04,
        0.26897e04,
        0.28255e04,
        0.29628e04,
        0.31016e04,
        0.32420e04,
        0.33842e04,
        0.35280e04,
        0.36736e04,
        0.38211e04,
        0.39704e04,
        0.41217e04,
        0.42750e04,
        0.44302e04,
        0.45876e04,
        0.47469e04,
        0.49084e04,
        0.50720e04,
        0.52378e04,
        0.54058e04,
        0.55759e04,
        0.57483e04,
        0.59230e04,
        0.60999e04,
        0.62791e04,
        0.64605e04,
        0.66443e04,
        0.68304e04,
        0.70187e04,
        0.72095e04,
        0.74026e04,
        0.75980e04,
        0.77958e04,
        0.79960e04,
        0.81986e04,
        0.84036e04,
        0.86109e04,
        0.88207e04,
        0.90328e04,
        0.92474e04,
        0.94644e04,
        0.96839e04,
        0.99057e04,
        0.10130e05,
        0.10357e05,
        0.10586e05,
        0.10817e05,
        0.11052e05,
        0.11288e05,
        0.11527e05,
        0.11768e05,
        0.12012e05,
        0.12259e05,
        0.12507e05,
        0.12759e05,
        0.13012e05,
        0.13269e05,
        0.13527e05,
        0.13788e05,
        0.14052e05,
        0.14318e05,
        0.14587e05,
        0.14858e05,
        0.15131e05,
        0.15408e05,
        0.15686e05,
        0.15967e05,
        0.16251e05,
        0.16537e05,
        0.16825e05,
        0.17116e05,
        0.17410e05,
        0.17706e05,
        0.18004e05,
        0.18305e05,
        0.18609e05,
        0.18915e05,
        0.19224e05,
        0.19535e05,
        0.19848e05,
        0.20164e05,
        0.20483e05,
        0.20804e05,
        0.21127e05,
        0.21453e05,
        0.21782e05,
        0.22113e05,
        0.22447e05,
        0.22783e05,
        0.23122e05,
        0.23463e05,
        0.23807e05,
        0.24153e05,
        0.24502e05,
        0.24853e05,
        0.25207e05,
        0.25563e05,
        0.25922e05,
        0.26283e05,
    ]
)


#  --------------- SO2 626: M = 9, I = 1 ---------------------
M = 9
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.52899e03,
        0.89171e03,
        0.13139e04,
        0.17915e04,
        0.23246e04,
        0.29155e04,
        0.35675e04,
        0.42848e04,
        0.50723e04,
        0.59352e04,
        0.68794e04,
        0.79109e04,
        0.90366e04,
        0.10264e05,
        0.11599e05,
        0.13052e05,
        0.14629e05,
        0.16340e05,
        0.18193e05,
        0.20199e05,
        0.22366e05,
        0.24704e05,
        0.27225e05,
        0.29938e05,
        0.32855e05,
        0.35987e05,
        0.39346e05,
        0.42944e05,
        0.46794e05,
        0.50909e05,
        0.55302e05,
        0.59986e05,
        0.64977e05,
        0.70288e05,
        0.75934e05,
        0.81931e05,
        0.88294e05,
        0.95040e05,
        0.10219e06,
        0.10975e06,
        0.11774e06,
        0.12619e06,
        0.13511e06,
        0.14452e06,
        0.15443e06,
        0.16487e06,
        0.17586e06,
        0.18742e06,
        0.19957e06,
        0.21234e06,
        0.22573e06,
        0.23978e06,
        0.25451e06,
        0.26995e06,
        0.28611e06,
        0.30302e06,
        0.32071e06,
        0.33920e06,
        0.35852e06,
        0.37869e06,
        0.39974e06,
        0.42171e06,
        0.44461e06,
        0.46848e06,
        0.49334e06,
        0.51922e06,
        0.54617e06,
        0.57419e06,
        0.60334e06,
        0.63363e06,
        0.66511e06,
        0.69780e06,
        0.73174e06,
        0.76696e06,
        0.80349e06,
        0.84138e06,
        0.88066e06,
        0.92136e06,
        0.96352e06,
        0.10072e07,
        0.10524e07,
        0.10992e07,
        0.11475e07,
        0.11976e07,
        0.12493e07,
        0.13028e07,
        0.13580e07,
        0.14151e07,
        0.14741e07,
        0.15349e07,
        0.15977e07,
        0.16625e07,
        0.17293e07,
        0.17982e07,
        0.18693e07,
        0.19425e07,
        0.20180e07,
        0.20958e07,
        0.21758e07,
        0.22583e07,
        0.23432e07,
        0.24305e07,
        0.25204e07,
        0.26129e07,
        0.27080e07,
        0.28058e07,
        0.29064e07,
        0.30097e07,
        0.31159e07,
        0.32250e07,
        0.33371e07,
        0.34522e07,
        0.35705e07,
        0.36918e07,
        0.38164e07,
        0.39442e07,
        0.40754e07,
        0.42099e07,
        0.43479e07,
    ]
)


#  --------------- SO2 646: M = 9, I = 2 ---------------------
M = 9
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.53140e03,
        0.89578e03,
        0.13199e04,
        0.17997e04,
        0.23353e04,
        0.29288e04,
        0.35837e04,
        0.43043e04,
        0.50953e04,
        0.59621e04,
        0.69104e04,
        0.79465e04,
        0.90772e04,
        0.10310e05,
        0.11651e05,
        0.13110e05,
        0.14694e05,
        0.16413e05,
        0.18274e05,
        0.20289e05,
        0.22465e05,
        0.24814e05,
        0.27345e05,
        0.30070e05,
        0.33000e05,
        0.36145e05,
        0.39519e05,
        0.43133e05,
        0.46999e05,
        0.51132e05,
        0.55544e05,
        0.60248e05,
        0.65260e05,
        0.70594e05,
        0.76264e05,
        0.82287e05,
        0.88678e05,
        0.95453e05,
        0.10263e06,
        0.11022e06,
        0.11825e06,
        0.12674e06,
        0.13569e06,
        0.14514e06,
        0.15510e06,
        0.16558e06,
        0.17662e06,
        0.18823e06,
        0.20043e06,
        0.21325e06,
        0.22670e06,
        0.24081e06,
        0.25561e06,
        0.27111e06,
        0.28733e06,
        0.30432e06,
        0.32208e06,
        0.34065e06,
        0.36005e06,
        0.38031e06,
        0.40145e06,
        0.42351e06,
        0.44651e06,
        0.47047e06,
        0.49544e06,
        0.52144e06,
        0.54849e06,
        0.57664e06,
        0.60591e06,
        0.63633e06,
        0.66794e06,
        0.70077e06,
        0.73485e06,
        0.77022e06,
        0.80691e06,
        0.84496e06,
        0.88440e06,
        0.92527e06,
        0.96761e06,
        0.10115e07,
        0.10568e07,
        0.11038e07,
        0.11524e07,
        0.12027e07,
        0.12546e07,
        0.13083e07,
        0.13638e07,
        0.14211e07,
        0.14803e07,
        0.15414e07,
        0.16045e07,
        0.16695e07,
        0.17366e07,
        0.18059e07,
        0.18772e07,
        0.19507e07,
        0.20265e07,
        0.21046e07,
        0.21850e07,
        0.22678e07,
        0.23531e07,
        0.24408e07,
        0.25310e07,
        0.26239e07,
        0.27194e07,
        0.28176e07,
        0.29186e07,
        0.30224e07,
        0.31290e07,
        0.32386e07,
        0.33512e07,
        0.34668e07,
        0.35855e07,
        0.37074e07,
        0.38324e07,
        0.39608e07,
        0.40925e07,
        0.42276e07,
        0.43662e07,
    ]
)

#  --------------- NO2 646: M = 10, I = 1 ---------------------
M = 10
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.12046e04,
        0.20297e04,
        0.29875e04,
        0.40626e04,
        0.52463e04,
        0.65350e04,
        0.79286e04,
        0.94298e04,
        0.11043e05,
        0.12776e05,
        0.14634e05,
        0.16627e05,
        0.18765e05,
        0.21056e05,
        0.23511e05,
        0.26143e05,
        0.28961e05,
        0.31979e05,
        0.35209e05,
        0.38663e05,
        0.42355e05,
        0.46300e05,
        0.50510e05,
        0.55001e05,
        0.59787e05,
        0.64884e05,
        0.70308e05,
        0.76075e05,
        0.82201e05,
        0.88704e05,
        0.95602e05,
        0.10291e06,
        0.11065e06,
        0.11884e06,
        0.12750e06,
        0.13665e06,
        0.14631e06,
        0.15650e06,
        0.16724e06,
        0.17856e06,
        0.19047e06,
        0.20301e06,
        0.21618e06,
        0.23002e06,
        0.24456e06,
        0.25981e06,
        0.27580e06,
        0.29256e06,
        0.31012e06,
        0.32850e06,
        0.34773e06,
        0.36784e06,
        0.38886e06,
        0.41082e06,
        0.43374e06,
        0.45766e06,
        0.48262e06,
        0.50863e06,
        0.53574e06,
        0.56398e06,
        0.59339e06,
        0.62398e06,
        0.65581e06,
        0.68891e06,
        0.72331e06,
        0.75905e06,
        0.79617e06,
        0.83470e06,
        0.87469e06,
        0.91617e06,
        0.95919e06,
        0.10038e07,
        0.10500e07,
        0.10979e07,
        0.11474e07,
        0.11988e07,
        0.12519e07,
        0.13068e07,
        0.13636e07,
        0.14224e07,
        0.14831e07,
        0.15459e07,
        0.16107e07,
        0.16776e07,
        0.17467e07,
        0.18180e07,
        0.18916e07,
        0.19675e07,
        0.20458e07,
        0.21265e07,
        0.22097e07,
        0.22954e07,
        0.23837e07,
        0.24747e07,
        0.25684e07,
        0.26648e07,
        0.27641e07,
        0.28662e07,
        0.29713e07,
        0.30794e07,
        0.31905e07,
        0.33048e07,
        0.34223e07,
        0.35430e07,
        0.36670e07,
        0.37944e07,
        0.39253e07,
        0.40597e07,
        0.41976e07,
        0.43393e07,
        0.44846e07,
        0.46337e07,
        0.47867e07,
        0.49437e07,
        0.51046e07,
        0.52696e07,
        0.54388e07,
        0.56122e07,
        0.57900e07,
    ]
)


#  --------------- NH3 4111: M = 11, I = 1 ---------------------
M = 11
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.16013e03,
        0.26692e03,
        0.39067e03,
        0.52933e03,
        0.68153e03,
        0.84641e03,
        0.10234e04,
        0.12125e04,
        0.14136e04,
        0.16272e04,
        0.18537e04,
        0.20937e04,
        0.23481e04,
        0.26177e04,
        0.29035e04,
        0.32065e04,
        0.35279e04,
        0.38688e04,
        0.42304e04,
        0.46141e04,
        0.50212e04,
        0.54531e04,
        0.59114e04,
        0.63976e04,
        0.69133e04,
        0.74602e04,
        0.80401e04,
        0.86549e04,
        0.93066e04,
        0.99971e04,
        0.10729e05,
        0.11504e05,
        0.12324e05,
        0.13193e05,
        0.14112e05,
        0.15085e05,
        0.16114e05,
        0.17201e05,
        0.18352e05,
        0.19567e05,
        0.20851e05,
        0.22208e05,
        0.23640e05,
        0.25152e05,
        0.26747e05,
        0.28430e05,
        0.30205e05,
        0.32077e05,
        0.34050e05,
        0.36128e05,
        0.38317e05,
        0.40623e05,
        0.43050e05,
        0.45605e05,
        0.48292e05,
        0.51119e05,
        0.54091e05,
        0.57215e05,
        0.60498e05,
        0.63947e05,
        0.67569e05,
        0.71372e05,
        0.75364e05,
        0.79552e05,
        0.83946e05,
        0.88553e05,
        0.93384e05,
        0.98447e05,
        0.10375e06,
        0.10931e06,
        0.11513e06,
        0.12122e06,
        0.12760e06,
        0.13427e06,
        0.14125e06,
        0.14855e06,
        0.15619e06,
        0.16417e06,
        0.17250e06,
        0.18121e06,
        0.19031e06,
        0.19981e06,
        0.20973e06,
        0.22008e06,
        0.23088e06,
        0.24215e06,
        0.25390e06,
        0.26615e06,
        0.27892e06,
        0.29223e06,
        0.30610e06,
        0.32055e06,
        0.33559e06,
        0.35125e06,
        0.36756e06,
        0.38453e06,
        0.40219e06,
        0.42056e06,
        0.43967e06,
        0.45953e06,
        0.48019e06,
        0.50165e06,
        0.52396e06,
        0.54714e06,
        0.57122e06,
        0.59622e06,
        0.62218e06,
        0.64913e06,
        0.67710e06,
        0.70613e06,
        0.73624e06,
        0.76748e06,
        0.79988e06,
        0.83347e06,
        0.86829e06,
        0.90439e06,
        0.94180e06,
        0.98056e06,
        0.10207e07,
    ]
)


#  --------------- NH3 5111: M = 11, I = 2 ---------------------
M = 11
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.10697e03,
        0.17832e03,
        0.26100e03,
        0.35364e03,
        0.45533e03,
        0.56549e03,
        0.68377e03,
        0.81007e03,
        0.94447e03,
        0.10872e04,
        0.12385e04,
        0.13988e04,
        0.15688e04,
        0.17490e04,
        0.19399e04,
        0.21424e04,
        0.23571e04,
        0.25848e04,
        0.28264e04,
        0.30828e04,
        0.33548e04,
        0.36434e04,
        0.39496e04,
        0.42745e04,
        0.46190e04,
        0.49845e04,
        0.53720e04,
        0.57828e04,
        0.62182e04,
        0.66796e04,
        0.71684e04,
        0.76862e04,
        0.82344e04,
        0.88149e04,
        0.94292e04,
        0.10079e05,
        0.10767e05,
        0.11494e05,
        0.12262e05,
        0.13074e05,
        0.13932e05,
        0.14839e05,
        0.15796e05,
        0.16806e05,
        0.17872e05,
        0.18997e05,
        0.20183e05,
        0.21434e05,
        0.22752e05,
        0.24141e05,
        0.25604e05,
        0.27145e05,
        0.28767e05,
        0.30475e05,
        0.32271e05,
        0.34160e05,
        0.36146e05,
        0.38234e05,
        0.40428e05,
        0.42733e05,
        0.45154e05,
        0.47696e05,
        0.50364e05,
        0.53163e05,
        0.56100e05,
        0.59180e05,
        0.62408e05,
        0.65792e05,
        0.69339e05,
        0.73053e05,
        0.76943e05,
        0.81016e05,
        0.85279e05,
        0.89740e05,
        0.94406e05,
        0.99287e05,
        0.10439e06,
        0.10972e06,
        0.11530e06,
        0.12112e06,
        0.12720e06,
        0.13355e06,
        0.14018e06,
        0.14711e06,
        0.15433e06,
        0.16186e06,
        0.16971e06,
        0.17791e06,
        0.18645e06,
        0.19534e06,
        0.20462e06,
        0.21428e06,
        0.22434e06,
        0.23481e06,
        0.24572e06,
        0.25706e06,
        0.26887e06,
        0.28116e06,
        0.29393e06,
        0.30722e06,
        0.32103e06,
        0.33539e06,
        0.35031e06,
        0.36581e06,
        0.38191e06,
        0.39864e06,
        0.41600e06,
        0.43403e06,
        0.45274e06,
        0.47215e06,
        0.49230e06,
        0.51319e06,
        0.53487e06,
        0.55734e06,
        0.58064e06,
        0.60478e06,
        0.62981e06,
        0.65574e06,
        0.68260e06,
    ]
)


#  --------------- HNO3 146: M = 12, I = 1 ---------------------
M = 12
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.15010e05,
        0.25316e05,
        0.37374e05,
        0.51216e05,
        0.67105e05,
        0.85473e05,
        0.10688e06,
        0.13201e06,
        0.16165e06,
        0.19671e06,
        0.23825e06,
        0.28749e06,
        0.34583e06,
        0.41490e06,
        0.49657e06,
        0.59302e06,
        0.70673e06,
        0.84054e06,
        0.99775e06,
        0.11821e07,
        0.13978e07,
        0.16498e07,
        0.19436e07,
        0.22855e07,
        0.26825e07,
        0.31428e07,
        0.36753e07,
        0.42903e07,
        0.49993e07,
        0.58151e07,
        0.67523e07,
        0.78269e07,
        0.90572e07,
        0.10463e08,
        0.12067e08,
        0.13895e08,
        0.15973e08,
        0.18333e08,
        0.21009e08,
        0.24039e08,
        0.27464e08,
        0.31331e08,
        0.35690e08,
        0.40597e08,
        0.46115e08,
        0.52310e08,
        0.59257e08,
        0.67037e08,
        0.75739e08,
        0.85461e08,
        0.96310e08,
        0.10840e09,
        0.12186e09,
        0.13683e09,
        0.15346e09,
        0.17191e09,
        0.19236e09,
        0.21501e09,
        0.24006e09,
        0.26774e09,
        0.29830e09,
        0.33200e09,
        0.36914e09,
        0.41002e09,
        0.45498e09,
        0.50438e09,
        0.55862e09,
        0.61812e09,
        0.68332e09,
        0.75473e09,
        0.83286e09,
        0.91828e09,
        0.10116e10,
        0.11134e10,
        0.12245e10,
        0.13456e10,
        0.14775e10,
        0.16210e10,
        0.17771e10,
        0.19467e10,
        0.21309e10,
        0.23309e10,
        0.25477e10,
        0.27827e10,
        0.30372e10,
        0.33127e10,
        0.36107e10,
        0.39329e10,
        0.42809e10,
        0.46567e10,
        0.50623e10,
        0.54997e10,
        0.59711e10,
        0.64789e10,
        0.70257e10,
        0.76140e10,
        0.82468e10,
        0.89269e10,
        0.96575e10,
        0.10442e11,
        0.11284e11,
        0.12187e11,
        0.13155e11,
        0.14193e11,
        0.15304e11,
        0.16494e11,
        0.17767e11,
        0.19129e11,
        0.20585e11,
        0.22140e11,
        0.23802e11,
        0.25576e11,
        0.27469e11,
        0.29489e11,
        0.31642e11,
        0.33937e11,
        0.36382e11,
        0.38985e11,
        0.41757e11,
    ]
)


#  --------------- HNO3 156: M = 12, I = 2 --------------------- NOT IN TIPS-2011
M = 12
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- OH 61: M = 13, I = 1 ---------------------
M = 13
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.20066e02,
        0.24774e02,
        0.30309e02,
        0.36357e02,
        0.42745e02,
        0.49371e02,
        0.56168e02,
        0.63093e02,
        0.70116e02,
        0.77217e02,
        0.84380e02,
        0.91594e02,
        0.98850e02,
        0.10614e03,
        0.11346e03,
        0.12081e03,
        0.12818e03,
        0.13557e03,
        0.14298e03,
        0.15041e03,
        0.15785e03,
        0.16531e03,
        0.17278e03,
        0.18027e03,
        0.18778e03,
        0.19530e03,
        0.20284e03,
        0.21040e03,
        0.21797e03,
        0.22556e03,
        0.23318e03,
        0.24082e03,
        0.24848e03,
        0.25617e03,
        0.26389e03,
        0.27163e03,
        0.27941e03,
        0.28721e03,
        0.29505e03,
        0.30292e03,
        0.31084e03,
        0.31878e03,
        0.32677e03,
        0.33480e03,
        0.34287e03,
        0.35099e03,
        0.35915e03,
        0.36736e03,
        0.37561e03,
        0.38391e03,
        0.39227e03,
        0.40067e03,
        0.40913e03,
        0.41764e03,
        0.42620e03,
        0.43482e03,
        0.44350e03,
        0.45223e03,
        0.46102e03,
        0.46987e03,
        0.47878e03,
        0.48775e03,
        0.49679e03,
        0.50588e03,
        0.51503e03,
        0.52425e03,
        0.53354e03,
        0.54288e03,
        0.55229e03,
        0.56177e03,
        0.57132e03,
        0.58092e03,
        0.59060e03,
        0.60035e03,
        0.61016e03,
        0.62004e03,
        0.62999e03,
        0.64001e03,
        0.65010e03,
        0.66025e03,
        0.67049e03,
        0.68078e03,
        0.69115e03,
        0.70160e03,
        0.71211e03,
        0.72269e03,
        0.73335e03,
        0.74408e03,
        0.75488e03,
        0.76576e03,
        0.77671e03,
        0.78773e03,
        0.79883e03,
        0.81000e03,
        0.82124e03,
        0.83256e03,
        0.84396e03,
        0.85542e03,
        0.86696e03,
        0.87858e03,
        0.89027e03,
        0.90204e03,
        0.91389e03,
        0.92580e03,
        0.93781e03,
        0.94988e03,
        0.96203e03,
        0.97425e03,
        0.98656e03,
        0.99893e03,
        0.10114e04,
        0.10239e04,
        0.10365e04,
        0.10492e04,
        0.10620e04,
        0.10748e04,
        0.10878e04,
        0.11007e04,
        0.11138e04,
    ]
)

#  --------------- OH 81: M = 13, I = 2 ---------------------
M = 13
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.20124e02,
        0.24876e02,
        0.30457e02,
        0.36553e02,
        0.42991e02,
        0.49666e02,
        0.56513e02,
        0.63489e02,
        0.70563e02,
        0.77715e02,
        0.84929e02,
        0.92195e02,
        0.99504e02,
        0.10685e03,
        0.11423e03,
        0.12164e03,
        0.12907e03,
        0.13654e03,
        0.14403e03,
        0.15154e03,
        0.15909e03,
        0.16666e03,
        0.17427e03,
        0.18191e03,
        0.18959e03,
        0.19731e03,
        0.20507e03,
        0.21287e03,
        0.22073e03,
        0.22863e03,
        0.23658e03,
        0.24459e03,
        0.25266e03,
        0.26078e03,
        0.26897e03,
        0.27722e03,
        0.28554e03,
        0.29393e03,
        0.30238e03,
        0.31091e03,
        0.31952e03,
        0.32820e03,
        0.33696e03,
        0.34579e03,
        0.35471e03,
        0.36371e03,
        0.37279e03,
        0.38196e03,
        0.39121e03,
        0.40055e03,
        0.40998e03,
        0.41949e03,
        0.42910e03,
        0.43879e03,
        0.44858e03,
        0.45845e03,
        0.46843e03,
        0.47849e03,
        0.48865e03,
        0.49890e03,
        0.50924e03,
        0.51969e03,
        0.53022e03,
        0.54086e03,
        0.55159e03,
        0.56242e03,
        0.57335e03,
        0.58437e03,
        0.59550e03,
        0.60673e03,
        0.61805e03,
        0.62947e03,
        0.64100e03,
        0.65263e03,
        0.66435e03,
        0.67618e03,
        0.68811e03,
        0.70014e03,
        0.71228e03,
        0.72451e03,
        0.73685e03,
        0.74929e03,
        0.76184e03,
        0.77449e03,
        0.78724e03,
        0.80009e03,
        0.81306e03,
        0.82612e03,
        0.83929e03,
        0.85256e03,
        0.86594e03,
        0.87942e03,
        0.89301e03,
        0.90670e03,
        0.92050e03,
        0.93440e03,
        0.94841e03,
        0.96253e03,
        0.97675e03,
        0.99108e03,
        0.10055e04,
        0.10201e04,
        0.10347e04,
        0.10495e04,
        0.10643e04,
        0.10793e04,
        0.10944e04,
        0.11096e04,
        0.11248e04,
        0.11402e04,
        0.11558e04,
        0.11714e04,
        0.11871e04,
        0.12029e04,
        0.12189e04,
        0.12349e04,
        0.12511e04,
        0.12673e04,
        0.12837e04,
    ]
)

#  --------------- OH 62: M = 13, I = 3 ---------------------
M = 13
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.41032e02,
        0.54704e02,
        0.70201e02,
        0.86985e02,
        0.10469e03,
        0.12306e03,
        0.14194e03,
        0.16119e03,
        0.18075e03,
        0.20054e03,
        0.22053e03,
        0.24068e03,
        0.26096e03,
        0.28135e03,
        0.30183e03,
        0.32241e03,
        0.34305e03,
        0.36376e03,
        0.38453e03,
        0.40535e03,
        0.42622e03,
        0.44714e03,
        0.46811e03,
        0.48913e03,
        0.51019e03,
        0.53131e03,
        0.55246e03,
        0.57368e03,
        0.59495e03,
        0.61627e03,
        0.63766e03,
        0.65912e03,
        0.68064e03,
        0.70223e03,
        0.72390e03,
        0.74565e03,
        0.76749e03,
        0.78941e03,
        0.81143e03,
        0.83355e03,
        0.85578e03,
        0.87810e03,
        0.90054e03,
        0.92310e03,
        0.94577e03,
        0.96857e03,
        0.99149e03,
        0.10145e04,
        0.10377e04,
        0.10611e04,
        0.10845e04,
        0.11081e04,
        0.11319e04,
        0.11558e04,
        0.11798e04,
        0.12040e04,
        0.12284e04,
        0.12529e04,
        0.12776e04,
        0.13025e04,
        0.13275e04,
        0.13527e04,
        0.13781e04,
        0.14036e04,
        0.14293e04,
        0.14552e04,
        0.14813e04,
        0.15076e04,
        0.15340e04,
        0.15606e04,
        0.15874e04,
        0.16144e04,
        0.16416e04,
        0.16690e04,
        0.16965e04,
        0.17243e04,
        0.17522e04,
        0.17804e04,
        0.18087e04,
        0.18373e04,
        0.18660e04,
        0.18949e04,
        0.19241e04,
        0.19534e04,
        0.19829e04,
        0.20127e04,
        0.20426e04,
        0.20727e04,
        0.21031e04,
        0.21336e04,
        0.21644e04,
        0.21954e04,
        0.22266e04,
        0.22579e04,
        0.22895e04,
        0.23213e04,
        0.23534e04,
        0.23856e04,
        0.24180e04,
        0.24506e04,
        0.24835e04,
        0.25166e04,
        0.25499e04,
        0.25834e04,
        0.26171e04,
        0.26510e04,
        0.26852e04,
        0.27195e04,
        0.27541e04,
        0.27889e04,
        0.28239e04,
        0.28592e04,
        0.28946e04,
        0.29303e04,
        0.29661e04,
        0.30023e04,
        0.30386e04,
        0.30751e04,
        0.31119e04,
    ]
)


#  --------------- HF 19: M = 14, I = 1 ---------------------
M = 14
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.95958e01,
        0.12933e02,
        0.16295e02,
        0.19666e02,
        0.23043e02,
        0.26425e02,
        0.29809e02,
        0.33195e02,
        0.36584e02,
        0.39974e02,
        0.43366e02,
        0.46759e02,
        0.50154e02,
        0.53550e02,
        0.56947e02,
        0.60346e02,
        0.63746e02,
        0.67148e02,
        0.70550e02,
        0.73955e02,
        0.77361e02,
        0.80769e02,
        0.84179e02,
        0.87591e02,
        0.91006e02,
        0.94424e02,
        0.97846e02,
        0.10127e03,
        0.10470e03,
        0.10813e03,
        0.11157e03,
        0.11502e03,
        0.11847e03,
        0.12193e03,
        0.12540e03,
        0.12888e03,
        0.13236e03,
        0.13586e03,
        0.13936e03,
        0.14288e03,
        0.14641e03,
        0.14995e03,
        0.15351e03,
        0.15708e03,
        0.16066e03,
        0.16426e03,
        0.16788e03,
        0.17151e03,
        0.17516e03,
        0.17882e03,
        0.18251e03,
        0.18621e03,
        0.18994e03,
        0.19368e03,
        0.19745e03,
        0.20123e03,
        0.20504e03,
        0.20887e03,
        0.21272e03,
        0.21659e03,
        0.22049e03,
        0.22441e03,
        0.22836e03,
        0.23233e03,
        0.23632e03,
        0.24034e03,
        0.24439e03,
        0.24846e03,
        0.25255e03,
        0.25668e03,
        0.26083e03,
        0.26501e03,
        0.26921e03,
        0.27344e03,
        0.27770e03,
        0.28199e03,
        0.28631e03,
        0.29066e03,
        0.29503e03,
        0.29944e03,
        0.30387e03,
        0.30833e03,
        0.31282e03,
        0.31735e03,
        0.32190e03,
        0.32648e03,
        0.33110e03,
        0.33574e03,
        0.34042e03,
        0.34512e03,
        0.34986e03,
        0.35463e03,
        0.35943e03,
        0.36426e03,
        0.36913e03,
        0.37402e03,
        0.37895e03,
        0.38391e03,
        0.38891e03,
        0.39393e03,
        0.39899e03,
        0.40408e03,
        0.40921e03,
        0.41436e03,
        0.41955e03,
        0.42478e03,
        0.43004e03,
        0.43533e03,
        0.44065e03,
        0.44601e03,
        0.45140e03,
        0.45683e03,
        0.46229e03,
        0.46779e03,
        0.47332e03,
        0.47888e03,
        0.48448e03,
        0.49011e03,
        0.49578e03,
    ]
)

#  --------------- HF 29: M = 14, I = 2 --------------------- not in TIPS-2011
M = 14
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- HСl 15: M = 15, I = 1 --------------------
M = 15
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.34775e02,
        0.48060e02,
        0.61370e02,
        0.74692e02,
        0.88024e02,
        0.10136e03,
        0.11471e03,
        0.12806e03,
        0.14141e03,
        0.15478e03,
        0.16814e03,
        0.18151e03,
        0.19489e03,
        0.20827e03,
        0.22166e03,
        0.23506e03,
        0.24847e03,
        0.26189e03,
        0.27533e03,
        0.28878e03,
        0.30225e03,
        0.31575e03,
        0.32928e03,
        0.34284e03,
        0.35645e03,
        0.37009e03,
        0.38378e03,
        0.39753e03,
        0.41134e03,
        0.42521e03,
        0.43914e03,
        0.45316e03,
        0.46725e03,
        0.48142e03,
        0.49568e03,
        0.51003e03,
        0.52448e03,
        0.53902e03,
        0.55368e03,
        0.56843e03,
        0.58330e03,
        0.59829e03,
        0.61339e03,
        0.62862e03,
        0.64396e03,
        0.65944e03,
        0.67504e03,
        0.69078e03,
        0.70665e03,
        0.72265e03,
        0.73880e03,
        0.75508e03,
        0.77151e03,
        0.78809e03,
        0.80481e03,
        0.82168e03,
        0.83870e03,
        0.85587e03,
        0.87320e03,
        0.89068e03,
        0.90832e03,
        0.92611e03,
        0.94407e03,
        0.96218e03,
        0.98046e03,
        0.99889e03,
        0.10175e04,
        0.10363e04,
        0.10552e04,
        0.10743e04,
        0.10936e04,
        0.11130e04,
        0.11326e04,
        0.11524e04,
        0.11723e04,
        0.11924e04,
        0.12127e04,
        0.12332e04,
        0.12538e04,
        0.12746e04,
        0.12956e04,
        0.13168e04,
        0.13381e04,
        0.13597e04,
        0.13814e04,
        0.14032e04,
        0.14253e04,
        0.14475e04,
        0.14700e04,
        0.14926e04,
        0.15153e04,
        0.15383e04,
        0.15615e04,
        0.15848e04,
        0.16083e04,
        0.16320e04,
        0.16559e04,
        0.16800e04,
        0.17043e04,
        0.17287e04,
        0.17533e04,
        0.17782e04,
        0.18032e04,
        0.18284e04,
        0.18538e04,
        0.18794e04,
        0.19051e04,
        0.19311e04,
        0.19573e04,
        0.19836e04,
        0.20102e04,
        0.20369e04,
        0.20638e04,
        0.20910e04,
        0.21183e04,
        0.21458e04,
        0.21735e04,
        0.22014e04,
        0.22295e04,
    ]
)


#  --------------- HСl 17: M = 15, I = 2 ---------------------
M = 15
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.34823e02,
        0.48128e02,
        0.61458e02,
        0.74801e02,
        0.88152e02,
        0.10151e03,
        0.11488e03,
        0.12825e03,
        0.14162e03,
        0.15500e03,
        0.16839e03,
        0.18178e03,
        0.19518e03,
        0.20858e03,
        0.22199e03,
        0.23541e03,
        0.24884e03,
        0.26228e03,
        0.27574e03,
        0.28921e03,
        0.30270e03,
        0.31622e03,
        0.32977e03,
        0.34336e03,
        0.35698e03,
        0.37065e03,
        0.38436e03,
        0.39813e03,
        0.41196e03,
        0.42585e03,
        0.43981e03,
        0.45384e03,
        0.46796e03,
        0.48215e03,
        0.49644e03,
        0.51081e03,
        0.52528e03,
        0.53986e03,
        0.55453e03,
        0.56932e03,
        0.58421e03,
        0.59922e03,
        0.61435e03,
        0.62960e03,
        0.64498e03,
        0.66048e03,
        0.67611e03,
        0.69187e03,
        0.70777e03,
        0.72381e03,
        0.73998e03,
        0.75630e03,
        0.77276e03,
        0.78936e03,
        0.80612e03,
        0.82302e03,
        0.84007e03,
        0.85727e03,
        0.87463e03,
        0.89215e03,
        0.90982e03,
        0.92765e03,
        0.94563e03,
        0.96378e03,
        0.98209e03,
        0.10006e04,
        0.10192e04,
        0.10380e04,
        0.10570e04,
        0.10761e04,
        0.10954e04,
        0.11149e04,
        0.11345e04,
        0.11543e04,
        0.11743e04,
        0.11945e04,
        0.12148e04,
        0.12353e04,
        0.12560e04,
        0.12768e04,
        0.12979e04,
        0.13191e04,
        0.13405e04,
        0.13620e04,
        0.13838e04,
        0.14057e04,
        0.14278e04,
        0.14501e04,
        0.14726e04,
        0.14952e04,
        0.15180e04,
        0.15410e04,
        0.15642e04,
        0.15876e04,
        0.16112e04,
        0.16349e04,
        0.16589e04,
        0.16830e04,
        0.17073e04,
        0.17318e04,
        0.17565e04,
        0.17814e04,
        0.18064e04,
        0.18317e04,
        0.18572e04,
        0.18828e04,
        0.19086e04,
        0.19346e04,
        0.19609e04,
        0.19873e04,
        0.20139e04,
        0.20406e04,
        0.20676e04,
        0.20948e04,
        0.21222e04,
        0.21498e04,
        0.21775e04,
        0.22055e04,
        0.22337e04,
    ]
)


#  --------------- HСl 25: M = 15, I = 3 --------------------- not in TIPS-2011
M = 15
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- HСl 27: M = 15, I = 4 --------------------- not in TIPS-2011
M = 15
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- HBr 19: M = 16, I = 1 ---------------------
M = 16
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.42744e02,
        0.59373e02,
        0.76023e02,
        0.92685e02,
        0.10936e03,
        0.12604e03,
        0.14272e03,
        0.15942e03,
        0.17612e03,
        0.19282e03,
        0.20954e03,
        0.22626e03,
        0.24299e03,
        0.25973e03,
        0.27648e03,
        0.29325e03,
        0.31004e03,
        0.32686e03,
        0.34371e03,
        0.36060e03,
        0.37753e03,
        0.39451e03,
        0.41156e03,
        0.42868e03,
        0.44587e03,
        0.46314e03,
        0.48051e03,
        0.49798e03,
        0.51556e03,
        0.53325e03,
        0.55106e03,
        0.56900e03,
        0.58708e03,
        0.60530e03,
        0.62367e03,
        0.64219e03,
        0.66088e03,
        0.67972e03,
        0.69874e03,
        0.71793e03,
        0.73730e03,
        0.75685e03,
        0.77659e03,
        0.79652e03,
        0.81664e03,
        0.83696e03,
        0.85748e03,
        0.87820e03,
        0.89914e03,
        0.92028e03,
        0.94163e03,
        0.96319e03,
        0.98498e03,
        0.10070e04,
        0.10292e04,
        0.10516e04,
        0.10743e04,
        0.10972e04,
        0.11203e04,
        0.11437e04,
        0.11673e04,
        0.11911e04,
        0.12151e04,
        0.12394e04,
        0.12640e04,
        0.12887e04,
        0.13137e04,
        0.13390e04,
        0.13645e04,
        0.13902e04,
        0.14162e04,
        0.14424e04,
        0.14689e04,
        0.14956e04,
        0.15226e04,
        0.15498e04,
        0.15773e04,
        0.16050e04,
        0.16330e04,
        0.16612e04,
        0.16897e04,
        0.17185e04,
        0.17475e04,
        0.17767e04,
        0.18062e04,
        0.18360e04,
        0.18660e04,
        0.18963e04,
        0.19269e04,
        0.19577e04,
        0.19888e04,
        0.20202e04,
        0.20518e04,
        0.20837e04,
        0.21158e04,
        0.21482e04,
        0.21809e04,
        0.22139e04,
        0.22471e04,
        0.22806e04,
        0.23143e04,
        0.23484e04,
        0.23827e04,
        0.24173e04,
        0.24521e04,
        0.24873e04,
        0.25227e04,
        0.25584e04,
        0.25943e04,
        0.26306e04,
        0.26671e04,
        0.27039e04,
        0.27409e04,
        0.27783e04,
        0.28159e04,
        0.28538e04,
        0.28920e04,
        0.29305e04,
        0.29693e04,
    ]
)


#  --------------- HBr 11: M = 16, I = 2 ---------------------
M = 16
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.42756e02,
        0.59390e02,
        0.76045e02,
        0.92713e02,
        0.10939e03,
        0.12607e03,
        0.14277e03,
        0.15947e03,
        0.17617e03,
        0.19288e03,
        0.20960e03,
        0.22633e03,
        0.24306e03,
        0.25981e03,
        0.27656e03,
        0.29334e03,
        0.31014e03,
        0.32696e03,
        0.34381e03,
        0.36071e03,
        0.37764e03,
        0.39464e03,
        0.41169e03,
        0.42881e03,
        0.44601e03,
        0.46329e03,
        0.48066e03,
        0.49813e03,
        0.51572e03,
        0.53341e03,
        0.55123e03,
        0.56918e03,
        0.58727e03,
        0.60549e03,
        0.62387e03,
        0.64240e03,
        0.66109e03,
        0.67994e03,
        0.69896e03,
        0.71816e03,
        0.73754e03,
        0.75710e03,
        0.77684e03,
        0.79678e03,
        0.81691e03,
        0.83724e03,
        0.85776e03,
        0.87850e03,
        0.89943e03,
        0.92058e03,
        0.94194e03,
        0.96352e03,
        0.98531e03,
        0.10073e04,
        0.10295e04,
        0.10520e04,
        0.10747e04,
        0.10976e04,
        0.11207e04,
        0.11441e04,
        0.11677e04,
        0.11915e04,
        0.12156e04,
        0.12399e04,
        0.12644e04,
        0.12892e04,
        0.13142e04,
        0.13395e04,
        0.13650e04,
        0.13907e04,
        0.14167e04,
        0.14429e04,
        0.14694e04,
        0.14961e04,
        0.15231e04,
        0.15504e04,
        0.15778e04,
        0.16056e04,
        0.16336e04,
        0.16618e04,
        0.16903e04,
        0.17191e04,
        0.17481e04,
        0.17773e04,
        0.18069e04,
        0.18367e04,
        0.18667e04,
        0.18970e04,
        0.19276e04,
        0.19584e04,
        0.19895e04,
        0.20209e04,
        0.20525e04,
        0.20844e04,
        0.21166e04,
        0.21490e04,
        0.21817e04,
        0.22147e04,
        0.22479e04,
        0.22814e04,
        0.23152e04,
        0.23492e04,
        0.23835e04,
        0.24181e04,
        0.24530e04,
        0.24882e04,
        0.25236e04,
        0.25593e04,
        0.25952e04,
        0.26315e04,
        0.26680e04,
        0.27048e04,
        0.27419e04,
        0.27793e04,
        0.28169e04,
        0.28549e04,
        0.28931e04,
        0.29316e04,
        0.29703e04,
    ]
)


#  --------------- HBr 29: M = 16, I = 3 --------------------- not in TIPS-2011
M = 16
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- HBr 21: M = 16, I = 4 --------------------- not in TIPS-2011
M = 16
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- HI 17: M = 17, I = 1 ---------------------
M = 17
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.82031e02,
        0.11447e03,
        0.14694e03,
        0.17943e03,
        0.21194e03,
        0.24445e03,
        0.27699e03,
        0.30953e03,
        0.34209e03,
        0.37466e03,
        0.40725e03,
        0.43986e03,
        0.47249e03,
        0.50517e03,
        0.53789e03,
        0.57068e03,
        0.60354e03,
        0.63650e03,
        0.66957e03,
        0.70278e03,
        0.73614e03,
        0.76967e03,
        0.80340e03,
        0.83735e03,
        0.87153e03,
        0.90596e03,
        0.94067e03,
        0.97566e03,
        0.10110e04,
        0.10466e04,
        0.10826e04,
        0.11189e04,
        0.11555e04,
        0.11926e04,
        0.12300e04,
        0.12679e04,
        0.13061e04,
        0.13448e04,
        0.13839e04,
        0.14235e04,
        0.14635e04,
        0.15039e04,
        0.15448e04,
        0.15862e04,
        0.16280e04,
        0.16704e04,
        0.17132e04,
        0.17565e04,
        0.18003e04,
        0.18446e04,
        0.18894e04,
        0.19347e04,
        0.19806e04,
        0.20269e04,
        0.20738e04,
        0.21212e04,
        0.21691e04,
        0.22176e04,
        0.22666e04,
        0.23162e04,
        0.23662e04,
        0.24169e04,
        0.24680e04,
        0.25198e04,
        0.25720e04,
        0.26249e04,
        0.26783e04,
        0.27322e04,
        0.27867e04,
        0.28418e04,
        0.28975e04,
        0.29537e04,
        0.30105e04,
        0.30678e04,
        0.31258e04,
        0.31843e04,
        0.32434e04,
        0.33031e04,
        0.33633e04,
        0.34242e04,
        0.34856e04,
        0.35477e04,
        0.36103e04,
        0.36735e04,
        0.37373e04,
        0.38018e04,
        0.38668e04,
        0.39324e04,
        0.39986e04,
        0.40654e04,
        0.41329e04,
        0.42009e04,
        0.42696e04,
        0.43388e04,
        0.44087e04,
        0.44792e04,
        0.45503e04,
        0.46221e04,
        0.46944e04,
        0.47674e04,
        0.48410e04,
        0.49152e04,
        0.49901e04,
        0.50656e04,
        0.51417e04,
        0.52185e04,
        0.52959e04,
        0.53739e04,
        0.54526e04,
        0.55319e04,
        0.56118e04,
        0.56924e04,
        0.57736e04,
        0.58555e04,
        0.59380e04,
        0.60212e04,
        0.61050e04,
        0.61895e04,
        0.62746e04,
    ]
)


#  --------------- HI 27: M = 17, I = 2 --------------------- not in TIPS-2011
M = 17
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- ClO 56: M = 18, I = 1 ---------------------
M = 18
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.53847e03,
        0.76580e03,
        0.10017e04,
        0.12511e04,
        0.15168e04,
        0.18001e04,
        0.21014e04,
        0.24206e04,
        0.27577e04,
        0.31127e04,
        0.34857e04,
        0.38765e04,
        0.42854e04,
        0.47124e04,
        0.51575e04,
        0.56208e04,
        0.61025e04,
        0.66026e04,
        0.71211e04,
        0.76582e04,
        0.82138e04,
        0.87882e04,
        0.93813e04,
        0.99932e04,
        0.10624e05,
        0.11273e05,
        0.11942e05,
        0.12629e05,
        0.13336e05,
        0.14061e05,
        0.14806e05,
        0.15570e05,
        0.16353e05,
        0.17155e05,
        0.17976e05,
        0.18816e05,
        0.19676e05,
        0.20555e05,
        0.21453e05,
        0.22371e05,
        0.23308e05,
        0.24264e05,
        0.25240e05,
        0.26236e05,
        0.27250e05,
        0.28284e05,
        0.29338e05,
        0.30412e05,
        0.31505e05,
        0.32617e05,
        0.33749e05,
        0.34901e05,
        0.36072e05,
        0.37263e05,
        0.38474e05,
        0.39705e05,
        0.40955e05,
        0.42225e05,
        0.43515e05,
        0.44825e05,
        0.46154e05,
        0.47504e05,
        0.48873e05,
        0.50262e05,
        0.51672e05,
        0.53101e05,
        0.54549e05,
        0.56019e05,
        0.57508e05,
        0.59017e05,
        0.60546e05,
        0.62095e05,
        0.63665e05,
        0.65254e05,
        0.66864e05,
        0.68494e05,
        0.70144e05,
        0.71814e05,
        0.73504e05,
        0.75215e05,
        0.76946e05,
        0.78698e05,
        0.80470e05,
        0.82261e05,
        0.84074e05,
        0.85907e05,
        0.87760e05,
        0.89633e05,
        0.91527e05,
        0.93442e05,
        0.95377e05,
        0.97333e05,
        0.99309e05,
        0.10131e06,
        0.10332e06,
        0.10536e06,
        0.10742e06,
        0.10950e06,
        0.11160e06,
        0.11372e06,
        0.11586e06,
        0.11802e06,
        0.12020e06,
        0.12241e06,
        0.12463e06,
        0.12688e06,
        0.12914e06,
        0.13143e06,
        0.13374e06,
        0.13607e06,
        0.13842e06,
        0.14079e06,
        0.14318e06,
        0.14559e06,
        0.14802e06,
        0.15048e06,
        0.15295e06,
        0.15545e06,
        0.15797e06,
    ]
)


#  --------------- ClO 76: M = 18, I = 2 ---------------------
M = 18
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.54775e03,
        0.77899e03,
        0.10189e04,
        0.12726e04,
        0.15430e04,
        0.18313e04,
        0.21378e04,
        0.24627e04,
        0.28059e04,
        0.31674e04,
        0.35472e04,
        0.39454e04,
        0.43621e04,
        0.47972e04,
        0.52508e04,
        0.57232e04,
        0.62143e04,
        0.67242e04,
        0.72531e04,
        0.78010e04,
        0.83678e04,
        0.89537e04,
        0.95589e04,
        0.10183e05,
        0.10827e05,
        0.11490e05,
        0.12172e05,
        0.12874e05,
        0.13595e05,
        0.14335e05,
        0.15095e05,
        0.15875e05,
        0.16674e05,
        0.17493e05,
        0.18332e05,
        0.19190e05,
        0.20068e05,
        0.20965e05,
        0.21882e05,
        0.22820e05,
        0.23776e05,
        0.24753e05,
        0.25750e05,
        0.26766e05,
        0.27803e05,
        0.28859e05,
        0.29935e05,
        0.31032e05,
        0.32148e05,
        0.33284e05,
        0.34441e05,
        0.35617e05,
        0.36814e05,
        0.38031e05,
        0.39267e05,
        0.40524e05,
        0.41802e05,
        0.43099e05,
        0.44417e05,
        0.45755e05,
        0.47113e05,
        0.48492e05,
        0.49891e05,
        0.51310e05,
        0.52750e05,
        0.54210e05,
        0.55690e05,
        0.57191e05,
        0.58713e05,
        0.60255e05,
        0.61817e05,
        0.63400e05,
        0.65004e05,
        0.66628e05,
        0.68272e05,
        0.69938e05,
        0.71624e05,
        0.73331e05,
        0.75058e05,
        0.76806e05,
        0.78575e05,
        0.80364e05,
        0.82175e05,
        0.84006e05,
        0.85858e05,
        0.87731e05,
        0.89625e05,
        0.91539e05,
        0.93475e05,
        0.95431e05,
        0.97409e05,
        0.99407e05,
        0.10143e06,
        0.10347e06,
        0.10553e06,
        0.10761e06,
        0.10972e06,
        0.11184e06,
        0.11399e06,
        0.11615e06,
        0.11834e06,
        0.12055e06,
        0.12278e06,
        0.12503e06,
        0.12731e06,
        0.12960e06,
        0.13192e06,
        0.13425e06,
        0.13661e06,
        0.13899e06,
        0.14139e06,
        0.14382e06,
        0.14626e06,
        0.14873e06,
        0.15121e06,
        0.15372e06,
        0.15625e06,
        0.15880e06,
        0.16138e06,
    ]
)


#  --------------- OCS 622: M = 19, I = 1 ---------------------
M = 19
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.20609e03,
        0.29199e03,
        0.37861e03,
        0.46737e03,
        0.56024e03,
        0.65929e03,
        0.76649e03,
        0.88361e03,
        0.10123e04,
        0.11541e04,
        0.13105e04,
        0.14829e04,
        0.16728e04,
        0.18818e04,
        0.21113e04,
        0.23629e04,
        0.26383e04,
        0.29391e04,
        0.32672e04,
        0.36245e04,
        0.40128e04,
        0.44343e04,
        0.48911e04,
        0.53853e04,
        0.59193e04,
        0.64956e04,
        0.71166e04,
        0.77849e04,
        0.85033e04,
        0.92746e04,
        0.10102e05,
        0.10988e05,
        0.11936e05,
        0.12949e05,
        0.14032e05,
        0.15186e05,
        0.16416e05,
        0.17726e05,
        0.19120e05,
        0.20601e05,
        0.22173e05,
        0.23842e05,
        0.25611e05,
        0.27484e05,
        0.29468e05,
        0.31566e05,
        0.33783e05,
        0.36124e05,
        0.38595e05,
        0.41202e05,
        0.43949e05,
        0.46842e05,
        0.49888e05,
        0.53092e05,
        0.56460e05,
        0.59999e05,
        0.63716e05,
        0.67616e05,
        0.71708e05,
        0.75997e05,
        0.80491e05,
        0.85197e05,
        0.90124e05,
        0.95278e05,
        0.10067e06,
        0.10630e06,
        0.11219e06,
        0.11833e06,
        0.12475e06,
        0.13144e06,
        0.13842e06,
        0.14570e06,
        0.15328e06,
        0.16117e06,
        0.16940e06,
        0.17795e06,
        0.18686e06,
        0.19611e06,
        0.20574e06,
        0.21574e06,
        0.22613e06,
        0.23692e06,
        0.24813e06,
        0.25975e06,
        0.27182e06,
        0.28433e06,
        0.29730e06,
        0.31074e06,
        0.32467e06,
        0.33909e06,
        0.35403e06,
        0.36950e06,
        0.38551e06,
        0.40207e06,
        0.41920e06,
        0.43691e06,
        0.45522e06,
        0.47415e06,
        0.49370e06,
        0.51390e06,
        0.53476e06,
        0.55629e06,
        0.57852e06,
        0.60146e06,
        0.62513e06,
        0.64954e06,
        0.67471e06,
        0.70067e06,
        0.72742e06,
        0.75499e06,
        0.78339e06,
        0.81265e06,
        0.84279e06,
        0.87381e06,
        0.90576e06,
        0.93863e06,
        0.97246e06,
        0.10073e07,
        0.10431e07,
    ]
)


#  --------------- OCS 624: M = 19, I = 2 ---------------------
M = 19
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.21125e03,
        0.29930e03,
        0.38809e03,
        0.47911e03,
        0.57437e03,
        0.67603e03,
        0.78610e03,
        0.90643e03,
        0.10387e04,
        0.11846e04,
        0.13456e04,
        0.15231e04,
        0.17188e04,
        0.19342e04,
        0.21709e04,
        0.24304e04,
        0.27145e04,
        0.30250e04,
        0.33638e04,
        0.37328e04,
        0.41339e04,
        0.45694e04,
        0.50415e04,
        0.55524e04,
        0.61045e04,
        0.67004e04,
        0.73427e04,
        0.80340e04,
        0.87773e04,
        0.95755e04,
        0.10432e05,
        0.11349e05,
        0.12330e05,
        0.13380e05,
        0.14500e05,
        0.15696e05,
        0.16970e05,
        0.18327e05,
        0.19770e05,
        0.21305e05,
        0.22934e05,
        0.24663e05,
        0.26497e05,
        0.28439e05,
        0.30495e05,
        0.32669e05,
        0.34968e05,
        0.37396e05,
        0.39958e05,
        0.42661e05,
        0.45510e05,
        0.48511e05,
        0.51669e05,
        0.54993e05,
        0.58487e05,
        0.62159e05,
        0.66014e05,
        0.70061e05,
        0.74306e05,
        0.78757e05,
        0.83421e05,
        0.88305e05,
        0.93418e05,
        0.98767e05,
        0.10436e06,
        0.11021e06,
        0.11632e06,
        0.12270e06,
        0.12936e06,
        0.13631e06,
        0.14355e06,
        0.15111e06,
        0.15898e06,
        0.16718e06,
        0.17572e06,
        0.18460e06,
        0.19385e06,
        0.20346e06,
        0.21346e06,
        0.22385e06,
        0.23464e06,
        0.24585e06,
        0.25748e06,
        0.26956e06,
        0.28209e06,
        0.29509e06,
        0.30856e06,
        0.32252e06,
        0.33699e06,
        0.35198e06,
        0.36750e06,
        0.38357e06,
        0.40020e06,
        0.41741e06,
        0.43521e06,
        0.45362e06,
        0.47264e06,
        0.49231e06,
        0.51263e06,
        0.53362e06,
        0.55529e06,
        0.57768e06,
        0.60078e06,
        0.62462e06,
        0.64922e06,
        0.67459e06,
        0.70075e06,
        0.72773e06,
        0.75554e06,
        0.78419e06,
        0.81372e06,
        0.84413e06,
        0.87546e06,
        0.90771e06,
        0.94092e06,
        0.97509e06,
        0.10103e07,
        0.10464e07,
        0.10837e07,
    ]
)


#  --------------- OCS 632: M = 19, I = 3 ---------------------
M = 19
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.41351e03,
        0.58591e03,
        0.76004e03,
        0.93907e03,
        0.11273e04,
        0.13289e04,
        0.15481e04,
        0.17884e04,
        0.20533e04,
        0.23459e04,
        0.26692e04,
        0.30264e04,
        0.34205e04,
        0.38547e04,
        0.43323e04,
        0.48565e04,
        0.54309e04,
        0.60592e04,
        0.67451e04,
        0.74928e04,
        0.83064e04,
        0.91903e04,
        0.10149e05,
        0.11187e05,
        0.12310e05,
        0.13523e05,
        0.14831e05,
        0.16240e05,
        0.17756e05,
        0.19384e05,
        0.21132e05,
        0.23005e05,
        0.25011e05,
        0.27157e05,
        0.29449e05,
        0.31896e05,
        0.34506e05,
        0.37286e05,
        0.40245e05,
        0.43392e05,
        0.46735e05,
        0.50284e05,
        0.54048e05,
        0.58038e05,
        0.62263e05,
        0.66733e05,
        0.71460e05,
        0.76455e05,
        0.81728e05,
        0.87292e05,
        0.93159e05,
        0.99341e05,
        0.10585e06,
        0.11270e06,
        0.11991e06,
        0.12748e06,
        0.13543e06,
        0.14378e06,
        0.15255e06,
        0.16174e06,
        0.17137e06,
        0.18146e06,
        0.19202e06,
        0.20308e06,
        0.21465e06,
        0.22674e06,
        0.23937e06,
        0.25257e06,
        0.26635e06,
        0.28073e06,
        0.29573e06,
        0.31137e06,
        0.32767e06,
        0.34466e06,
        0.36235e06,
        0.38076e06,
        0.39992e06,
        0.41985e06,
        0.44057e06,
        0.46211e06,
        0.48450e06,
        0.50775e06,
        0.53189e06,
        0.55695e06,
        0.58295e06,
        0.60992e06,
        0.63789e06,
        0.66688e06,
        0.69693e06,
        0.72806e06,
        0.76030e06,
        0.79368e06,
        0.82823e06,
        0.86399e06,
        0.90097e06,
        0.93923e06,
        0.97878e06,
        0.10197e07,
        0.10619e07,
        0.11056e07,
        0.11506e07,
        0.11972e07,
        0.12453e07,
        0.12949e07,
        0.13460e07,
        0.13988e07,
        0.14533e07,
        0.15094e07,
        0.15673e07,
        0.16270e07,
        0.16884e07,
        0.17518e07,
        0.18170e07,
        0.18842e07,
        0.19533e07,
        0.20245e07,
        0.20978e07,
        0.21732e07,
        0.22507e07,
    ]
)


#  --------------- OCS 623: M = 19, I = 4 ---------------------
M = 19
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.83485e03,
        0.11828e04,
        0.15337e04,
        0.18934e04,
        0.22697e04,
        0.26712e04,
        0.31059e04,
        0.35809e04,
        0.41030e04,
        0.46785e04,
        0.53133e04,
        0.60135e04,
        0.67850e04,
        0.76338e04,
        0.85663e04,
        0.95888e04,
        0.10708e05,
        0.11931e05,
        0.13265e05,
        0.14718e05,
        0.16298e05,
        0.18012e05,
        0.19870e05,
        0.21881e05,
        0.24054e05,
        0.26399e05,
        0.28926e05,
        0.31646e05,
        0.34570e05,
        0.37710e05,
        0.41077e05,
        0.44685e05,
        0.48545e05,
        0.52672e05,
        0.57078e05,
        0.61780e05,
        0.66790e05,
        0.72125e05,
        0.77801e05,
        0.83833e05,
        0.90239e05,
        0.97036e05,
        0.10424e06,
        0.11188e06,
        0.11996e06,
        0.12850e06,
        0.13754e06,
        0.14708e06,
        0.15715e06,
        0.16777e06,
        0.17896e06,
        0.19076e06,
        0.20317e06,
        0.21623e06,
        0.22996e06,
        0.24438e06,
        0.25953e06,
        0.27543e06,
        0.29211e06,
        0.30959e06,
        0.32791e06,
        0.34710e06,
        0.36718e06,
        0.38820e06,
        0.41017e06,
        0.43314e06,
        0.45713e06,
        0.48219e06,
        0.50835e06,
        0.53564e06,
        0.56409e06,
        0.59376e06,
        0.62468e06,
        0.65688e06,
        0.69041e06,
        0.72530e06,
        0.76161e06,
        0.79937e06,
        0.83862e06,
        0.87941e06,
        0.92179e06,
        0.96581e06,
        0.10115e07,
        0.10589e07,
        0.11081e07,
        0.11591e07,
        0.12120e07,
        0.12669e07,
        0.13237e07,
        0.13825e07,
        0.14435e07,
        0.15066e07,
        0.15718e07,
        0.16394e07,
        0.17093e07,
        0.17815e07,
        0.18562e07,
        0.19334e07,
        0.20132e07,
        0.20956e07,
        0.21807e07,
        0.22685e07,
        0.23592e07,
        0.24528e07,
        0.25494e07,
        0.26490e07,
        0.27517e07,
        0.28576e07,
        0.29667e07,
        0.30792e07,
        0.31951e07,
        0.33145e07,
        0.34374e07,
        0.35640e07,
        0.36943e07,
        0.38285e07,
        0.39665e07,
        0.41085e07,
        0.42546e07,
    ]
)


#  --------------- OCS 822: M = 19, I = 5 ---------------------
M = 19
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.21967e03,
        0.31126e03,
        0.40370e03,
        0.49862e03,
        0.59823e03,
        0.70481e03,
        0.82050e03,
        0.94724e03,
        0.10868e04,
        0.12409e04,
        0.14112e04,
        0.15993e04,
        0.18067e04,
        0.20353e04,
        0.22866e04,
        0.25624e04,
        0.28645e04,
        0.31950e04,
        0.35558e04,
        0.39490e04,
        0.43767e04,
        0.48413e04,
        0.53452e04,
        0.58909e04,
        0.64810e04,
        0.71182e04,
        0.78053e04,
        0.85454e04,
        0.93413e04,
        0.10196e05,
        0.11114e05,
        0.12098e05,
        0.13151e05,
        0.14277e05,
        0.15480e05,
        0.16764e05,
        0.18133e05,
        0.19592e05,
        0.21144e05,
        0.22794e05,
        0.24548e05,
        0.26409e05,
        0.28383e05,
        0.30475e05,
        0.32689e05,
        0.35033e05,
        0.37511e05,
        0.40128e05,
        0.42892e05,
        0.45808e05,
        0.48882e05,
        0.52121e05,
        0.55532e05,
        0.59121e05,
        0.62895e05,
        0.66861e05,
        0.71028e05,
        0.75402e05,
        0.79991e05,
        0.84803e05,
        0.89847e05,
        0.95130e05,
        0.10066e06,
        0.10645e06,
        0.11251e06,
        0.11883e06,
        0.12545e06,
        0.13236e06,
        0.13957e06,
        0.14710e06,
        0.15495e06,
        0.16313e06,
        0.17166e06,
        0.18055e06,
        0.18980e06,
        0.19944e06,
        0.20946e06,
        0.21989e06,
        0.23073e06,
        0.24200e06,
        0.25371e06,
        0.26587e06,
        0.27850e06,
        0.29161e06,
        0.30521e06,
        0.31931e06,
        0.33394e06,
        0.34910e06,
        0.36482e06,
        0.38109e06,
        0.39795e06,
        0.41541e06,
        0.43348e06,
        0.45217e06,
        0.47151e06,
        0.49151e06,
        0.51219e06,
        0.53356e06,
        0.55565e06,
        0.57847e06,
        0.60204e06,
        0.62637e06,
        0.65149e06,
        0.67742e06,
        0.70417e06,
        0.73176e06,
        0.76023e06,
        0.78957e06,
        0.81982e06,
        0.85100e06,
        0.88313e06,
        0.91622e06,
        0.95031e06,
        0.98541e06,
        0.10216e07,
        0.10587e07,
        0.10970e07,
        0.11364e07,
        0.11769e07,
    ]
)


#  --------------- H2CO 126: M = 20, I = 2 ---------------------
M = 20
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.25934e03,
        0.43623e03,
        0.64143e03,
        0.87152e03,
        0.11241e04,
        0.13975e04,
        0.16906e04,
        0.20029e04,
        0.23344e04,
        0.26857e04,
        0.30577e04,
        0.34518e04,
        0.38698e04,
        0.43138e04,
        0.47860e04,
        0.52890e04,
        0.58256e04,
        0.63985e04,
        0.70109e04,
        0.76660e04,
        0.83673e04,
        0.91184e04,
        0.99230e04,
        0.10785e05,
        0.11710e05,
        0.12700e05,
        0.13762e05,
        0.14900e05,
        0.16119e05,
        0.17425e05,
        0.18823e05,
        0.20320e05,
        0.21923e05,
        0.23637e05,
        0.25471e05,
        0.27432e05,
        0.29527e05,
        0.31765e05,
        0.34155e05,
        0.36706e05,
        0.39428e05,
        0.42330e05,
        0.45424e05,
        0.48720e05,
        0.52231e05,
        0.55968e05,
        0.59945e05,
        0.64175e05,
        0.68672e05,
        0.73450e05,
        0.78526e05,
        0.83915e05,
        0.89634e05,
        0.95701e05,
        0.10213e06,
        0.10895e06,
        0.11618e06,
        0.12383e06,
        0.13193e06,
        0.14049e06,
        0.14956e06,
        0.15914e06,
        0.16927e06,
        0.17997e06,
        0.19127e06,
        0.20320e06,
        0.21578e06,
        0.22906e06,
        0.24306e06,
        0.25782e06,
        0.27336e06,
        0.28974e06,
        0.30698e06,
        0.32513e06,
        0.34422e06,
        0.36430e06,
        0.38542e06,
        0.40761e06,
        0.43093e06,
        0.45542e06,
        0.48114e06,
        0.50813e06,
        0.53646e06,
        0.56617e06,
        0.59733e06,
        0.63000e06,
        0.66423e06,
        0.70010e06,
        0.73767e06,
        0.77701e06,
        0.81818e06,
        0.86127e06,
        0.90635e06,
        0.95349e06,
        0.10028e07,
        0.10543e07,
        0.11082e07,
        0.11644e07,
        0.12232e07,
        0.12845e07,
        0.13485e07,
        0.14154e07,
        0.14851e07,
        0.15578e07,
        0.16337e07,
        0.17127e07,
        0.17952e07,
        0.18810e07,
        0.19705e07,
        0.20637e07,
        0.21607e07,
        0.22617e07,
        0.23669e07,
        0.24763e07,
        0.25901e07,
        0.27085e07,
        0.28316e07,
        0.29596e07,
        0.30926e07,
    ]
)


#  --------------- H2CO 136: M = 20, I = 2 ---------------------
M = 20
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.53173e03,
        0.89447e03,
        0.13153e04,
        0.17871e04,
        0.23051e04,
        0.28658e04,
        0.34669e04,
        0.41073e04,
        0.47872e04,
        0.55074e04,
        0.62702e04,
        0.70785e04,
        0.79357e04,
        0.88462e04,
        0.98147e04,
        0.10846e05,
        0.11946e05,
        0.13121e05,
        0.14377e05,
        0.15721e05,
        0.17159e05,
        0.18699e05,
        0.20349e05,
        0.22118e05,
        0.24013e05,
        0.26045e05,
        0.28222e05,
        0.30555e05,
        0.33055e05,
        0.35733e05,
        0.38601e05,
        0.41671e05,
        0.44958e05,
        0.48474e05,
        0.52235e05,
        0.56255e05,
        0.60552e05,
        0.65142e05,
        0.70043e05,
        0.75275e05,
        0.80856e05,
        0.86808e05,
        0.93152e05,
        0.99913e05,
        0.10711e06,
        0.11478e06,
        0.12293e06,
        0.13161e06,
        0.14083e06,
        0.15063e06,
        0.16104e06,
        0.17209e06,
        0.18382e06,
        0.19626e06,
        0.20945e06,
        0.22343e06,
        0.23825e06,
        0.25394e06,
        0.27054e06,
        0.28812e06,
        0.30671e06,
        0.32636e06,
        0.34713e06,
        0.36907e06,
        0.39224e06,
        0.41671e06,
        0.44252e06,
        0.46975e06,
        0.49845e06,
        0.52872e06,
        0.56060e06,
        0.59418e06,
        0.62954e06,
        0.66676e06,
        0.70591e06,
        0.74710e06,
        0.79040e06,
        0.83591e06,
        0.88373e06,
        0.93395e06,
        0.98669e06,
        0.10421e07,
        0.11001e07,
        0.11611e07,
        0.12250e07,
        0.12920e07,
        0.13622e07,
        0.14357e07,
        0.15128e07,
        0.15934e07,
        0.16779e07,
        0.17662e07,
        0.18587e07,
        0.19554e07,
        0.20565e07,
        0.21621e07,
        0.22725e07,
        0.23879e07,
        0.25084e07,
        0.26342e07,
        0.27655e07,
        0.29026e07,
        0.30456e07,
        0.31947e07,
        0.33502e07,
        0.35124e07,
        0.36814e07,
        0.38575e07,
        0.40410e07,
        0.42321e07,
        0.44311e07,
        0.46382e07,
        0.48538e07,
        0.50782e07,
        0.53116e07,
        0.55544e07,
        0.58068e07,
        0.60693e07,
        0.63421e07,
    ]
)


#  --------------- H2CO 128: M = 20, I = 3 ---------------------
M = 20
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.27198e03,
        0.45755e03,
        0.67282e03,
        0.91421e03,
        0.11792e04,
        0.14660e04,
        0.17735e04,
        0.21012e04,
        0.24490e04,
        0.28175e04,
        0.32077e04,
        0.36212e04,
        0.40598e04,
        0.45256e04,
        0.50211e04,
        0.55488e04,
        0.61116e04,
        0.67127e04,
        0.73552e04,
        0.80426e04,
        0.87783e04,
        0.95663e04,
        0.10410e05,
        0.11315e05,
        0.12285e05,
        0.13324e05,
        0.14438e05,
        0.15632e05,
        0.16911e05,
        0.18281e05,
        0.19748e05,
        0.21319e05,
        0.23000e05,
        0.24799e05,
        0.26723e05,
        0.28780e05,
        0.30978e05,
        0.33326e05,
        0.35834e05,
        0.38510e05,
        0.41365e05,
        0.44410e05,
        0.47656e05,
        0.51115e05,
        0.54798e05,
        0.58719e05,
        0.62891e05,
        0.67329e05,
        0.72047e05,
        0.77060e05,
        0.82385e05,
        0.88039e05,
        0.94039e05,
        0.10040e06,
        0.10715e06,
        0.11431e06,
        0.12189e06,
        0.12991e06,
        0.13841e06,
        0.14740e06,
        0.15691e06,
        0.16696e06,
        0.17759e06,
        0.18882e06,
        0.20067e06,
        0.21318e06,
        0.22639e06,
        0.24032e06,
        0.25501e06,
        0.27049e06,
        0.28680e06,
        0.30398e06,
        0.32207e06,
        0.34111e06,
        0.36114e06,
        0.38221e06,
        0.40436e06,
        0.42765e06,
        0.45211e06,
        0.47781e06,
        0.50479e06,
        0.53311e06,
        0.56283e06,
        0.59400e06,
        0.62669e06,
        0.66097e06,
        0.69688e06,
        0.73451e06,
        0.77393e06,
        0.81520e06,
        0.85840e06,
        0.90360e06,
        0.95090e06,
        0.10004e07,
        0.10521e07,
        0.11061e07,
        0.11626e07,
        0.12216e07,
        0.12833e07,
        0.13476e07,
        0.14148e07,
        0.14849e07,
        0.15581e07,
        0.16344e07,
        0.17140e07,
        0.17969e07,
        0.18834e07,
        0.19735e07,
        0.20674e07,
        0.21651e07,
        0.22669e07,
        0.23729e07,
        0.24832e07,
        0.25980e07,
        0.27174e07,
        0.28416e07,
        0.29708e07,
        0.31050e07,
        0.32446e07,
    ]
)


#  --------------- HOCl 165: M = 21, I = 1 ---------------------
M = 21
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.17041e04,
        0.28708e04,
        0.42250e04,
        0.57456e04,
        0.74211e04,
        0.92470e04,
        0.11225e05,
        0.13359e05,
        0.15657e05,
        0.18129e05,
        0.20785e05,
        0.23637e05,
        0.26696e05,
        0.29974e05,
        0.33484e05,
        0.37239e05,
        0.41252e05,
        0.45536e05,
        0.50105e05,
        0.54973e05,
        0.60152e05,
        0.65659e05,
        0.71507e05,
        0.77711e05,
        0.84286e05,
        0.91249e05,
        0.98614e05,
        0.10640e06,
        0.11462e06,
        0.12330e06,
        0.13244e06,
        0.14208e06,
        0.15222e06,
        0.16289e06,
        0.17411e06,
        0.18589e06,
        0.19825e06,
        0.21123e06,
        0.22483e06,
        0.23908e06,
        0.25400e06,
        0.26962e06,
        0.28596e06,
        0.30303e06,
        0.32087e06,
        0.33950e06,
        0.35895e06,
        0.37923e06,
        0.40038e06,
        0.42243e06,
        0.44539e06,
        0.46930e06,
        0.49419e06,
        0.52008e06,
        0.54700e06,
        0.57498e06,
        0.60406e06,
        0.63426e06,
        0.66562e06,
        0.69816e06,
        0.73192e06,
        0.76692e06,
        0.80322e06,
        0.84083e06,
        0.87979e06,
        0.92014e06,
        0.96192e06,
        0.10052e07,
        0.10499e07,
        0.10961e07,
        0.11440e07,
        0.11934e07,
        0.12445e07,
        0.12973e07,
        0.13518e07,
        0.14081e07,
        0.14661e07,
        0.15261e07,
        0.15879e07,
        0.16516e07,
        0.17174e07,
        0.17851e07,
        0.18550e07,
        0.19269e07,
        0.20010e07,
        0.20773e07,
        0.21559e07,
        0.22367e07,
        0.23200e07,
        0.24056e07,
        0.24936e07,
        0.25842e07,
        0.26773e07,
        0.27730e07,
        0.28714e07,
        0.29724e07,
        0.30763e07,
        0.31829e07,
        0.32924e07,
        0.34049e07,
        0.35203e07,
        0.36387e07,
        0.37603e07,
        0.38850e07,
        0.40129e07,
        0.41441e07,
        0.42786e07,
        0.44165e07,
        0.45579e07,
        0.47028e07,
        0.48512e07,
        0.50033e07,
        0.51592e07,
        0.53187e07,
        0.54822e07,
        0.56495e07,
        0.58208e07,
        0.59961e07,
        0.61755e07,
    ]
)


#  --------------- HOCl 167: M = 21, I = 2 ---------------------
M = 21
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.17342e04,
        0.29215e04,
        0.42998e04,
        0.58473e04,
        0.75524e04,
        0.94107e04,
        0.11423e05,
        0.13595e05,
        0.15935e05,
        0.18450e05,
        0.21154e05,
        0.24056e05,
        0.27168e05,
        0.30505e05,
        0.34077e05,
        0.37899e05,
        0.41983e05,
        0.46343e05,
        0.50993e05,
        0.55947e05,
        0.61218e05,
        0.66822e05,
        0.72774e05,
        0.79088e05,
        0.85780e05,
        0.92866e05,
        0.10036e06,
        0.10829e06,
        0.11665e06,
        0.12548e06,
        0.13479e06,
        0.14460e06,
        0.15492e06,
        0.16578e06,
        0.17719e06,
        0.18918e06,
        0.20177e06,
        0.21497e06,
        0.22881e06,
        0.24332e06,
        0.25851e06,
        0.27440e06,
        0.29102e06,
        0.30840e06,
        0.32656e06,
        0.34552e06,
        0.36531e06,
        0.38595e06,
        0.40748e06,
        0.42991e06,
        0.45328e06,
        0.47762e06,
        0.50295e06,
        0.52929e06,
        0.55669e06,
        0.58517e06,
        0.61477e06,
        0.64550e06,
        0.67741e06,
        0.71053e06,
        0.74489e06,
        0.78052e06,
        0.81745e06,
        0.85573e06,
        0.89539e06,
        0.93645e06,
        0.97897e06,
        0.10230e07,
        0.10685e07,
        0.11156e07,
        0.11643e07,
        0.12146e07,
        0.12666e07,
        0.13203e07,
        0.13757e07,
        0.14330e07,
        0.14921e07,
        0.15531e07,
        0.16160e07,
        0.16809e07,
        0.17478e07,
        0.18168e07,
        0.18878e07,
        0.19611e07,
        0.20365e07,
        0.21141e07,
        0.21941e07,
        0.22764e07,
        0.23611e07,
        0.24482e07,
        0.25378e07,
        0.26300e07,
        0.27248e07,
        0.28222e07,
        0.29223e07,
        0.30251e07,
        0.31308e07,
        0.32393e07,
        0.33508e07,
        0.34652e07,
        0.35827e07,
        0.37032e07,
        0.38269e07,
        0.39539e07,
        0.40840e07,
        0.42176e07,
        0.43545e07,
        0.44948e07,
        0.46387e07,
        0.47861e07,
        0.49372e07,
        0.50920e07,
        0.52506e07,
        0.54130e07,
        0.55793e07,
        0.57496e07,
        0.59239e07,
        0.61024e07,
        0.62850e07,
    ]
)


#  --------------- N2 44: M = 22, I = 1 ---------------------
M = 22
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.95487e02,
        0.13466e03,
        0.17386e03,
        0.21307e03,
        0.25230e03,
        0.29154e03,
        0.33080e03,
        0.37008e03,
        0.40937e03,
        0.44868e03,
        0.48800e03,
        0.52736e03,
        0.56674e03,
        0.60616e03,
        0.64562e03,
        0.68515e03,
        0.72475e03,
        0.76445e03,
        0.80426e03,
        0.84420e03,
        0.88430e03,
        0.92457e03,
        0.96505e03,
        0.10057e04,
        0.10467e04,
        0.10879e04,
        0.11293e04,
        0.11711e04,
        0.12132e04,
        0.12556e04,
        0.12984e04,
        0.13416e04,
        0.13851e04,
        0.14291e04,
        0.14734e04,
        0.15182e04,
        0.15635e04,
        0.16091e04,
        0.16553e04,
        0.17019e04,
        0.17490e04,
        0.17965e04,
        0.18446e04,
        0.18932e04,
        0.19422e04,
        0.19918e04,
        0.20419e04,
        0.20926e04,
        0.21437e04,
        0.21954e04,
        0.22477e04,
        0.23004e04,
        0.23538e04,
        0.24077e04,
        0.24621e04,
        0.25171e04,
        0.25727e04,
        0.26288e04,
        0.26856e04,
        0.27428e04,
        0.28007e04,
        0.28591e04,
        0.29181e04,
        0.29777e04,
        0.30379e04,
        0.30986e04,
        0.31600e04,
        0.32219e04,
        0.32844e04,
        0.33475e04,
        0.34112e04,
        0.34755e04,
        0.35404e04,
        0.36059e04,
        0.36720e04,
        0.37387e04,
        0.38060e04,
        0.38739e04,
        0.39424e04,
        0.40115e04,
        0.40812e04,
        0.41515e04,
        0.42224e04,
        0.42939e04,
        0.43661e04,
        0.44388e04,
        0.45122e04,
        0.45861e04,
        0.46607e04,
        0.47359e04,
        0.48117e04,
        0.48882e04,
        0.49652e04,
        0.50428e04,
        0.51211e04,
        0.52000e04,
        0.52795e04,
        0.53596e04,
        0.54404e04,
        0.55217e04,
        0.56037e04,
        0.56863e04,
        0.57695e04,
        0.58533e04,
        0.59378e04,
        0.60229e04,
        0.61086e04,
        0.61950e04,
        0.62819e04,
        0.63695e04,
        0.64577e04,
        0.65465e04,
        0.66360e04,
        0.67261e04,
        0.68168e04,
        0.69081e04,
        0.70001e04,
        0.70927e04,
        0.71859e04,
    ]
)


#  --------------- N2 45: M = 22, I = 2 --------------------- not in TIPS-2011
M = 22
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- HCN 124: M = 23, I = 1 ---------------------
M = 23
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.17143e03,
        0.24209e03,
        0.31285e03,
        0.38392e03,
        0.45582e03,
        0.52929e03,
        0.60515e03,
        0.68424e03,
        0.76731e03,
        0.85505e03,
        0.94805e03,
        0.10468e04,
        0.11519e04,
        0.12637e04,
        0.13826e04,
        0.15090e04,
        0.16435e04,
        0.17863e04,
        0.19378e04,
        0.20985e04,
        0.22689e04,
        0.24492e04,
        0.26401e04,
        0.28418e04,
        0.30550e04,
        0.32801e04,
        0.35176e04,
        0.37680e04,
        0.40318e04,
        0.43097e04,
        0.46021e04,
        0.49097e04,
        0.52330e04,
        0.55727e04,
        0.59294e04,
        0.63038e04,
        0.66964e04,
        0.71081e04,
        0.75396e04,
        0.79915e04,
        0.84646e04,
        0.89596e04,
        0.94774e04,
        0.10019e05,
        0.10585e05,
        0.11176e05,
        0.11793e05,
        0.12437e05,
        0.13108e05,
        0.13809e05,
        0.14540e05,
        0.15301e05,
        0.16094e05,
        0.16919e05,
        0.17779e05,
        0.18673e05,
        0.19603e05,
        0.20570e05,
        0.21575e05,
        0.22619e05,
        0.23704e05,
        0.24831e05,
        0.26000e05,
        0.27213e05,
        0.28472e05,
        0.29778e05,
        0.31131e05,
        0.32534e05,
        0.33987e05,
        0.35493e05,
        0.37052e05,
        0.38666e05,
        0.40336e05,
        0.42064e05,
        0.43852e05,
        0.45701e05,
        0.47612e05,
        0.49587e05,
        0.51629e05,
        0.53738e05,
        0.55916e05,
        0.58165e05,
        0.60486e05,
        0.62883e05,
        0.65355e05,
        0.67905e05,
        0.70536e05,
        0.73249e05,
        0.76045e05,
        0.78927e05,
        0.81897e05,
        0.84957e05,
        0.88108e05,
        0.91354e05,
        0.94696e05,
        0.98136e05,
        0.10168e06,
        0.10532e06,
        0.10907e06,
        0.11292e06,
        0.11689e06,
        0.12096e06,
        0.12516e06,
        0.12946e06,
        0.13389e06,
        0.13844e06,
        0.14311e06,
        0.14791e06,
        0.15284e06,
        0.15790e06,
        0.16310e06,
        0.16843e06,
        0.17391e06,
        0.17953e06,
        0.18529e06,
        0.19120e06,
        0.19726e06,
        0.20348e06,
        0.20986e06,
    ]
)


#  --------------- HCN 134: M = 23, I = 2 ---------------------
M = 23
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.35186e03,
        0.49693e03,
        0.64221e03,
        0.78815e03,
        0.93585e03,
        0.10868e04,
        0.12428e04,
        0.14056e04,
        0.15766e04,
        0.17574e04,
        0.19491e04,
        0.21528e04,
        0.23695e04,
        0.26002e04,
        0.28457e04,
        0.31068e04,
        0.33845e04,
        0.36795e04,
        0.39926e04,
        0.43249e04,
        0.46770e04,
        0.50500e04,
        0.54447e04,
        0.58621e04,
        0.63032e04,
        0.67690e04,
        0.72606e04,
        0.77789e04,
        0.83252e04,
        0.89005e04,
        0.95062e04,
        0.10143e05,
        0.10813e05,
        0.11517e05,
        0.12256e05,
        0.13032e05,
        0.13846e05,
        0.14699e05,
        0.15593e05,
        0.16530e05,
        0.17511e05,
        0.18538e05,
        0.19612e05,
        0.20734e05,
        0.21908e05,
        0.23134e05,
        0.24414e05,
        0.25750e05,
        0.27145e05,
        0.28599e05,
        0.30115e05,
        0.31694e05,
        0.33340e05,
        0.35054e05,
        0.36838e05,
        0.38694e05,
        0.40625e05,
        0.42633e05,
        0.44720e05,
        0.46889e05,
        0.49142e05,
        0.51481e05,
        0.53910e05,
        0.56430e05,
        0.59045e05,
        0.61757e05,
        0.64568e05,
        0.67482e05,
        0.70502e05,
        0.73630e05,
        0.76869e05,
        0.80223e05,
        0.83694e05,
        0.87285e05,
        0.91000e05,
        0.94843e05,
        0.98815e05,
        0.10292e06,
        0.10716e06,
        0.11155e06,
        0.11608e06,
        0.12075e06,
        0.12558e06,
        0.13056e06,
        0.13570e06,
        0.14100e06,
        0.14647e06,
        0.15211e06,
        0.15793e06,
        0.16392e06,
        0.17009e06,
        0.17646e06,
        0.18301e06,
        0.18976e06,
        0.19671e06,
        0.20387e06,
        0.21123e06,
        0.21881e06,
        0.22660e06,
        0.23462e06,
        0.24287e06,
        0.25135e06,
        0.26007e06,
        0.26903e06,
        0.27824e06,
        0.28771e06,
        0.29743e06,
        0.30742e06,
        0.31767e06,
        0.32820e06,
        0.33901e06,
        0.35011e06,
        0.36150e06,
        0.37319e06,
        0.38518e06,
        0.39749e06,
        0.41010e06,
        0.42304e06,
        0.43631e06,
    ]
)


#  --------------- HCN 135: M = 23, I = 3 ---------------------
M = 23
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11863e03,
        0.16755e03,
        0.21653e03,
        0.26576e03,
        0.31559e03,
        0.36656e03,
        0.41926e03,
        0.47428e03,
        0.53214e03,
        0.59333e03,
        0.65824e03,
        0.72727e03,
        0.80074e03,
        0.87898e03,
        0.96227e03,
        0.10509e04,
        0.11452e04,
        0.12454e04,
        0.13518e04,
        0.14647e04,
        0.15844e04,
        0.17112e04,
        0.18455e04,
        0.19875e04,
        0.21377e04,
        0.22962e04,
        0.24636e04,
        0.26402e04,
        0.28263e04,
        0.30224e04,
        0.32289e04,
        0.34461e04,
        0.36745e04,
        0.39145e04,
        0.41667e04,
        0.44314e04,
        0.47092e04,
        0.50005e04,
        0.53059e04,
        0.56259e04,
        0.59609e04,
        0.63116e04,
        0.66785e04,
        0.70622e04,
        0.74633e04,
        0.78823e04,
        0.83200e04,
        0.87769e04,
        0.92536e04,
        0.97509e04,
        0.10269e05,
        0.10810e05,
        0.11373e05,
        0.11959e05,
        0.12570e05,
        0.13205e05,
        0.13866e05,
        0.14554e05,
        0.15268e05,
        0.16011e05,
        0.16782e05,
        0.17583e05,
        0.18415e05,
        0.19279e05,
        0.20174e05,
        0.21103e05,
        0.22067e05,
        0.23065e05,
        0.24100e05,
        0.25172e05,
        0.26282e05,
        0.27432e05,
        0.28622e05,
        0.29853e05,
        0.31127e05,
        0.32445e05,
        0.33807e05,
        0.35215e05,
        0.36670e05,
        0.38174e05,
        0.39727e05,
        0.41330e05,
        0.42986e05,
        0.44695e05,
        0.46459e05,
        0.48278e05,
        0.50155e05,
        0.52091e05,
        0.54086e05,
        0.56143e05,
        0.58263e05,
        0.60447e05,
        0.62696e05,
        0.65013e05,
        0.67399e05,
        0.69856e05,
        0.72384e05,
        0.74986e05,
        0.77663e05,
        0.80416e05,
        0.83249e05,
        0.86161e05,
        0.89156e05,
        0.92233e05,
        0.95397e05,
        0.98648e05,
        0.10199e06,
        0.10542e06,
        0.10894e06,
        0.11256e06,
        0.11627e06,
        0.12009e06,
        0.12400e06,
        0.12802e06,
        0.13214e06,
        0.13636e06,
        0.14070e06,
        0.14515e06,
        0.14971e06,
    ]
)


#  --------------- CH3Cl 215: M = 24, I = 1 ---------------------
M = 24
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.50529e04,
        0.85123e04,
        0.12528e05,
        0.17036e05,
        0.22005e05,
        0.27429e05,
        0.33325e05,
        0.39734e05,
        0.46713e05,
        0.54336e05,
        0.62690e05,
        0.71876e05,
        0.82006e05,
        0.93204e05,
        0.10560e06,
        0.11936e06,
        0.13463e06,
        0.15158e06,
        0.17043e06,
        0.19137e06,
        0.21464e06,
        0.24049e06,
        0.26920e06,
        0.30107e06,
        0.33642e06,
        0.37563e06,
        0.41907e06,
        0.46719e06,
        0.52045e06,
        0.57936e06,
        0.64448e06,
        0.71641e06,
        0.79582e06,
        0.88341e06,
        0.97997e06,
        0.10863e07,
        0.12034e07,
        0.13323e07,
        0.14739e07,
        0.16295e07,
        0.18003e07,
        0.19877e07,
        0.21932e07,
        0.24183e07,
        0.26649e07,
        0.29346e07,
        0.32296e07,
        0.35519e07,
        0.39039e07,
        0.42881e07,
        0.47072e07,
        0.51639e07,
        0.56615e07,
        0.62032e07,
        0.67926e07,
        0.74335e07,
        0.81299e07,
        0.88862e07,
        0.97071e07,
        0.10598e08,
        0.11563e08,
        0.12609e08,
        0.13742e08,
        0.14968e08,
        0.16294e08,
        0.17728e08,
        0.19277e08,
        0.20950e08,
        0.22756e08,
        0.24704e08,
        0.26805e08,
        0.29069e08,
        0.31507e08,
        0.34132e08,
        0.36957e08,
        0.39995e08,
        0.43260e08,
        0.46769e08,
        0.50538e08,
        0.54583e08,
        0.58923e08,
        0.63578e08,
        0.68568e08,
        0.73914e08,
        0.79640e08,
        0.85770e08,
        0.92329e08,
        0.99345e08,
        0.10685e09,
        0.11486e09,
        0.12342e09,
        0.13257e09,
        0.14233e09,
        0.15274e09,
        0.16384e09,
        0.17568e09,
        0.18829e09,
        0.20173e09,
        0.21604e09,
        0.23127e09,
        0.24748e09,
        0.26471e09,
        0.28304e09,
        0.30252e09,
        0.32322e09,
        0.34520e09,
        0.36853e09,
        0.39330e09,
        0.41958e09,
        0.44745e09,
        0.47701e09,
        0.50833e09,
        0.54151e09,
        0.57667e09,
        0.61389e09,
        0.65329e09,
        0.69498e09,
        0.73909e09,
        0.78573e09,
    ]
)


#  --------------- CH3Cl 217: M = 24, I = 2 ---------------------
M = 24
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.51327e04,
        0.86469e04,
        0.12726e05,
        0.17306e05,
        0.22354e05,
        0.27863e05,
        0.33853e05,
        0.40364e05,
        0.47453e05,
        0.55197e05,
        0.63684e05,
        0.73016e05,
        0.83306e05,
        0.94681e05,
        0.10728e06,
        0.12125e06,
        0.13676e06,
        0.15399e06,
        0.17313e06,
        0.19441e06,
        0.21804e06,
        0.24430e06,
        0.27347e06,
        0.30584e06,
        0.34176e06,
        0.38158e06,
        0.42572e06,
        0.47460e06,
        0.52871e06,
        0.58855e06,
        0.65471e06,
        0.72778e06,
        0.80844e06,
        0.89743e06,
        0.99552e06,
        0.11036e07,
        0.12225e07,
        0.13534e07,
        0.14973e07,
        0.16553e07,
        0.18289e07,
        0.20193e07,
        0.22280e07,
        0.24567e07,
        0.27072e07,
        0.29812e07,
        0.32808e07,
        0.36083e07,
        0.39659e07,
        0.43562e07,
        0.47819e07,
        0.52459e07,
        0.57514e07,
        0.63017e07,
        0.69005e07,
        0.75515e07,
        0.82590e07,
        0.90273e07,
        0.98613e07,
        0.10766e08,
        0.11747e08,
        0.12809e08,
        0.13960e08,
        0.15206e08,
        0.16553e08,
        0.18010e08,
        0.19584e08,
        0.21283e08,
        0.23118e08,
        0.25097e08,
        0.27231e08,
        0.29531e08,
        0.32008e08,
        0.34674e08,
        0.37544e08,
        0.40630e08,
        0.43948e08,
        0.47513e08,
        0.51341e08,
        0.55451e08,
        0.59860e08,
        0.64589e08,
        0.69658e08,
        0.75089e08,
        0.80906e08,
        0.87134e08,
        0.93797e08,
        0.10092e09,
        0.10854e09,
        0.11669e09,
        0.12539e09,
        0.13467e09,
        0.14459e09,
        0.15517e09,
        0.16645e09,
        0.17847e09,
        0.19129e09,
        0.20494e09,
        0.21948e09,
        0.23495e09,
        0.25141e09,
        0.26893e09,
        0.28754e09,
        0.30733e09,
        0.32836e09,
        0.35069e09,
        0.37440e09,
        0.39956e09,
        0.42626e09,
        0.45457e09,
        0.48460e09,
        0.51642e09,
        0.55013e09,
        0.58585e09,
        0.62366e09,
        0.66369e09,
        0.70605e09,
        0.75085e09,
        0.79824e09,
    ]
)


#  --------------- H2O2 1661: M = 25, I = 1 ---------------------
M = 25
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.62392e03,
        0.10958e04,
        0.16692e04,
        0.23492e04,
        0.31427e04,
        0.40574e04,
        0.51014e04,
        0.62840e04,
        0.76157e04,
        0.91085e04,
        0.10776e05,
        0.12633e05,
        0.14696e05,
        0.16983e05,
        0.19515e05,
        0.22312e05,
        0.25396e05,
        0.28792e05,
        0.32526e05,
        0.36625e05,
        0.41118e05,
        0.46036e05,
        0.51410e05,
        0.57275e05,
        0.63667e05,
        0.70623e05,
        0.78185e05,
        0.86394e05,
        0.95295e05,
        0.10493e06,
        0.11536e06,
        0.12662e06,
        0.13878e06,
        0.15188e06,
        0.16600e06,
        0.18118e06,
        0.19750e06,
        0.21503e06,
        0.23383e06,
        0.25398e06,
        0.27556e06,
        0.29864e06,
        0.32333e06,
        0.34970e06,
        0.37784e06,
        0.40786e06,
        0.43985e06,
        0.47392e06,
        0.51018e06,
        0.54874e06,
        0.58972e06,
        0.63324e06,
        0.67943e06,
        0.72843e06,
        0.78037e06,
        0.83540e06,
        0.89366e06,
        0.95530e06,
        0.10205e07,
        0.10894e07,
        0.11622e07,
        0.12391e07,
        0.13202e07,
        0.14057e07,
        0.14959e07,
        0.15909e07,
        0.16910e07,
        0.17963e07,
        0.19072e07,
        0.20237e07,
        0.21463e07,
        0.22750e07,
        0.24102e07,
        0.25522e07,
        0.27012e07,
        0.28575e07,
        0.30213e07,
        0.31931e07,
        0.33730e07,
        0.35615e07,
        0.37588e07,
        0.39653e07,
        0.41813e07,
        0.44072e07,
        0.46433e07,
        0.48901e07,
        0.51479e07,
        0.54171e07,
        0.56982e07,
        0.59915e07,
        0.62976e07,
        0.66167e07,
        0.69495e07,
        0.72963e07,
        0.76577e07,
        0.80342e07,
        0.84262e07,
        0.88343e07,
        0.92591e07,
        0.97011e07,
        0.10161e08,
        0.10639e08,
        0.11136e08,
        0.11652e08,
        0.12189e08,
        0.12746e08,
        0.13325e08,
        0.13926e08,
        0.14550e08,
        0.15198e08,
        0.15870e08,
        0.16566e08,
        0.17289e08,
        0.18038e08,
        0.18814e08,
        0.19619e08,
        0.20452e08,
        0.21315e08,
        0.22209e08,
    ]
)


#  --------------- C2H2 1221: M = 26, I = 1 ---------------------
M = 26
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.71617e02,
        0.10121e03,
        0.13092e03,
        0.16104e03,
        0.19218e03,
        0.22509e03,
        0.26062e03,
        0.29959e03,
        0.34281e03,
        0.39103e03,
        0.44503e03,
        0.50558e03,
        0.57346e03,
        0.64950e03,
        0.73457e03,
        0.82960e03,
        0.93557e03,
        0.10535e04,
        0.11846e04,
        0.13301e04,
        0.14911e04,
        0.16692e04,
        0.18658e04,
        0.20825e04,
        0.23211e04,
        0.25833e04,
        0.28711e04,
        0.31867e04,
        0.35323e04,
        0.39102e04,
        0.43230e04,
        0.47735e04,
        0.52645e04,
        0.57991e04,
        0.63807e04,
        0.70127e04,
        0.76988e04,
        0.84430e04,
        0.92495e04,
        0.10123e05,
        0.11067e05,
        0.12088e05,
        0.13191e05,
        0.14381e05,
        0.15664e05,
        0.17047e05,
        0.18536e05,
        0.20137e05,
        0.21859e05,
        0.23710e05,
        0.25696e05,
        0.27827e05,
        0.30112e05,
        0.32561e05,
        0.35183e05,
        0.37990e05,
        0.40991e05,
        0.44199e05,
        0.47626e05,
        0.51285e05,
        0.55189e05,
        0.59353e05,
        0.63791e05,
        0.68518e05,
        0.73551e05,
        0.78908e05,
        0.84604e05,
        0.90661e05,
        0.97095e05,
        0.10393e06,
        0.11118e06,
        0.11888e06,
        0.12704e06,
        0.13569e06,
        0.14486e06,
        0.15457e06,
        0.16485e06,
        0.17572e06,
        0.18722e06,
        0.19938e06,
        0.21223e06,
        0.22581e06,
        0.24014e06,
        0.25527e06,
        0.27123e06,
        0.28807e06,
        0.30582e06,
        0.32452e06,
        0.34423e06,
        0.36498e06,
        0.38683e06,
        0.40982e06,
        0.43401e06,
        0.45944e06,
        0.48618e06,
        0.51428e06,
        0.54380e06,
        0.57480e06,
        0.60735e06,
        0.64151e06,
        0.67735e06,
        0.71494e06,
        0.75436e06,
        0.79568e06,
        0.83898e06,
        0.88434e06,
        0.93184e06,
        0.98158e06,
        0.10336e07,
        0.10881e07,
        0.11451e07,
        0.12047e07,
        0.12670e07,
        0.13321e07,
        0.14002e07,
        0.14713e07,
        0.15455e07,
        0.16231e07,
        0.17040e07,
    ]
)


#  --------------- C2H2 1231: M = 26, I = 2 ---------------------
M = 26
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.28647e03,
        0.40486e03,
        0.52369e03,
        0.64419e03,
        0.76874e03,
        0.90040e03,
        0.10425e04,
        0.11984e04,
        0.13713e04,
        0.15642e04,
        0.17802e04,
        0.20223e04,
        0.22939e04,
        0.25981e04,
        0.29384e04,
        0.33185e04,
        0.37424e04,
        0.42142e04,
        0.47386e04,
        0.53203e04,
        0.59646e04,
        0.66769e04,
        0.74633e04,
        0.83302e04,
        0.92845e04,
        0.10333e05,
        0.11485e05,
        0.12747e05,
        0.14129e05,
        0.15641e05,
        0.17292e05,
        0.19094e05,
        0.21058e05,
        0.23197e05,
        0.25523e05,
        0.28051e05,
        0.30796e05,
        0.33773e05,
        0.36999e05,
        0.40492e05,
        0.44270e05,
        0.48354e05,
        0.52765e05,
        0.57525e05,
        0.62658e05,
        0.68189e05,
        0.74144e05,
        0.80551e05,
        0.87439e05,
        0.94840e05,
        0.10279e06,
        0.11131e06,
        0.12045e06,
        0.13025e06,
        0.14074e06,
        0.15196e06,
        0.16397e06,
        0.17680e06,
        0.19051e06,
        0.20514e06,
        0.22076e06,
        0.23742e06,
        0.25517e06,
        0.27408e06,
        0.29421e06,
        0.31564e06,
        0.33842e06,
        0.36265e06,
        0.38839e06,
        0.41572e06,
        0.44474e06,
        0.47553e06,
        0.50818e06,
        0.54278e06,
        0.57945e06,
        0.61829e06,
        0.65940e06,
        0.70289e06,
        0.74890e06,
        0.79754e06,
        0.84894e06,
        0.90324e06,
        0.96057e06,
        0.10211e07,
        0.10849e07,
        0.11523e07,
        0.12233e07,
        0.12981e07,
        0.13769e07,
        0.14599e07,
        0.15473e07,
        0.16393e07,
        0.17361e07,
        0.18378e07,
        0.19447e07,
        0.20571e07,
        0.21752e07,
        0.22992e07,
        0.24294e07,
        0.25661e07,
        0.27094e07,
        0.28598e07,
        0.30175e07,
        0.31828e07,
        0.33560e07,
        0.35374e07,
        0.37274e07,
        0.39264e07,
        0.41346e07,
        0.43525e07,
        0.45805e07,
        0.48188e07,
        0.50681e07,
        0.53286e07,
        0.56008e07,
        0.58852e07,
        0.61823e07,
        0.64924e07,
        0.68162e07,
    ]
)


#  --------------- C2H2 1222: M = 26, I = 3 ---------------------
M = 26
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.24843e03,
        0.35373e03,
        0.45997e03,
        0.56930e03,
        0.68497e03,
        0.81065e03,
        0.94999e03,
        0.11065e04,
        0.12837e04,
        0.14848e04,
        0.17135e04,
        0.19731e04,
        0.22675e04,
        0.26205e04,
        0.29999e04,
        0.34276e04,
        0.39086e04,
        0.44486e04,
        0.50533e04,
        0.57294e04,
        0.64837e04,
        0.73237e04,
        0.82576e04,
        0.92941e04,
        0.10443e05,
        0.11714e05,
        0.13117e05,
        0.14666e05,
        0.16373e05,
        0.18250e05,
        0.20313e05,
        0.22578e05,
        0.25060e05,
        0.27777e05,
        0.30750e05,
        0.33997e05,
        0.37541e05,
        0.41405e05,
        0.45614e05,
        0.50192e05,
        0.55170e05,
        0.60576e05,
        0.66441e05,
        0.72799e05,
        0.79686e05,
        0.87140e05,
        0.95199e05,
        0.10391e06,
        0.11331e06,
        0.12345e06,
        0.13438e06,
        0.14615e06,
        0.15882e06,
        0.17245e06,
        0.18710e06,
        0.20283e06,
        0.21972e06,
        0.23783e06,
        0.25724e06,
        0.27804e06,
        0.30030e06,
        0.32411e06,
        0.34958e06,
        0.37679e06,
        0.40585e06,
        0.43686e06,
        0.46994e06,
        0.50521e06,
        0.54280e06,
        0.58282e06,
        0.62542e06,
        0.67074e06,
        0.71892e06,
        0.77013e06,
        0.82453e06,
        0.88228e06,
        0.94356e06,
        0.10086e07,
        0.10775e07,
        0.11505e07,
        0.12279e07,
        0.13098e07,
        0.13964e07,
        0.14881e07,
        0.15850e07,
        0.16875e07,
        0.17957e07,
        0.19100e07,
        0.20307e07,
        0.21580e07,
        0.22923e07,
        0.24339e07,
        0.25831e07,
        0.27404e07,
        0.29060e07,
        0.30803e07,
        0.32638e07,
        0.34568e07,
        0.36598e07,
        0.38733e07,
        0.40976e07,
        0.43332e07,
        0.45807e07,
        0.48406e07,
        0.51133e07,
        0.53995e07,
        0.56997e07,
        0.60144e07,
        0.63444e07,
        0.66901e07,
        0.70524e07,
        0.74317e07,
        0.78289e07,
        0.82447e07,
        0.86797e07,
        0.91348e07,
        0.96108e07,
        0.10108e08,
        0.10629e08,
    ]
)


#  --------------- C2H6 1221: M = 27, I = 1 ---------------------
M = 27
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.47267e04,
        0.80011e04,
        0.11928e05,
        0.16564e05,
        0.21985e05,
        0.28287e05,
        0.35590e05,
        0.44049e05,
        0.53862e05,
        0.65277e05,
        0.78597e05,
        0.94191e05,
        0.11250e06,
        0.13407e06,
        0.15952e06,
        0.18962e06,
        0.22526e06,
        0.26751e06,
        0.31763e06,
        0.37714e06,
        0.44780e06,
        0.53174e06,
        0.63145e06,
        0.74989e06,
        0.89056e06,
        0.10576e07,
        0.12559e07,
        0.14912e07,
        0.17704e07,
        0.21013e07,
        0.24936e07,
        0.29582e07,
        0.35083e07,
        0.41591e07,
        0.49286e07,
        0.58379e07,
        0.69116e07,
        0.81787e07,
        0.96728e07,
        0.11433e08,
        0.13506e08,
        0.15945e08,
        0.18812e08,
        0.22180e08,
        0.26134e08,
        0.30770e08,
        0.36204e08,
        0.42565e08,
        0.50008e08,
        0.58708e08,
        0.68868e08,
        0.80725e08,
        0.94548e08,
        0.11065e09,
        0.12940e09,
        0.15119e09,
        0.17652e09,
        0.20593e09,
        0.24003e09,
        0.27956e09,
        0.32533e09,
        0.37829e09,
        0.43951e09,
        0.51021e09,
        0.59180e09,
        0.68588e09,
        0.79427e09,
        0.91904e09,
        0.10625e10,
        0.12275e10,
        0.14168e10,
        0.16341e10,
        0.18831e10,
        0.21684e10,
        0.24949e10,
        0.28684e10,
        0.32951e10,
        0.37823e10,
        0.43382e10,
        0.49719e10,
        0.56938e10,
        0.65156e10,
        0.74502e10,
        0.85125e10,
        0.97190e10,
        0.11088e11,
        0.12641e11,
        0.14401e11,
        0.16393e11,
        0.18648e11,
        0.21198e11,
        0.24079e11,
        0.27332e11,
        0.31003e11,
        0.35142e11,
        0.39807e11,
        0.45060e11,
        0.50972e11,
        0.57620e11,
        0.65091e11,
        0.73483e11,
        0.82902e11,
        0.93467e11,
        0.10531e12,
        0.11858e12,
        0.13343e12,
        0.15005e12,
        0.16864e12,
        0.18941e12,
        0.21260e12,
        0.23849e12,
        0.26737e12,
        0.29957e12,
        0.33545e12,
        0.37541e12,
        0.41987e12,
        0.46934e12,
        0.52432e12,
        0.58542e12,
    ]
)


#  --------------- C2H6 1231: M = 27, I = 2 ---------------------
M = 27
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.24128e04,
        0.40845e04,
        0.60896e04,
        0.84564e04,
        0.11224e05,
        0.14442e05,
        0.18170e05,
        0.22490e05,
        0.27501e05,
        0.33329e05,
        0.40131e05,
        0.48094e05,
        0.57446e05,
        0.68459e05,
        0.81458e05,
        0.96828e05,
        0.11503e06,
        0.13661e06,
        0.16221e06,
        0.19260e06,
        0.22869e06,
        0.27156e06,
        0.32249e06,
        0.38298e06,
        0.45483e06,
        0.54015e06,
        0.64144e06,
        0.76164e06,
        0.90423e06,
        0.10733e07,
        0.12737e07,
        0.15110e07,
        0.17920e07,
        0.21245e07,
        0.25176e07,
        0.29821e07,
        0.35307e07,
        0.41780e07,
        0.49414e07,
        0.58408e07,
        0.68999e07,
        0.81461e07,
        0.96110e07,
        0.11332e08,
        0.13352e08,
        0.15721e08,
        0.18497e08,
        0.21748e08,
        0.25551e08,
        0.29997e08,
        0.35189e08,
        0.41248e08,
        0.48313e08,
        0.56542e08,
        0.66122e08,
        0.77262e08,
        0.90206e08,
        0.10523e09,
        0.12267e09,
        0.14287e09,
        0.16626e09,
        0.19333e09,
        0.22462e09,
        0.26076e09,
        0.30247e09,
        0.35056e09,
        0.40596e09,
        0.46974e09,
        0.54310e09,
        0.62740e09,
        0.72420e09,
        0.83527e09,
        0.96260e09,
        0.11084e10,
        0.12754e10,
        0.14663e10,
        0.16845e10,
        0.19336e10,
        0.22178e10,
        0.25418e10,
        0.29109e10,
        0.33311e10,
        0.38090e10,
        0.43522e10,
        0.49691e10,
        0.56693e10,
        0.64633e10,
        0.73631e10,
        0.83821e10,
        0.95352e10,
        0.10839e11,
        0.12312e11,
        0.13976e11,
        0.15854e11,
        0.17971e11,
        0.20357e11,
        0.23043e11,
        0.26067e11,
        0.29467e11,
        0.33289e11,
        0.37581e11,
        0.42399e11,
        0.47804e11,
        0.53862e11,
        0.60649e11,
        0.68247e11,
        0.76750e11,
        0.86257e11,
        0.96882e11,
        0.10875e12,
        0.12199e12,
        0.13677e12,
        0.15325e12,
        0.17160e12,
        0.19204e12,
        0.21480e12,
        0.24010e12,
        0.26824e12,
        0.29950e12,
    ]
)


#  --------------- PH3 1111: M = 28, I = 1 ---------------------
M = 28
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.29652e03,
        0.49643e03,
        0.72810e03,
        0.98777e03,
        0.12729e04,
        0.15820e04,
        0.19145e04,
        0.22708e04,
        0.26520e04,
        0.30600e04,
        0.34971e04,
        0.39662e04,
        0.44702e04,
        0.50126e04,
        0.55970e04,
        0.62273e04,
        0.69075e04,
        0.76421e04,
        0.84357e04,
        0.92933e04,
        0.10220e05,
        0.11222e05,
        0.12304e05,
        0.13473e05,
        0.14736e05,
        0.16099e05,
        0.17571e05,
        0.19160e05,
        0.20873e05,
        0.22720e05,
        0.24710e05,
        0.26854e05,
        0.29162e05,
        0.31646e05,
        0.34317e05,
        0.37188e05,
        0.40273e05,
        0.43585e05,
        0.47140e05,
        0.50953e05,
        0.55040e05,
        0.59419e05,
        0.64108e05,
        0.69127e05,
        0.74496e05,
        0.80236e05,
        0.86369e05,
        0.92918e05,
        0.99909e05,
        0.10737e06,
        0.11532e06,
        0.12380e06,
        0.13282e06,
        0.14244e06,
        0.15266e06,
        0.16354e06,
        0.17511e06,
        0.18739e06,
        0.20044e06,
        0.21430e06,
        0.22900e06,
        0.24459e06,
        0.26111e06,
        0.27862e06,
        0.29716e06,
        0.31680e06,
        0.33757e06,
        0.35954e06,
        0.38277e06,
        0.40733e06,
        0.43326e06,
        0.46065e06,
        0.48955e06,
        0.52005e06,
        0.55222e06,
        0.58614e06,
        0.62188e06,
        0.65953e06,
        0.69917e06,
        0.74091e06,
        0.78483e06,
        0.83103e06,
        0.87960e06,
        0.93067e06,
        0.98432e06,
        0.10407e07,
        0.10999e07,
        0.11620e07,
        0.12272e07,
        0.12956e07,
        0.13673e07,
        0.14425e07,
        0.15212e07,
        0.16038e07,
        0.16902e07,
        0.17808e07,
        0.18755e07,
        0.19746e07,
        0.20784e07,
        0.21868e07,
        0.23002e07,
        0.24187e07,
        0.25425e07,
        0.26719e07,
        0.28070e07,
        0.29480e07,
        0.30952e07,
        0.32488e07,
        0.34091e07,
        0.35762e07,
        0.37504e07,
        0.39320e07,
        0.41213e07,
        0.43185e07,
        0.45239e07,
        0.47378e07,
        0.49605e07,
        0.51923e07,
        0.54335e07,
    ]
)


#  --------------- COF2 269: M = 29, I = 1 ---------------------
M = 29
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.54999e04,
        0.92749e04,
        0.13668e05,
        0.18643e05,
        0.24224e05,
        0.30487e05,
        0.37547e05,
        0.45543e05,
        0.54639e05,
        0.65019e05,
        0.76886e05,
        0.90462e05,
        0.10600e06,
        0.12377e06,
        0.14407e06,
        0.16723e06,
        0.19363e06,
        0.22367e06,
        0.25780e06,
        0.29650e06,
        0.34031e06,
        0.38982e06,
        0.44568e06,
        0.50859e06,
        0.57932e06,
        0.65872e06,
        0.74770e06,
        0.84724e06,
        0.95844e06,
        0.10825e07,
        0.12205e07,
        0.13741e07,
        0.15446e07,
        0.17336e07,
        0.19428e07,
        0.21742e07,
        0.24296e07,
        0.27113e07,
        0.30214e07,
        0.33626e07,
        0.37373e07,
        0.41484e07,
        0.45989e07,
        0.50921e07,
        0.56313e07,
        0.62202e07,
        0.68626e07,
        0.75628e07,
        0.83251e07,
        0.91542e07,
        0.10055e08,
        0.11033e08,
        0.12093e08,
        0.13242e08,
        0.14486e08,
        0.15831e08,
        0.17284e08,
        0.18853e08,
        0.20546e08,
        0.22371e08,
        0.24335e08,
        0.26450e08,
        0.28724e08,
        0.31167e08,
        0.33790e08,
        0.36605e08,
        0.39623e08,
        0.42856e08,
        0.46318e08,
        0.50022e08,
        0.53983e08,
        0.58215e08,
        0.62735e08,
        0.67558e08,
        0.72702e08,
        0.78186e08,
        0.84028e08,
        0.90247e08,
        0.96865e08,
        0.10390e09,
        0.11138e09,
        0.11933e09,
        0.12777e09,
        0.13672e09,
        0.14622e09,
        0.15629e09,
        0.16695e09,
        0.17825e09,
        0.19021e09,
        0.20287e09,
        0.21625e09,
        0.23039e09,
        0.24534e09,
        0.26113e09,
        0.27779e09,
        0.29538e09,
        0.31392e09,
        0.33348e09,
        0.35409e09,
        0.37580e09,
        0.39867e09,
        0.42274e09,
        0.44806e09,
        0.47470e09,
        0.50271e09,
        0.53215e09,
        0.56308e09,
        0.59557e09,
        0.62968e09,
        0.66548e09,
        0.70304e09,
        0.74243e09,
        0.78374e09,
        0.82703e09,
        0.87240e09,
        0.91992e09,
        0.96967e09,
        0.10218e10,
        0.10763e10,
    ]
)


#  --------------- COF2 369: M = 29, I = 2 --------------------- not in TIPS-2011
M = 29
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- SF6 29: M = 30, I = 1 ---------------------
M = 30
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.46373e05,
        0.78844e05,
        0.11939e06,
        0.17183e06,
        0.24247e06,
        0.34059e06,
        0.47963e06,
        0.67906e06,
        0.96713e06,
        0.13848e07,
        0.19911e07,
        0.28714e07,
        0.41481e07,
        0.59956e07,
        0.86617e07,
        0.12496e08,
        0.17991e08,
        0.25832e08,
        0.36971e08,
        0.52724e08,
        0.74895e08,
        0.10595e09,
        0.14923e09,
        0.20925e09,
        0.29208e09,
        0.40582e09,
        0.56124e09,
        0.77259e09,
        0.10586e10,
        0.14439e10,
        0.19605e10,
        0.26500e10,
        0.35662e10,
        0.47781e10,
        0.63747e10,
        0.84689e10,
        0.11205e11,
        0.14765e11,
        0.19378e11,
        0.25336e11,
        0.32998e11,
        0.42819e11,
        0.55361e11,
        0.71323e11,
        0.91569e11,
        0.11716e12,
        0.14941e12,
        0.18992e12,
        0.24065e12,
        0.30398e12,
        0.38283e12,
        0.48069e12,
        0.60182e12,
        0.75136e12,
        0.93546e12,
        0.11615e13,
        0.14384e13,
        0.17767e13,
        0.21890e13,
        0.26903e13,
        0.32984e13,
        0.40344e13,
        0.49232e13,
        0.59942e13,
        0.72819e13,
        0.88272e13,
        0.10678e14,
        0.12889e14,
        0.15527e14,
        0.18666e14,
        0.22397e14,
        0.26823e14,
        0.32062e14,
        0.38253e14,
        0.45558e14,
        0.54161e14,
        0.64277e14,
        0.76153e14,
        0.90072e14,
        0.10636e15,
        0.12539e15,
        0.14759e15,
        0.17345e15,
        0.20354e15,
        0.23848e15,
        0.27902e15,
        0.32597e15,
        0.38028e15,
        0.44303e15,
        0.51542e15,
        0.59883e15,
        0.69482e15,
        0.80516e15,
        0.93182e15,
        0.10770e16,
        0.12434e16,
        0.14336e16,
        0.16511e16,
        0.18992e16,
        0.21821e16,
        0.25043e16,
        0.28709e16,
        0.32875e16,
        0.37604e16,
        0.42968e16,
        0.49046e16,
        0.55925e16,
        0.63704e16,
        0.72492e16,
        0.82411e16,
        0.93596e16,
        0.10620e17,
        0.12038e17,
        0.13633e17,
        0.15425e17,
        0.17438e17,
        0.19694e17,
        0.22224e17,
        0.25057e17,
    ]
)


#  --------------- H2S 121: M = 31, I = 1 ---------------------
M = 31
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.47192e02,
        0.78671e02,
        0.11510e03,
        0.15589e03,
        0.20061e03,
        0.24896e03,
        0.30070e03,
        0.35571e03,
        0.41386e03,
        0.47513e03,
        0.53951e03,
        0.60703e03,
        0.67772e03,
        0.75167e03,
        0.82896e03,
        0.90969e03,
        0.99396e03,
        0.10819e04,
        0.11736e04,
        0.12692e04,
        0.13689e04,
        0.14727e04,
        0.15809e04,
        0.16937e04,
        0.18111e04,
        0.19333e04,
        0.20606e04,
        0.21931e04,
        0.23309e04,
        0.24744e04,
        0.26236e04,
        0.27788e04,
        0.29403e04,
        0.31081e04,
        0.32825e04,
        0.34638e04,
        0.36522e04,
        0.38478e04,
        0.40510e04,
        0.42619e04,
        0.44808e04,
        0.47080e04,
        0.49437e04,
        0.51881e04,
        0.54415e04,
        0.57042e04,
        0.59764e04,
        0.62584e04,
        0.65505e04,
        0.68529e04,
        0.71660e04,
        0.74899e04,
        0.78251e04,
        0.81718e04,
        0.85303e04,
        0.89008e04,
        0.92838e04,
        0.96795e04,
        0.10088e05,
        0.10510e05,
        0.10946e05,
        0.11396e05,
        0.11860e05,
        0.12339e05,
        0.12833e05,
        0.13342e05,
        0.13867e05,
        0.14408e05,
        0.14966e05,
        0.15540e05,
        0.16132e05,
        0.16741e05,
        0.17368e05,
        0.18013e05,
        0.18677e05,
        0.19361e05,
        0.20064e05,
        0.20786e05,
        0.21529e05,
        0.22293e05,
        0.23078e05,
        0.23885e05,
        0.24714e05,
        0.25565e05,
        0.26439e05,
        0.27337e05,
        0.28258e05,
        0.29204e05,
        0.30174e05,
        0.31170e05,
        0.32191e05,
        0.33239e05,
        0.34313e05,
        0.35414e05,
        0.36543e05,
        0.37700e05,
        0.38886e05,
        0.40101e05,
        0.41346e05,
        0.42621e05,
        0.43926e05,
        0.45263e05,
        0.46631e05,
        0.48033e05,
        0.49466e05,
        0.50934e05,
        0.52435e05,
        0.53971e05,
        0.55542e05,
        0.57149e05,
        0.58792e05,
        0.60472e05,
        0.62190e05,
        0.63946e05,
        0.65740e05,
        0.67574e05,
        0.69448e05,
        0.71362e05,
        0.73318e05,
    ]
)


#  --------------- H2S 141: M = 31, I = 2 ---------------------
M = 31
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.47310e02,
        0.78869e02,
        0.11539e03,
        0.15628e03,
        0.20112e03,
        0.24959e03,
        0.30147e03,
        0.35661e03,
        0.41491e03,
        0.47634e03,
        0.54088e03,
        0.60857e03,
        0.67945e03,
        0.75359e03,
        0.83107e03,
        0.91201e03,
        0.99649e03,
        0.10846e04,
        0.11766e04,
        0.12724e04,
        0.13724e04,
        0.14765e04,
        0.15850e04,
        0.16980e04,
        0.18157e04,
        0.19382e04,
        0.20658e04,
        0.21987e04,
        0.23369e04,
        0.24807e04,
        0.26303e04,
        0.27859e04,
        0.29478e04,
        0.31160e04,
        0.32909e04,
        0.34727e04,
        0.36615e04,
        0.38576e04,
        0.40613e04,
        0.42728e04,
        0.44923e04,
        0.47200e04,
        0.49563e04,
        0.52013e04,
        0.54554e04,
        0.57188e04,
        0.59917e04,
        0.62744e04,
        0.65672e04,
        0.68704e04,
        0.71843e04,
        0.75090e04,
        0.78451e04,
        0.81926e04,
        0.85520e04,
        0.89236e04,
        0.93075e04,
        0.97042e04,
        0.10114e05,
        0.10537e05,
        0.10974e05,
        0.11425e05,
        0.11890e05,
        0.12370e05,
        0.12866e05,
        0.13376e05,
        0.13903e05,
        0.14445e05,
        0.15004e05,
        0.15580e05,
        0.16173e05,
        0.16784e05,
        0.17412e05,
        0.18059e05,
        0.18725e05,
        0.19410e05,
        0.20115e05,
        0.20839e05,
        0.21584e05,
        0.22350e05,
        0.23137e05,
        0.23946e05,
        0.24777e05,
        0.25630e05,
        0.26507e05,
        0.27407e05,
        0.28330e05,
        0.29278e05,
        0.30251e05,
        0.31249e05,
        0.32273e05,
        0.33324e05,
        0.34401e05,
        0.35505e05,
        0.36637e05,
        0.37797e05,
        0.38985e05,
        0.40204e05,
        0.41451e05,
        0.42729e05,
        0.44038e05,
        0.45379e05,
        0.46751e05,
        0.48155e05,
        0.49593e05,
        0.51064e05,
        0.52569e05,
        0.54109e05,
        0.55684e05,
        0.57295e05,
        0.58943e05,
        0.60627e05,
        0.62349e05,
        0.64109e05,
        0.65908e05,
        0.67747e05,
        0.69625e05,
        0.71544e05,
        0.73505e05,
    ]
)


#  --------------- H2S 131: M = 30, I = 3 ---------------------
M = 31
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.18901e03,
        0.31509e03,
        0.46102e03,
        0.62437e03,
        0.80349e03,
        0.99713e03,
        0.12044e04,
        0.14247e04,
        0.16576e04,
        0.19030e04,
        0.21609e04,
        0.24313e04,
        0.27145e04,
        0.30106e04,
        0.33202e04,
        0.36436e04,
        0.39811e04,
        0.43332e04,
        0.47005e04,
        0.50835e04,
        0.54827e04,
        0.58987e04,
        0.63321e04,
        0.67836e04,
        0.72538e04,
        0.77434e04,
        0.82532e04,
        0.87838e04,
        0.93360e04,
        0.99106e04,
        0.10508e05,
        0.11130e05,
        0.11777e05,
        0.12449e05,
        0.13147e05,
        0.13874e05,
        0.14628e05,
        0.15412e05,
        0.16225e05,
        0.17070e05,
        0.17947e05,
        0.18857e05,
        0.19801e05,
        0.20780e05,
        0.21795e05,
        0.22847e05,
        0.23937e05,
        0.25067e05,
        0.26236e05,
        0.27448e05,
        0.28702e05,
        0.29999e05,
        0.31342e05,
        0.32730e05,
        0.34166e05,
        0.35650e05,
        0.37184e05,
        0.38769e05,
        0.40406e05,
        0.42097e05,
        0.43842e05,
        0.45644e05,
        0.47503e05,
        0.49421e05,
        0.51399e05,
        0.53439e05,
        0.55542e05,
        0.57709e05,
        0.59942e05,
        0.62242e05,
        0.64611e05,
        0.67051e05,
        0.69563e05,
        0.72148e05,
        0.74808e05,
        0.77545e05,
        0.80360e05,
        0.83255e05,
        0.86232e05,
        0.89291e05,
        0.92435e05,
        0.95667e05,
        0.98986e05,
        0.10240e06,
        0.10590e06,
        0.10949e06,
        0.11318e06,
        0.11697e06,
        0.12086e06,
        0.12484e06,
        0.12893e06,
        0.13313e06,
        0.13743e06,
        0.14184e06,
        0.14637e06,
        0.15100e06,
        0.15575e06,
        0.16062e06,
        0.16560e06,
        0.17071e06,
        0.17594e06,
        0.18129e06,
        0.18677e06,
        0.19238e06,
        0.19813e06,
        0.20400e06,
        0.21002e06,
        0.21617e06,
        0.22246e06,
        0.22890e06,
        0.23548e06,
        0.24221e06,
        0.24909e06,
        0.25612e06,
        0.26331e06,
        0.27065e06,
        0.27816e06,
        0.28583e06,
        0.29366e06,
    ]
)


#  --------------- HCOOH 126: M = 32, I = 1 ---------------------
M = 32
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.31899e04,
        0.53773e04,
        0.79205e04,
        0.10792e05,
        0.13993e05,
        0.17550e05,
        0.21509e05,
        0.25930e05,
        0.30885e05,
        0.36460e05,
        0.42750e05,
        0.49864e05,
        0.57926e05,
        0.67071e05,
        0.77453e05,
        0.89243e05,
        0.10263e06,
        0.11783e06,
        0.13507e06,
        0.15462e06,
        0.17676e06,
        0.20183e06,
        0.23018e06,
        0.26221e06,
        0.29836e06,
        0.33911e06,
        0.38501e06,
        0.43664e06,
        0.49467e06,
        0.55981e06,
        0.63286e06,
        0.71470e06,
        0.80628e06,
        0.90865e06,
        0.10230e07,
        0.11505e07,
        0.12927e07,
        0.14509e07,
        0.16269e07,
        0.18225e07,
        0.20396e07,
        0.22804e07,
        0.25472e07,
        0.28425e07,
        0.31692e07,
        0.35301e07,
        0.39285e07,
        0.43681e07,
        0.48525e07,
        0.53858e07,
        0.59727e07,
        0.66178e07,
        0.73265e07,
        0.81042e07,
        0.89571e07,
        0.98918e07,
        0.10915e08,
        0.12035e08,
        0.13259e08,
        0.14597e08,
        0.16057e08,
        0.17650e08,
        0.19387e08,
        0.21279e08,
        0.23339e08,
        0.25579e08,
        0.28016e08,
        0.30663e08,
        0.33536e08,
        0.36655e08,
        0.40037e08,
        0.43701e08,
        0.47671e08,
        0.51967e08,
        0.56614e08,
        0.61639e08,
        0.67068e08,
        0.72930e08,
        0.79257e08,
        0.86082e08,
        0.93439e08,
        0.10137e09,
        0.10990e09,
        0.11909e09,
        0.12898e09,
        0.13960e09,
        0.15102e09,
        0.16329e09,
        0.17646e09,
        0.19059e09,
        0.20575e09,
        0.22200e09,
        0.23941e09,
        0.25806e09,
        0.27802e09,
        0.29938e09,
        0.32223e09,
        0.34666e09,
        0.37276e09,
        0.40064e09,
        0.43041e09,
        0.46218e09,
        0.49607e09,
        0.53221e09,
        0.57074e09,
        0.61179e09,
        0.65551e09,
        0.70206e09,
        0.75159e09,
        0.80430e09,
        0.86034e09,
        0.91992e09,
        0.98324e09,
        0.10505e10,
        0.11219e10,
        0.11977e10,
        0.12782e10,
        0.13635e10,
        0.14540e10,
    ]
)


#  --------------- HO2 166: M = 33, I = 1 ---------------------
M = 33
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.39277e03,
        0.66062e03,
        0.97123e03,
        0.13194e04,
        0.17014e04,
        0.21148e04,
        0.25578e04,
        0.30296e04,
        0.35297e04,
        0.40585e04,
        0.46167e04,
        0.52055e04,
        0.58264e04,
        0.64809e04,
        0.71707e04,
        0.78978e04,
        0.86641e04,
        0.94715e04,
        0.10322e05,
        0.11218e05,
        0.12161e05,
        0.13154e05,
        0.14198e05,
        0.15296e05,
        0.16449e05,
        0.17661e05,
        0.18933e05,
        0.20267e05,
        0.21666e05,
        0.23133e05,
        0.24669e05,
        0.26277e05,
        0.27960e05,
        0.29720e05,
        0.31560e05,
        0.33482e05,
        0.35489e05,
        0.37584e05,
        0.39769e05,
        0.42048e05,
        0.44423e05,
        0.46898e05,
        0.49475e05,
        0.52157e05,
        0.54948e05,
        0.57850e05,
        0.60868e05,
        0.64003e05,
        0.67261e05,
        0.70643e05,
        0.74154e05,
        0.77797e05,
        0.81575e05,
        0.85492e05,
        0.89553e05,
        0.93760e05,
        0.98118e05,
        0.10263e06,
        0.10730e06,
        0.11213e06,
        0.11713e06,
        0.12230e06,
        0.12765e06,
        0.13317e06,
        0.13888e06,
        0.14478e06,
        0.15086e06,
        0.15715e06,
        0.16363e06,
        0.17032e06,
        0.17723e06,
        0.18434e06,
        0.19168e06,
        0.19924e06,
        0.20704e06,
        0.21506e06,
        0.22333e06,
        0.23185e06,
        0.24061e06,
        0.24963e06,
        0.25891e06,
        0.26846e06,
        0.27828e06,
        0.28838e06,
        0.29876e06,
        0.30943e06,
        0.32039e06,
        0.33166e06,
        0.34323e06,
        0.35512e06,
        0.36732e06,
        0.37985e06,
        0.39271e06,
        0.40590e06,
        0.41944e06,
        0.43333e06,
        0.44758e06,
        0.46219e06,
        0.47717e06,
        0.49252e06,
        0.50826e06,
        0.52439e06,
        0.54091e06,
        0.55784e06,
        0.57518e06,
        0.59293e06,
        0.61112e06,
        0.62973e06,
        0.64878e06,
        0.66828e06,
        0.68824e06,
        0.70866e06,
        0.72955e06,
        0.75091e06,
        0.77276e06,
        0.79511e06,
        0.81795e06,
        0.84131e06,
        0.86518e06,
    ]
)


#  --------------- O 6: M = 34, I = 1 --------------------- not in TIPS-2011
M = 34
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- ClONO2 5646: M = 35, I = 1 ---------------------
M = 35
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11444e06,
        0.21121e06,
        0.34858e06,
        0.53934e06,
        0.80041e06,
        0.11539e07,
        0.16286e07,
        0.22614e07,
        0.30992e07,
        0.42015e07,
        0.56426e07,
        0.75152e07,
        0.99344e07,
        0.13042e08,
        0.17012e08,
        0.22058e08,
        0.28437e08,
        0.36463e08,
        0.46514e08,
        0.59042e08,
        0.74589e08,
        0.93801e08,
        0.11744e09,
        0.14643e09,
        0.18181e09,
        0.22486e09,
        0.27705e09,
        0.34009e09,
        0.41598e09,
        0.50705e09,
        0.61599e09,
        0.74590e09,
        0.90037e09,
        0.10835e10,
        0.13001e10,
        0.15554e10,
        0.18556e10,
        0.22079e10,
        0.26200e10,
        0.31012e10,
        0.36615e10,
        0.43126e10,
        0.50675e10,
        0.59409e10,
        0.69492e10,
        0.81110e10,
        0.94469e10,
        0.10980e11,
        0.12736e11,
        0.14745e11,
        0.17037e11,
        0.19649e11,
        0.22620e11,
        0.25994e11,
        0.29819e11,
        0.34150e11,
        0.39044e11,
        0.44568e11,
        0.50794e11,
        0.57799e11,
        0.65672e11,
        0.74506e11,
        0.84408e11,
        0.95490e11,
        0.10788e12,
        0.12171e12,
        0.13713e12,
        0.15431e12,
        0.17342e12,
        0.19465e12,
        0.21822e12,
        0.24435e12,
        0.27329e12,
        0.30530e12,
        0.34069e12,
        0.37976e12,
        0.42286e12,
        0.47034e12,
        0.52262e12,
        0.58012e12,
        0.64330e12,
        0.71267e12,
        0.78875e12,
        0.87214e12,
        0.96344e12,
        0.10633e13,
        0.11725e13,
        0.12918e13,
        0.14220e13,
        0.15640e13,
        0.17188e13,
        0.18873e13,
        0.20706e13,
        0.22700e13,
        0.24866e13,
        0.27218e13,
        0.29771e13,
        0.32538e13,
        0.35537e13,
        0.38784e13,
        0.42299e13,
        0.46100e13,
        0.50208e13,
        0.54645e13,
        0.59435e13,
        0.64603e13,
        0.70175e13,
        0.76180e13,
        0.82647e13,
        0.89608e13,
        0.97097e13,
        0.10515e14,
        0.11380e14,
        0.12310e14,
        0.13307e14,
        0.14378e14,
        0.15526e14,
        0.16756e14,
        0.18075e14,
    ]
)


#  --------------- ClONO2 7646: M = 35, I = 2 ---------------------
M = 35
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11735e06,
        0.21659e06,
        0.35745e06,
        0.55307e06,
        0.82078e06,
        0.11833e07,
        0.16700e07,
        0.23189e07,
        0.31781e07,
        0.43084e07,
        0.57862e07,
        0.77065e07,
        0.10187e08,
        0.13374e08,
        0.17445e08,
        0.22619e08,
        0.29161e08,
        0.37391e08,
        0.47698e08,
        0.60545e08,
        0.76487e08,
        0.96188e08,
        0.12043e09,
        0.15015e09,
        0.18644e09,
        0.23059e09,
        0.28410e09,
        0.34874e09,
        0.42657e09,
        0.51995e09,
        0.63167e09,
        0.76489e09,
        0.92329e09,
        0.11111e10,
        0.13331e10,
        0.15950e10,
        0.19029e10,
        0.22641e10,
        0.26867e10,
        0.31801e10,
        0.37547e10,
        0.44224e10,
        0.51965e10,
        0.60921e10,
        0.71261e10,
        0.83174e10,
        0.96873e10,
        0.11260e11,
        0.13061e11,
        0.15120e11,
        0.17471e11,
        0.20149e11,
        0.23196e11,
        0.26656e11,
        0.30578e11,
        0.35019e11,
        0.40038e11,
        0.45703e11,
        0.52087e11,
        0.59270e11,
        0.67343e11,
        0.76403e11,
        0.86556e11,
        0.97921e11,
        0.11062e12,
        0.12481e12,
        0.14062e12,
        0.15824e12,
        0.17783e12,
        0.19961e12,
        0.22377e12,
        0.25057e12,
        0.28024e12,
        0.31308e12,
        0.34936e12,
        0.38943e12,
        0.43362e12,
        0.48232e12,
        0.53593e12,
        0.59489e12,
        0.65968e12,
        0.73081e12,
        0.80883e12,
        0.89434e12,
        0.98797e12,
        0.10904e13,
        0.12024e13,
        0.13247e13,
        0.14582e13,
        0.16038e13,
        0.17625e13,
        0.19353e13,
        0.21233e13,
        0.23278e13,
        0.25499e13,
        0.27911e13,
        0.30528e13,
        0.33366e13,
        0.36442e13,
        0.39772e13,
        0.43376e13,
        0.47273e13,
        0.51486e13,
        0.56036e13,
        0.60948e13,
        0.66248e13,
        0.71962e13,
        0.78119e13,
        0.84751e13,
        0.91889e13,
        0.99569e13,
        0.10783e14,
        0.11670e14,
        0.12623e14,
        0.13646e14,
        0.14744e14,
        0.15921e14,
        0.17183e14,
        0.18535e14,
    ]
)


#  --------------- NOp 46: M = 36, I = 1 ---------------------
M = 36
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.63956e02,
        0.90185e02,
        0.11642e03,
        0.14265e03,
        0.16889e03,
        0.19513e03,
        0.22138e03,
        0.24763e03,
        0.27388e03,
        0.30013e03,
        0.32639e03,
        0.35266e03,
        0.37894e03,
        0.40523e03,
        0.43155e03,
        0.45790e03,
        0.48429e03,
        0.51074e03,
        0.53725e03,
        0.56383e03,
        0.59052e03,
        0.61731e03,
        0.64422e03,
        0.67127e03,
        0.69846e03,
        0.72582e03,
        0.75335e03,
        0.78108e03,
        0.80901e03,
        0.83715e03,
        0.86552e03,
        0.89413e03,
        0.92298e03,
        0.95208e03,
        0.98144e03,
        0.10111e04,
        0.10410e04,
        0.10712e04,
        0.11017e04,
        0.11325e04,
        0.11636e04,
        0.11950e04,
        0.12268e04,
        0.12588e04,
        0.12912e04,
        0.13239e04,
        0.13570e04,
        0.13903e04,
        0.14241e04,
        0.14581e04,
        0.14926e04,
        0.15273e04,
        0.15624e04,
        0.15979e04,
        0.16337e04,
        0.16699e04,
        0.17065e04,
        0.17434e04,
        0.17806e04,
        0.18183e04,
        0.18563e04,
        0.18947e04,
        0.19334e04,
        0.19725e04,
        0.20120e04,
        0.20519e04,
        0.20921e04,
        0.21327e04,
        0.21737e04,
        0.22151e04,
        0.22568e04,
        0.22990e04,
        0.23415e04,
        0.23844e04,
        0.24276e04,
        0.24713e04,
        0.25153e04,
        0.25598e04,
        0.26046e04,
        0.26497e04,
        0.26953e04,
        0.27413e04,
        0.27876e04,
        0.28343e04,
        0.28815e04,
        0.29290e04,
        0.29769e04,
        0.30251e04,
        0.30738e04,
        0.31229e04,
        0.31723e04,
        0.32222e04,
        0.32724e04,
        0.33230e04,
        0.33740e04,
        0.34254e04,
        0.34772e04,
        0.35294e04,
        0.35819e04,
        0.36349e04,
        0.36883e04,
        0.37420e04,
        0.37961e04,
        0.38507e04,
        0.39056e04,
        0.39609e04,
        0.40166e04,
        0.40727e04,
        0.41292e04,
        0.41861e04,
        0.42434e04,
        0.43010e04,
        0.43591e04,
        0.44176e04,
        0.44764e04,
        0.45357e04,
        0.45953e04,
        0.46554e04,
        0.47158e04,
    ]
)


#  --------------- HOBr 169: M = 37, I = 1 ---------------------
M = 37
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.24445e04,
        0.41206e04,
        0.60683e04,
        0.82610e04,
        0.10689e05,
        0.13352e05,
        0.16261e05,
        0.19427e05,
        0.22867e05,
        0.26600e05,
        0.30643e05,
        0.35018e05,
        0.39745e05,
        0.44844e05,
        0.50338e05,
        0.56249e05,
        0.62599e05,
        0.69410e05,
        0.76706e05,
        0.84509e05,
        0.92845e05,
        0.10174e06,
        0.11121e06,
        0.12128e06,
        0.13199e06,
        0.14335e06,
        0.15540e06,
        0.16815e06,
        0.18165e06,
        0.19591e06,
        0.21096e06,
        0.22684e06,
        0.24358e06,
        0.26120e06,
        0.27974e06,
        0.29922e06,
        0.31969e06,
        0.34118e06,
        0.36372e06,
        0.38735e06,
        0.41210e06,
        0.43800e06,
        0.46511e06,
        0.49345e06,
        0.52307e06,
        0.55400e06,
        0.58628e06,
        0.61997e06,
        0.65509e06,
        0.69170e06,
        0.72984e06,
        0.76954e06,
        0.81087e06,
        0.85386e06,
        0.89856e06,
        0.94502e06,
        0.99329e06,
        0.10434e07,
        0.10955e07,
        0.11495e07,
        0.12055e07,
        0.12636e07,
        0.13238e07,
        0.13862e07,
        0.14508e07,
        0.15177e07,
        0.15870e07,
        0.16587e07,
        0.17328e07,
        0.18095e07,
        0.18888e07,
        0.19707e07,
        0.20554e07,
        0.21428e07,
        0.22331e07,
        0.23263e07,
        0.24225e07,
        0.25217e07,
        0.26241e07,
        0.27296e07,
        0.28385e07,
        0.29506e07,
        0.30662e07,
        0.31853e07,
        0.33079e07,
        0.34341e07,
        0.35641e07,
        0.36979e07,
        0.38355e07,
        0.39771e07,
        0.41228e07,
        0.42725e07,
        0.44265e07,
        0.45848e07,
        0.47474e07,
        0.49145e07,
        0.50862e07,
        0.52624e07,
        0.54435e07,
        0.56293e07,
        0.58201e07,
        0.60159e07,
        0.62168e07,
        0.64229e07,
        0.66343e07,
        0.68511e07,
        0.70734e07,
        0.73013e07,
        0.75349e07,
        0.77742e07,
        0.80196e07,
        0.82709e07,
        0.85283e07,
        0.87920e07,
        0.90620e07,
        0.93385e07,
        0.96215e07,
        0.99112e07,
        0.10208e08,
    ]
)


#  --------------- HOBr 161: M = 37, I = 2 ---------------------
M = 37
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(8.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.24350e04,
        0.41047e04,
        0.60448e04,
        0.82291e04,
        0.10648e05,
        0.13301e05,
        0.16200e05,
        0.19355e05,
        0.22784e05,
        0.26504e05,
        0.30534e05,
        0.34895e05,
        0.39607e05,
        0.44691e05,
        0.50169e05,
        0.56063e05,
        0.62394e05,
        0.69186e05,
        0.76461e05,
        0.84243e05,
        0.92555e05,
        0.10142e06,
        0.11087e06,
        0.12091e06,
        0.13159e06,
        0.14292e06,
        0.15494e06,
        0.16766e06,
        0.18112e06,
        0.19534e06,
        0.21036e06,
        0.22620e06,
        0.24289e06,
        0.26047e06,
        0.27896e06,
        0.29840e06,
        0.31882e06,
        0.34025e06,
        0.36274e06,
        0.38630e06,
        0.41099e06,
        0.43683e06,
        0.46387e06,
        0.49215e06,
        0.52169e06,
        0.55255e06,
        0.58475e06,
        0.61836e06,
        0.65340e06,
        0.68992e06,
        0.72796e06,
        0.76757e06,
        0.80880e06,
        0.85169e06,
        0.89628e06,
        0.94263e06,
        0.99079e06,
        0.10408e07,
        0.10927e07,
        0.11466e07,
        0.12025e07,
        0.12605e07,
        0.13205e07,
        0.13828e07,
        0.14472e07,
        0.15140e07,
        0.15831e07,
        0.16546e07,
        0.17286e07,
        0.18051e07,
        0.18842e07,
        0.19660e07,
        0.20504e07,
        0.21377e07,
        0.22277e07,
        0.23207e07,
        0.24167e07,
        0.25157e07,
        0.26178e07,
        0.27231e07,
        0.28317e07,
        0.29436e07,
        0.30589e07,
        0.31777e07,
        0.33001e07,
        0.34260e07,
        0.35557e07,
        0.36892e07,
        0.38265e07,
        0.39678e07,
        0.41131e07,
        0.42626e07,
        0.44162e07,
        0.45741e07,
        0.47364e07,
        0.49031e07,
        0.50744e07,
        0.52503e07,
        0.54309e07,
        0.56164e07,
        0.58067e07,
        0.60021e07,
        0.62025e07,
        0.64081e07,
        0.66191e07,
        0.68354e07,
        0.70572e07,
        0.72846e07,
        0.75177e07,
        0.77565e07,
        0.80013e07,
        0.82521e07,
        0.85090e07,
        0.87721e07,
        0.90415e07,
        0.93173e07,
        0.95997e07,
        0.98888e07,
        0.10185e08,
    ]
)


#  --------------- C2H4 221: M = 38, I = 1 ---------------------
M = 38
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.95843e03,
        0.16137e04,
        0.23744e04,
        0.32285e04,
        0.41694e04,
        0.51963e04,
        0.63143e04,
        0.75337e04,
        0.88702e04,
        0.10344e05,
        0.11978e05,
        0.13802e05,
        0.15846e05,
        0.18145e05,
        0.20740e05,
        0.23675e05,
        0.27000e05,
        0.30770e05,
        0.35048e05,
        0.39905e05,
        0.45420e05,
        0.51680e05,
        0.58786e05,
        0.66850e05,
        0.75997e05,
        0.86369e05,
        0.98123e05,
        0.11144e06,
        0.12651e06,
        0.14356e06,
        0.16284e06,
        0.18463e06,
        0.20923e06,
        0.23699e06,
        0.26831e06,
        0.30360e06,
        0.34334e06,
        0.38808e06,
        0.43840e06,
        0.49495e06,
        0.55847e06,
        0.62976e06,
        0.70973e06,
        0.79935e06,
        0.89973e06,
        0.10121e07,
        0.11378e07,
        0.12782e07,
        0.14351e07,
        0.16102e07,
        0.18055e07,
        0.20231e07,
        0.22656e07,
        0.25354e07,
        0.28356e07,
        0.31692e07,
        0.35398e07,
        0.39511e07,
        0.44074e07,
        0.49132e07,
        0.54736e07,
        0.60940e07,
        0.67803e07,
        0.75392e07,
        0.83776e07,
        0.93035e07,
        0.10325e08,
        0.11452e08,
        0.12694e08,
        0.14062e08,
        0.15567e08,
        0.17224e08,
        0.19045e08,
        0.21046e08,
        0.23243e08,
        0.25655e08,
        0.28300e08,
        0.31200e08,
        0.34377e08,
        0.37856e08,
        0.41662e08,
        0.45826e08,
        0.50378e08,
        0.55351e08,
        0.60781e08,
        0.66707e08,
        0.73172e08,
        0.80219e08,
        0.87899e08,
        0.96262e08,
        0.10537e09,
        0.11527e09,
        0.12604e09,
        0.13775e09,
        0.15047e09,
        0.16428e09,
        0.17927e09,
        0.19553e09,
        0.21316e09,
        0.23226e09,
        0.25296e09,
        0.27537e09,
        0.29963e09,
        0.32587e09,
        0.35425e09,
        0.38492e09,
        0.41805e09,
        0.45383e09,
        0.49246e09,
        0.53413e09,
        0.57908e09,
        0.62754e09,
        0.67977e09,
        0.73602e09,
        0.79660e09,
        0.86179e09,
        0.93194e09,
        0.10074e10,
        0.10885e10,
    ]
)


#  --------------- C2H4 231: M = 38, I = 2 ---------------------
M = 38
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.39228e04,
        0.66051e04,
        0.97190e04,
        0.13215e05,
        0.17066e05,
        0.21270e05,
        0.25846e05,
        0.30838e05,
        0.36309e05,
        0.42341e05,
        0.49032e05,
        0.56496e05,
        0.64862e05,
        0.74275e05,
        0.84897e05,
        0.96912e05,
        0.11052e06,
        0.12595e06,
        0.14347e06,
        0.16335e06,
        0.18592e06,
        0.21155e06,
        0.24064e06,
        0.27365e06,
        0.31109e06,
        0.35354e06,
        0.40166e06,
        0.45615e06,
        0.51785e06,
        0.58765e06,
        0.66657e06,
        0.75575e06,
        0.85646e06,
        0.97011e06,
        0.10983e07,
        0.12428e07,
        0.14055e07,
        0.15886e07,
        0.17945e07,
        0.20260e07,
        0.22861e07,
        0.25779e07,
        0.29052e07,
        0.32721e07,
        0.36830e07,
        0.41429e07,
        0.46573e07,
        0.52323e07,
        0.58744e07,
        0.65912e07,
        0.73906e07,
        0.82816e07,
        0.92740e07,
        0.10379e08,
        0.11607e08,
        0.12973e08,
        0.14490e08,
        0.16174e08,
        0.18042e08,
        0.20112e08,
        0.22406e08,
        0.24945e08,
        0.27755e08,
        0.30861e08,
        0.34293e08,
        0.38083e08,
        0.42266e08,
        0.46878e08,
        0.51961e08,
        0.57560e08,
        0.63724e08,
        0.70504e08,
        0.77959e08,
        0.86150e08,
        0.95145e08,
        0.10502e09,
        0.11585e09,
        0.12772e09,
        0.14072e09,
        0.15496e09,
        0.17054e09,
        0.18759e09,
        0.20622e09,
        0.22658e09,
        0.24880e09,
        0.27306e09,
        0.29952e09,
        0.32837e09,
        0.35981e09,
        0.39404e09,
        0.43131e09,
        0.47186e09,
        0.51595e09,
        0.56387e09,
        0.61594e09,
        0.67247e09,
        0.73382e09,
        0.80038e09,
        0.87255e09,
        0.95076e09,
        0.10355e10,
        0.11272e10,
        0.12265e10,
        0.13339e10,
        0.14501e10,
        0.15756e10,
        0.17113e10,
        0.18577e10,
        0.20159e10,
        0.21865e10,
        0.23705e10,
        0.25688e10,
        0.27826e10,
        0.30129e10,
        0.32608e10,
        0.35277e10,
        0.38149e10,
        0.41237e10,
        0.44557e10,
    ]
)


#  --------------- CH3OH 2161: M = 39, I = 1 --------------------- not in TIPS-2011
M = 39
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


#  --------------- CH3Br 219: M = 40, I = 1 ---------------------
M = 40
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.70299e04,
        0.11847e05,
        0.17442e05,
        0.23741e05,
        0.30723e05,
        0.38408e05,
        0.46851e05,
        0.56138e05,
        0.66375e05,
        0.77692e05,
        0.90239e05,
        0.10418e06,
        0.11972e06,
        0.13704e06,
        0.15639e06,
        0.17801e06,
        0.20218e06,
        0.22920e06,
        0.25940e06,
        0.29316e06,
        0.33087e06,
        0.37296e06,
        0.41992e06,
        0.47229e06,
        0.53062e06,
        0.59557e06,
        0.66781e06,
        0.74812e06,
        0.83731e06,
        0.93629e06,
        0.10461e07,
        0.11677e07,
        0.13023e07,
        0.14513e07,
        0.16159e07,
        0.17978e07,
        0.19985e07,
        0.22199e07,
        0.24638e07,
        0.27324e07,
        0.30280e07,
        0.33529e07,
        0.37099e07,
        0.41019e07,
        0.45319e07,
        0.50034e07,
        0.55199e07,
        0.60853e07,
        0.67039e07,
        0.73801e07,
        0.81189e07,
        0.89255e07,
        0.98056e07,
        0.10765e08,
        0.11811e08,
        0.12949e08,
        0.14188e08,
        0.15535e08,
        0.17000e08,
        0.18590e08,
        0.20317e08,
        0.22190e08,
        0.24220e08,
        0.26421e08,
        0.28804e08,
        0.31383e08,
        0.34173e08,
        0.37189e08,
        0.40448e08,
        0.43967e08,
        0.47765e08,
        0.51862e08,
        0.56280e08,
        0.61040e08,
        0.66167e08,
        0.71686e08,
        0.77624e08,
        0.84009e08,
        0.90873e08,
        0.98247e08,
        0.10616e09,
        0.11466e09,
        0.12378e09,
        0.13356e09,
        0.14403e09,
        0.15526e09,
        0.16728e09,
        0.18014e09,
        0.19391e09,
        0.20863e09,
        0.22436e09,
        0.24117e09,
        0.25913e09,
        0.27830e09,
        0.29875e09,
        0.32057e09,
        0.34384e09,
        0.36864e09,
        0.39506e09,
        0.42320e09,
        0.45316e09,
        0.48504e09,
        0.51896e09,
        0.55502e09,
        0.59336e09,
        0.63410e09,
        0.67738e09,
        0.72334e09,
        0.77212e09,
        0.82388e09,
        0.87879e09,
        0.93701e09,
        0.99873e09,
        0.10641e10,
        0.11334e10,
        0.12068e10,
        0.12845e10,
        0.13667e10,
        0.14536e10,
    ]
)


#  --------------- CH3Br 211: M = 40, I = 2 ---------------------
M = 40
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.70566e04,
        0.11892e05,
        0.17508e05,
        0.23832e05,
        0.30841e05,
        0.38557e05,
        0.47036e05,
        0.56362e05,
        0.66644e05,
        0.78011e05,
        0.90615e05,
        0.10462e06,
        0.12023e06,
        0.13763e06,
        0.15707e06,
        0.17880e06,
        0.20308e06,
        0.23023e06,
        0.26059e06,
        0.29451e06,
        0.33240e06,
        0.37471e06,
        0.42191e06,
        0.47453e06,
        0.53316e06,
        0.59843e06,
        0.67104e06,
        0.75176e06,
        0.84141e06,
        0.94090e06,
        0.10512e07,
        0.11735e07,
        0.13088e07,
        0.14585e07,
        0.16241e07,
        0.18069e07,
        0.20086e07,
        0.22312e07,
        0.24764e07,
        0.27464e07,
        0.30435e07,
        0.33702e07,
        0.37291e07,
        0.41231e07,
        0.45554e07,
        0.50294e07,
        0.55486e07,
        0.61171e07,
        0.67389e07,
        0.74188e07,
        0.81616e07,
        0.89725e07,
        0.98573e07,
        0.10822e08,
        0.11873e08,
        0.13018e08,
        0.14263e08,
        0.15618e08,
        0.17090e08,
        0.18689e08,
        0.20425e08,
        0.22308e08,
        0.24350e08,
        0.26563e08,
        0.28959e08,
        0.31552e08,
        0.34357e08,
        0.37389e08,
        0.40666e08,
        0.44204e08,
        0.48023e08,
        0.52143e08,
        0.56585e08,
        0.61371e08,
        0.66526e08,
        0.72076e08,
        0.78046e08,
        0.84467e08,
        0.91369e08,
        0.98783e08,
        0.10674e09,
        0.11529e09,
        0.12446e09,
        0.13429e09,
        0.14482e09,
        0.15611e09,
        0.16820e09,
        0.18113e09,
        0.19497e09,
        0.20978e09,
        0.22560e09,
        0.24250e09,
        0.26056e09,
        0.27983e09,
        0.30040e09,
        0.32234e09,
        0.34574e09,
        0.37068e09,
        0.39725e09,
        0.42555e09,
        0.45567e09,
        0.48773e09,
        0.52184e09,
        0.55811e09,
        0.59666e09,
        0.63763e09,
        0.68115e09,
        0.72736e09,
        0.77642e09,
        0.82847e09,
        0.88368e09,
        0.94223e09,
        0.10043e10,
        0.10701e10,
        0.11397e10,
        0.12135e10,
        0.12916e10,
        0.13743e10,
        0.14618e10,
    ]
)


#  --------------- CH3CN 2124: M = 41, I = 1 ---------------------
M = 41
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(3.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.54361e04,
        0.91953e04,
        0.13708e05,
        0.19097e05,
        0.25531e05,
        0.33206e05,
        0.42337e05,
        0.53173e05,
        0.66002e05,
        0.81163e05,
        0.99053e05,
        0.12014e06,
        0.14496e06,
        0.17414e06,
        0.20843e06,
        0.24866e06,
        0.29580e06,
        0.35099e06,
        0.41551e06,
        0.49085e06,
        0.57871e06,
        0.68104e06,
        0.80008e06,
        0.93836e06,
        0.10988e07,
        0.12848e07,
        0.14999e07,
        0.17487e07,
        0.20359e07,
        0.23670e07,
        0.27484e07,
        0.31871e07,
        0.36912e07,
        0.42697e07,
        0.49328e07,
        0.56921e07,
        0.65605e07,
        0.75526e07,
        0.86847e07,
        0.99753e07,
        0.11445e08,
        0.13116e08,
        0.15016e08,
        0.17172e08,
        0.19617e08,
        0.22386e08,
        0.25520e08,
        0.29063e08,
        0.33064e08,
        0.37578e08,
        0.42667e08,
        0.48397e08,
        0.54844e08,
        0.62090e08,
        0.70228e08,
        0.79358e08,
        0.89592e08,
        0.10105e09,
        0.11388e09,
        0.12822e09,
        0.14424e09,
        0.16212e09,
        0.18205e09,
        0.20427e09,
        0.22900e09,
        0.25652e09,
        0.28710e09,
        0.32107e09,
        0.35877e09,
        0.40059e09,
        0.44692e09,
        0.49822e09,
        0.55500e09,
        0.61777e09,
        0.68712e09,
        0.76370e09,
        0.84819e09,
        0.94135e09,
        0.10440e10,
        0.11570e10,
        0.12814e10,
        0.14181e10,
        0.15684e10,
        0.17334e10,
        0.19145e10,
        0.21131e10,
        0.23308e10,
        0.25693e10,
        0.28304e10,
        0.31161e10,
        0.34285e10,
        0.37698e10,
        0.41426e10,
        0.45496e10,
        0.49935e10,
        0.54776e10,
        0.60051e10,
        0.65796e10,
        0.72049e10,
        0.78853e10,
        0.86251e10,
        0.94291e10,
        0.10303e11,
        0.11251e11,
        0.12280e11,
        0.13396e11,
        0.14606e11,
        0.15916e11,
        0.17336e11,
        0.18873e11,
        0.20536e11,
        0.22334e11,
        0.24278e11,
        0.26379e11,
        0.28647e11,
        0.31096e11,
        0.33739e11,
        0.36589e11,
        0.39661e11,
    ]
)


#  --------------- CH3CN 2134: M = 41, I = 2 --------------------- not in HITRAN-2012
M = 41
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.10906e05,
        0.18458e05,
        0.27552e05,
        0.38455e05,
        0.51523e05,
        0.67161e05,
        0.85818e05,
        0.10801e06,
        0.13434e06,
        0.16550e06,
        0.20234e06,
        0.24581e06,
        0.29705e06,
        0.35737e06,
        0.42831e06,
        0.51162e06,
        0.60936e06,
        0.72387e06,
        0.85786e06,
        0.10145e07,
        0.11972e07,
        0.14102e07,
        0.16582e07,
        0.19465e07,
        0.22813e07,
        0.26695e07,
        0.31190e07,
        0.36390e07,
        0.42397e07,
        0.49328e07,
        0.57314e07,
        0.66507e07,
        0.77076e07,
        0.89211e07,
        0.10313e08,
        0.11907e08,
        0.13732e08,
        0.15817e08,
        0.18198e08,
        0.20914e08,
        0.24007e08,
        0.27527e08,
        0.31529e08,
        0.36073e08,
        0.41228e08,
        0.47070e08,
        0.53683e08,
        0.61162e08,
        0.69612e08,
        0.79149e08,
        0.89903e08,
        0.10202e09,
        0.11565e09,
        0.13098e09,
        0.14820e09,
        0.16753e09,
        0.18921e09,
        0.21349e09,
        0.24066e09,
        0.27106e09,
        0.30502e09,
        0.34293e09,
        0.38523e09,
        0.43237e09,
        0.48486e09,
        0.54328e09,
        0.60823e09,
        0.68039e09,
        0.76049e09,
        0.84935e09,
        0.94784e09,
        0.10569e10,
        0.11777e10,
        0.13112e10,
        0.14588e10,
        0.16217e10,
        0.18016e10,
        0.19999e10,
        0.22185e10,
        0.24592e10,
        0.27241e10,
        0.30155e10,
        0.33357e10,
        0.36875e10,
        0.40736e10,
        0.44971e10,
        0.49615e10,
        0.54702e10,
        0.60273e10,
        0.66369e10,
        0.73035e10,
        0.80322e10,
        0.88282e10,
        0.96972e10,
        0.10645e11,
        0.11679e11,
        0.12806e11,
        0.14034e11,
        0.15370e11,
        0.16824e11,
        0.18406e11,
        0.20125e11,
        0.21992e11,
        0.24020e11,
        0.26221e11,
        0.28608e11,
        0.31197e11,
        0.34002e11,
        0.37040e11,
        0.40330e11,
        0.43889e11,
        0.47739e11,
        0.51902e11,
        0.56400e11,
        0.61259e11,
        0.66504e11,
        0.72165e11,
        0.78272e11,
        0.84856e11,
    ]
)


#  --------------- CH3CN 3124: M = 41, I = 3 --------------------- not in HITRAN-2012
M = 41
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11223e05,
        0.18985e05,
        0.28307e05,
        0.39441e05,
        0.52744e05,
        0.68620e05,
        0.87523e05,
        0.10997e06,
        0.13658e06,
        0.16806e06,
        0.20524e06,
        0.24910e06,
        0.30080e06,
        0.36165e06,
        0.43319e06,
        0.51722e06,
        0.61579e06,
        0.73127e06,
        0.86640e06,
        0.10243e07,
        0.12086e07,
        0.14234e07,
        0.16735e07,
        0.19642e07,
        0.23017e07,
        0.26931e07,
        0.31464e07,
        0.36706e07,
        0.42762e07,
        0.49749e07,
        0.57801e07,
        0.67069e07,
        0.77722e07,
        0.89955e07,
        0.10398e08,
        0.12006e08,
        0.13845e08,
        0.15947e08,
        0.18346e08,
        0.21083e08,
        0.24201e08,
        0.27748e08,
        0.31781e08,
        0.36361e08,
        0.41556e08,
        0.47442e08,
        0.54106e08,
        0.61643e08,
        0.70157e08,
        0.79767e08,
        0.90604e08,
        0.10281e09,
        0.11655e09,
        0.13199e09,
        0.14935e09,
        0.16882e09,
        0.19065e09,
        0.21512e09,
        0.24250e09,
        0.27312e09,
        0.30733e09,
        0.34553e09,
        0.38814e09,
        0.43562e09,
        0.48851e09,
        0.54736e09,
        0.61279e09,
        0.68548e09,
        0.76617e09,
        0.85568e09,
        0.95489e09,
        0.10648e10,
        0.11864e10,
        0.13209e10,
        0.14695e10,
        0.16337e10,
        0.18148e10,
        0.20146e10,
        0.22348e10,
        0.24772e10,
        0.27441e10,
        0.30375e10,
        0.33601e10,
        0.37143e10,
        0.41032e10,
        0.45298e10,
        0.49975e10,
        0.55099e10,
        0.60709e10,
        0.66849e10,
        0.73563e10,
        0.80902e10,
        0.88918e10,
        0.97670e10,
        0.10722e11,
        0.11763e11,
        0.12898e11,
        0.14134e11,
        0.15480e11,
        0.16945e11,
        0.18537e11,
        0.20269e11,
        0.22149e11,
        0.24191e11,
        0.26408e11,
        0.28812e11,
        0.31419e11,
        0.34244e11,
        0.37303e11,
        0.40616e11,
        0.44201e11,
        0.48078e11,
        0.52269e11,
        0.56799e11,
        0.61692e11,
        0.66974e11,
        0.72675e11,
        0.78824e11,
        0.85454e11,
    ]
)


#  --------------- CH3CN 3134: M = 41, I = 4 --------------------- not in HITRAN-2012
M = 41
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.22522e05,
        0.38117e05,
        0.56899e05,
        0.79412e05,
        0.10640e06,
        0.13870e06,
        0.17726e06,
        0.22314e06,
        0.27761e06,
        0.34214e06,
        0.41847e06,
        0.50862e06,
        0.61497e06,
        0.74028e06,
        0.88774e06,
        0.10611e07,
        0.12646e07,
        0.15031e07,
        0.17825e07,
        0.21092e07,
        0.24908e07,
        0.29358e07,
        0.34541e07,
        0.40571e07,
        0.47576e07,
        0.55703e07,
        0.65120e07,
        0.76018e07,
        0.88614e07,
        0.10315e08,
        0.11992e08,
        0.13922e08,
        0.16142e08,
        0.18693e08,
        0.21619e08,
        0.24973e08,
        0.28812e08,
        0.33202e08,
        0.38216e08,
        0.43936e08,
        0.50455e08,
        0.57876e08,
        0.66315e08,
        0.75901e08,
        0.86779e08,
        0.99110e08,
        0.11307e09,
        0.12887e09,
        0.14672e09,
        0.16688e09,
        0.18961e09,
        0.21523e09,
        0.24407e09,
        0.27651e09,
        0.31295e09,
        0.35387e09,
        0.39975e09,
        0.45118e09,
        0.50875e09,
        0.57315e09,
        0.64512e09,
        0.72549e09,
        0.81517e09,
        0.91514e09,
        0.10265e10,
        0.11504e10,
        0.12883e10,
        0.14414e10,
        0.16115e10,
        0.18001e10,
        0.20093e10,
        0.22410e10,
        0.24975e10,
        0.27812e10,
        0.30948e10,
        0.34412e10,
        0.38235e10,
        0.42452e10,
        0.47101e10,
        0.52220e10,
        0.57856e10,
        0.64055e10,
        0.70869e10,
        0.78355e10,
        0.86574e10,
        0.95591e10,
        0.10548e11,
        0.11631e11,
        0.12817e11,
        0.14116e11,
        0.15536e11,
        0.17088e11,
        0.18785e11,
        0.20636e11,
        0.22657e11,
        0.24861e11,
        0.27264e11,
        0.29881e11,
        0.32730e11,
        0.35832e11,
        0.39205e11,
        0.42871e11,
        0.46855e11,
        0.51182e11,
        0.55878e11,
        0.60973e11,
        0.66497e11,
        0.72484e11,
        0.78970e11,
        0.85992e11,
        0.93592e11,
        0.10181e12,
        0.11070e12,
        0.12031e12,
        0.13069e12,
        0.14189e12,
        0.15398e12,
        0.16703e12,
        0.18110e12,
    ]
)


#  --------------- CF4 29: M = 42, I = 1 ---------------------
M = 42
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.76233e04,
        0.12867e05,
        0.19059e05,
        0.26316e05,
        0.34895e05,
        0.45145e05,
        0.57461e05,
        0.72259e05,
        0.89950e05,
        0.11092e06,
        0.13550e06,
        0.16399e06,
        0.19658e06,
        0.23341e06,
        0.27457e06,
        0.32004e06,
        0.36978e06,
        0.42369e06,
        0.48161e06,
        0.54338e06,
        0.60880e06,
        0.67764e06,
        0.55684e07,
        0.71250e07,
        0.90615e07,
        0.11458e08,
        0.14407e08,
        0.18021e08,
        0.22428e08,
        0.27778e08,
        0.34247e08,
        0.42038e08,
        0.51386e08,
        0.62559e08,
        0.75869e08,
        0.91670e08,
        0.11037e09,
        0.13242e09,
        0.15836e09,
        0.18878e09,
        0.22436e09,
        0.26584e09,
        0.31410e09,
        0.37008e09,
        0.43488e09,
        0.50970e09,
        0.59589e09,
        0.69496e09,
        0.80858e09,
        0.93863e09,
        0.10872e10,
        0.12565e10,
        0.14491e10,
        0.16679e10,
        0.19159e10,
        0.21966e10,
        0.25136e10,
        0.28711e10,
        0.32740e10,
        0.37260e10,
        0.42340e10,
        0.48030e10,
        0.54400e10,
        0.61520e10,
        0.69470e10,
        0.78320e10,
        0.88170e10,
        0.99120e10,
        0.11130e11,
        0.12470e11,
        0.13970e11,
        0.15620e11,
        0.17440e11,
        0.19450e11,
        0.21670e11,
        0.24100e11,
        0.26790e11,
        0.29730e11,
        0.33000e11,
        0.36500e11,
        0.40400e11,
        0.44600e11,
        0.49300e11,
        0.54300e11,
        0.59800e11,
        0.65800e11,
        0.72400e11,
        0.79500e11,
        0.87200e11,
        0.95500e11,
        0.10500e12,
        0.11400e12,
        0.12500e12,
        0.13600e12,
        0.14900e12,
        0.16200e12,
        0.17700e12,
        0.19200e12,
        0.21000e12,
        0.23000e12,
        0.25000e12,
        0.27000e12,
        0.29000e12,
        0.31000e12,
        0.34000e12,
        0.36000e12,
        0.39000e12,
        0.42000e12,
        0.46000e12,
        0.49000e12,
        0.53000e12,
        0.57000e12,
        0.61000e12,
        0.66000e12,
        0.70000e12,
        0.75000e12,
        0.81000e12,
        0.86000e12,
        0.93000e12,
    ]
)


#  --------------- C4H2 1221: M = 43, I = 1 ---------------------
M = 43
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.57628e03,
        0.84874e03,
        0.11789e04,
        0.15952e04,
        0.21317e04,
        0.28324e04,
        0.37543e04,
        0.49705e04,
        0.65754e04,
        0.86894e04,
        0.11466e05,
        0.15099e05,
        0.19834e05,
        0.25980e05,
        0.33920e05,
        0.44132e05,
        0.57210e05,
        0.73884e05,
        0.95049e05,
        0.12180e06,
        0.15548e06,
        0.19771e06,
        0.25045e06,
        0.31606e06,
        0.39739e06,
        0.49786e06,
        0.62152e06,
        0.77324e06,
        0.95878e06,
        0.11850e07,
        0.14599e07,
        0.17930e07,
        0.21956e07,
        0.26807e07,
        0.32637e07,
        0.39626e07,
        0.47983e07,
        0.57951e07,
        0.69813e07,
        0.83896e07,
        0.10058e08,
        0.12030e08,
        0.14356e08,
        0.17093e08,
        0.20309e08,
        0.24079e08,
        0.28491e08,
        0.33644e08,
        0.39651e08,
        0.46642e08,
        0.54764e08,
        0.64184e08,
        0.75091e08,
        0.87699e08,
        0.10225e09,
        0.11902e09,
        0.13832e09,
        0.16049e09,
        0.18593e09,
        0.21507e09,
        0.24841e09,
        0.28650e09,
        0.32996e09,
        0.37949e09,
        0.43586e09,
        0.49993e09,
        0.57266e09,
        0.65513e09,
        0.74852e09,
        0.85418e09,
        0.97356e09,
        0.11083e10,
        0.12602e10,
        0.14313e10,
        0.16238e10,
        0.18401e10,
        0.20829e10,
        0.23553e10,
        0.26605e10,
        0.30021e10,
        0.33841e10,
        0.38109e10,
        0.42874e10,
        0.48187e10,
        0.54107e10,
        0.60698e10,
        0.68029e10,
        0.76176e10,
        0.85223e10,
        0.95260e10,
        0.10639e11,
        0.11871e11,
        0.13236e11,
        0.14744e11,
        0.16412e11,
        0.18253e11,
        0.20285e11,
        0.22526e11,
        0.24995e11,
        0.27714e11,
        0.30705e11,
        0.33995e11,
        0.37609e11,
        0.41579e11,
        0.45934e11,
        0.50711e11,
        0.55947e11,
        0.61681e11,
        0.67957e11,
        0.74824e11,
        0.82330e11,
        0.90532e11,
        0.99487e11,
        0.10926e12,
        0.11992e12,
        0.13154e12,
        0.14420e12,
        0.15799e12,
        0.17299e12,
    ]
)


#  --------------- HC3N 12224: M = 44, I = 1 --------------------- 1224 in HITRAN, 12224 in TIPS
M = 44
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.16683e04,
        0.24538e04,
        0.33995e04,
        0.45769e04,
        0.60637e04,
        0.79533e04,
        0.10360e05,
        0.13422e05,
        0.17311e05,
        0.22232e05,
        0.28434e05,
        0.36215e05,
        0.45932e05,
        0.58011e05,
        0.72958e05,
        0.91370e05,
        0.11395e06,
        0.14153e06,
        0.17507e06,
        0.21570e06,
        0.26475e06,
        0.32372e06,
        0.39440e06,
        0.47881e06,
        0.57930e06,
        0.69856e06,
        0.83968e06,
        0.10062e07,
        0.12021e07,
        0.14320e07,
        0.17011e07,
        0.20153e07,
        0.23812e07,
        0.28065e07,
        0.32996e07,
        0.38701e07,
        0.45287e07,
        0.52876e07,
        0.61602e07,
        0.71616e07,
        0.83088e07,
        0.96206e07,
        0.11118e08,
        0.12824e08,
        0.14765e08,
        0.16969e08,
        0.19469e08,
        0.22299e08,
        0.25498e08,
        0.29110e08,
        0.33181e08,
        0.37763e08,
        0.42914e08,
        0.48697e08,
        0.55180e08,
        0.62440e08,
        0.70558e08,
        0.79627e08,
        0.89743e08,
        0.10102e09,
        0.11356e09,
        0.12752e09,
        0.14301e09,
        0.16020e09,
        0.17925e09,
        0.20035e09,
        0.22367e09,
        0.24945e09,
        0.27790e09,
        0.30928e09,
        0.34385e09,
        0.38191e09,
        0.42376e09,
        0.46975e09,
        0.52023e09,
        0.57562e09,
        0.63632e09,
        0.70279e09,
        0.77553e09,
        0.85506e09,
        0.94195e09,
        0.10368e10,
        0.11403e10,
        0.12531e10,
        0.13759e10,
        0.15097e10,
        0.16552e10,
        0.18133e10,
        0.19851e10,
        0.21715e10,
        0.23738e10,
        0.25931e10,
        0.28307e10,
        0.30879e10,
        0.33662e10,
        0.36672e10,
        0.39926e10,
        0.43439e10,
        0.47233e10,
        0.51325e10,
        0.55738e10,
        0.60493e10,
        0.65615e10,
        0.71129e10,
        0.77061e10,
        0.83441e10,
        0.90298e10,
        0.97664e10,
        0.10557e11,
        0.11406e11,
        0.12317e11,
        0.13293e11,
        0.14339e11,
        0.15459e11,
        0.16659e11,
        0.17942e11,
        0.19316e11,
        0.20784e11,
        0.22353e11,
    ]
)


#  --------------- HC3N 12234: M = 44, I = 2 --------------------- see above
M = 44
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.33507e04,
        0.49290e04,
        0.68293e04,
        0.91959e04,
        0.12185e05,
        0.15986e05,
        0.20828e05,
        0.26993e05,
        0.34824e05,
        0.44739e05,
        0.57239e05,
        0.72931e05,
        0.92539e05,
        0.11693e06,
        0.14713e06,
        0.18435e06,
        0.23004e06,
        0.28588e06,
        0.35384e06,
        0.43625e06,
        0.53580e06,
        0.65562e06,
        0.79933e06,
        0.97115e06,
        0.11759e07,
        0.14191e07,
        0.17073e07,
        0.20476e07,
        0.24486e07,
        0.29196e07,
        0.34716e07,
        0.41169e07,
        0.48696e07,
        0.57453e07,
        0.67621e07,
        0.79402e07,
        0.93022e07,
        0.10874e08,
        0.12684e08,
        0.14764e08,
        0.17150e08,
        0.19884e08,
        0.23009e08,
        0.26576e08,
        0.30641e08,
        0.35265e08,
        0.40518e08,
        0.46477e08,
        0.53225e08,
        0.60856e08,
        0.69475e08,
        0.79195e08,
        0.90143e08,
        0.10246e09,
        0.11629e09,
        0.13182e09,
        0.14921e09,
        0.16868e09,
        0.19045e09,
        0.21477e09,
        0.24189e09,
        0.27211e09,
        0.30575e09,
        0.34316e09,
        0.38471e09,
        0.43083e09,
        0.48196e09,
        0.53858e09,
        0.60125e09,
        0.67052e09,
        0.74704e09,
        0.83148e09,
        0.92459e09,
        0.10272e10,
        0.11401e10,
        0.12643e10,
        0.14007e10,
        0.15506e10,
        0.17150e10,
        0.18953e10,
        0.20928e10,
        0.23090e10,
        0.25456e10,
        0.28042e10,
        0.30867e10,
        0.33951e10,
        0.37316e10,
        0.40984e10,
        0.44981e10,
        0.49332e10,
        0.54067e10,
        0.59216e10,
        0.64812e10,
        0.70890e10,
        0.77488e10,
        0.84645e10,
        0.92405e10,
        0.10081e11,
        0.10992e11,
        0.11978e11,
        0.13044e11,
        0.14197e11,
        0.15443e11,
        0.16789e11,
        0.18243e11,
        0.19810e11,
        0.21501e11,
        0.23324e11,
        0.25288e11,
        0.27403e11,
        0.29680e11,
        0.32130e11,
        0.34764e11,
        0.37596e11,
        0.40639e11,
        0.43907e11,
        0.47416e11,
        0.51181e11,
        0.55220e11,
    ]
)


#  --------------- HC3N 12324: M = 44, I = 3 --------------------- see above
M = 44
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.33506e04,
        0.49280e04,
        0.68267e04,
        0.91901e04,
        0.12174e05,
        0.15966e05,
        0.20793e05,
        0.26936e05,
        0.34734e05,
        0.44598e05,
        0.57026e05,
        0.72612e05,
        0.92071e05,
        0.11625e06,
        0.14616e06,
        0.18298e06,
        0.22813e06,
        0.28323e06,
        0.35022e06,
        0.43133e06,
        0.52918e06,
        0.64677e06,
        0.78761e06,
        0.95571e06,
        0.11557e07,
        0.13929e07,
        0.16734e07,
        0.20041e07,
        0.23929e07,
        0.28488e07,
        0.33820e07,
        0.40040e07,
        0.47280e07,
        0.55686e07,
        0.65423e07,
        0.76678e07,
        0.89661e07,
        0.10460e08,
        0.12177e08,
        0.14145e08,
        0.16397e08,
        0.18970e08,
        0.21903e08,
        0.25242e08,
        0.29036e08,
        0.33339e08,
        0.38214e08,
        0.43726e08,
        0.49949e08,
        0.56965e08,
        0.64864e08,
        0.73743e08,
        0.83711e08,
        0.94886e08,
        0.10740e09,
        0.12139e09,
        0.13701e09,
        0.15443e09,
        0.17384e09,
        0.19543e09,
        0.21943e09,
        0.24607e09,
        0.27561e09,
        0.30832e09,
        0.34452e09,
        0.38453e09,
        0.42870e09,
        0.47742e09,
        0.53110e09,
        0.59020e09,
        0.65518e09,
        0.72659e09,
        0.80496e09,
        0.89092e09,
        0.98510e09,
        0.10882e10,
        0.12010e10,
        0.13242e10,
        0.14588e10,
        0.16056e10,
        0.17657e10,
        0.19401e10,
        0.21299e10,
        0.23363e10,
        0.25606e10,
        0.28043e10,
        0.30687e10,
        0.33553e10,
        0.36660e10,
        0.40024e10,
        0.43665e10,
        0.47601e10,
        0.51856e10,
        0.56450e10,
        0.61408e10,
        0.66756e10,
        0.72520e10,
        0.78729e10,
        0.85413e10,
        0.92604e10,
        0.10034e11,
        0.10864e11,
        0.11757e11,
        0.12714e11,
        0.13742e11,
        0.14843e11,
        0.16023e11,
        0.17287e11,
        0.18640e11,
        0.20087e11,
        0.21634e11,
        0.23288e11,
        0.25054e11,
        0.26939e11,
        0.28950e11,
        0.31096e11,
        0.33382e11,
        0.35819e11,
        0.38413e11,
    ]
)


#  --------------- HC3N 13224: M = 44, I = 4 --------------------- see above
M = 44
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(12.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.34439e04,
        0.50672e04,
        0.70230e04,
        0.94603e04,
        0.12542e05,
        0.16462e05,
        0.21461e05,
        0.27833e05,
        0.35935e05,
        0.46204e05,
        0.59168e05,
        0.75463e05,
        0.95854e05,
        0.12126e06,
        0.15276e06,
        0.19165e06,
        0.23947e06,
        0.29802e06,
        0.36943e06,
        0.45619e06,
        0.56121e06,
        0.68789e06,
        0.84018e06,
        0.10227e07,
        0.12407e07,
        0.15003e07,
        0.18086e07,
        0.21738e07,
        0.26052e07,
        0.31134e07,
        0.37106e07,
        0.44109e07,
        0.52300e07,
        0.61861e07,
        0.72996e07,
        0.85939e07,
        0.10095e08,
        0.11833e08,
        0.13841e08,
        0.16158e08,
        0.18825e08,
        0.21890e08,
        0.25407e08,
        0.29436e08,
        0.34045e08,
        0.39308e08,
        0.45309e08,
        0.52143e08,
        0.59912e08,
        0.68734e08,
        0.78737e08,
        0.90065e08,
        0.10288e09,
        0.11735e09,
        0.13367e09,
        0.15206e09,
        0.17277e09,
        0.19604e09,
        0.22217e09,
        0.25148e09,
        0.28432e09,
        0.32108e09,
        0.36218e09,
        0.40809e09,
        0.45932e09,
        0.51644e09,
        0.58004e09,
        0.65082e09,
        0.72950e09,
        0.81690e09,
        0.91388e09,
        0.10214e10,
        0.11405e10,
        0.12724e10,
        0.14182e10,
        0.15794e10,
        0.17573e10,
        0.19536e10,
        0.21701e10,
        0.24086e10,
        0.26711e10,
        0.29599e10,
        0.32774e10,
        0.36262e10,
        0.40090e10,
        0.44290e10,
        0.48895e10,
        0.53939e10,
        0.59462e10,
        0.65504e10,
        0.72111e10,
        0.79332e10,
        0.87217e10,
        0.95823e10,
        0.10521e11,
        0.11544e11,
        0.12659e11,
        0.13874e11,
        0.15195e11,
        0.16632e11,
        0.18194e11,
        0.19892e11,
        0.21735e11,
        0.23736e11,
        0.25907e11,
        0.28260e11,
        0.30810e11,
        0.33572e11,
        0.36563e11,
        0.39799e11,
        0.43299e11,
        0.47083e11,
        0.51172e11,
        0.55588e11,
        0.60355e11,
        0.65500e11,
        0.71049e11,
        0.77031e11,
        0.83478e11,
    ]
)


#  --------------- HC3N 12225: M = 44, I = 5 --------------------- see above
M = 44
I = 5
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.11455e04,
        0.16850e04,
        0.23345e04,
        0.31432e04,
        0.41647e04,
        0.54630e04,
        0.71168e04,
        0.92219e04,
        0.11895e05,
        0.15279e05,
        0.19545e05,
        0.24897e05,
        0.31584e05,
        0.39899e05,
        0.50190e05,
        0.62871e05,
        0.78428e05,
        0.97434e05,
        0.12056e06,
        0.14859e06,
        0.18243e06,
        0.22314e06,
        0.27194e06,
        0.33026e06,
        0.39972e06,
        0.48219e06,
        0.57983e06,
        0.69509e06,
        0.83077e06,
        0.99009e06,
        0.11767e07,
        0.13946e07,
        0.16487e07,
        0.19441e07,
        0.22868e07,
        0.26836e07,
        0.31420e07,
        0.36704e07,
        0.42786e07,
        0.49770e07,
        0.57776e07,
        0.66938e07,
        0.77404e07,
        0.89339e07,
        0.10293e08,
        0.11837e08,
        0.13590e08,
        0.15576e08,
        0.17823e08,
        0.20362e08,
        0.23227e08,
        0.26454e08,
        0.30085e08,
        0.34166e08,
        0.38745e08,
        0.43877e08,
        0.49622e08,
        0.56046e08,
        0.63219e08,
        0.71222e08,
        0.80138e08,
        0.90062e08,
        0.10110e09,
        0.11335e09,
        0.12695e09,
        0.14202e09,
        0.15870e09,
        0.17716e09,
        0.19756e09,
        0.22009e09,
        0.24493e09,
        0.27232e09,
        0.30247e09,
        0.33565e09,
        0.37211e09,
        0.41217e09,
        0.45613e09,
        0.50433e09,
        0.55714e09,
        0.61497e09,
        0.67823e09,
        0.74739e09,
        0.82293e09,
        0.90540e09,
        0.99536e09,
        0.10934e10,
        0.12002e10,
        0.13165e10,
        0.14430e10,
        0.15805e10,
        0.17299e10,
        0.18922e10,
        0.20682e10,
        0.22591e10,
        0.24660e10,
        0.26901e10,
        0.29326e10,
        0.31951e10,
        0.34788e10,
        0.37854e10,
        0.41166e10,
        0.44741e10,
        0.48598e10,
        0.52758e10,
        0.57240e10,
        0.62069e10,
        0.67269e10,
        0.72864e10,
        0.78882e10,
        0.85352e10,
        0.92305e10,
        0.99773e10,
        0.10779e11,
        0.11639e11,
        0.12562e11,
        0.13552e11,
        0.14612e11,
        0.15748e11,
        0.16964e11,
    ]
)


#  --------------- HC3N 22224: M = 44, I = 6 --------------------- see above
M = 44
I = 6
TIPS_GSI_HASH[(M, I)] = __FloatType__(9.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.27029e04,
        0.39999e04,
        0.55894e04,
        0.76092e04,
        0.10219e05,
        0.13616e05,
        0.18042e05,
        0.23798e05,
        0.31255e05,
        0.40867e05,
        0.53189e05,
        0.68897e05,
        0.88807e05,
        0.11390e06,
        0.14537e06,
        0.18461e06,
        0.23330e06,
        0.29342e06,
        0.36733e06,
        0.45779e06,
        0.56802e06,
        0.70182e06,
        0.86361e06,
        0.10585e07,
        0.12925e07,
        0.15725e07,
        0.19064e07,
        0.23034e07,
        0.27739e07,
        0.33302e07,
        0.39858e07,
        0.47566e07,
        0.56604e07,
        0.67176e07,
        0.79511e07,
        0.93872e07,
        0.11055e08,
        0.12989e08,
        0.15225e08,
        0.17806e08,
        0.20779e08,
        0.24197e08,
        0.28119e08,
        0.32612e08,
        0.37749e08,
        0.43612e08,
        0.50294e08,
        0.57895e08,
        0.66528e08,
        0.76318e08,
        0.87403e08,
        0.99937e08,
        0.11409e09,
        0.13004e09,
        0.14800e09,
        0.16819e09,
        0.19086e09,
        0.21629e09,
        0.24476e09,
        0.27661e09,
        0.31219e09,
        0.35189e09,
        0.39615e09,
        0.44542e09,
        0.50021e09,
        0.56108e09,
        0.62862e09,
        0.70350e09,
        0.78641e09,
        0.87814e09,
        0.97952e09,
        0.10915e10,
        0.12149e10,
        0.13510e10,
        0.15008e10,
        0.16656e10,
        0.18468e10,
        0.20457e10,
        0.22640e10,
        0.25032e10,
        0.27653e10,
        0.30522e10,
        0.33659e10,
        0.37088e10,
        0.40832e10,
        0.44917e10,
        0.49371e10,
        0.54224e10,
        0.59508e10,
        0.65256e10,
        0.71507e10,
        0.78298e10,
        0.85671e10,
        0.93672e10,
        0.10235e11,
        0.11175e11,
        0.12193e11,
        0.13295e11,
        0.14487e11,
        0.15776e11,
        0.17168e11,
        0.18671e11,
        0.20293e11,
        0.22043e11,
        0.23929e11,
        0.25960e11,
        0.28148e11,
        0.30502e11,
        0.33034e11,
        0.35756e11,
        0.38681e11,
        0.41823e11,
        0.45195e11,
        0.48812e11,
        0.52692e11,
        0.56850e11,
        0.61306e11,
        0.66076e11,
        0.71183e11,
    ]
)


#  --------------- H2 11: M = 45, I = 1 ---------------------
M = 45
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.15265e01,
        0.22243e01,
        0.29619e01,
        0.36724e01,
        0.43456e01,
        0.49880e01,
        0.56090e01,
        0.62165e01,
        0.68161e01,
        0.74113e01,
        0.80044e01,
        0.85966e01,
        0.91887e01,
        0.97810e01,
        0.10374e02,
        0.10967e02,
        0.11561e02,
        0.12156e02,
        0.12751e02,
        0.13347e02,
        0.13944e02,
        0.14541e02,
        0.15139e02,
        0.15738e02,
        0.16337e02,
        0.16937e02,
        0.17538e02,
        0.18140e02,
        0.18743e02,
        0.19346e02,
        0.19951e02,
        0.20556e02,
        0.21163e02,
        0.21771e02,
        0.22379e02,
        0.22990e02,
        0.23601e02,
        0.24214e02,
        0.24829e02,
        0.25445e02,
        0.26063e02,
        0.26683e02,
        0.27304e02,
        0.27928e02,
        0.28553e02,
        0.29181e02,
        0.29811e02,
        0.30443e02,
        0.31078e02,
        0.31715e02,
        0.32355e02,
        0.32997e02,
        0.33643e02,
        0.34291e02,
        0.34942e02,
        0.35596e02,
        0.36253e02,
        0.36914e02,
        0.37578e02,
        0.38245e02,
        0.38916e02,
        0.39590e02,
        0.40268e02,
        0.40949e02,
        0.41635e02,
        0.42324e02,
        0.43017e02,
        0.43715e02,
        0.44416e02,
        0.45122e02,
        0.45831e02,
        0.46546e02,
        0.47264e02,
        0.47987e02,
        0.48714e02,
        0.49446e02,
        0.50183e02,
        0.50925e02,
        0.51671e02,
        0.52422e02,
        0.53178e02,
        0.53939e02,
        0.54705e02,
        0.55476e02,
        0.56252e02,
        0.57033e02,
        0.57820e02,
        0.58612e02,
        0.59409e02,
        0.60212e02,
        0.61020e02,
        0.61833e02,
        0.62652e02,
        0.63477e02,
        0.64308e02,
        0.65144e02,
        0.65986e02,
        0.66833e02,
        0.67687e02,
        0.68546e02,
        0.69411e02,
        0.70283e02,
        0.71160e02,
        0.72043e02,
        0.72933e02,
        0.73829e02,
        0.74730e02,
        0.75638e02,
        0.76553e02,
        0.77473e02,
        0.78400e02,
        0.79333e02,
        0.80273e02,
        0.81219e02,
        0.82172e02,
        0.83131e02,
        0.84097e02,
        0.85069e02,
        0.86048e02,
    ]
)


#  --------------- H2 12: M = 45, I = 2 ---------------------
M = 45
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(6.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.81692e01,
        0.10308e02,
        0.12557e02,
        0.14848e02,
        0.17159e02,
        0.19482e02,
        0.21815e02,
        0.24153e02,
        0.26497e02,
        0.28845e02,
        0.31197e02,
        0.33552e02,
        0.35910e02,
        0.38272e02,
        0.40636e02,
        0.43002e02,
        0.45372e02,
        0.47744e02,
        0.50119e02,
        0.52496e02,
        0.54877e02,
        0.57261e02,
        0.59649e02,
        0.62040e02,
        0.64435e02,
        0.66835e02,
        0.69240e02,
        0.71650e02,
        0.74066e02,
        0.76489e02,
        0.78918e02,
        0.81354e02,
        0.83799e02,
        0.86252e02,
        0.88715e02,
        0.91187e02,
        0.93669e02,
        0.96163e02,
        0.98668e02,
        0.10118e03,
        0.10371e03,
        0.10626e03,
        0.10881e03,
        0.11138e03,
        0.11397e03,
        0.11657e03,
        0.11919e03,
        0.12182e03,
        0.12447e03,
        0.12714e03,
        0.12982e03,
        0.13252e03,
        0.13524e03,
        0.13798e03,
        0.14074e03,
        0.14352e03,
        0.14632e03,
        0.14914e03,
        0.15198e03,
        0.15484e03,
        0.15772e03,
        0.16062e03,
        0.16355e03,
        0.16649e03,
        0.16946e03,
        0.17246e03,
        0.17547e03,
        0.17851e03,
        0.18157e03,
        0.18466e03,
        0.18777e03,
        0.19090e03,
        0.19406e03,
        0.19725e03,
        0.20045e03,
        0.20369e03,
        0.20695e03,
        0.21023e03,
        0.21354e03,
        0.21687e03,
        0.22024e03,
        0.22362e03,
        0.22704e03,
        0.23048e03,
        0.23394e03,
        0.23744e03,
        0.24096e03,
        0.24451e03,
        0.24808e03,
        0.25169e03,
        0.25532e03,
        0.25897e03,
        0.26266e03,
        0.26638e03,
        0.27012e03,
        0.27389e03,
        0.27769e03,
        0.28152e03,
        0.28537e03,
        0.28926e03,
        0.29317e03,
        0.29712e03,
        0.30109e03,
        0.30509e03,
        0.30913e03,
        0.31319e03,
        0.31728e03,
        0.32140e03,
        0.32555e03,
        0.32974e03,
        0.33395e03,
        0.33819e03,
        0.34246e03,
        0.34677e03,
        0.35110e03,
        0.35547e03,
        0.35987e03,
        0.36429e03,
        0.36875e03,
    ]
)


#  --------------- CS 22: M = 46, I = 1 ---------------------
M = 46
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.51416e02,
        0.72723e02,
        0.94044e02,
        0.11538e03,
        0.13673e03,
        0.15810e03,
        0.17949e03,
        0.20093e03,
        0.22245e03,
        0.24407e03,
        0.26582e03,
        0.28776e03,
        0.30992e03,
        0.33233e03,
        0.35504e03,
        0.37807e03,
        0.40147e03,
        0.42525e03,
        0.44944e03,
        0.47406e03,
        0.49914e03,
        0.52468e03,
        0.55071e03,
        0.57723e03,
        0.60427e03,
        0.63183e03,
        0.65991e03,
        0.68854e03,
        0.71771e03,
        0.74743e03,
        0.77771e03,
        0.80855e03,
        0.83996e03,
        0.87193e03,
        0.90449e03,
        0.93762e03,
        0.97134e03,
        0.10056e04,
        0.10405e04,
        0.10760e04,
        0.11121e04,
        0.11487e04,
        0.11860e04,
        0.12239e04,
        0.12623e04,
        0.13014e04,
        0.13410e04,
        0.13813e04,
        0.14222e04,
        0.14637e04,
        0.15057e04,
        0.15484e04,
        0.15917e04,
        0.16357e04,
        0.16802e04,
        0.17253e04,
        0.17711e04,
        0.18175e04,
        0.18645e04,
        0.19121e04,
        0.19603e04,
        0.20091e04,
        0.20586e04,
        0.21087e04,
        0.21594e04,
        0.22107e04,
        0.22626e04,
        0.23152e04,
        0.23684e04,
        0.24222e04,
        0.24767e04,
        0.25317e04,
        0.25874e04,
        0.26438e04,
        0.27007e04,
        0.27583e04,
        0.28165e04,
        0.28754e04,
        0.29348e04,
        0.29949e04,
        0.30557e04,
        0.31170e04,
        0.31790e04,
        0.32417e04,
        0.33049e04,
        0.33688e04,
        0.34334e04,
        0.34986e04,
        0.35644e04,
        0.36308e04,
        0.36979e04,
        0.37656e04,
        0.38340e04,
        0.39030e04,
        0.39727e04,
        0.40430e04,
        0.41139e04,
        0.41855e04,
        0.42577e04,
        0.43306e04,
        0.44041e04,
        0.44782e04,
        0.45530e04,
        0.46284e04,
        0.47045e04,
        0.47813e04,
        0.48587e04,
        0.49367e04,
        0.50154e04,
        0.50947e04,
        0.51747e04,
        0.52553e04,
        0.53366e04,
        0.54185e04,
        0.55011e04,
        0.55844e04,
        0.56683e04,
        0.57528e04,
        0.58380e04,
    ]
)


#  --------------- CS 24: M = 46, I = 2 ---------------------
M = 46
I = 2
TIPS_GSI_HASH[(M, I)] = __FloatType__(1.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.52247e02,
        0.73900e02,
        0.95568e02,
        0.11725e03,
        0.13895e03,
        0.16066e03,
        0.18241e03,
        0.20420e03,
        0.22607e03,
        0.24805e03,
        0.27018e03,
        0.29249e03,
        0.31503e03,
        0.33784e03,
        0.36096e03,
        0.38442e03,
        0.40824e03,
        0.43247e03,
        0.45712e03,
        0.48221e03,
        0.50778e03,
        0.53382e03,
        0.56037e03,
        0.58743e03,
        0.61501e03,
        0.64312e03,
        0.67179e03,
        0.70100e03,
        0.73077e03,
        0.76111e03,
        0.79202e03,
        0.82351e03,
        0.85559e03,
        0.88824e03,
        0.92149e03,
        0.95533e03,
        0.98977e03,
        0.10248e04,
        0.10605e04,
        0.10967e04,
        0.11336e04,
        0.11710e04,
        0.12091e04,
        0.12478e04,
        0.12871e04,
        0.13270e04,
        0.13675e04,
        0.14087e04,
        0.14505e04,
        0.14929e04,
        0.15359e04,
        0.15795e04,
        0.16238e04,
        0.16687e04,
        0.17142e04,
        0.17604e04,
        0.18071e04,
        0.18546e04,
        0.19026e04,
        0.19513e04,
        0.20006e04,
        0.20505e04,
        0.21011e04,
        0.21523e04,
        0.22042e04,
        0.22566e04,
        0.23098e04,
        0.23635e04,
        0.24179e04,
        0.24730e04,
        0.25286e04,
        0.25850e04,
        0.26419e04,
        0.26995e04,
        0.27578e04,
        0.28167e04,
        0.28762e04,
        0.29364e04,
        0.29972e04,
        0.30587e04,
        0.31208e04,
        0.31836e04,
        0.32470e04,
        0.33111e04,
        0.33758e04,
        0.34412e04,
        0.35072e04,
        0.35739e04,
        0.36412e04,
        0.37092e04,
        0.37778e04,
        0.38471e04,
        0.39171e04,
        0.39877e04,
        0.40589e04,
        0.41309e04,
        0.42034e04,
        0.42767e04,
        0.43505e04,
        0.44251e04,
        0.45003e04,
        0.45762e04,
        0.46527e04,
        0.47299e04,
        0.48077e04,
        0.48863e04,
        0.49654e04,
        0.50453e04,
        0.51258e04,
        0.52070e04,
        0.52888e04,
        0.53713e04,
        0.54545e04,
        0.55383e04,
        0.56229e04,
        0.57080e04,
        0.57939e04,
        0.58804e04,
        0.59676e04,
    ]
)


#  --------------- CS 32: M = 46, I = 3 ---------------------
M = 46
I = 3
TIPS_GSI_HASH[(M, I)] = __FloatType__(2.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.10889e03,
        0.15403e03,
        0.19920e03,
        0.24440e03,
        0.28964e03,
        0.33491e03,
        0.38026e03,
        0.42571e03,
        0.47134e03,
        0.51722e03,
        0.56342e03,
        0.61005e03,
        0.65719e03,
        0.70493e03,
        0.75334e03,
        0.80249e03,
        0.85245e03,
        0.90329e03,
        0.95504e03,
        0.10078e04,
        0.10615e04,
        0.11163e04,
        0.11721e04,
        0.12291e04,
        0.12872e04,
        0.13464e04,
        0.14068e04,
        0.14684e04,
        0.15311e04,
        0.15951e04,
        0.16604e04,
        0.17268e04,
        0.17945e04,
        0.18635e04,
        0.19337e04,
        0.20051e04,
        0.20779e04,
        0.21519e04,
        0.22272e04,
        0.23038e04,
        0.23817e04,
        0.24609e04,
        0.25414e04,
        0.26232e04,
        0.27064e04,
        0.27908e04,
        0.28765e04,
        0.29636e04,
        0.30520e04,
        0.31417e04,
        0.32327e04,
        0.33251e04,
        0.34188e04,
        0.35138e04,
        0.36102e04,
        0.37079e04,
        0.38070e04,
        0.39074e04,
        0.40091e04,
        0.41122e04,
        0.42166e04,
        0.43224e04,
        0.44295e04,
        0.45380e04,
        0.46478e04,
        0.47590e04,
        0.48715e04,
        0.49854e04,
        0.51007e04,
        0.52173e04,
        0.53353e04,
        0.54547e04,
        0.55754e04,
        0.56975e04,
        0.58210e04,
        0.59458e04,
        0.60720e04,
        0.61996e04,
        0.63285e04,
        0.64589e04,
        0.65906e04,
        0.67236e04,
        0.68581e04,
        0.69940e04,
        0.71312e04,
        0.72698e04,
        0.74098e04,
        0.75512e04,
        0.76940e04,
        0.78381e04,
        0.79837e04,
        0.81307e04,
        0.82790e04,
        0.84287e04,
        0.85799e04,
        0.87324e04,
        0.88864e04,
        0.90417e04,
        0.91984e04,
        0.93566e04,
        0.95161e04,
        0.96771e04,
        0.98394e04,
        0.10003e05,
        0.10168e05,
        0.10335e05,
        0.10503e05,
        0.10672e05,
        0.10843e05,
        0.11015e05,
        0.11189e05,
        0.11364e05,
        0.11541e05,
        0.11719e05,
        0.11898e05,
        0.12079e05,
        0.12261e05,
        0.12444e05,
        0.12630e05,
    ]
)


#  --------------- CS 23: M = 46, I = 4 ---------------------
M = 46
I = 4
TIPS_GSI_HASH[(M, I)] = __FloatType__(4.0)
TIPS_ISO_HASH[(M, I)] = float32(
    [
        0.20737e03,
        0.29330e03,
        0.37930e03,
        0.46535e03,
        0.55145e03,
        0.63764e03,
        0.72394e03,
        0.81043e03,
        0.89722e03,
        0.98443e03,
        0.10722e04,
        0.11607e04,
        0.12501e04,
        0.13406e04,
        0.14323e04,
        0.15253e04,
        0.16197e04,
        0.17158e04,
        0.18135e04,
        0.19129e04,
        0.20142e04,
        0.21174e04,
        0.22226e04,
        0.23298e04,
        0.24391e04,
        0.25504e04,
        0.26639e04,
        0.27796e04,
        0.28976e04,
        0.30177e04,
        0.31401e04,
        0.32648e04,
        0.33918e04,
        0.35211e04,
        0.36527e04,
        0.37867e04,
        0.39231e04,
        0.40618e04,
        0.42029e04,
        0.43463e04,
        0.44922e04,
        0.46405e04,
        0.47912e04,
        0.49443e04,
        0.50999e04,
        0.52579e04,
        0.54183e04,
        0.55812e04,
        0.57465e04,
        0.59143e04,
        0.60846e04,
        0.62573e04,
        0.64325e04,
        0.66102e04,
        0.67903e04,
        0.69729e04,
        0.71581e04,
        0.73457e04,
        0.75358e04,
        0.77284e04,
        0.79235e04,
        0.81211e04,
        0.83212e04,
        0.85239e04,
        0.87290e04,
        0.89367e04,
        0.91469e04,
        0.93596e04,
        0.95748e04,
        0.97926e04,
        0.10013e05,
        0.10236e05,
        0.10461e05,
        0.10689e05,
        0.10920e05,
        0.11153e05,
        0.11388e05,
        0.11626e05,
        0.11867e05,
        0.12110e05,
        0.12356e05,
        0.12604e05,
        0.12855e05,
        0.13109e05,
        0.13365e05,
        0.13623e05,
        0.13884e05,
        0.14148e05,
        0.14415e05,
        0.14683e05,
        0.14955e05,
        0.15229e05,
        0.15506e05,
        0.15785e05,
        0.16067e05,
        0.16351e05,
        0.16638e05,
        0.16928e05,
        0.17220e05,
        0.17515e05,
        0.17813e05,
        0.18113e05,
        0.18416e05,
        0.18721e05,
        0.19029e05,
        0.19340e05,
        0.19653e05,
        0.19969e05,
        0.20287e05,
        0.20608e05,
        0.20932e05,
        0.21258e05,
        0.21587e05,
        0.21919e05,
        0.22253e05,
        0.22590e05,
        0.22930e05,
        0.23272e05,
        0.23617e05,
    ]
)


#  --------------- SO3 26: M = 46, I = 1 --------------------- not in TIPS-2011
M = 47
I = 1
TIPS_GSI_HASH[(M, I)] = __FloatType__(0.0)
TIPS_ISO_HASH[(M, I)] = float32([0.0])


# NOT IN HITRAN, BUT PRESENT IN TIPS-2011
#                                                        ... extracted from iso_comparison
#
# id       M    I     COMMENT          TIPS_M    TIPS_I        iso_name                 abundance          mass       mol_name
# 101    1001    1    not in HITRAN      45                     H                        \N                 \N              H
#
# 102    1002    1    not in HITRAN      45                     He                       \N                 \N              He
#
# 104    1018    1    not in HITRAN      45                     Ar                       \N                 \N              Ar
#
#                    not in HITRAN      45         4224                                                                    C2N2
#                    not in HITRAN      45         5225                                                                    C2N2
#
#                    not in HITRAN      48         26                                                                      SO
#                    not in HITRAN      48         46                                                                      SO
#                    not in HITRAN      48         28                                                                      SO
#
#                    not in HITRAN      49         1221                                                                    C3H4
#
#                    not in HITRAN      50         2111                                                                    CH3
#
#                    not in HITRAN      51         222                                                                     CS2
#                    not in HITRAN      51         224                                                                     CS2
#                    not in HITRAN      51         223                                                                     CS2
#                    not in HITRAN      51         232                                                                     CS2


def BD_TIPS_2011_PYTHON(M, I, T):

    # out of temperature range
    if T < 70.0 or T > 3000.0:
        raise Exception("TIPS: T must be between 70K and 3000K.")

    try:
        # get statistical weight for specified isotopologue
        gi = TIPS_GSI_HASH[(M, I)]
        # interpolate partition sum for specified isotopologue
        Qt = AtoB(T, Tdat, TIPS_ISO_HASH[(M, I)], TIPS_NPT)
    except KeyError:
        raise Exception("TIPS: no data for M,I = %d,%d." % (M, I))

    return gi, Qt


#  --------------- /TIPS-2011 IMPLEMENTATION ----------------------

#  --------------- TIPS-2017 IMPLEMENTATION ----------------------

#  --------------- TIPS-2017 GRID TABLE --------------------------
TIPS_2017_ISOT = {}
TIPS_2017_ISOT[0] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
        3520.0,
        3540.0,
        3560.0,
        3580.0,
        3600.0,
        3620.0,
        3640.0,
        3660.0,
        3680.0,
        3700.0,
        3720.0,
        3740.0,
        3760.0,
        3780.0,
        3800.0,
        3820.0,
        3840.0,
        3860.0,
        3880.0,
        3900.0,
        3920.0,
        3940.0,
        3960.0,
        3980.0,
        4000.0,
        4020.0,
        4040.0,
        4060.0,
        4080.0,
        4100.0,
        4120.0,
        4140.0,
        4160.0,
        4180.0,
        4200.0,
        4220.0,
        4240.0,
        4260.0,
        4280.0,
        4300.0,
        4320.0,
        4340.0,
        4360.0,
        4380.0,
        4400.0,
        4420.0,
        4440.0,
        4460.0,
        4480.0,
        4500.0,
        4520.0,
        4540.0,
        4560.0,
        4580.0,
        4600.0,
        4620.0,
        4640.0,
        4660.0,
        4680.0,
        4700.0,
        4720.0,
        4740.0,
        4760.0,
        4780.0,
        4800.0,
        4820.0,
        4840.0,
        4860.0,
        4880.0,
        4900.0,
        4920.0,
        4940.0,
        4960.0,
        4980.0,
        5000.0,
    ]
)
TIPS_2017_ISOT[1] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
        3520.0,
        3540.0,
        3560.0,
        3580.0,
        3600.0,
        3620.0,
        3640.0,
        3660.0,
        3680.0,
        3700.0,
        3720.0,
        3740.0,
        3760.0,
        3780.0,
        3800.0,
        3820.0,
        3840.0,
        3860.0,
        3880.0,
        3900.0,
        3920.0,
        3940.0,
        3960.0,
        3980.0,
        4000.0,
        4020.0,
        4040.0,
        4060.0,
        4080.0,
        4100.0,
        4120.0,
        4140.0,
        4160.0,
        4180.0,
        4200.0,
        4220.0,
        4240.0,
        4260.0,
        4280.0,
        4300.0,
        4320.0,
        4340.0,
        4360.0,
        4380.0,
        4400.0,
        4420.0,
        4440.0,
        4460.0,
        4480.0,
        4500.0,
        4520.0,
        4540.0,
        4560.0,
        4580.0,
        4600.0,
        4620.0,
        4640.0,
        4660.0,
        4680.0,
        4700.0,
        4720.0,
        4740.0,
        4760.0,
        4780.0,
        4800.0,
        4820.0,
        4840.0,
        4860.0,
        4880.0,
        4900.0,
        4920.0,
        4940.0,
        4960.0,
        4980.0,
        5000.0,
        5020.0,
        5040.0,
        5060.0,
        5080.0,
        5100.0,
        5120.0,
        5140.0,
        5160.0,
        5180.0,
        5200.0,
        5220.0,
        5240.0,
        5260.0,
        5280.0,
        5300.0,
        5320.0,
        5340.0,
        5360.0,
        5380.0,
        5400.0,
        5420.0,
        5440.0,
        5460.0,
        5480.0,
        5500.0,
        5520.0,
        5540.0,
        5560.0,
        5580.0,
        5600.0,
        5620.0,
        5640.0,
        5660.0,
        5680.0,
        5700.0,
        5720.0,
        5740.0,
        5760.0,
        5780.0,
        5800.0,
        5820.0,
        5840.0,
        5860.0,
        5880.0,
        5900.0,
        5920.0,
        5940.0,
        5960.0,
        5980.0,
        6000.0,
    ]
)
TIPS_2017_ISOT[2] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
    ]
)
TIPS_2017_ISOT[3] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
        3520.0,
        3540.0,
        3560.0,
        3580.0,
        3600.0,
        3620.0,
        3640.0,
        3660.0,
        3680.0,
        3700.0,
        3720.0,
        3740.0,
        3760.0,
        3780.0,
        3800.0,
        3820.0,
        3840.0,
        3860.0,
        3880.0,
        3900.0,
        3920.0,
        3940.0,
        3960.0,
        3980.0,
        4000.0,
        4020.0,
        4040.0,
        4060.0,
        4080.0,
        4100.0,
        4120.0,
        4140.0,
        4160.0,
        4180.0,
        4200.0,
        4220.0,
        4240.0,
        4260.0,
        4280.0,
        4300.0,
        4320.0,
        4340.0,
        4360.0,
        4380.0,
        4400.0,
        4420.0,
        4440.0,
        4460.0,
        4480.0,
        4500.0,
        4520.0,
        4540.0,
        4560.0,
        4580.0,
        4600.0,
        4620.0,
        4640.0,
        4660.0,
        4680.0,
        4700.0,
        4720.0,
        4740.0,
        4760.0,
        4780.0,
        4800.0,
        4820.0,
        4840.0,
        4860.0,
        4880.0,
        4900.0,
        4920.0,
        4940.0,
        4960.0,
        4980.0,
        5000.0,
        5020.0,
        5040.0,
        5060.0,
        5080.0,
        5100.0,
        5120.0,
        5140.0,
        5160.0,
        5180.0,
        5200.0,
        5220.0,
        5240.0,
        5260.0,
        5280.0,
        5300.0,
        5320.0,
        5340.0,
        5360.0,
        5380.0,
        5400.0,
        5420.0,
        5440.0,
        5460.0,
        5480.0,
        5500.0,
        5520.0,
        5540.0,
        5560.0,
        5580.0,
        5600.0,
        5620.0,
        5640.0,
        5660.0,
        5680.0,
        5700.0,
        5720.0,
        5740.0,
        5760.0,
        5780.0,
        5800.0,
        5820.0,
        5840.0,
        5860.0,
        5880.0,
        5900.0,
        5920.0,
        5940.0,
        5960.0,
        5980.0,
        6000.0,
        6020.0,
        6040.0,
        6060.0,
        6080.0,
        6100.0,
        6120.0,
        6140.0,
        6160.0,
        6180.0,
        6200.0,
        6220.0,
        6240.0,
        6260.0,
        6280.0,
        6300.0,
        6320.0,
        6340.0,
        6360.0,
        6380.0,
        6400.0,
        6420.0,
        6440.0,
        6460.0,
        6480.0,
        6500.0,
        6520.0,
        6540.0,
        6560.0,
        6580.0,
        6600.0,
        6620.0,
        6640.0,
        6660.0,
        6680.0,
        6700.0,
        6720.0,
        6740.0,
        6760.0,
        6780.0,
        6800.0,
        6820.0,
        6840.0,
        6860.0,
        6880.0,
        6900.0,
        6920.0,
        6940.0,
        6960.0,
        6980.0,
        7000.0,
        7020.0,
        7040.0,
        7060.0,
        7080.0,
        7100.0,
        7120.0,
        7140.0,
        7160.0,
        7180.0,
        7200.0,
        7220.0,
        7240.0,
        7260.0,
        7280.0,
        7300.0,
        7320.0,
        7340.0,
        7360.0,
        7380.0,
        7400.0,
        7420.0,
        7440.0,
        7460.0,
        7480.0,
        7500.0,
        7520.0,
        7540.0,
        7560.0,
        7580.0,
        7600.0,
        7620.0,
        7640.0,
        7660.0,
        7680.0,
        7700.0,
        7720.0,
        7740.0,
        7760.0,
        7780.0,
        7800.0,
        7820.0,
        7840.0,
        7860.0,
        7880.0,
        7900.0,
        7920.0,
        7940.0,
        7960.0,
        7980.0,
        8000.0,
        8020.0,
        8040.0,
        8060.0,
        8080.0,
        8100.0,
        8120.0,
        8140.0,
        8160.0,
        8180.0,
        8200.0,
        8220.0,
        8240.0,
        8260.0,
        8280.0,
        8300.0,
        8320.0,
        8340.0,
        8360.0,
        8380.0,
        8400.0,
        8420.0,
        8440.0,
        8460.0,
        8480.0,
        8500.0,
        8520.0,
        8540.0,
        8560.0,
        8580.0,
        8600.0,
        8620.0,
        8640.0,
        8660.0,
        8680.0,
        8700.0,
        8720.0,
        8740.0,
        8760.0,
        8780.0,
        8800.0,
        8820.0,
        8840.0,
        8860.0,
        8880.0,
        8900.0,
        8920.0,
        8940.0,
        8960.0,
        8980.0,
        9000.0,
    ]
)
TIPS_2017_ISOT[4] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
        3520.0,
        3540.0,
        3560.0,
        3580.0,
        3600.0,
        3620.0,
        3640.0,
        3660.0,
        3680.0,
        3700.0,
        3720.0,
        3740.0,
        3760.0,
        3780.0,
        3800.0,
        3820.0,
        3840.0,
        3860.0,
        3880.0,
        3900.0,
        3920.0,
        3940.0,
        3960.0,
        3980.0,
        4000.0,
        4020.0,
        4040.0,
        4060.0,
        4080.0,
        4100.0,
        4120.0,
        4140.0,
        4160.0,
        4180.0,
        4200.0,
        4220.0,
        4240.0,
        4260.0,
        4280.0,
        4300.0,
        4320.0,
        4340.0,
        4360.0,
        4380.0,
        4400.0,
        4420.0,
        4440.0,
        4460.0,
        4480.0,
        4500.0,
    ]
)
TIPS_2017_ISOT[5] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
        3520.0,
        3540.0,
        3560.0,
        3580.0,
        3600.0,
        3620.0,
        3640.0,
        3660.0,
        3680.0,
        3700.0,
        3720.0,
        3740.0,
        3760.0,
        3780.0,
        3800.0,
        3820.0,
        3840.0,
        3860.0,
        3880.0,
        3900.0,
        3920.0,
        3940.0,
        3960.0,
        3980.0,
        4000.0,
        4020.0,
        4040.0,
        4060.0,
        4080.0,
        4100.0,
        4120.0,
        4140.0,
        4160.0,
        4180.0,
        4200.0,
        4220.0,
        4240.0,
        4260.0,
        4280.0,
        4300.0,
        4320.0,
        4340.0,
        4360.0,
        4380.0,
        4400.0,
        4420.0,
        4440.0,
        4460.0,
        4480.0,
        4500.0,
        4520.0,
        4540.0,
        4560.0,
        4580.0,
        4600.0,
        4620.0,
        4640.0,
        4660.0,
        4680.0,
        4700.0,
        4720.0,
        4740.0,
        4760.0,
        4780.0,
        4800.0,
        4820.0,
        4840.0,
        4860.0,
        4880.0,
        4900.0,
        4920.0,
        4940.0,
        4960.0,
        4980.0,
        5000.0,
        5020.0,
        5040.0,
        5060.0,
        5080.0,
        5100.0,
        5120.0,
        5140.0,
        5160.0,
        5180.0,
        5200.0,
        5220.0,
        5240.0,
        5260.0,
        5280.0,
        5300.0,
        5320.0,
        5340.0,
        5360.0,
        5380.0,
        5400.0,
        5420.0,
        5440.0,
        5460.0,
        5480.0,
        5500.0,
        5520.0,
        5540.0,
        5560.0,
        5580.0,
        5600.0,
        5620.0,
        5640.0,
        5660.0,
        5680.0,
        5700.0,
        5720.0,
        5740.0,
        5760.0,
        5780.0,
        5800.0,
        5820.0,
        5840.0,
        5860.0,
        5880.0,
        5900.0,
        5920.0,
        5940.0,
        5960.0,
        5980.0,
        6000.0,
        6020.0,
        6040.0,
        6060.0,
        6080.0,
        6100.0,
        6120.0,
        6140.0,
        6160.0,
        6180.0,
        6200.0,
        6220.0,
        6240.0,
        6260.0,
        6280.0,
        6300.0,
        6320.0,
        6340.0,
        6360.0,
        6380.0,
        6400.0,
        6420.0,
        6440.0,
        6460.0,
        6480.0,
        6500.0,
        6520.0,
        6540.0,
        6560.0,
        6580.0,
        6600.0,
        6620.0,
        6640.0,
        6660.0,
        6680.0,
        6700.0,
        6720.0,
        6740.0,
        6760.0,
        6780.0,
        6800.0,
        6820.0,
        6840.0,
        6860.0,
        6880.0,
        6900.0,
        6920.0,
        6940.0,
        6960.0,
        6980.0,
        7000.0,
        7020.0,
        7040.0,
        7060.0,
        7080.0,
        7100.0,
        7120.0,
        7140.0,
        7160.0,
        7180.0,
        7200.0,
        7220.0,
        7240.0,
        7260.0,
        7280.0,
        7300.0,
        7320.0,
        7340.0,
        7360.0,
        7380.0,
        7400.0,
        7420.0,
        7440.0,
        7460.0,
        7480.0,
        7500.0,
    ]
)
TIPS_2017_ISOT[6] = float64(
    [
        1.0,
        20.0,
        40.0,
        60.0,
        80.0,
        100.0,
        120.0,
        140.0,
        160.0,
        180.0,
        200.0,
        220.0,
        240.0,
        260.0,
        280.0,
        300.0,
        320.0,
        340.0,
        360.0,
        380.0,
        400.0,
        420.0,
        440.0,
        460.0,
        480.0,
        500.0,
        520.0,
        540.0,
        560.0,
        580.0,
        600.0,
        620.0,
        640.0,
        660.0,
        680.0,
        700.0,
        720.0,
        740.0,
        760.0,
        780.0,
        800.0,
        820.0,
        840.0,
        860.0,
        880.0,
        900.0,
        920.0,
        940.0,
        960.0,
        980.0,
        1000.0,
        1020.0,
        1040.0,
        1060.0,
        1080.0,
        1100.0,
        1120.0,
        1140.0,
        1160.0,
        1180.0,
        1200.0,
        1220.0,
        1240.0,
        1260.0,
        1280.0,
        1300.0,
        1320.0,
        1340.0,
        1360.0,
        1380.0,
        1400.0,
        1420.0,
        1440.0,
        1460.0,
        1480.0,
        1500.0,
        1520.0,
        1540.0,
        1560.0,
        1580.0,
        1600.0,
        1620.0,
        1640.0,
        1660.0,
        1680.0,
        1700.0,
        1720.0,
        1740.0,
        1760.0,
        1780.0,
        1800.0,
        1820.0,
        1840.0,
        1860.0,
        1880.0,
        1900.0,
        1920.0,
        1940.0,
        1960.0,
        1980.0,
        2000.0,
        2020.0,
        2040.0,
        2060.0,
        2080.0,
        2100.0,
        2120.0,
        2140.0,
        2160.0,
        2180.0,
        2200.0,
        2220.0,
        2240.0,
        2260.0,
        2280.0,
        2300.0,
        2320.0,
        2340.0,
        2360.0,
        2380.0,
        2400.0,
        2420.0,
        2440.0,
        2460.0,
        2480.0,
        2500.0,
        2520.0,
        2540.0,
        2560.0,
        2580.0,
        2600.0,
        2620.0,
        2640.0,
        2660.0,
        2680.0,
        2700.0,
        2720.0,
        2740.0,
        2760.0,
        2780.0,
        2800.0,
        2820.0,
        2840.0,
        2860.0,
        2880.0,
        2900.0,
        2920.0,
        2940.0,
        2960.0,
        2980.0,
        3000.0,
        3020.0,
        3040.0,
        3060.0,
        3080.0,
        3100.0,
        3120.0,
        3140.0,
        3160.0,
        3180.0,
        3200.0,
        3220.0,
        3240.0,
        3260.0,
        3280.0,
        3300.0,
        3320.0,
        3340.0,
        3360.0,
        3380.0,
        3400.0,
        3420.0,
        3440.0,
        3460.0,
        3480.0,
        3500.0,
        3520.0,
        3540.0,
        3560.0,
        3580.0,
        3600.0,
        3620.0,
        3640.0,
        3660.0,
        3680.0,
        3700.0,
        3720.0,
        3740.0,
        3760.0,
        3780.0,
        3800.0,
        3820.0,
        3840.0,
        3860.0,
        3880.0,
        3900.0,
        3920.0,
        3940.0,
        3960.0,
        3980.0,
        4000.0,
    ]
)

#  --------------- TIPS-2017 PARTITION SUMS ----------------------
TIPS_2017_ISOT_HASH = {}
TIPS_2017_ISOQ_HASH = {}

#  ---------------------- M = 1, I = 1 ---------------------------
M = 1
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.000000e00,
        3.348920e00,
        9.416960e00,
        1.681863e01,
        2.543182e01,
        3.515313e01,
        4.587953e01,
        5.752827e01,
        7.003401e01,
        8.334408e01,
        9.741515e01,
        1.122112e02,
        1.277022e02,
        1.438633e02,
        1.606747e02,
        1.781206e02,
        1.961892e02,
        2.148721e02,
        2.341643e02,
        2.540633e02,
        2.745691e02,
        2.956837e02,
        3.174110e02,
        3.397563e02,
        3.627261e02,
        3.863281e02,
        4.105710e02,
        4.354642e02,
        4.610180e02,
        4.872432e02,
        5.141514e02,
        5.417546e02,
        5.700656e02,
        5.990973e02,
        6.288636e02,
        6.593787e02,
        6.906572e02,
        7.227143e02,
        7.555656e02,
        7.892274e02,
        8.237162e02,
        8.590491e02,
        8.952437e02,
        9.323179e02,
        9.702901e02,
        1.009179e03,
        1.049005e03,
        1.089786e03,
        1.131543e03,
        1.174297e03,
        1.218069e03,
        1.262880e03,
        1.308752e03,
        1.355706e03,
        1.403766e03,
        1.452954e03,
        1.503294e03,
        1.554809e03,
        1.607523e03,
        1.661461e03,
        1.716647e03,
        1.773106e03,
        1.830864e03,
        1.889947e03,
        1.950381e03,
        2.012191e03,
        2.075405e03,
        2.140051e03,
        2.206155e03,
        2.273745e03,
        2.342850e03,
        2.413498e03,
        2.485717e03,
        2.559538e03,
        2.634989e03,
        2.712101e03,
        2.790904e03,
        2.871427e03,
        2.953704e03,
        3.037763e03,
        3.123638e03,
        3.211360e03,
        3.300961e03,
        3.392475e03,
        3.485933e03,
        3.581371e03,
        3.678821e03,
        3.778318e03,
        3.879895e03,
        3.983589e03,
        4.089435e03,
        4.197467e03,
        4.307722e03,
        4.420237e03,
        4.535049e03,
        4.652193e03,
        4.771709e03,
        4.893634e03,
        5.018006e03,
        5.144865e03,
        5.274249e03,
        5.406197e03,
        5.540751e03,
        5.677950e03,
        5.817835e03,
        5.960448e03,
        6.105829e03,
        6.254022e03,
        6.405068e03,
        6.559010e03,
        6.715891e03,
        6.875757e03,
        7.038649e03,
        7.204614e03,
        7.373696e03,
        7.545940e03,
        7.721393e03,
        7.900101e03,
        8.082111e03,
        8.267469e03,
        8.456223e03,
        8.648422e03,
        8.844114e03,
        9.043348e03,
        9.246173e03,
        9.452640e03,
        9.662798e03,
        9.876698e03,
        1.009439e04,
        1.031593e04,
        1.054137e04,
        1.077075e04,
        1.100414e04,
        1.124158e04,
        1.148314e04,
        1.172886e04,
        1.197879e04,
        1.223300e04,
        1.249154e04,
        1.275447e04,
        1.302184e04,
        1.329370e04,
        1.357012e04,
        1.385116e04,
        1.413687e04,
        1.442730e04,
        1.472253e04,
        1.502260e04,
        1.532759e04,
        1.563754e04,
        1.595251e04,
        1.627258e04,
        1.659780e04,
        1.692823e04,
        1.726394e04,
        1.760498e04,
        1.795142e04,
        1.830332e04,
        1.866075e04,
        1.902377e04,
        1.939243e04,
        1.976682e04,
        2.014699e04,
        2.053301e04,
        2.092493e04,
        2.132284e04,
        2.172678e04,
        2.213684e04,
        2.255307e04,
        2.297555e04,
        2.340433e04,
        2.383949e04,
        2.428109e04,
        2.472920e04,
        2.518388e04,
        2.564522e04,
        2.611326e04,
        2.658809e04,
        2.706977e04,
        2.755836e04,
        2.805395e04,
        2.855658e04,
        2.906634e04,
        2.958330e04,
        3.010751e04,
        3.063906e04,
        3.117801e04,
        3.172442e04,
        3.227838e04,
        3.283994e04,
        3.340917e04,
        3.398616e04,
        3.457096e04,
        3.516364e04,
        3.576428e04,
        3.637294e04,
        3.698969e04,
        3.761461e04,
        3.824775e04,
        3.888919e04,
        3.953900e04,
        4.019725e04,
        4.086401e04,
        4.153933e04,
        4.222330e04,
        4.291598e04,
        4.361744e04,
        4.432774e04,
        4.504696e04,
        4.577516e04,
        4.651241e04,
        4.725878e04,
        4.801433e04,
        4.877912e04,
        4.955323e04,
        5.033673e04,
        5.112967e04,
        5.193213e04,
        5.274416e04,
        5.356584e04,
        5.439722e04,
        5.523838e04,
        5.608937e04,
        5.695027e04,
        5.782113e04,
        5.870201e04,
        5.959298e04,
        6.049411e04,
        6.140545e04,
        6.232706e04,
        6.325900e04,
        6.420135e04,
        6.515415e04,
        6.611746e04,
        6.709136e04,
        6.807588e04,
        6.907110e04,
        7.007707e04,
        7.109385e04,
        7.212149e04,
        7.316006e04,
        7.420960e04,
        7.527018e04,
        7.634185e04,
        7.742466e04,
        7.851867e04,
        7.962393e04,
        8.074050e04,
        8.186842e04,
        8.300775e04,
        8.415854e04,
    ]
)

#  ---------------------- M = 1, I = 2 ---------------------------
M = 1
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.000000e00,
        3.372790e00,
        9.492280e00,
        1.695557e01,
        2.564104e01,
        3.544414e01,
        4.626091e01,
        5.800788e01,
        7.061916e01,
        8.404163e01,
        9.823160e01,
        1.131528e02,
        1.287749e02,
        1.450731e02,
        1.620274e02,
        1.796219e02,
        1.978450e02,
        2.166883e02,
        2.361468e02,
        2.562183e02,
        2.769027e02,
        2.982024e02,
        3.201213e02,
        3.426649e02,
        3.658398e02,
        3.896541e02,
        4.141165e02,
        4.392366e02,
        4.650249e02,
        4.914924e02,
        5.186508e02,
        5.465124e02,
        5.750899e02,
        6.043966e02,
        6.344463e02,
        6.652532e02,
        6.968322e02,
        7.291983e02,
        7.623672e02,
        7.963551e02,
        8.311783e02,
        8.668538e02,
        9.033990e02,
        9.408315e02,
        9.791695e02,
        1.018432e03,
        1.058637e03,
        1.099804e03,
        1.141952e03,
        1.185103e03,
        1.229276e03,
        1.274491e03,
        1.320770e03,
        1.368133e03,
        1.416603e03,
        1.466202e03,
        1.516951e03,
        1.568873e03,
        1.621992e03,
        1.676329e03,
        1.731908e03,
        1.788753e03,
        1.846888e03,
        1.906337e03,
        1.967124e03,
        2.029275e03,
        2.092814e03,
        2.157766e03,
        2.224157e03,
        2.292012e03,
        2.361359e03,
        2.432222e03,
        2.504629e03,
        2.578606e03,
        2.654181e03,
        2.731380e03,
        2.810232e03,
        2.890764e03,
        2.973005e03,
        3.056982e03,
        3.142725e03,
        3.230262e03,
        3.319623e03,
        3.410837e03,
        3.503933e03,
        3.598943e03,
        3.695895e03,
        3.794822e03,
        3.895752e03,
        3.998719e03,
        4.103752e03,
        4.210885e03,
        4.320147e03,
        4.431573e03,
        4.545194e03,
        4.661044e03,
        4.779155e03,
        4.899561e03,
        5.022295e03,
        5.147392e03,
        5.274886e03,
        5.404811e03,
        5.537202e03,
        5.672095e03,
        5.809525e03,
        5.949527e03,
        6.092139e03,
        6.237395e03,
        6.385334e03,
        6.535992e03,
        6.689406e03,
        6.845614e03,
        7.004655e03,
        7.166565e03,
        7.331385e03,
        7.499153e03,
        7.669907e03,
        7.843689e03,
        8.020537e03,
        8.200491e03,
        8.383594e03,
        8.569884e03,
        8.759404e03,
        8.952195e03,
        9.148299e03,
        9.347757e03,
        9.550614e03,
        9.756911e03,
        9.966691e03,
        1.018000e04,
        1.039688e04,
        1.061737e04,
        1.084152e04,
        1.106938e04,
        1.130099e04,
        1.153639e04,
        1.177564e04,
        1.201877e04,
        1.226583e04,
        1.251688e04,
        1.277195e04,
        1.303110e04,
        1.329438e04,
        1.356182e04,
        1.383348e04,
        1.410942e04,
        1.438967e04,
        1.467429e04,
        1.496333e04,
        1.525683e04,
        1.555486e04,
        1.585745e04,
        1.616467e04,
        1.647655e04,
        1.679316e04,
        1.711455e04,
        1.744077e04,
        1.777186e04,
        1.810790e04,
        1.844892e04,
        1.879498e04,
        1.914614e04,
        1.950245e04,
        1.986396e04,
        2.023074e04,
        2.060283e04,
        2.098029e04,
        2.136318e04,
        2.175156e04,
        2.214547e04,
        2.254498e04,
        2.295015e04,
        2.336103e04,
        2.377768e04,
        2.420015e04,
        2.462851e04,
        2.506282e04,
        2.550313e04,
        2.594950e04,
        2.640200e04,
        2.686067e04,
        2.732559e04,
        2.779681e04,
        2.827439e04,
        2.875840e04,
        2.924889e04,
        2.974592e04,
        3.024956e04,
        3.075987e04,
        3.127691e04,
        3.180074e04,
        3.233143e04,
        3.286903e04,
        3.341361e04,
        3.396524e04,
        3.452397e04,
        3.508988e04,
        3.566301e04,
        3.624345e04,
        3.683124e04,
        3.742646e04,
        3.802917e04,
        3.863943e04,
        3.925731e04,
        3.988288e04,
        4.051619e04,
        4.115732e04,
        4.180633e04,
        4.246328e04,
        4.312824e04,
        4.380128e04,
        4.448245e04,
        4.517184e04,
        4.586950e04,
        4.657550e04,
        4.728991e04,
        4.801279e04,
        4.874421e04,
        4.948423e04,
        5.023293e04,
        5.099037e04,
        5.175661e04,
        5.253172e04,
        5.331578e04,
        5.410884e04,
        5.491098e04,
        5.572226e04,
        5.654275e04,
        5.737251e04,
        5.821161e04,
        5.906013e04,
        5.991812e04,
        6.078566e04,
        6.166281e04,
        6.254964e04,
        6.344622e04,
        6.435261e04,
        6.526889e04,
        6.619511e04,
        6.713135e04,
        6.807767e04,
        6.903414e04,
        7.000083e04,
        7.097781e04,
        7.196513e04,
        7.296288e04,
        7.397111e04,
        7.498990e04,
        7.601930e04,
        7.705940e04,
        7.811024e04,
    ]
)

#  ---------------------- M = 1, I = 3 ---------------------------
M = 1
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        2.016901e01,
        5.674024e01,
        1.013453e02,
        1.532533e02,
        2.118401e02,
        2.764846e02,
        3.466880e02,
        4.220566e02,
        5.022729e02,
        5.870757e02,
        6.762480e02,
        7.696091e02,
        8.670100e02,
        9.683305e02,
        1.073476e03,
        1.182375e03,
        1.294979e03,
        1.411255e03,
        1.531189e03,
        1.654781e03,
        1.782042e03,
        1.912994e03,
        2.047669e03,
        2.186104e03,
        2.328346e03,
        2.474446e03,
        2.624459e03,
        2.778445e03,
        2.936469e03,
        3.098600e03,
        3.264908e03,
        3.435470e03,
        3.610362e03,
        3.789666e03,
        3.973467e03,
        4.161852e03,
        4.354909e03,
        4.552733e03,
        4.755418e03,
        4.963062e03,
        5.175767e03,
        5.393635e03,
        5.616772e03,
        5.845286e03,
        6.079288e03,
        6.318891e03,
        6.564209e03,
        6.815361e03,
        7.072464e03,
        7.335642e03,
        7.605018e03,
        7.880717e03,
        8.162866e03,
        8.451596e03,
        8.747038e03,
        9.049324e03,
        9.358591e03,
        9.674973e03,
        9.998611e03,
        1.032964e04,
        1.066821e04,
        1.101447e04,
        1.136854e04,
        1.173059e04,
        1.210077e04,
        1.247921e04,
        1.286608e04,
        1.326152e04,
        1.366570e04,
        1.407876e04,
        1.450087e04,
        1.493219e04,
        1.537288e04,
        1.582310e04,
        1.628301e04,
        1.675279e04,
        1.723259e04,
        1.772260e04,
        1.822297e04,
        1.873389e04,
        1.925553e04,
        1.978806e04,
        2.033166e04,
        2.088651e04,
        2.145280e04,
        2.203069e04,
        2.262039e04,
        2.322207e04,
        2.383593e04,
        2.446215e04,
        2.510092e04,
        2.575244e04,
        2.641690e04,
        2.709449e04,
        2.778543e04,
        2.848989e04,
        2.920810e04,
        2.994025e04,
        3.068655e04,
        3.144720e04,
        3.222241e04,
        3.301240e04,
        3.381738e04,
        3.463755e04,
        3.547315e04,
        3.632438e04,
        3.719147e04,
        3.807464e04,
        3.897411e04,
        3.989012e04,
        4.082287e04,
        4.177262e04,
        4.273959e04,
        4.372400e04,
        4.472611e04,
        4.574614e04,
        4.678433e04,
        4.784094e04,
        4.891619e04,
        5.001034e04,
        5.112363e04,
        5.225631e04,
        5.340864e04,
        5.458086e04,
        5.577324e04,
        5.698602e04,
        5.821948e04,
        5.947386e04,
        6.074944e04,
        6.204648e04,
        6.336525e04,
        6.470602e04,
        6.606905e04,
        6.745462e04,
        6.886301e04,
        7.029450e04,
        7.174936e04,
        7.322787e04,
        7.473032e04,
        7.625700e04,
        7.780820e04,
        7.938419e04,
        8.098528e04,
        8.261176e04,
        8.426392e04,
        8.594206e04,
        8.764648e04,
        8.937748e04,
        9.113537e04,
        9.292045e04,
        9.473303e04,
        9.657342e04,
        9.844193e04,
        1.003389e05,
        1.022646e05,
        1.042193e05,
        1.062035e05,
        1.082173e05,
        1.102612e05,
        1.123354e05,
        1.144403e05,
        1.165763e05,
        1.187435e05,
        1.209425e05,
        1.231734e05,
        1.254367e05,
        1.277326e05,
        1.300616e05,
        1.324240e05,
        1.348200e05,
        1.372501e05,
        1.397146e05,
        1.422138e05,
        1.447482e05,
        1.473179e05,
        1.499235e05,
        1.525652e05,
        1.552435e05,
        1.579586e05,
        1.607109e05,
        1.635008e05,
        1.663287e05,
        1.691948e05,
        1.720997e05,
        1.750436e05,
        1.780269e05,
        1.810500e05,
        1.841132e05,
        1.872170e05,
        1.903617e05,
        1.935477e05,
        1.967753e05,
        2.000449e05,
        2.033570e05,
        2.067118e05,
        2.101098e05,
        2.135514e05,
        2.170369e05,
        2.205667e05,
        2.241412e05,
        2.277608e05,
        2.314260e05,
        2.351369e05,
        2.388942e05,
        2.426981e05,
        2.465490e05,
        2.504474e05,
        2.543936e05,
        2.583880e05,
        2.624310e05,
        2.665231e05,
        2.706645e05,
        2.748558e05,
        2.790973e05,
        2.833893e05,
        2.877324e05,
        2.921269e05,
        2.965732e05,
        3.010717e05,
        3.056228e05,
        3.102268e05,
        3.148843e05,
        3.195956e05,
        3.243612e05,
        3.291813e05,
        3.340565e05,
        3.389870e05,
        3.439734e05,
        3.490161e05,
        3.541153e05,
        3.592716e05,
        3.644854e05,
        3.697570e05,
        3.750868e05,
        3.804753e05,
        3.859229e05,
        3.914300e05,
        3.969969e05,
        4.026240e05,
        4.083119e05,
        4.140609e05,
        4.198713e05,
        4.257436e05,
        4.316783e05,
        4.376756e05,
        4.437360e05,
        4.498599e05,
        4.560478e05,
        4.622999e05,
        4.686168e05,
    ]
)

#  ---------------------- M = 1, I = 4 ---------------------------
M = 1
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        1.766833e01,
        4.570241e01,
        8.177074e01,
        1.242917e02,
        1.724141e02,
        2.255614e02,
        2.833095e02,
        3.453297e02,
        4.113595e02,
        4.811860e02,
        5.546366e02,
        6.315735e02,
        7.118902e02,
        7.955081e02,
        8.823735e02,
        9.724548e02,
        1.065740e03,
        1.162232e03,
        1.261951e03,
        1.364927e03,
        1.471199e03,
        1.580818e03,
        1.693839e03,
        1.810326e03,
        1.930347e03,
        2.053977e03,
        2.181293e03,
        2.312379e03,
        2.447320e03,
        2.586208e03,
        2.729136e03,
        2.876201e03,
        3.027504e03,
        3.183148e03,
        3.343240e03,
        3.507890e03,
        3.677211e03,
        3.851318e03,
        4.030329e03,
        4.214365e03,
        4.403551e03,
        4.598012e03,
        4.797878e03,
        5.003279e03,
        5.214351e03,
        5.431230e03,
        5.654054e03,
        5.882966e03,
        6.118108e03,
        6.359628e03,
        6.607674e03,
        6.862397e03,
        7.123950e03,
        7.392489e03,
        7.668172e03,
        7.951159e03,
        8.241613e03,
        8.539699e03,
        8.845584e03,
        9.159437e03,
        9.481431e03,
        9.811739e03,
        1.015054e04,
        1.049801e04,
        1.085433e04,
        1.121969e04,
        1.159426e04,
        1.197825e04,
        1.237183e04,
        1.277521e04,
        1.318858e04,
        1.361213e04,
        1.404607e04,
        1.449060e04,
        1.494593e04,
        1.541225e04,
        1.588979e04,
        1.637875e04,
        1.687936e04,
        1.739182e04,
        1.791635e04,
        1.845319e04,
        1.900254e04,
        1.956465e04,
        2.013974e04,
        2.072804e04,
        2.132979e04,
        2.194522e04,
        2.257457e04,
        2.321808e04,
        2.387600e04,
        2.454858e04,
        2.523606e04,
        2.593868e04,
        2.665672e04,
        2.739041e04,
        2.814002e04,
        2.890581e04,
        2.968803e04,
        3.048695e04,
        3.130284e04,
        3.213596e04,
        3.298659e04,
        3.385498e04,
        3.474142e04,
        3.564619e04,
        3.656955e04,
        3.751178e04,
        3.847316e04,
        3.945398e04,
        4.045452e04,
        4.147505e04,
        4.251587e04,
        4.357726e04,
        4.465950e04,
        4.576289e04,
        4.688772e04,
        4.803426e04,
        4.920283e04,
        5.039369e04,
        5.160716e04,
        5.284352e04,
        5.410306e04,
        5.538609e04,
        5.669288e04,
        5.802374e04,
        5.937896e04,
        6.075884e04,
        6.216367e04,
        6.359374e04,
        6.504935e04,
        6.653080e04,
        6.803837e04,
        6.957236e04,
        7.113307e04,
        7.272078e04,
        7.433578e04,
        7.597838e04,
        7.764885e04,
        7.934749e04,
        8.107459e04,
        8.283042e04,
        8.461529e04,
        8.642947e04,
        8.827324e04,
        9.014689e04,
        9.205070e04,
        9.398494e04,
        9.594990e04,
        9.794585e04,
        9.997307e04,
        1.020318e05,
        1.041224e05,
        1.062450e05,
        1.084000e05,
        1.105876e05,
        1.128080e05,
        1.150616e05,
        1.173485e05,
        1.196691e05,
        1.220236e05,
        1.244122e05,
        1.268353e05,
        1.292929e05,
        1.317854e05,
        1.343131e05,
        1.368761e05,
        1.394747e05,
        1.421091e05,
        1.447796e05,
        1.474863e05,
        1.502295e05,
        1.530095e05,
        1.558264e05,
        1.586804e05,
        1.615718e05,
        1.645008e05,
        1.674676e05,
        1.704723e05,
        1.735152e05,
        1.765964e05,
        1.797163e05,
        1.828748e05,
        1.860723e05,
        1.893090e05,
        1.925849e05,
        1.959003e05,
        1.992553e05,
        2.026501e05,
        2.060849e05,
        2.095599e05,
        2.130751e05,
        2.166308e05,
        2.202271e05,
        2.238641e05,
        2.275421e05,
        2.312610e05,
        2.350212e05,
        2.388226e05,
        2.426655e05,
        2.465499e05,
        2.504760e05,
        2.544439e05,
        2.584538e05,
        2.625057e05,
        2.665997e05,
        2.707359e05,
        2.749145e05,
        2.791356e05,
        2.833992e05,
        2.877055e05,
        2.920544e05,
        2.964462e05,
        3.008809e05,
        3.053586e05,
        3.098792e05,
        3.144431e05,
        3.190500e05,
        3.237003e05,
        3.283938e05,
        3.331308e05,
        3.379111e05,
        3.427350e05,
        3.476023e05,
        3.525132e05,
        3.574677e05,
        3.624659e05,
        3.675078e05,
        3.725934e05,
        3.777227e05,
        3.828958e05,
        3.881127e05,
        3.933734e05,
        3.986779e05,
        4.040263e05,
        4.094186e05,
        4.148547e05,
        4.203346e05,
        4.258585e05,
        4.314262e05,
        4.370377e05,
        4.426932e05,
        4.483925e05,
        4.541356e05,
        4.599225e05,
        4.657532e05,
        4.716277e05,
        4.775460e05,
        4.835080e05,
        4.895137e05,
    ]
)

#  ---------------------- M = 1, I = 5 ---------------------------
M = 1
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        1.786086e01,
        4.625151e01,
        8.276956e01,
        1.258219e02,
        1.745467e02,
        2.283599e02,
        2.868320e02,
        3.496303e02,
        4.164889e02,
        4.871921e02,
        5.615653e02,
        6.394690e02,
        7.207956e02,
        8.054658e02,
        8.934261e02,
        9.846456e02,
        1.079113e03,
        1.176835e03,
        1.277832e03,
        1.382138e03,
        1.489795e03,
        1.600858e03,
        1.715385e03,
        1.833446e03,
        1.955112e03,
        2.080462e03,
        2.209579e03,
        2.342549e03,
        2.479463e03,
        2.620417e03,
        2.765507e03,
        2.914836e03,
        3.068509e03,
        3.226632e03,
        3.389316e03,
        3.556674e03,
        3.728824e03,
        3.905883e03,
        4.087973e03,
        4.275219e03,
        4.467747e03,
        4.665685e03,
        4.869166e03,
        5.078323e03,
        5.293293e03,
        5.514213e03,
        5.741224e03,
        5.974468e03,
        6.214091e03,
        6.460239e03,
        6.713060e03,
        6.972705e03,
        7.239327e03,
        7.513080e03,
        7.794120e03,
        8.082606e03,
        8.378697e03,
        8.682555e03,
        8.994343e03,
        9.314226e03,
        9.642370e03,
        9.978944e03,
        1.032412e04,
        1.067806e04,
        1.104095e04,
        1.141296e04,
        1.179427e04,
        1.218504e04,
        1.258547e04,
        1.299573e04,
        1.341601e04,
        1.384648e04,
        1.428733e04,
        1.473876e04,
        1.520094e04,
        1.567407e04,
        1.615834e04,
        1.665393e04,
        1.716105e04,
        1.767988e04,
        1.821063e04,
        1.875349e04,
        1.930866e04,
        1.987633e04,
        2.045672e04,
        2.105002e04,
        2.165643e04,
        2.227617e04,
        2.290944e04,
        2.355644e04,
        2.421738e04,
        2.489248e04,
        2.558195e04,
        2.628600e04,
        2.700484e04,
        2.773869e04,
        2.848776e04,
        2.925227e04,
        3.003245e04,
        3.082850e04,
        3.164066e04,
        3.246914e04,
        3.331417e04,
        3.417596e04,
        3.505476e04,
        3.595078e04,
        3.686425e04,
        3.779540e04,
        3.874447e04,
        3.971168e04,
        4.069726e04,
        4.170145e04,
        4.272449e04,
        4.376661e04,
        4.482804e04,
        4.590903e04,
        4.700981e04,
        4.813063e04,
        4.927172e04,
        5.043333e04,
        5.161570e04,
        5.281908e04,
        5.404371e04,
        5.528984e04,
        5.655772e04,
        5.784759e04,
        5.915970e04,
        6.049431e04,
        6.185167e04,
        6.323202e04,
        6.463563e04,
        6.606275e04,
        6.751363e04,
        6.898853e04,
        7.048770e04,
        7.201142e04,
        7.355993e04,
        7.513350e04,
        7.673238e04,
        7.835685e04,
        8.000716e04,
        8.168358e04,
        8.338637e04,
        8.511579e04,
        8.687212e04,
        8.865563e04,
        9.046658e04,
        9.230523e04,
        9.417187e04,
        9.606675e04,
        9.799016e04,
        9.994237e04,
        1.019236e05,
        1.039343e05,
        1.059745e05,
        1.080446e05,
        1.101449e05,
        1.122756e05,
        1.144371e05,
        1.166295e05,
        1.188533e05,
        1.211086e05,
        1.233957e05,
        1.257149e05,
        1.280666e05,
        1.304509e05,
        1.328682e05,
        1.353187e05,
        1.378027e05,
        1.403206e05,
        1.428725e05,
        1.454589e05,
        1.480799e05,
        1.507358e05,
        1.534269e05,
        1.561536e05,
        1.589161e05,
        1.617147e05,
        1.645496e05,
        1.674212e05,
        1.703297e05,
        1.732755e05,
        1.762588e05,
        1.792799e05,
        1.823391e05,
        1.854366e05,
        1.885729e05,
        1.917480e05,
        1.949625e05,
        1.982164e05,
        2.015102e05,
        2.048440e05,
        2.082182e05,
        2.116331e05,
        2.150890e05,
        2.185861e05,
        2.221247e05,
        2.257051e05,
        2.293277e05,
        2.329926e05,
        2.367001e05,
        2.404506e05,
        2.442444e05,
        2.480816e05,
        2.519626e05,
        2.558877e05,
        2.598572e05,
        2.638713e05,
        2.679303e05,
        2.720345e05,
        2.761841e05,
        2.803795e05,
        2.846209e05,
        2.889086e05,
        2.932429e05,
        2.976240e05,
        3.020522e05,
        3.065279e05,
        3.110511e05,
        3.156223e05,
        3.202417e05,
        3.249096e05,
        3.296262e05,
        3.343917e05,
        3.392066e05,
        3.440709e05,
        3.489851e05,
        3.539492e05,
        3.589637e05,
        3.640287e05,
        3.691446e05,
        3.743115e05,
        3.795298e05,
        3.847996e05,
        3.901213e05,
        3.954950e05,
        4.009211e05,
        4.063997e05,
        4.119311e05,
        4.175156e05,
        4.231535e05,
        4.288448e05,
        4.345899e05,
        4.403891e05,
        4.462425e05,
        4.521504e05,
        4.581130e05,
        4.641305e05,
        4.702033e05,
        4.763314e05,
    ]
)

#  ---------------------- M = 1, I = 6 ---------------------------
M = 1
I = 6
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.600000e01,
        1.066180e02,
        2.759495e02,
        4.937802e02,
        7.505847e02,
        1.041223e03,
        1.362217e03,
        1.711020e03,
        2.085674e03,
        2.484623e03,
        2.906617e03,
        3.350642e03,
        3.815891e03,
        4.301738e03,
        4.807723e03,
        5.333532e03,
        5.878982e03,
        6.444007e03,
        7.028640e03,
        7.633001e03,
        8.257283e03,
        8.901742e03,
        9.566686e03,
        1.025247e04,
        1.095949e04,
        1.168818e04,
        1.243899e04,
        1.321241e04,
        1.400896e04,
        1.482918e04,
        1.567361e04,
        1.654285e04,
        1.743748e04,
        1.835812e04,
        1.930541e04,
        2.027999e04,
        2.128254e04,
        2.231374e04,
        2.337427e04,
        2.446487e04,
        2.558624e04,
        2.673914e04,
        2.792432e04,
        2.914254e04,
        3.039459e04,
        3.168126e04,
        3.300335e04,
        3.436168e04,
        3.575707e04,
        3.719038e04,
        3.866244e04,
        4.017412e04,
        4.172629e04,
        4.331984e04,
        4.495565e04,
        4.663462e04,
        4.835768e04,
        5.012574e04,
        5.193973e04,
        5.380059e04,
        5.570927e04,
        5.766673e04,
        5.967393e04,
        6.173186e04,
        6.384149e04,
        6.600381e04,
        6.821984e04,
        7.049057e04,
        7.281703e04,
        7.520023e04,
        7.764122e04,
        8.014104e04,
        8.270072e04,
        8.532134e04,
        8.800395e04,
        9.074963e04,
        9.355945e04,
        9.643451e04,
        9.937589e04,
        1.023847e05,
        1.054620e05,
        1.086090e05,
        1.118268e05,
        1.151165e05,
        1.184792e05,
        1.219162e05,
        1.254284e05,
        1.290172e05,
        1.326836e05,
        1.364289e05,
        1.402542e05,
        1.441607e05,
        1.481496e05,
        1.522221e05,
        1.563793e05,
        1.606226e05,
        1.649532e05,
        1.693722e05,
        1.738809e05,
        1.784805e05,
        1.831723e05,
        1.879575e05,
        1.928374e05,
        1.978133e05,
        2.028864e05,
        2.080579e05,
        2.133293e05,
        2.187018e05,
        2.241766e05,
        2.297550e05,
        2.354385e05,
        2.412283e05,
        2.471256e05,
        2.531319e05,
        2.592485e05,
        2.654767e05,
        2.718178e05,
        2.782733e05,
        2.848444e05,
        2.915325e05,
        2.983391e05,
        3.052654e05,
        3.123128e05,
        3.194828e05,
        3.267767e05,
        3.341959e05,
        3.417418e05,
        3.494159e05,
        3.572195e05,
        3.651541e05,
        3.732210e05,
        3.814218e05,
        3.897578e05,
        3.982305e05,
        4.068414e05,
        4.155918e05,
        4.244833e05,
        4.335172e05,
        4.426952e05,
        4.520186e05,
        4.614889e05,
        4.711076e05,
        4.808762e05,
        4.907962e05,
        5.008691e05,
        5.110963e05,
        5.214794e05,
        5.320199e05,
        5.427193e05,
        5.535792e05,
        5.646009e05,
        5.757862e05,
        5.871364e05,
        5.986532e05,
        6.103381e05,
        6.221926e05,
        6.342182e05,
        6.464166e05,
        6.587892e05,
        6.713377e05,
        6.840635e05,
        6.969684e05,
        7.100537e05,
        7.233211e05,
        7.367722e05,
        7.504086e05,
        7.642317e05,
        7.782433e05,
        7.924449e05,
        8.068380e05,
        8.214243e05,
        8.362053e05,
        8.511827e05,
        8.663581e05,
        8.817330e05,
        8.973090e05,
        9.130878e05,
        9.290709e05,
        9.452599e05,
        9.616565e05,
        9.782622e05,
        9.950787e05,
        1.012108e06,
        1.029350e06,
        1.046809e06,
        1.064484e06,
        1.082379e06,
        1.100493e06,
        1.118830e06,
        1.137390e06,
        1.156176e06,
        1.175188e06,
        1.194429e06,
        1.213900e06,
        1.233602e06,
        1.253538e06,
        1.273708e06,
        1.294115e06,
        1.314760e06,
        1.335644e06,
        1.356770e06,
        1.378138e06,
        1.399750e06,
        1.421609e06,
        1.443715e06,
        1.466070e06,
        1.488676e06,
        1.511534e06,
        1.534646e06,
        1.558013e06,
        1.581636e06,
        1.605519e06,
        1.629661e06,
        1.654065e06,
        1.678732e06,
        1.703663e06,
        1.728861e06,
        1.754326e06,
        1.780061e06,
        1.806066e06,
        1.832343e06,
        1.858894e06,
        1.885720e06,
        1.912822e06,
        1.940203e06,
        1.967863e06,
        1.995805e06,
        2.024028e06,
        2.052536e06,
        2.081329e06,
        2.110410e06,
        2.139778e06,
        2.169436e06,
        2.199385e06,
        2.229627e06,
        2.260162e06,
        2.290993e06,
        2.322120e06,
        2.353546e06,
        2.385271e06,
        2.417296e06,
        2.449624e06,
        2.482255e06,
        2.515191e06,
        2.548433e06,
        2.581982e06,
        2.615840e06,
        2.650008e06,
        2.684487e06,
        2.719279e06,
        2.754384e06,
    ]
)

#  ---------------------- M = 1, I = 7 ---------------------------
M = 1
I = 7
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        2.020566e01,
        5.328177e01,
        9.597421e01,
        1.463666e02,
        2.034368e02,
        2.664953e02,
        3.350360e02,
        4.086708e02,
        4.870968e02,
        5.700805e02,
        6.574474e02,
        7.490750e02,
        8.448862e02,
        9.448428e02,
        1.048939e03,
        1.157194e03,
        1.269651e03,
        1.386368e03,
        1.507418e03,
        1.632887e03,
        1.762868e03,
        1.897464e03,
        2.036785e03,
        2.180948e03,
        2.330078e03,
        2.484305e03,
        2.643764e03,
        2.808599e03,
        2.978957e03,
        3.154991e03,
        3.336863e03,
        3.524736e03,
        3.718782e03,
        3.919176e03,
        4.126099e03,
        4.339738e03,
        4.560283e03,
        4.787929e03,
        5.022879e03,
        5.265336e03,
        5.515511e03,
        5.773617e03,
        6.039873e03,
        6.314501e03,
        6.597728e03,
        6.889787e03,
        7.190910e03,
        7.501338e03,
        7.821315e03,
        8.151087e03,
        8.490906e03,
        8.841027e03,
        9.201709e03,
        9.573217e03,
        9.955817e03,
        1.034978e04,
        1.075538e04,
        1.117291e04,
        1.160263e04,
        1.204485e04,
        1.249984e04,
        1.296792e04,
        1.344937e04,
        1.394451e04,
        1.445364e04,
        1.497708e04,
        1.551513e04,
        1.606813e04,
        1.663640e04,
        1.722027e04,
        1.782008e04,
        1.843615e04,
        1.906885e04,
        1.971852e04,
        2.038550e04,
        2.107016e04,
        2.177286e04,
        2.249397e04,
        2.323386e04,
        2.399290e04,
        2.477148e04,
        2.556999e04,
        2.638881e04,
        2.722834e04,
        2.808898e04,
        2.897114e04,
        2.987523e04,
        3.080167e04,
        3.175088e04,
        3.272328e04,
        3.371931e04,
        3.473940e04,
        3.578400e04,
        3.685355e04,
        3.794852e04,
        3.906935e04,
        4.021651e04,
        4.139047e04,
        4.259171e04,
        4.382070e04,
        4.507794e04,
        4.636392e04,
        4.767913e04,
        4.902407e04,
        5.039927e04,
        5.180522e04,
        5.324247e04,
        5.471152e04,
        5.621291e04,
        5.774719e04,
        5.931490e04,
        6.091658e04,
        6.255280e04,
        6.422412e04,
        6.593111e04,
        6.767435e04,
        6.945442e04,
        7.127190e04,
        7.312739e04,
        7.502150e04,
        7.695482e04,
        7.892798e04,
        8.094160e04,
        8.299630e04,
        8.509271e04,
        8.723149e04,
        8.941326e04,
        9.163870e04,
        9.390846e04,
        9.622320e04,
        9.858361e04,
        1.009904e05,
        1.034441e05,
        1.059457e05,
        1.084956e05,
        1.110947e05,
        1.137436e05,
        1.164431e05,
        1.191939e05,
        1.219968e05,
        1.248525e05,
        1.277617e05,
        1.307252e05,
        1.337438e05,
        1.368183e05,
        1.399493e05,
        1.431378e05,
        1.463845e05,
        1.496903e05,
        1.530558e05,
        1.564820e05,
        1.599697e05,
        1.635197e05,
        1.671329e05,
        1.708101e05,
        1.745521e05,
        1.783599e05,
        1.822343e05,
        1.861762e05,
        1.901864e05,
        1.942659e05,
        1.984156e05,
        2.026364e05,
        2.069291e05,
        2.112949e05,
        2.157345e05,
        2.202489e05,
        2.248391e05,
        2.295060e05,
        2.342506e05,
        2.390739e05,
        2.439768e05,
        2.489604e05,
        2.540256e05,
        2.591735e05,
        2.644051e05,
        2.697213e05,
        2.751233e05,
        2.806120e05,
        2.861886e05,
        2.918540e05,
        2.976093e05,
        3.034557e05,
        3.093941e05,
        3.154257e05,
        3.215515e05,
        3.277727e05,
        3.340904e05,
        3.405057e05,
        3.470196e05,
        3.536334e05,
        3.603482e05,
        3.671652e05,
        3.740854e05,
        3.811100e05,
        3.882403e05,
        3.954774e05,
        4.028224e05,
        4.102766e05,
        4.178412e05,
        4.255174e05,
        4.333064e05,
        4.412094e05,
        4.492276e05,
        4.573623e05,
        4.656147e05,
        4.739861e05,
        4.824777e05,
        4.910907e05,
        4.998266e05,
        5.086864e05,
        5.176716e05,
        5.267833e05,
        5.360229e05,
        5.453917e05,
        5.548910e05,
        5.645222e05,
        5.742864e05,
        5.841851e05,
        5.942195e05,
        6.043911e05,
        6.147011e05,
        6.251509e05,
        6.357419e05,
        6.464753e05,
        6.573526e05,
        6.683752e05,
        6.795444e05,
        6.908615e05,
        7.023280e05,
        7.139453e05,
        7.257147e05,
        7.376376e05,
        7.497155e05,
        7.619497e05,
        7.743416e05,
        7.868928e05,
        7.996044e05,
        8.124781e05,
        8.255152e05,
        8.387171e05,
        8.520852e05,
        8.656211e05,
        8.793261e05,
        8.932017e05,
        9.072493e05,
        9.214703e05,
        9.358662e05,
        9.504385e05,
        9.651886e05,
        9.801180e05,
        9.952280e05,
        1.010520e06,
        1.025996e06,
        1.041657e06,
        1.057504e06,
        1.073540e06,
        1.089765e06,
        1.106181e06,
        1.122789e06,
        1.139591e06,
        1.156589e06,
        1.173783e06,
        1.191175e06,
        1.208768e06,
        1.226561e06,
        1.244557e06,
        1.262758e06,
        1.281164e06,
        1.299777e06,
        1.318598e06,
        1.337630e06,
        1.356873e06,
        1.376329e06,
        1.396000e06,
        1.415886e06,
        1.435990e06,
        1.456312e06,
        1.476855e06,
        1.497619e06,
        1.518607e06,
        1.539819e06,
        1.561257e06,
        1.582923e06,
        1.604818e06,
        1.626943e06,
        1.649300e06,
        1.671891e06,
        1.694716e06,
        1.717777e06,
        1.741076e06,
        1.764614e06,
        1.788392e06,
        1.812412e06,
        1.836675e06,
        1.861184e06,
        1.885938e06,
        1.910939e06,
        1.936190e06,
        1.961691e06,
    ]
)

#  ---------------------- M = 1, I = 8 ---------------------------
M = 1
I = 8
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        2.048931e01,
        5.406267e01,
        9.739573e01,
        1.485457e02,
        2.064750e02,
        2.704833e02,
        3.400571e02,
        4.148027e02,
        4.944135e02,
        5.786535e02,
        6.673477e02,
        7.603741e02,
        8.576570e02,
        9.591602e02,
        1.064880e03,
        1.174840e03,
        1.289086e03,
        1.407678e03,
        1.530695e03,
        1.658222e03,
        1.790360e03,
        1.927213e03,
        2.068896e03,
        2.215529e03,
        2.367241e03,
        2.524165e03,
        2.686441e03,
        2.854217e03,
        3.027645e03,
        3.206883e03,
        3.392094e03,
        3.583450e03,
        3.781124e03,
        3.985298e03,
        4.196157e03,
        4.413893e03,
        4.638702e03,
        4.870784e03,
        5.110345e03,
        5.357596e03,
        5.612751e03,
        5.876031e03,
        6.147658e03,
        6.427862e03,
        6.716875e03,
        7.014934e03,
        7.322280e03,
        7.639158e03,
        7.965818e03,
        8.302513e03,
        8.649501e03,
        9.007044e03,
        9.375407e03,
        9.754862e03,
        1.014568e04,
        1.054814e04,
        1.096253e04,
        1.138913e04,
        1.182824e04,
        1.228015e04,
        1.274515e04,
        1.322355e04,
        1.371567e04,
        1.422181e04,
        1.474229e04,
        1.527743e04,
        1.582755e04,
        1.639299e04,
        1.697409e04,
        1.757117e04,
        1.818460e04,
        1.881470e04,
        1.946184e04,
        2.012638e04,
        2.080867e04,
        2.150909e04,
        2.222801e04,
        2.296581e04,
        2.372286e04,
        2.449955e04,
        2.529629e04,
        2.611346e04,
        2.695146e04,
        2.781071e04,
        2.869162e04,
        2.959460e04,
        3.052008e04,
        3.146849e04,
        3.244026e04,
        3.343582e04,
        3.445564e04,
        3.550014e04,
        3.656980e04,
        3.766507e04,
        3.878642e04,
        3.993432e04,
        4.110925e04,
        4.231169e04,
        4.354213e04,
        4.480107e04,
        4.608901e04,
        4.740645e04,
        4.875391e04,
        5.013191e04,
        5.154097e04,
        5.298163e04,
        5.445442e04,
        5.595988e04,
        5.749856e04,
        5.907103e04,
        6.067783e04,
        6.231955e04,
        6.399675e04,
        6.571001e04,
        6.745993e04,
        6.924709e04,
        7.107210e04,
        7.293556e04,
        7.483809e04,
        7.678030e04,
        7.876284e04,
        8.078632e04,
        8.285139e04,
        8.495869e04,
        8.710888e04,
        8.930263e04,
        9.154060e04,
        9.382346e04,
        9.615189e04,
        9.852659e04,
        1.009483e05,
        1.034176e05,
        1.059353e05,
        1.085021e05,
        1.111187e05,
        1.137859e05,
        1.165043e05,
        1.192748e05,
        1.220981e05,
        1.249750e05,
        1.279061e05,
        1.308924e05,
        1.339345e05,
        1.370334e05,
        1.401897e05,
        1.434043e05,
        1.466780e05,
        1.500116e05,
        1.534060e05,
        1.568620e05,
        1.603804e05,
        1.639621e05,
        1.676080e05,
        1.713189e05,
        1.750957e05,
        1.789393e05,
        1.828506e05,
        1.868305e05,
        1.908799e05,
        1.949997e05,
        1.991908e05,
        2.034543e05,
        2.077909e05,
        2.122018e05,
        2.166877e05,
        2.212498e05,
        2.258889e05,
        2.306061e05,
        2.354024e05,
        2.402787e05,
        2.452361e05,
        2.502755e05,
        2.553980e05,
        2.606047e05,
        2.658966e05,
        2.712746e05,
        2.767400e05,
        2.822937e05,
        2.879368e05,
        2.936704e05,
        2.994957e05,
        3.054136e05,
        3.114253e05,
        3.175319e05,
        3.237345e05,
        3.300344e05,
        3.364325e05,
        3.429300e05,
        3.495282e05,
        3.562281e05,
        3.630310e05,
        3.699380e05,
        3.769503e05,
        3.840690e05,
        3.912955e05,
        3.986309e05,
        4.060763e05,
        4.136332e05,
        4.213026e05,
        4.290858e05,
        4.369840e05,
        4.449986e05,
        4.531307e05,
        4.613817e05,
        4.697528e05,
        4.782453e05,
        4.868605e05,
        4.955996e05,
        5.044641e05,
        5.134551e05,
        5.225741e05,
        5.318222e05,
        5.412010e05,
        5.507116e05,
        5.603555e05,
        5.701339e05,
        5.800483e05,
        5.901000e05,
        6.002904e05,
        6.106208e05,
        6.210926e05,
        6.317072e05,
        6.424660e05,
        6.533704e05,
        6.644218e05,
        6.756215e05,
        6.869711e05,
        6.984719e05,
        7.101253e05,
        7.219327e05,
        7.338957e05,
        7.460156e05,
        7.582938e05,
        7.707319e05,
        7.833312e05,
        7.960932e05,
        8.090193e05,
        8.221111e05,
        8.353700e05,
        8.487974e05,
        8.623948e05,
        8.761637e05,
        8.901056e05,
        9.042219e05,
        9.185141e05,
        9.329838e05,
        9.476323e05,
        9.624612e05,
        9.774720e05,
        9.926662e05,
        1.008045e06,
        1.023611e06,
        1.039364e06,
        1.055307e06,
        1.071440e06,
        1.087766e06,
        1.104286e06,
        1.121001e06,
        1.137913e06,
        1.155024e06,
        1.172334e06,
        1.189846e06,
        1.207561e06,
        1.225480e06,
        1.243606e06,
        1.261938e06,
        1.280480e06,
        1.299233e06,
        1.318197e06,
        1.337375e06,
        1.356767e06,
        1.376377e06,
        1.396204e06,
        1.416251e06,
        1.436519e06,
        1.457010e06,
        1.477725e06,
        1.498665e06,
        1.519833e06,
        1.541229e06,
        1.562855e06,
        1.584712e06,
        1.606803e06,
        1.629128e06,
        1.651689e06,
        1.674488e06,
        1.697526e06,
        1.720804e06,
        1.744324e06,
        1.768088e06,
        1.792097e06,
        1.816351e06,
        1.840854e06,
        1.865606e06,
        1.890609e06,
        1.915864e06,
        1.941372e06,
        1.967136e06,
        1.993156e06,
        2.019434e06,
    ]
)

#  ---------------------- M = 1, I = 9 ---------------------------
M = 1
I = 9
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.600000e01,
        1.221318e02,
        3.221607e02,
        5.803382e02,
        8.850833e02,
        1.230215e03,
        1.611562e03,
        2.026065e03,
        2.471377e03,
        2.945671e03,
        3.447538e03,
        3.975930e03,
        4.530112e03,
        5.109629e03,
        5.714256e03,
        6.343965e03,
        6.998887e03,
        7.679283e03,
        8.385518e03,
        9.118039e03,
        9.877365e03,
        1.066407e04,
        1.147879e04,
        1.232218e04,
        1.319497e04,
        1.409792e04,
        1.503180e04,
        1.599746e04,
        1.699576e04,
        1.802760e04,
        1.909392e04,
        2.019568e04,
        2.133390e04,
        2.250960e04,
        2.372386e04,
        2.497778e04,
        2.627249e04,
        2.760915e04,
        2.898894e04,
        3.041308e04,
        3.188283e04,
        3.339945e04,
        3.496424e04,
        3.657853e04,
        3.824366e04,
        3.996102e04,
        4.173201e04,
        4.355806e04,
        4.544061e04,
        4.738114e04,
        4.938116e04,
        5.144219e04,
        5.356578e04,
        5.575351e04,
        5.800696e04,
        6.032778e04,
        6.271759e04,
        6.517809e04,
        6.771096e04,
        7.031792e04,
        7.300073e04,
        7.576115e04,
        7.860099e04,
        8.152207e04,
        8.452624e04,
        8.761536e04,
        9.079135e04,
        9.405614e04,
        9.741167e04,
        1.008599e05,
        1.044029e05,
        1.080427e05,
        1.117813e05,
        1.156208e05,
        1.195634e05,
        1.236111e05,
        1.277662e05,
        1.320309e05,
        1.364074e05,
        1.408980e05,
        1.455049e05,
        1.502304e05,
        1.550770e05,
        1.600471e05,
        1.651429e05,
        1.703670e05,
        1.757218e05,
        1.812099e05,
        1.868337e05,
        1.925958e05,
        1.984989e05,
        2.045456e05,
        2.107385e05,
        2.170803e05,
        2.235737e05,
        2.302216e05,
        2.370267e05,
        2.439918e05,
        2.511198e05,
        2.584135e05,
        2.658760e05,
        2.735102e05,
        2.813191e05,
        2.893056e05,
        2.974730e05,
        3.058242e05,
        3.143624e05,
        3.230909e05,
        3.320128e05,
        3.411313e05,
        3.504498e05,
        3.599715e05,
        3.696999e05,
        3.796383e05,
        3.897902e05,
        4.001590e05,
        4.107482e05,
        4.215615e05,
        4.326023e05,
        4.438744e05,
        4.553813e05,
        4.671268e05,
        4.791146e05,
        4.913485e05,
        5.038324e05,
        5.165701e05,
        5.295655e05,
        5.428226e05,
        5.563453e05,
        5.701377e05,
        5.842039e05,
        5.985480e05,
        6.131740e05,
        6.280863e05,
        6.432891e05,
        6.587866e05,
        6.745832e05,
        6.906833e05,
        7.070913e05,
        7.238115e05,
        7.408486e05,
        7.582071e05,
        7.758916e05,
        7.939067e05,
        8.122571e05,
        8.309475e05,
        8.499827e05,
        8.693675e05,
        8.891068e05,
        9.092054e05,
        9.296684e05,
        9.505008e05,
        9.717075e05,
        9.932938e05,
        1.015265e06,
        1.037625e06,
        1.060381e06,
        1.083537e06,
        1.107099e06,
        1.131072e06,
        1.155461e06,
        1.180272e06,
        1.205511e06,
        1.231183e06,
        1.257293e06,
        1.283848e06,
        1.310853e06,
        1.338313e06,
        1.366236e06,
        1.394625e06,
        1.423488e06,
        1.452831e06,
        1.482659e06,
        1.512978e06,
        1.543794e06,
        1.575115e06,
        1.606945e06,
        1.639291e06,
        1.672160e06,
        1.705557e06,
        1.739489e06,
        1.773963e06,
        1.808986e06,
        1.844562e06,
        1.880700e06,
        1.917406e06,
        1.954686e06,
        1.992547e06,
        2.030996e06,
        2.070041e06,
        2.109686e06,
        2.149941e06,
        2.190810e06,
        2.232303e06,
        2.274425e06,
        2.317183e06,
        2.360586e06,
        2.404639e06,
        2.449351e06,
        2.494728e06,
        2.540778e06,
        2.587508e06,
        2.634926e06,
        2.683039e06,
        2.731855e06,
        2.781380e06,
        2.831623e06,
        2.882592e06,
        2.934293e06,
        2.986735e06,
        3.039925e06,
        3.093872e06,
        3.148582e06,
        3.204065e06,
        3.260327e06,
        3.317376e06,
        3.375221e06,
        3.433870e06,
        3.493331e06,
        3.553611e06,
        3.614719e06,
        3.676663e06,
        3.739451e06,
        3.803092e06,
        3.867593e06,
        3.932963e06,
        3.999210e06,
        4.066343e06,
        4.134370e06,
        4.203299e06,
        4.273139e06,
        4.343898e06,
        4.415584e06,
        4.488207e06,
        4.561774e06,
        4.636295e06,
        4.711778e06,
        4.788230e06,
        4.865663e06,
        4.944082e06,
        5.023498e06,
        5.103920e06,
        5.185355e06,
        5.267812e06,
        5.351301e06,
        5.435830e06,
        5.521408e06,
        5.608043e06,
        5.695745e06,
        5.784521e06,
        5.874383e06,
        5.965337e06,
        6.057392e06,
        6.150559e06,
        6.244845e06,
        6.340260e06,
        6.436812e06,
        6.534510e06,
        6.633364e06,
        6.733382e06,
        6.834573e06,
        6.936945e06,
        7.040509e06,
        7.145273e06,
        7.251246e06,
        7.358436e06,
        7.466853e06,
        7.576506e06,
        7.687404e06,
        7.799555e06,
        7.912969e06,
        8.027654e06,
        8.143620e06,
        8.260875e06,
        8.379428e06,
        8.499289e06,
        8.620465e06,
        8.742967e06,
        8.866803e06,
        8.991981e06,
        9.118511e06,
        9.246401e06,
        9.375661e06,
        9.506299e06,
        9.638324e06,
        9.771745e06,
        9.906570e06,
        1.004281e07,
        1.018047e07,
        1.031956e07,
        1.046009e07,
        1.060207e07,
        1.074551e07,
        1.089041e07,
        1.103679e07,
        1.118465e07,
        1.133400e07,
        1.148485e07,
        1.163721e07,
        1.179108e07,
        1.194648e07,
    ]
)

#  ---------------------- M = 2, I = 1 ---------------------------
M = 2
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.172300e00,
        1.797937e01,
        3.579152e01,
        5.360487e01,
        7.142001e01,
        8.924629e01,
        1.071216e02,
        1.251286e02,
        1.433912e02,
        1.620592e02,
        1.812909e02,
        2.012420e02,
        2.220599e02,
        2.438818e02,
        2.668355e02,
        2.910405e02,
        3.166103e02,
        3.436540e02,
        3.722775e02,
        4.025853e02,
        4.346809e02,
        4.686683e02,
        5.046524e02,
        5.427394e02,
        5.830375e02,
        6.256573e02,
        6.707119e02,
        7.183172e02,
        7.685924e02,
        8.216598e02,
        8.776450e02,
        9.366774e02,
        9.988899e02,
        1.064419e03,
        1.133406e03,
        1.205995e03,
        1.282335e03,
        1.362579e03,
        1.446883e03,
        1.535408e03,
        1.628322e03,
        1.725793e03,
        1.827996e03,
        1.935111e03,
        2.047321e03,
        2.164814e03,
        2.287785e03,
        2.416430e03,
        2.550954e03,
        2.691564e03,
        2.838473e03,
        2.991899e03,
        3.152065e03,
        3.319200e03,
        3.493538e03,
        3.675317e03,
        3.864782e03,
        4.062182e03,
        4.267774e03,
        4.481819e03,
        4.704582e03,
        4.936336e03,
        5.177359e03,
        5.427935e03,
        5.688354e03,
        5.958911e03,
        6.239909e03,
        6.531654e03,
        6.834460e03,
        7.148647e03,
        7.474541e03,
        7.812474e03,
        8.162786e03,
        8.525820e03,
        8.901928e03,
        9.291468e03,
        9.694803e03,
        1.011231e04,
        1.054435e04,
        1.099132e04,
        1.145362e04,
        1.193162e04,
        1.242575e04,
        1.293641e04,
        1.346401e04,
        1.400899e04,
        1.457177e04,
        1.515280e04,
        1.575251e04,
        1.637136e04,
        1.700982e04,
        1.766834e04,
        1.834740e04,
        1.904748e04,
        1.976907e04,
        2.051267e04,
        2.127878e04,
        2.206790e04,
        2.288057e04,
        2.371729e04,
        2.457861e04,
        2.546506e04,
        2.637719e04,
        2.731556e04,
        2.828073e04,
        2.927327e04,
        3.029376e04,
        3.134277e04,
        3.242091e04,
        3.352878e04,
        3.466698e04,
        3.583614e04,
        3.703686e04,
        3.826979e04,
        3.953557e04,
        4.083483e04,
        4.216825e04,
        4.353647e04,
        4.494018e04,
        4.638004e04,
        4.785674e04,
        4.937098e04,
        5.092347e04,
        5.251490e04,
        5.414600e04,
        5.581749e04,
        5.753010e04,
        5.928458e04,
        6.108167e04,
        6.292213e04,
        6.480672e04,
        6.673621e04,
        6.871139e04,
        7.073304e04,
        7.280195e04,
        7.491893e04,
        7.708478e04,
        7.930032e04,
        8.156638e04,
        8.388379e04,
        8.625338e04,
        8.867600e04,
        9.115251e04,
        9.368376e04,
        9.627062e04,
        9.891397e04,
        1.016147e05,
        1.043737e05,
        1.071918e05,
        1.100700e05,
        1.130091e05,
        1.160101e05,
        1.190739e05,
        1.222014e05,
        1.253936e05,
        1.286514e05,
        1.319757e05,
        1.353675e05,
        1.388278e05,
        1.423574e05,
        1.459575e05,
        1.496289e05,
        1.533726e05,
        1.571897e05,
        1.610810e05,
        1.650477e05,
        1.690906e05,
        1.732109e05,
        1.774094e05,
        1.816873e05,
        1.860455e05,
        1.904851e05,
        1.950070e05,
        1.996124e05,
        2.043022e05,
        2.090774e05,
        2.139392e05,
        2.188885e05,
        2.239265e05,
        2.290540e05,
        2.342723e05,
        2.395823e05,
        2.449850e05,
        2.504817e05,
        2.560732e05,
        2.617607e05,
        2.675453e05,
        2.734279e05,
        2.794097e05,
        2.854917e05,
        2.916749e05,
        2.979606e05,
        3.043496e05,
        3.108431e05,
        3.174422e05,
        3.241479e05,
        3.309613e05,
        3.378834e05,
        3.449153e05,
        3.520581e05,
        3.593129e05,
        3.666806e05,
        3.741624e05,
        3.817594e05,
        3.894725e05,
        3.973029e05,
        4.052515e05,
        4.133195e05,
        4.215079e05,
        4.298178e05,
        4.382501e05,
        4.468060e05,
        4.554865e05,
        4.642925e05,
        4.732252e05,
        4.822856e05,
        4.914747e05,
        5.007935e05,
        5.102430e05,
        5.198243e05,
        5.295383e05,
        5.393861e05,
        5.493687e05,
        5.594870e05,
        5.697421e05,
        5.801349e05,
        5.906665e05,
        6.013377e05,
        6.121497e05,
        6.231032e05,
        6.341994e05,
        6.454391e05,
        6.568232e05,
        6.683529e05,
        6.800289e05,
        6.918522e05,
        7.038237e05,
        7.159444e05,
        7.282151e05,
        7.406368e05,
        7.532103e05,
        7.659366e05,
        7.788165e05,
        7.918509e05,
        8.050406e05,
        8.183866e05,
        8.318897e05,
        8.455507e05,
        8.593704e05,
        8.733498e05,
        8.874895e05,
    ]
)

#  ---------------------- M = 2, I = 2 ---------------------------
M = 2
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.344550e00,
        3.595709e01,
        7.157976e01,
        1.072048e02,
        1.428342e02,
        1.784919e02,
        2.142697e02,
        2.503579e02,
        2.870319e02,
        3.246141e02,
        3.634386e02,
        4.038283e02,
        4.460854e02,
        4.904894e02,
        5.372995e02,
        5.867589e02,
        6.390984e02,
        6.945407e02,
        7.533034e02,
        8.156015e02,
        8.816500e02,
        9.516650e02,
        1.025865e03,
        1.104474e03,
        1.187719e03,
        1.275832e03,
        1.369052e03,
        1.467626e03,
        1.571805e03,
        1.681848e03,
        1.798023e03,
        1.920605e03,
        2.049877e03,
        2.186128e03,
        2.329660e03,
        2.480780e03,
        2.639806e03,
        2.807062e03,
        2.982884e03,
        3.167617e03,
        3.361614e03,
        3.565239e03,
        3.778863e03,
        4.002871e03,
        4.237655e03,
        4.483619e03,
        4.741175e03,
        5.010747e03,
        5.292769e03,
        5.587687e03,
        5.895957e03,
        6.218045e03,
        6.554429e03,
        6.905599e03,
        7.272055e03,
        7.654309e03,
        8.052885e03,
        8.468319e03,
        8.901159e03,
        9.351963e03,
        9.821303e03,
        1.030976e04,
        1.081794e04,
        1.134645e04,
        1.189590e04,
        1.246693e04,
        1.306020e04,
        1.367635e04,
        1.431607e04,
        1.498004e04,
        1.566896e04,
        1.638355e04,
        1.712453e04,
        1.789264e04,
        1.868864e04,
        1.951329e04,
        2.036739e04,
        2.125172e04,
        2.216710e04,
        2.311436e04,
        2.409433e04,
        2.510787e04,
        2.615584e04,
        2.723914e04,
        2.835866e04,
        2.951531e04,
        3.071003e04,
        3.194376e04,
        3.321745e04,
        3.453208e04,
        3.588864e04,
        3.728814e04,
        3.873160e04,
        4.022005e04,
        4.175454e04,
        4.333615e04,
        4.496596e04,
        4.664506e04,
        4.837457e04,
        5.015563e04,
        5.198938e04,
        5.387698e04,
        5.581962e04,
        5.781850e04,
        5.987482e04,
        6.198981e04,
        6.416473e04,
        6.640083e04,
        6.869940e04,
        7.106172e04,
        7.348912e04,
        7.598292e04,
        7.854447e04,
        8.117512e04,
        8.387627e04,
        8.664930e04,
        8.949564e04,
        9.241670e04,
        9.541394e04,
        9.848883e04,
        1.016428e05,
        1.048775e05,
        1.081942e05,
        1.115947e05,
        1.150803e05,
        1.186528e05,
        1.223136e05,
        1.260644e05,
        1.299067e05,
        1.338423e05,
        1.378728e05,
        1.419997e05,
        1.462249e05,
        1.505501e05,
        1.549768e05,
        1.595069e05,
        1.641422e05,
        1.688843e05,
        1.737350e05,
        1.786963e05,
        1.837698e05,
        1.889574e05,
        1.942609e05,
        1.996823e05,
        2.052233e05,
        2.108859e05,
        2.166720e05,
        2.225835e05,
        2.286223e05,
        2.347904e05,
        2.410897e05,
        2.475223e05,
        2.540900e05,
        2.607950e05,
        2.676393e05,
        2.746248e05,
        2.817536e05,
        2.890278e05,
        2.964495e05,
        3.040207e05,
        3.117435e05,
        3.196200e05,
        3.276524e05,
        3.358427e05,
        3.441932e05,
        3.527060e05,
        3.613832e05,
        3.702270e05,
        3.792395e05,
        3.884231e05,
        3.977798e05,
        4.073119e05,
        4.170216e05,
        4.269111e05,
        4.369827e05,
        4.472386e05,
        4.576810e05,
        4.683123e05,
        4.791346e05,
        4.901502e05,
        5.013614e05,
        5.127705e05,
        5.243797e05,
        5.361914e05,
        5.482078e05,
        5.604312e05,
        5.728640e05,
        5.855084e05,
        5.983667e05,
        6.114413e05,
        6.247344e05,
        6.382484e05,
        6.519855e05,
        6.659481e05,
        6.801385e05,
        6.945590e05,
        7.092119e05,
        7.240996e05,
        7.392243e05,
        7.545883e05,
        7.701940e05,
        7.860436e05,
        8.021395e05,
        8.184840e05,
        8.350793e05,
        8.519277e05,
        8.690316e05,
        8.863932e05,
        9.040148e05,
        9.218986e05,
        9.400470e05,
        9.584622e05,
        9.771464e05,
        9.961019e05,
        1.015331e06,
        1.034836e06,
        1.054619e06,
        1.074682e06,
        1.095027e06,
        1.115657e06,
        1.136574e06,
        1.157780e06,
        1.179277e06,
        1.201067e06,
        1.223153e06,
        1.245537e06,
        1.268220e06,
        1.291205e06,
        1.314494e06,
        1.338089e06,
        1.361993e06,
        1.386206e06,
        1.410732e06,
        1.435573e06,
        1.460729e06,
        1.486204e06,
        1.512000e06,
        1.538118e06,
        1.564560e06,
        1.591328e06,
        1.618425e06,
        1.645852e06,
        1.673611e06,
        1.701705e06,
        1.730134e06,
        1.758901e06,
        1.788007e06,
        1.817455e06,
        1.847247e06,
        1.877383e06,
        1.907867e06,
    ]
)

#  ---------------------- M = 2, I = 3 ---------------------------
M = 2
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.260550e00,
        3.809072e01,
        7.584727e01,
        1.136063e02,
        1.513692e02,
        1.891574e02,
        2.270552e02,
        2.652444e02,
        3.039959e02,
        3.436341e02,
        3.845016e02,
        4.269345e02,
        4.712510e02,
        5.177476e02,
        5.667010e02,
        6.183711e02,
        6.730046e02,
        7.308391e02,
        7.921059e02,
        8.570332e02,
        9.258477e02,
        9.987770e02,
        1.076051e03,
        1.157902e03,
        1.244567e03,
        1.336290e03,
        1.433318e03,
        1.535906e03,
        1.644315e03,
        1.758814e03,
        1.879680e03,
        2.007196e03,
        2.141654e03,
        2.283356e03,
        2.432611e03,
        2.589737e03,
        2.755060e03,
        2.928918e03,
        3.111655e03,
        3.303627e03,
        3.505199e03,
        3.716746e03,
        3.938651e03,
        4.171310e03,
        4.415128e03,
        4.670521e03,
        4.937913e03,
        5.217743e03,
        5.510457e03,
        5.816514e03,
        6.136385e03,
        6.470548e03,
        6.819498e03,
        7.183738e03,
        7.563783e03,
        7.960160e03,
        8.373410e03,
        8.804082e03,
        9.252740e03,
        9.719961e03,
        1.020633e04,
        1.071245e04,
        1.123894e04,
        1.178641e04,
        1.235551e04,
        1.294689e04,
        1.356122e04,
        1.419917e04,
        1.486143e04,
        1.554872e04,
        1.626173e04,
        1.700122e04,
        1.776792e04,
        1.856258e04,
        1.938600e04,
        2.023894e04,
        2.112221e04,
        2.203662e04,
        2.298300e04,
        2.396219e04,
        2.497505e04,
        2.602245e04,
        2.710526e04,
        2.822438e04,
        2.938072e04,
        3.057522e04,
        3.180880e04,
        3.308241e04,
        3.439702e04,
        3.575361e04,
        3.715316e04,
        3.859669e04,
        4.008520e04,
        4.161973e04,
        4.320132e04,
        4.483101e04,
        4.650988e04,
        4.823901e04,
        5.001948e04,
        5.185240e04,
        5.373887e04,
        5.568001e04,
        5.767697e04,
        5.973088e04,
        6.184289e04,
        6.401416e04,
        6.624588e04,
        6.853920e04,
        7.089533e04,
        7.331546e04,
        7.580078e04,
        7.835251e04,
        8.097186e04,
        8.366006e04,
        8.641834e04,
        8.924792e04,
        9.215004e04,
        9.512594e04,
        9.817687e04,
        1.013041e05,
        1.045088e05,
        1.077923e05,
        1.111559e05,
        1.146007e05,
        1.181281e05,
        1.217393e05,
        1.254356e05,
        1.292182e05,
        1.330883e05,
        1.370473e05,
        1.410964e05,
        1.452368e05,
        1.494697e05,
        1.537965e05,
        1.582183e05,
        1.627364e05,
        1.673520e05,
        1.720663e05,
        1.768805e05,
        1.817959e05,
        1.868137e05,
        1.919349e05,
        1.971610e05,
        2.024929e05,
        2.079318e05,
        2.134791e05,
        2.191356e05,
        2.249027e05,
        2.307815e05,
        2.367730e05,
        2.428784e05,
        2.490987e05,
        2.554351e05,
        2.618886e05,
        2.684603e05,
        2.751512e05,
        2.819624e05,
        2.888948e05,
        2.959496e05,
        3.031276e05,
        3.104298e05,
        3.178573e05,
        3.254109e05,
        3.330916e05,
        3.409004e05,
        3.488380e05,
        3.569055e05,
        3.651036e05,
        3.734333e05,
        3.818953e05,
        3.904905e05,
        3.992197e05,
        4.080837e05,
        4.170833e05,
        4.262192e05,
        4.354922e05,
    ]
)

#  ---------------------- M = 2, I = 4 ---------------------------
M = 2
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.325894e01,
        2.223057e02,
        4.426057e02,
        6.629202e02,
        8.832573e02,
        1.103737e03,
        1.324841e03,
        1.547611e03,
        1.773607e03,
        2.004700e03,
        2.242871e03,
        2.490065e03,
        2.748119e03,
        3.018750e03,
        3.303554e03,
        3.604030e03,
        3.921599e03,
        4.257630e03,
        4.613454e03,
        4.990381e03,
        5.389715e03,
        5.812764e03,
        6.260847e03,
        6.735300e03,
        7.237487e03,
        7.768800e03,
        8.330662e03,
        8.924535e03,
        9.551919e03,
        1.021436e04,
        1.091343e04,
        1.165077e04,
        1.242805e04,
        1.324700e04,
        1.410938e04,
        1.501703e04,
        1.597182e04,
        1.697567e04,
        1.803057e04,
        1.913855e04,
        2.030170e04,
        2.152217e04,
        2.280215e04,
        2.414392e04,
        2.554979e04,
        2.702215e04,
        2.856342e04,
        3.017611e04,
        3.186279e04,
        3.362608e04,
        3.546867e04,
        3.739332e04,
        3.940283e04,
        4.150010e04,
        4.368808e04,
        4.596979e04,
        4.834831e04,
        5.082679e04,
        5.340848e04,
        5.609665e04,
        5.889468e04,
        6.180600e04,
        6.483413e04,
        6.798265e04,
        7.125521e04,
        7.465556e04,
        7.818749e04,
        8.185488e04,
        8.566170e04,
        8.961199e04,
        9.370984e04,
        9.795946e04,
        1.023651e05,
        1.069311e05,
        1.116619e05,
        1.165621e05,
        1.216361e05,
        1.268886e05,
        1.323244e05,
        1.379484e05,
        1.437653e05,
        1.497802e05,
        1.559982e05,
        1.624244e05,
        1.690639e05,
        1.759222e05,
        1.830045e05,
        1.903164e05,
        1.978633e05,
        2.056509e05,
        2.136848e05,
        2.219708e05,
        2.305147e05,
        2.393225e05,
        2.484001e05,
        2.577535e05,
        2.673889e05,
        2.773125e05,
        2.875304e05,
        2.980491e05,
        3.088749e05,
        3.200142e05,
        3.314736e05,
        3.432596e05,
        3.553788e05,
        3.678379e05,
        3.806436e05,
        3.938026e05,
        4.073219e05,
        4.212082e05,
        4.354685e05,
        4.501096e05,
        4.651387e05,
        4.805627e05,
        4.963887e05,
        5.126236e05,
        5.292748e05,
        5.463492e05,
        5.638540e05,
        5.817965e05,
        6.001837e05,
        6.190230e05,
        6.383214e05,
        6.580863e05,
        6.783248e05,
        6.990442e05,
        7.202517e05,
        7.419545e05,
        7.641599e05,
        7.868749e05,
        8.101069e05,
        8.338629e05,
        8.581502e05,
        8.829758e05,
        9.083470e05,
        9.342706e05,
        9.607539e05,
        9.878038e05,
        1.015427e06,
        1.043631e06,
        1.072423e06,
        1.101809e06,
        1.131795e06,
        1.162390e06,
        1.193600e06,
        1.225430e06,
        1.257889e06,
        1.290982e06,
        1.324715e06,
        1.359096e06,
        1.394131e06,
        1.429826e06,
        1.466187e06,
        1.503220e06,
        1.540932e06,
        1.579328e06,
        1.618415e06,
        1.658198e06,
        1.698683e06,
        1.739876e06,
        1.781782e06,
        1.824407e06,
        1.867756e06,
        1.911835e06,
        1.956650e06,
        2.002204e06,
        2.048503e06,
        2.095553e06,
        2.143358e06,
        2.191923e06,
        2.241253e06,
        2.291353e06,
        2.342226e06,
        2.393878e06,
        2.446312e06,
        2.499534e06,
    ]
)

#  ---------------------- M = 2, I = 5 ---------------------------
M = 2
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.521080e00,
        7.618089e01,
        1.516935e02,
        2.272111e02,
        3.027382e02,
        3.783295e02,
        4.541900e02,
        5.307384e02,
        6.085758e02,
        6.884015e02,
        7.709370e02,
        8.568792e02,
        9.468802e02,
        1.041544e03,
        1.141433e03,
        1.247075e03,
        1.358972e03,
        1.477611e03,
        1.603466e03,
        1.737009e03,
        1.878710e03,
        2.029043e03,
        2.188489e03,
        2.357536e03,
        2.536684e03,
        2.726445e03,
        2.927343e03,
        3.139917e03,
        3.364724e03,
        3.602332e03,
        3.853330e03,
        4.118322e03,
        4.397931e03,
        4.692798e03,
        5.003582e03,
        5.330962e03,
        5.675636e03,
        6.038323e03,
        6.419760e03,
        6.820707e03,
        7.241943e03,
        7.684269e03,
        8.148509e03,
        8.635506e03,
        9.146128e03,
        9.681264e03,
        1.024183e04,
        1.082875e04,
        1.144299e04,
        1.208554e04,
        1.275739e04,
        1.345959e04,
        1.419317e04,
        1.495924e04,
        1.575889e04,
        1.659324e04,
        1.746347e04,
        1.837075e04,
        1.931629e04,
        2.030133e04,
        2.132713e04,
        2.239497e04,
        2.350618e04,
        2.466211e04,
        2.586412e04,
        2.711361e04,
        2.841201e04,
        2.976079e04,
        3.116142e04,
        3.261543e04,
        3.412435e04,
        3.568975e04,
        3.731326e04,
        3.899648e04,
        4.074109e04,
        4.254878e04,
        4.442127e04,
        4.636031e04,
        4.836769e04,
        5.044520e04,
        5.259471e04,
        5.481807e04,
        5.711720e04,
        5.949401e04,
        6.195048e04,
        6.448859e04,
        6.711037e04,
        6.981786e04,
        7.261315e04,
        7.549834e04,
        7.847557e04,
        8.154701e04,
        8.471484e04,
        8.798130e04,
        9.134862e04,
        9.481909e04,
        9.839500e04,
        1.020787e05,
        1.058725e05,
        1.097788e05,
        1.138000e05,
        1.179385e05,
        1.221969e05,
        1.265774e05,
        1.310827e05,
        1.357152e05,
        1.404776e05,
        1.453722e05,
        1.504017e05,
        1.555688e05,
        1.608759e05,
        1.663257e05,
        1.719208e05,
        1.776640e05,
        1.835577e05,
        1.896048e05,
        1.958079e05,
        2.021696e05,
        2.086927e05,
        2.153799e05,
        2.222339e05,
        2.292574e05,
        2.364532e05,
        2.438239e05,
        2.513722e05,
        2.591010e05,
        2.670130e05,
        2.751108e05,
        2.833972e05,
        2.918749e05,
        3.005467e05,
        3.094152e05,
        3.184831e05,
        3.277532e05,
        3.372281e05,
        3.469105e05,
        3.568031e05,
        3.669086e05,
        3.772295e05,
        3.877685e05,
        3.985282e05,
        4.095113e05,
        4.207202e05,
        4.321576e05,
        4.438260e05,
        4.557279e05,
        4.678659e05,
        4.802424e05,
        4.928599e05,
        5.057207e05,
        5.188275e05,
        5.321824e05,
        5.457879e05,
        5.596464e05,
        5.737601e05,
        5.881313e05,
        6.027624e05,
        6.176554e05,
        6.328126e05,
        6.482363e05,
        6.639284e05,
        6.798912e05,
        6.961267e05,
        7.126369e05,
        7.294239e05,
        7.464896e05,
        7.638361e05,
        7.814651e05,
        7.993786e05,
        8.175784e05,
        8.360663e05,
        8.548442e05,
        8.739137e05,
        8.932765e05,
        9.129343e05,
        9.328888e05,
    ]
)

#  ---------------------- M = 2, I = 6 ---------------------------
M = 2
I = 6
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.651606e01,
        4.445925e02,
        8.851739e02,
        1.325785e03,
        1.766449e03,
        2.207477e03,
        2.650035e03,
        3.096522e03,
        3.550398e03,
        4.015699e03,
        4.496597e03,
        4.997122e03,
        5.521046e03,
        6.071862e03,
        6.652812e03,
        7.266940e03,
        7.917143e03,
        8.606215e03,
        9.336891e03,
        1.011188e04,
        1.093387e04,
        1.180560e04,
        1.272982e04,
        1.370933e04,
        1.474700e04,
        1.584577e04,
        1.700865e04,
        1.823873e04,
        1.953919e04,
        2.091330e04,
        2.236443e04,
        2.389604e04,
        2.551171e04,
        2.721511e04,
        2.901001e04,
        3.090030e04,
        3.288998e04,
        3.498317e04,
        3.718410e04,
        3.949710e04,
        4.192665e04,
        4.447733e04,
        4.715386e04,
        4.996106e04,
        5.290390e04,
        5.598748e04,
        5.921700e04,
        6.259783e04,
        6.613544e04,
        6.983547e04,
        7.370367e04,
        7.774594e04,
        8.196832e04,
        8.637699e04,
        9.097828e04,
        9.577865e04,
        1.007847e05,
        1.060033e05,
        1.114413e05,
        1.171057e05,
        1.230038e05,
        1.291430e05,
        1.355307e05,
        1.421748e05,
        1.490831e05,
        1.562635e05,
        1.637242e05,
        1.714737e05,
        1.795203e05,
        1.878728e05,
        1.965400e05,
        2.055309e05,
        2.148547e05,
        2.245208e05,
        2.345385e05,
        2.449177e05,
        2.556682e05,
        2.668000e05,
        2.783233e05,
        2.902486e05,
        3.025862e05,
        3.153471e05,
        3.285420e05,
        3.421821e05,
        3.562785e05,
        3.708427e05,
        3.858862e05,
        4.014209e05,
        4.174586e05,
        4.340114e05,
        4.510916e05,
        4.687115e05,
        4.868838e05,
        5.056212e05,
        5.249365e05,
        5.448429e05,
        5.653535e05,
        5.864817e05,
        6.082409e05,
        6.306448e05,
        6.537072e05,
        6.774420e05,
        7.018632e05,
        7.269850e05,
        7.528217e05,
        7.793877e05,
        8.066975e05,
        8.347658e05,
        8.636073e05,
        8.932368e05,
        9.236693e05,
        9.549198e05,
        9.870035e05,
        1.019935e06,
        1.053731e06,
        1.088405e06,
        1.123974e06,
        1.160452e06,
        1.197856e06,
        1.236200e06,
        1.275501e06,
        1.315774e06,
        1.357034e06,
        1.399297e06,
        1.442580e06,
        1.486897e06,
        1.532264e06,
        1.578697e06,
        1.626211e06,
        1.674823e06,
        1.724548e06,
        1.775400e06,
        1.827397e06,
        1.880553e06,
        1.934884e06,
        1.990405e06,
        2.047132e06,
        2.105079e06,
        2.164262e06,
        2.224697e06,
        2.286397e06,
        2.349379e06,
        2.413656e06,
        2.479244e06,
        2.546157e06,
        2.614410e06,
        2.684016e06,
        2.754992e06,
        2.827349e06,
        2.901104e06,
        2.976268e06,
        3.052857e06,
        3.130883e06,
        3.210361e06,
        3.291303e06,
        3.373723e06,
        3.457633e06,
        3.543047e06,
        3.629976e06,
        3.718434e06,
        3.808433e06,
        3.899985e06,
        3.993102e06,
        4.087795e06,
        4.184076e06,
        4.281956e06,
        4.381448e06,
        4.482561e06,
        4.585306e06,
        4.689695e06,
        4.795737e06,
        4.903442e06,
        5.012821e06,
        5.123884e06,
        5.236639e06,
        5.351097e06,
    ]
)

#  ---------------------- M = 2, I = 7 ---------------------------
M = 2
I = 7
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.250890e00,
        2.020899e01,
        4.025104e01,
        6.029436e01,
        8.033986e01,
        1.003996e02,
        1.205209e02,
        1.408040e02,
        1.613971e02,
        1.824767e02,
        2.042283e02,
        2.268340e02,
        2.504658e02,
        2.752848e02,
        3.014409e02,
        3.290757e02,
        3.583237e02,
        3.893145e02,
        4.221748e02,
        4.570293e02,
        4.940023e02,
        5.332187e02,
        5.748044e02,
        6.188873e02,
        6.655979e02,
        7.150694e02,
        7.674382e02,
        8.228445e02,
        8.814321e02,
        9.433489e02,
        1.008747e03,
        1.077783e03,
        1.150618e03,
        1.227417e03,
        1.308352e03,
        1.393596e03,
        1.483332e03,
        1.577744e03,
        1.677024e03,
        1.781366e03,
        1.890973e03,
        2.006051e03,
        2.126813e03,
        2.253477e03,
        2.386266e03,
        2.525410e03,
        2.671145e03,
        2.823711e03,
        2.983356e03,
        3.150333e03,
        3.324902e03,
        3.507329e03,
        3.697886e03,
        3.896851e03,
        4.104509e03,
        4.321152e03,
        4.547077e03,
        4.782590e03,
        5.028001e03,
        5.283630e03,
        5.549800e03,
        5.826843e03,
        6.115099e03,
        6.414913e03,
        6.726639e03,
        7.050636e03,
        7.387272e03,
        7.736920e03,
        8.099964e03,
        8.476792e03,
        8.867801e03,
        9.273394e03,
        9.693984e03,
        1.012999e04,
        1.058184e04,
        1.104996e04,
        1.153481e04,
        1.203682e04,
        1.255646e04,
        1.309419e04,
        1.365049e04,
        1.422584e04,
        1.482072e04,
        1.543563e04,
        1.607109e04,
        1.672760e04,
        1.740569e04,
        1.810588e04,
        1.882871e04,
        1.957473e04,
        2.034450e04,
        2.113858e04,
        2.195754e04,
        2.280195e04,
        2.367242e04,
        2.456953e04,
        2.549389e04,
        2.644612e04,
        2.742683e04,
        2.843666e04,
        2.947625e04,
        3.054624e04,
        3.164730e04,
        3.278009e04,
        3.394529e04,
        3.514357e04,
        3.637564e04,
        3.764218e04,
        3.894392e04,
        4.028157e04,
        4.165585e04,
        4.306751e04,
        4.451729e04,
        4.600595e04,
        4.753424e04,
        4.910294e04,
        5.071284e04,
        5.236471e04,
        5.405937e04,
        5.579761e04,
        5.758027e04,
        5.940815e04,
        6.128210e04,
        6.320296e04,
        6.517158e04,
        6.718883e04,
        6.925557e04,
        7.137269e04,
        7.354107e04,
        7.576161e04,
        7.803522e04,
        8.036280e04,
        8.274529e04,
        8.518362e04,
        8.767872e04,
        9.023154e04,
        9.284305e04,
        9.551420e04,
        9.824598e04,
        1.010394e05,
        1.038953e05,
        1.068149e05,
        1.097991e05,
        1.128489e05,
        1.159653e05,
        1.191494e05,
        1.224023e05,
        1.257249e05,
        1.291182e05,
        1.325835e05,
        1.361217e05,
        1.397340e05,
        1.434213e05,
        1.471849e05,
        1.510257e05,
        1.549449e05,
        1.589437e05,
        1.630231e05,
        1.671842e05,
        1.714282e05,
        1.757562e05,
        1.801694e05,
        1.846689e05,
        1.892559e05,
        1.939315e05,
        1.986969e05,
        2.035533e05,
        2.085017e05,
        2.135436e05,
        2.186799e05,
        2.239119e05,
        2.292408e05,
        2.346678e05,
        2.401941e05,
        2.458208e05,
        2.515493e05,
        2.573807e05,
        2.633163e05,
        2.693572e05,
        2.755047e05,
        2.817600e05,
        2.881243e05,
        2.945989e05,
        3.011850e05,
        3.078838e05,
        3.146966e05,
        3.216246e05,
        3.286691e05,
        3.358312e05,
        3.431123e05,
        3.505135e05,
        3.580362e05,
        3.656815e05,
        3.734508e05,
        3.813451e05,
        3.893659e05,
        3.975143e05,
        4.057916e05,
        4.141989e05,
        4.227377e05,
        4.314090e05,
        4.402142e05,
        4.491544e05,
        4.582309e05,
        4.674450e05,
        4.767978e05,
        4.862906e05,
        4.959246e05,
        5.057011e05,
        5.156212e05,
        5.256861e05,
        5.358972e05,
        5.462555e05,
        5.567623e05,
        5.674188e05,
        5.782262e05,
        5.891856e05,
        6.002984e05,
        6.115655e05,
        6.229883e05,
        6.345679e05,
        6.463054e05,
        6.582021e05,
        6.702590e05,
        6.824774e05,
        6.948584e05,
        7.074030e05,
        7.201125e05,
        7.329880e05,
        7.460305e05,
        7.592412e05,
        7.726213e05,
        7.861717e05,
        7.998937e05,
        8.137882e05,
        8.278563e05,
        8.420992e05,
        8.565179e05,
        8.711134e05,
        8.858868e05,
        9.008391e05,
        9.159714e05,
        9.312846e05,
        9.467798e05,
        9.624580e05,
        9.783202e05,
        9.943673e05,
        1.010600e06,
        1.027020e06,
        1.043628e06,
        1.060425e06,
    ]
)

#  ---------------------- M = 2, I = 8 ---------------------------
M = 2
I = 8
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.391189e01,
        2.356850e02,
        4.693664e02,
        7.030628e02,
        9.367842e02,
        1.170667e03,
        1.405248e03,
        1.641677e03,
        1.881655e03,
        2.127217e03,
        2.380506e03,
        2.643624e03,
        2.918557e03,
        3.207165e03,
        3.511177e03,
        3.832224e03,
        4.171854e03,
        4.531559e03,
        4.912793e03,
        5.316991e03,
        5.745580e03,
        6.199992e03,
        6.681674e03,
        7.192093e03,
        7.732745e03,
        8.305157e03,
        8.910895e03,
        9.551564e03,
        1.022881e04,
        1.094434e04,
        1.169988e04,
        1.249723e04,
        1.333824e04,
        1.422480e04,
        1.515886e04,
        1.614244e04,
        1.717760e04,
        1.826646e04,
        1.941121e04,
        2.061408e04,
        2.187739e04,
        2.320350e04,
        2.459484e04,
        2.605391e04,
        2.758326e04,
        2.918551e04,
        3.086338e04,
        3.261960e04,
        3.445702e04,
        3.637852e04,
        3.838709e04,
        4.048575e04,
        4.267762e04,
        4.496589e04,
        4.735382e04,
        4.984473e04,
        5.244204e04,
        5.514923e04,
        5.796986e04,
        6.090757e04,
        6.396608e04,
        6.714918e04,
        7.046075e04,
        7.390475e04,
        7.748521e04,
        8.120625e04,
        8.507207e04,
        8.908696e04,
        9.325528e04,
        9.758148e04,
        1.020701e05,
        1.067258e05,
        1.115532e05,
        1.165571e05,
        1.217425e05,
        1.271142e05,
        1.326774e05,
        1.384371e05,
        1.443986e05,
        1.505672e05,
        1.569483e05,
        1.635474e05,
        1.703700e05,
        1.774218e05,
        1.847086e05,
        1.922361e05,
        2.000103e05,
        2.080372e05,
        2.163229e05,
        2.248735e05,
        2.336952e05,
        2.427945e05,
        2.521776e05,
        2.618512e05,
        2.718217e05,
        2.820959e05,
        2.926803e05,
        3.035819e05,
        3.148074e05,
        3.263639e05,
        3.382582e05,
        3.504976e05,
        3.630890e05,
        3.760398e05,
        3.893571e05,
        4.030483e05,
        4.171208e05,
        4.315819e05,
        4.464392e05,
        4.617002e05,
        4.773724e05,
        4.934635e05,
        5.099811e05,
        5.269329e05,
        5.443266e05,
        5.621700e05,
        5.804710e05,
        5.992372e05,
        6.184765e05,
        6.381968e05,
        6.584059e05,
        6.791119e05,
        7.003224e05,
        7.220455e05,
        7.442890e05,
        7.670610e05,
        7.903691e05,
        8.142215e05,
        8.386259e05,
        8.635903e05,
        8.891225e05,
        9.152303e05,
        9.419216e05,
        9.692043e05,
        9.970860e05,
        1.025575e06,
        1.054678e06,
        1.084403e06,
        1.114758e06,
        1.145751e06,
        1.177388e06,
        1.209678e06,
        1.242628e06,
        1.276246e06,
        1.310538e06,
        1.345512e06,
        1.381175e06,
        1.417535e06,
        1.454598e06,
        1.492372e06,
        1.530863e06,
        1.570079e06,
        1.610026e06,
        1.650710e06,
        1.692140e06,
        1.734320e06,
        1.777258e06,
        1.820960e06,
        1.865433e06,
        1.910682e06,
        1.956714e06,
        2.003535e06,
        2.051150e06,
        2.099566e06,
        2.148789e06,
        2.198824e06,
        2.249676e06,
        2.301352e06,
        2.353856e06,
        2.407194e06,
        2.461371e06,
        2.516392e06,
        2.572262e06,
        2.628986e06,
        2.686569e06,
        2.745015e06,
    ]
)

#  ---------------------- M = 2, I = 9 ---------------------------
M = 2
I = 9
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.124397e01,
        6.874652e02,
        1.368916e03,
        2.050410e03,
        2.731976e03,
        3.413998e03,
        4.098007e03,
        4.787289e03,
        5.486743e03,
        6.202233e03,
        6.939947e03,
        7.705959e03,
        8.506016e03,
        9.345477e03,
        1.022934e04,
        1.116230e04,
        1.214882e04,
        1.319320e04,
        1.429960e04,
        1.547216e04,
        1.671497e04,
        1.803216e04,
        1.942786e04,
        2.090629e04,
        2.247174e04,
        2.412860e04,
        2.588134e04,
        2.773459e04,
        2.969305e04,
        3.176160e04,
        3.394522e04,
        3.624906e04,
        3.867840e04,
        4.123867e04,
        4.393547e04,
        4.677456e04,
        4.976184e04,
        5.290340e04,
        5.620549e04,
        5.967453e04,
        6.331712e04,
        6.714003e04,
        7.115023e04,
        7.535485e04,
        7.976121e04,
        8.437683e04,
        8.920942e04,
        9.426687e04,
        9.955728e04,
        1.050889e05,
        1.108703e05,
        1.169102e05,
        1.232174e05,
        1.298010e05,
        1.366705e05,
        1.438352e05,
        1.513051e05,
        1.590899e05,
        1.672000e05,
        1.756458e05,
        1.844378e05,
        1.935870e05,
        2.031044e05,
        2.130014e05,
        2.232894e05,
        2.339804e05,
        2.450863e05,
        2.566195e05,
        2.685923e05,
        2.810176e05,
        2.939083e05,
        3.072777e05,
        3.211394e05,
        3.355069e05,
        3.503944e05,
        3.658161e05,
        3.817865e05,
        3.983203e05,
        4.154326e05,
        4.331386e05,
        4.514539e05,
        4.703944e05,
        4.899760e05,
        5.102151e05,
        5.311284e05,
        5.527328e05,
        5.750453e05,
        5.980834e05,
        6.218648e05,
        6.464075e05,
        6.717298e05,
        6.978501e05,
        7.247874e05,
        7.525606e05,
        7.811893e05,
        8.106929e05,
        8.410916e05,
        8.724056e05,
        9.046553e05,
        9.378615e05,
        9.720455e05,
        1.007229e06,
        1.043432e06,
        1.080679e06,
        1.118991e06,
        1.158390e06,
        1.198899e06,
        1.240543e06,
        1.283343e06,
        1.327324e06,
        1.372511e06,
        1.418926e06,
        1.466595e06,
        1.515544e06,
        1.565796e06,
        1.617378e06,
        1.670316e06,
        1.724635e06,
        1.780363e06,
        1.837526e06,
        1.896150e06,
        1.956265e06,
        2.017896e06,
        2.081072e06,
        2.145822e06,
        2.212173e06,
        2.280156e06,
        2.349798e06,
        2.421130e06,
        2.494182e06,
        2.568982e06,
        2.645562e06,
        2.723953e06,
        2.804185e06,
        2.886290e06,
        2.970298e06,
        3.056243e06,
        3.144156e06,
        3.234069e06,
        3.326015e06,
        3.420028e06,
        3.516140e06,
        3.614384e06,
        3.714796e06,
        3.817408e06,
        3.922256e06,
        4.029373e06,
        4.138795e06,
        4.250556e06,
        4.364693e06,
        4.481240e06,
        4.600234e06,
        4.721710e06,
        4.845706e06,
        4.972258e06,
        5.101402e06,
        5.233175e06,
        5.367616e06,
        5.504761e06,
        5.644648e06,
        5.787315e06,
        5.932800e06,
        6.081142e06,
        6.232379e06,
        6.386550e06,
        6.543694e06,
        6.703849e06,
        6.867056e06,
        7.033353e06,
        7.202781e06,
        7.375378e06,
        7.551186e06,
        7.730243e06,
        7.912590e06,
        8.098268e06,
        8.287317e06,
        8.479777e06,
        8.675690e06,
        8.875095e06,
        9.078035e06,
        9.284549e06,
        9.494679e06,
        9.708467e06,
        9.925953e06,
        1.014718e07,
        1.037219e07,
        1.060102e07,
        1.083371e07,
        1.107031e07,
        1.131086e07,
        1.155539e07,
        1.180396e07,
        1.205660e07,
        1.231335e07,
        1.257426e07,
        1.283936e07,
        1.310870e07,
        1.338233e07,
        1.366027e07,
        1.394258e07,
        1.422929e07,
        1.452045e07,
        1.481610e07,
        1.511628e07,
        1.542103e07,
        1.573039e07,
        1.604440e07,
        1.636310e07,
        1.668655e07,
        1.701476e07,
        1.734779e07,
        1.768569e07,
        1.802847e07,
        1.837620e07,
        1.872890e07,
        1.908663e07,
        1.944941e07,
        1.981729e07,
        2.019030e07,
        2.056850e07,
        2.095191e07,
        2.134058e07,
        2.173454e07,
        2.213383e07,
        2.253850e07,
        2.294858e07,
        2.336411e07,
        2.378512e07,
        2.421166e07,
        2.464377e07,
        2.508147e07,
        2.552481e07,
        2.597382e07,
        2.642854e07,
        2.688901e07,
        2.735527e07,
        2.782734e07,
        2.830527e07,
        2.878909e07,
        2.927883e07,
        2.977453e07,
        3.027623e07,
        3.078396e07,
        3.129774e07,
        3.181763e07,
        3.234365e07,
        3.287583e07,
        3.341421e07,
        3.395881e07,
        3.450968e07,
        3.506684e07,
    ]
)

#  ---------------------- M = 2, I = 10 ---------------------------
M = 2
I = 10
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.501700e00,
        4.041606e01,
        8.049824e01,
        1.205830e02,
        1.606730e02,
        2.007995e02,
        2.410771e02,
        2.817371e02,
        3.231082e02,
        3.655703e02,
        4.095143e02,
        4.553170e02,
        5.033312e02,
        5.538845e02,
        6.072820e02,
        6.638110e02,
        7.237459e02,
        7.873522e02,
        8.548902e02,
        9.266178e02,
        1.002793e03,
        1.083677e03,
        1.169533e03,
        1.260630e03,
        1.357243e03,
        1.459653e03,
        1.568150e03,
        1.683030e03,
        1.804598e03,
        1.933171e03,
        2.069070e03,
        2.212630e03,
        2.364195e03,
        2.524117e03,
        2.692761e03,
        2.870501e03,
        3.057723e03,
        3.254823e03,
        3.462209e03,
        3.680301e03,
        3.909530e03,
        4.150338e03,
        4.403179e03,
        4.668522e03,
        4.946845e03,
        5.238639e03,
        5.544410e03,
        5.864675e03,
        6.199964e03,
        6.550821e03,
        6.917802e03,
        7.301478e03,
        7.702433e03,
        8.121265e03,
        8.558585e03,
        9.015020e03,
        9.491209e03,
        9.987807e03,
        1.050548e04,
        1.104492e04,
        1.160682e04,
        1.219189e04,
        1.280087e04,
        1.343449e04,
        1.409352e04,
        1.477873e04,
        1.549091e04,
        1.623087e04,
        1.699943e04,
        1.779742e04,
        1.862571e04,
        1.948515e04,
        2.037665e04,
        2.130110e04,
        2.225942e04,
        2.325254e04,
        2.428143e04,
        2.534705e04,
        2.645038e04,
        2.759244e04,
        2.877424e04,
        2.999682e04,
        3.126123e04,
        3.256856e04,
        3.391989e04,
        3.531632e04,
        3.675900e04,
        3.824905e04,
        3.978765e04,
        4.137597e04,
        4.301520e04,
        4.470658e04,
        4.645132e04,
        4.825069e04,
        5.010596e04,
        5.201841e04,
        5.398935e04,
        5.602011e04,
        5.811204e04,
        6.026650e04,
        6.248487e04,
        6.476855e04,
        6.711897e04,
        6.953757e04,
        7.202580e04,
        7.458515e04,
        7.721711e04,
        7.992319e04,
        8.270494e04,
        8.556390e04,
        8.850166e04,
        9.151980e04,
        9.461994e04,
        9.780372e04,
        1.010728e05,
        1.044288e05,
        1.078734e05,
        1.114085e05,
        1.150356e05,
        1.187565e05,
        1.225730e05,
        1.264870e05,
        1.305001e05,
        1.346143e05,
        1.388313e05,
        1.431531e05,
        1.475815e05,
        1.521185e05,
        1.567659e05,
        1.615257e05,
        1.663998e05,
        1.713903e05,
        1.764992e05,
        1.817284e05,
        1.870800e05,
        1.925560e05,
        1.981586e05,
        2.038898e05,
        2.097518e05,
        2.157466e05,
        2.218764e05,
        2.281434e05,
        2.345498e05,
        2.410978e05,
        2.477895e05,
        2.546272e05,
        2.616132e05,
        2.687498e05,
        2.760392e05,
        2.834837e05,
        2.910857e05,
        2.988474e05,
        3.067713e05,
        3.148597e05,
        3.231150e05,
        3.315396e05,
        3.401358e05,
        3.489062e05,
        3.578531e05,
        3.669790e05,
        3.762864e05,
        3.857777e05,
        3.954555e05,
        4.053222e05,
        4.153804e05,
        4.256326e05,
        4.360813e05,
        4.467291e05,
        4.575786e05,
        4.686322e05,
        4.798927e05,
        4.913626e05,
        5.030444e05,
        5.149409e05,
        5.270546e05,
        5.393881e05,
        5.519441e05,
        5.647252e05,
        5.777342e05,
        5.909735e05,
        6.044459e05,
        6.181541e05,
        6.321007e05,
        6.462885e05,
        6.607200e05,
        6.753979e05,
        6.903251e05,
        7.055041e05,
        7.209376e05,
        7.366284e05,
        7.525791e05,
        7.687924e05,
        7.852711e05,
        8.020178e05,
        8.190353e05,
        8.363262e05,
        8.538932e05,
        8.717391e05,
        8.898665e05,
        9.082781e05,
        9.269767e05,
        9.459648e05,
        9.652453e05,
        9.848207e05,
        1.004694e06,
        1.024867e06,
        1.045343e06,
        1.066125e06,
        1.087216e06,
        1.108617e06,
        1.130332e06,
        1.152363e06,
        1.174712e06,
        1.197384e06,
        1.220379e06,
        1.243701e06,
        1.267352e06,
        1.291335e06,
        1.315653e06,
        1.340307e06,
        1.365301e06,
        1.390637e06,
        1.416318e06,
        1.442345e06,
        1.468723e06,
        1.495452e06,
        1.522536e06,
        1.549977e06,
        1.577777e06,
        1.605939e06,
        1.634466e06,
        1.663359e06,
        1.692621e06,
        1.722255e06,
        1.752263e06,
        1.782647e06,
        1.813409e06,
        1.844552e06,
        1.876079e06,
        1.907990e06,
        1.940290e06,
        1.972979e06,
        2.006060e06,
        2.039536e06,
        2.073408e06,
        2.107678e06,
        2.142350e06,
        2.177424e06,
        2.212904e06,
        2.248791e06,
        2.285086e06,
    ]
)

#  --------------- CO2 838: M = 2, I = 0 ALIAS-----------------
TIPS_2017_ISOT_HASH[(M, 0)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, 0)] = TIPS_2017_ISOQ_HASH[(M, I)]

#  ---------------------- M = 2, I = 11 ---------------------------
M = 2
I = 11
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.782335e01,
        4.713557e02,
        9.387029e02,
        1.406080e03,
        1.873518e03,
        2.341368e03,
        2.810932e03,
        3.284859e03,
        3.766925e03,
        4.261513e03,
        4.773136e03,
        5.306147e03,
        5.864623e03,
        6.452344e03,
        7.072828e03,
        7.729387e03,
        8.425175e03,
        9.163245e03,
        9.946589e03,
        1.077817e04,
        1.166095e04,
        1.259791e04,
        1.359209e04,
        1.464656e04,
        1.576448e04,
        1.694906e04,
        1.820363e04,
        1.953159e04,
        2.093643e04,
        2.242176e04,
        2.399128e04,
        2.564882e04,
        2.739831e04,
        2.924378e04,
        3.118942e04,
        3.323950e04,
        3.539843e04,
        3.767076e04,
        4.006115e04,
        4.257440e04,
        4.521543e04,
        4.798931e04,
        5.090124e04,
        5.395655e04,
        5.716074e04,
        6.051942e04,
        6.403836e04,
        6.772347e04,
        7.158083e04,
        7.561663e04,
        7.983725e04,
        8.424921e04,
        8.885918e04,
        9.367400e04,
        9.870066e04,
        1.039463e05,
        1.094183e05,
        1.151240e05,
        1.210712e05,
        1.272677e05,
        1.337214e05,
        1.404405e05,
        1.474333e05,
        1.547084e05,
        1.622744e05,
        1.701402e05,
        1.783147e05,
        1.868073e05,
        1.956274e05,
        2.047844e05,
        2.142882e05,
        2.241486e05,
        2.343760e05,
        2.449804e05,
        2.559725e05,
        2.673630e05,
        2.791627e05,
        2.913827e05,
        3.040342e05,
        3.171288e05,
        3.306779e05,
        3.446935e05,
        3.591876e05,
        3.741723e05,
        3.896601e05,
        4.056634e05,
        4.221951e05,
        4.392682e05,
        4.568957e05,
        4.750909e05,
        4.938673e05,
        5.132387e05,
        5.332187e05,
        5.538215e05,
        5.750612e05,
        5.969522e05,
        6.195090e05,
        6.427462e05,
        6.666788e05,
        6.913216e05,
        7.166898e05,
        7.427988e05,
        7.696639e05,
        7.973007e05,
        8.257250e05,
        8.549525e05,
        8.849992e05,
        9.158811e05,
        9.476145e05,
        9.802157e05,
        1.013701e06,
        1.048087e06,
        1.083390e06,
        1.119627e06,
        1.156815e06,
        1.194970e06,
        1.234110e06,
        1.274250e06,
        1.315409e06,
        1.357604e06,
        1.400851e06,
        1.445167e06,
        1.490570e06,
        1.537077e06,
        1.584704e06,
        1.633470e06,
        1.683392e06,
        1.734485e06,
        1.786769e06,
        1.840259e06,
        1.894973e06,
        1.950928e06,
        2.008141e06,
        2.066630e06,
        2.126410e06,
        2.187498e06,
        2.249913e06,
        2.313669e06,
        2.378785e06,
        2.445276e06,
        2.513159e06,
        2.582450e06,
        2.653165e06,
        2.725322e06,
        2.798935e06,
        2.874020e06,
        2.950594e06,
        3.028672e06,
        3.108269e06,
        3.189401e06,
        3.272083e06,
        3.356330e06,
        3.442157e06,
        3.529579e06,
        3.618610e06,
        3.709264e06,
        3.801557e06,
        3.895501e06,
        3.991111e06,
        4.088400e06,
        4.187382e06,
        4.288070e06,
        4.390478e06,
        4.494617e06,
        4.600501e06,
        4.708142e06,
        4.817553e06,
        4.928745e06,
        5.041730e06,
        5.156520e06,
        5.273126e06,
        5.391560e06,
        5.511832e06,
        5.633953e06,
        5.757934e06,
        5.883784e06,
    ]
)

#  ---------------------- M = 2, I = 12 ---------------------------
M = 2
I = 12
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.248682e01,
        1.374885e03,
        2.737741e03,
        4.100686e03,
        5.463802e03,
        6.828082e03,
        8.197234e03,
        9.578835e03,
        1.098375e04,
        1.242462e04,
        1.391448e04,
        1.546591e04,
        1.709070e04,
        1.879977e04,
        2.060326e04,
        2.251071e04,
        2.453122e04,
        2.667355e04,
        2.894631e04,
        3.135799e04,
        3.391712e04,
        3.663224e04,
        3.951206e04,
        4.256541e04,
        4.580131e04,
        4.922903e04,
        5.285804e04,
        5.669811e04,
        6.075926e04,
        6.505180e04,
        6.958637e04,
        7.437390e04,
        7.942564e04,
        8.475318e04,
        9.036846e04,
        9.628373e04,
        1.025116e05,
        1.090652e05,
        1.159576e05,
        1.232028e05,
        1.308148e05,
        1.388081e05,
        1.471975e05,
        1.559983e05,
        1.652263e05,
        1.748975e05,
        1.850284e05,
        1.956358e05,
        2.067372e05,
        2.183504e05,
        2.304934e05,
        2.431851e05,
        2.564443e05,
        2.702908e05,
        2.847445e05,
        2.998258e05,
        3.155556e05,
        3.319555e05,
        3.490472e05,
        3.668531e05,
        3.853960e05,
        4.046992e05,
        4.247867e05,
        4.456827e05,
        4.674120e05,
        4.900000e05,
        5.134725e05,
        5.378560e05,
        5.631772e05,
        5.894637e05,
        6.167433e05,
        6.450447e05,
        6.743967e05,
        7.048290e05,
        7.363717e05,
        7.690554e05,
        8.029115e05,
        8.379716e05,
        8.742681e05,
        9.118340e05,
        9.507027e05,
        9.909083e05,
        1.032485e06,
        1.075469e06,
        1.119896e06,
        1.165801e06,
        1.213222e06,
        1.262197e06,
        1.312763e06,
        1.364960e06,
        1.418826e06,
        1.474402e06,
        1.531729e06,
        1.590847e06,
        1.651799e06,
        1.714626e06,
        1.779372e06,
        1.846081e06,
        1.914797e06,
        1.985564e06,
        2.058429e06,
        2.133437e06,
        2.210636e06,
        2.290073e06,
        2.371795e06,
        2.455852e06,
        2.542294e06,
        2.631169e06,
        2.722529e06,
        2.816425e06,
        2.912910e06,
        3.012035e06,
        3.113855e06,
        3.218422e06,
        3.325792e06,
        3.436020e06,
        3.549161e06,
        3.665273e06,
        3.784412e06,
        3.906637e06,
        4.032006e06,
        4.160578e06,
        4.292413e06,
        4.427572e06,
        4.566115e06,
        4.708105e06,
        4.853604e06,
        5.002674e06,
        5.155381e06,
        5.311788e06,
        5.471961e06,
        5.635964e06,
        5.803865e06,
        5.975731e06,
        6.151628e06,
        6.331626e06,
        6.515793e06,
        6.704199e06,
        6.896914e06,
        7.094009e06,
        7.295554e06,
        7.501623e06,
        7.712287e06,
        7.927620e06,
        8.147695e06,
        8.372588e06,
        8.602372e06,
        8.837123e06,
        9.076918e06,
        9.321833e06,
        9.571945e06,
        9.827332e06,
        1.008807e07,
        1.035424e07,
        1.062593e07,
        1.090320e07,
        1.118615e07,
        1.147484e07,
        1.176937e07,
        1.206982e07,
        1.237626e07,
        1.268879e07,
        1.300747e07,
        1.333241e07,
        1.366367e07,
        1.400135e07,
        1.434553e07,
        1.469629e07,
        1.505372e07,
        1.541791e07,
        1.578894e07,
        1.616690e07,
        1.655188e07,
        1.694395e07,
        1.734322e07,
        1.774977e07,
        1.816368e07,
        1.858505e07,
        1.901396e07,
        1.945050e07,
        1.989476e07,
        2.034683e07,
        2.080679e07,
        2.127475e07,
        2.175079e07,
        2.223499e07,
        2.272745e07,
        2.322825e07,
        2.373750e07,
        2.425527e07,
        2.478166e07,
        2.531676e07,
        2.586066e07,
        2.641344e07,
        2.697521e07,
        2.754605e07,
        2.812604e07,
        2.871529e07,
        2.931387e07,
        2.992189e07,
        3.053943e07,
        3.116658e07,
        3.180343e07,
        3.245007e07,
        3.310659e07,
        3.377308e07,
        3.444963e07,
        3.513633e07,
        3.583326e07,
        3.654053e07,
        3.725820e07,
        3.798638e07,
        3.872515e07,
        3.947459e07,
        4.023480e07,
        4.100587e07,
        4.178787e07,
        4.258090e07,
        4.338505e07,
        4.420039e07,
        4.502701e07,
        4.586501e07,
        4.671445e07,
        4.757544e07,
        4.844805e07,
        4.933236e07,
        5.022846e07,
        5.113643e07,
        5.205636e07,
        5.298832e07,
        5.393239e07,
        5.488867e07,
        5.585722e07,
        5.683812e07,
        5.783147e07,
        5.883732e07,
        5.985577e07,
        6.088689e07,
        6.193076e07,
        6.298745e07,
        6.405704e07,
        6.513961e07,
        6.623523e07,
        6.734397e07,
        6.846590e07,
        6.960111e07,
        7.074966e07,
        7.191162e07,
        7.308707e07,
        7.427607e07,
        7.547870e07,
    ]
)

#  ---------------------- M = 2, I = 13 ---------------------------
M = 2
I = 13
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.172250e00,
        1.797782e01,
        3.578844e01,
        5.360026e01,
        7.141461e01,
        8.924655e01,
        1.071502e02,
        1.252330e02,
        1.436455e02,
        1.625593e02,
        1.821490e02,
        2.025809e02,
        2.240094e02,
        2.465762e02,
        2.704128e02,
        2.956425e02,
        3.223827e02,
        3.507470e02,
        3.808470e02,
        4.127935e02,
        4.466974e02,
        4.826712e02,
        5.208288e02,
        5.612866e02,
        6.041637e02,
        6.495824e02,
        6.976684e02,
        7.485507e02,
        8.023624e02,
        8.592405e02,
        9.193259e02,
        9.827640e02,
        1.049704e03,
        1.120301e03,
        1.194713e03,
        1.273103e03,
        1.355638e03,
        1.442493e03,
        1.533844e03,
        1.629875e03,
        1.730772e03,
        1.836729e03,
        1.947943e03,
        2.064618e03,
        2.186963e03,
        2.315191e03,
        2.449522e03,
        2.590182e03,
        2.737401e03,
        2.891416e03,
        3.052469e03,
        3.220808e03,
        3.396688e03,
        3.580369e03,
        3.772118e03,
        3.972206e03,
        4.180913e03,
        4.398524e03,
        4.625331e03,
        4.861631e03,
        5.107729e03,
        5.363936e03,
        5.630570e03,
        5.907955e03,
        6.196423e03,
        6.496312e03,
        6.807968e03,
        7.131742e03,
        7.467993e03,
        7.817088e03,
        8.179401e03,
        8.555312e03,
        8.945209e03,
        9.349488e03,
        9.768552e03,
        1.020281e04,
        1.065268e04,
        1.111859e04,
        1.160098e04,
        1.210027e04,
        1.261693e04,
        1.315140e04,
        1.370416e04,
        1.427567e04,
        1.486641e04,
        1.547688e04,
        1.610757e04,
        1.675898e04,
        1.743163e04,
        1.812603e04,
        1.884273e04,
        1.958224e04,
        2.034513e04,
        2.113194e04,
        2.194324e04,
        2.277960e04,
        2.364159e04,
        2.452981e04,
        2.544485e04,
        2.638733e04,
        2.735784e04,
        2.835702e04,
        2.938550e04,
        3.044392e04,
        3.153292e04,
        3.265317e04,
        3.380534e04,
        3.499009e04,
        3.620811e04,
        3.746011e04,
        3.874677e04,
        4.006882e04,
        4.142697e04,
        4.282196e04,
        4.425451e04,
        4.572539e04,
        4.723535e04,
        4.878515e04,
        5.037557e04,
        5.200740e04,
        5.368142e04,
        5.539845e04,
        5.715929e04,
        5.896477e04,
        6.081571e04,
        6.271296e04,
        6.465735e04,
        6.664976e04,
        6.869105e04,
        7.078209e04,
        7.292377e04,
        7.511697e04,
        7.736262e04,
        7.966160e04,
        8.201486e04,
        8.442330e04,
        8.688789e04,
        8.940955e04,
        9.198924e04,
        9.462794e04,
        9.732660e04,
        1.000862e05,
        1.029078e05,
        1.057923e05,
        1.087407e05,
        1.117541e05,
        1.148335e05,
        1.179799e05,
        1.211944e05,
        1.244779e05,
        1.278316e05,
        1.312566e05,
        1.347538e05,
        1.383243e05,
        1.419693e05,
        1.456898e05,
        1.494870e05,
        1.533619e05,
        1.573156e05,
        1.613494e05,
        1.654642e05,
        1.696612e05,
        1.739416e05,
        1.783064e05,
        1.827570e05,
        1.872943e05,
        1.919196e05,
        1.966340e05,
        2.014388e05,
        2.063350e05,
        2.113239e05,
        2.164066e05,
        2.215843e05,
        2.268583e05,
        2.322298e05,
        2.376998e05,
        2.432697e05,
        2.489407e05,
        2.547139e05,
        2.605906e05,
        2.665720e05,
        2.726593e05,
        2.788538e05,
        2.851567e05,
        2.915692e05,
        2.980925e05,
        3.047279e05,
        3.114766e05,
        3.183399e05,
        3.253190e05,
        3.324151e05,
        3.396295e05,
        3.469634e05,
        3.544181e05,
        3.619948e05,
        3.696947e05,
        3.775191e05,
        3.854693e05,
        3.935464e05,
        4.017517e05,
        4.100865e05,
        4.185520e05,
        4.271494e05,
        4.358800e05,
        4.447450e05,
        4.537456e05,
        4.628831e05,
        4.721587e05,
        4.815736e05,
        4.911291e05,
        5.008263e05,
        5.106664e05,
        5.206508e05,
        5.307806e05,
        5.410569e05,
        5.514811e05,
        5.620543e05,
        5.727776e05,
        5.836524e05,
        5.946797e05,
        6.058608e05,
        6.171968e05,
        6.286889e05,
        6.403382e05,
        6.521460e05,
        6.641133e05,
        6.762413e05,
        6.885312e05,
        7.009841e05,
        7.136011e05,
        7.263834e05,
        7.393320e05,
        7.524481e05,
        7.657327e05,
        7.791870e05,
        7.928120e05,
        8.066089e05,
        8.205787e05,
        8.347224e05,
        8.490412e05,
        8.635361e05,
        8.782080e05,
        8.930581e05,
        9.080874e05,
        9.232969e05,
        9.386875e05,
        9.542604e05,
        9.700165e05,
        9.859567e05,
        1.002082e06,
        1.018394e06,
    ]
)

#  ---------------------- M = 3, I = 1 ---------------------------
M = 3
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        7.847400e-01,
        5.870075e01,
        1.653093e02,
        3.033348e02,
        4.668337e02,
        6.523999e02,
        8.578395e02,
        1.081788e03,
        1.323572e03,
        1.583129e03,
        1.860885e03,
        2.157688e03,
        2.474797e03,
        2.813601e03,
        3.175846e03,
        3.563351e03,
        3.978042e03,
        4.422045e03,
        4.897528e03,
        5.406676e03,
        5.951807e03,
        6.535268e03,
        7.159589e03,
        7.827197e03,
        8.540615e03,
        9.302558e03,
        1.011573e04,
        1.098290e04,
        1.190686e04,
        1.289056e04,
        1.393708e04,
        1.504939e04,
        1.623081e04,
        1.748441e04,
        1.881364e04,
        2.022192e04,
        2.171273e04,
        2.328963e04,
        2.495636e04,
        2.671676e04,
        2.857462e04,
        3.053392e04,
        3.259874e04,
        3.477325e04,
        3.706184e04,
        3.946872e04,
        4.199829e04,
        4.465523e04,
        4.744417e04,
        5.037000e04,
        5.343750e04,
        5.665155e04,
        6.001736e04,
        6.354022e04,
        6.722531e04,
        7.107790e04,
        7.510385e04,
        7.930836e04,
        8.369781e04,
        8.827733e04,
        9.305350e04,
        9.803196e04,
        1.032190e05,
        1.086212e05,
        1.142448e05,
        1.200965e05,
        1.261830e05,
        1.325109e05,
        1.390870e05,
        1.459185e05,
        1.530127e05,
        1.603767e05,
        1.680182e05,
        1.759443e05,
        1.841627e05,
        1.926817e05,
        2.015087e05,
        2.106519e05,
        2.201195e05,
        2.299199e05,
        2.400610e05,
        2.505524e05,
        2.614014e05,
        2.726184e05,
        2.842108e05,
        2.961892e05,
        3.085615e05,
        3.213380e05,
        3.345278e05,
        3.481407e05,
        3.621862e05,
        3.766745e05,
        3.916156e05,
        4.070192e05,
        4.228968e05,
        4.392584e05,
        4.561139e05,
        4.734750e05,
        4.913523e05,
        5.097566e05,
        5.286996e05,
        5.481927e05,
        5.682468e05,
        5.888737e05,
        6.100856e05,
        6.318949e05,
        6.543128e05,
        6.773516e05,
        7.010245e05,
        7.253433e05,
        7.503210e05,
        7.759709e05,
        8.023056e05,
        8.293382e05,
        8.570820e05,
        8.855514e05,
        9.147587e05,
        9.447191e05,
        9.754458e05,
        1.006954e06,
        1.039256e06,
        1.072368e06,
        1.106304e06,
        1.141080e06,
        1.176708e06,
        1.213207e06,
        1.250589e06,
        1.288871e06,
        1.328070e06,
        1.368200e06,
        1.409276e06,
        1.451317e06,
        1.494338e06,
        1.538354e06,
        1.583385e06,
        1.629444e06,
        1.676552e06,
        1.724723e06,
        1.773976e06,
        1.824329e06,
        1.875798e06,
        1.928402e06,
        1.982159e06,
        2.037088e06,
        2.093206e06,
        2.150533e06,
        2.209086e06,
        2.268887e06,
        2.329953e06,
        2.392303e06,
        2.455959e06,
        2.520938e06,
        2.587261e06,
        2.654949e06,
        2.724021e06,
        2.794498e06,
        2.866401e06,
        2.939752e06,
        3.014570e06,
        3.090877e06,
        3.168695e06,
        3.248044e06,
        3.328948e06,
        3.411429e06,
        3.495507e06,
        3.581206e06,
        3.668550e06,
        3.757559e06,
        3.848259e06,
        3.940671e06,
        4.034818e06,
        4.130727e06,
        4.228419e06,
        4.327918e06,
        4.429248e06,
        4.532437e06,
    ]
)

#  ---------------------- M = 3, I = 2 ---------------------------
M = 3
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.659650e00,
        1.252867e02,
        3.529131e02,
        6.476329e02,
        9.967517e02,
        1.393009e03,
        1.831769e03,
        2.310206e03,
        2.827051e03,
        3.382309e03,
        3.977121e03,
        4.613505e03,
        5.294212e03,
        6.022501e03,
        6.802194e03,
        7.637375e03,
        8.532274e03,
        9.491628e03,
        1.052016e04,
        1.162272e04,
        1.280444e04,
        1.407051e04,
        1.542641e04,
        1.687762e04,
        1.842974e04,
        2.008860e04,
        2.186018e04,
        2.375072e04,
        2.576662e04,
        2.791400e04,
        3.019968e04,
        3.263083e04,
        3.521391e04,
        3.795663e04,
        4.086590e04,
        4.394976e04,
        4.721594e04,
        5.067202e04,
        5.432657e04,
        5.818808e04,
        6.226493e04,
        6.656593e04,
        7.110012e04,
        7.587705e04,
        8.090577e04,
        8.619627e04,
        9.175872e04,
        9.760273e04,
        1.037389e05,
        1.101777e05,
        1.169305e05,
        1.240078e05,
        1.314214e05,
        1.391823e05,
        1.473028e05,
        1.557947e05,
        1.646703e05,
        1.739424e05,
        1.836239e05,
        1.937268e05,
        2.042656e05,
        2.152535e05,
        2.267043e05,
        2.386323e05,
        2.510512e05,
        2.639756e05,
        2.774213e05,
        2.914026e05,
        3.059358e05,
        3.210359e05,
        3.367181e05,
        3.530002e05,
        3.698980e05,
        3.874283e05,
        4.056074e05,
        4.244543e05,
        4.439858e05,
        4.642198e05,
        4.851738e05,
        5.068680e05,
        5.293193e05,
        5.525478e05,
        5.765737e05,
        6.014149e05,
        6.270935e05,
        6.536272e05,
        6.810391e05,
        7.093488e05,
        7.385776e05,
        7.687471e05,
        7.998788e05,
        8.319959e05,
        8.651198e05,
        8.992744e05,
        9.344815e05,
        9.707647e05,
        1.008148e06,
        1.046657e06,
        1.086313e06,
        1.127143e06,
        1.169172e06,
        1.212425e06,
        1.256927e06,
        1.302705e06,
        1.349784e06,
        1.398192e06,
        1.447956e06,
        1.499104e06,
        1.551662e06,
        1.605658e06,
        1.661122e06,
        1.718084e06,
        1.776569e06,
        1.836610e06,
        1.898235e06,
        1.961475e06,
        2.026362e06,
        2.092923e06,
        2.161193e06,
        2.231202e06,
        2.302981e06,
        2.376565e06,
        2.451985e06,
        2.529274e06,
        2.608467e06,
        2.689597e06,
        2.772695e06,
        2.857802e06,
        2.944948e06,
        3.034171e06,
        3.125505e06,
        3.218987e06,
        3.314654e06,
        3.412542e06,
        3.512687e06,
        3.615129e06,
        3.719906e06,
        3.827055e06,
        3.936617e06,
        4.048628e06,
        4.163130e06,
        4.280164e06,
        4.399769e06,
        4.521984e06,
        4.646853e06,
        4.774418e06,
        4.904720e06,
        5.037801e06,
        5.173705e06,
        5.312474e06,
        5.454153e06,
        5.598785e06,
        5.746414e06,
        5.897090e06,
        6.050851e06,
        6.207749e06,
        6.367826e06,
        6.531132e06,
        6.697714e06,
        6.867614e06,
        7.040889e06,
        7.217578e06,
        7.397739e06,
        7.581418e06,
        7.768659e06,
        7.959519e06,
        8.154048e06,
        8.352294e06,
        8.554311e06,
        8.760149e06,
        8.969865e06,
        9.183502e06,
        9.401127e06,
        9.622785e06,
        9.848527e06,
        1.007842e07,
    ]
)

#  ---------------------- M = 3, I = 3 ---------------------------
M = 3
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.185900e-01,
        6.125610e01,
        1.725127e02,
        3.165570e02,
        4.871861e02,
        6.808519e02,
        8.952625e02,
        1.129039e03,
        1.381537e03,
        1.652726e03,
        1.943193e03,
        2.253943e03,
        2.586326e03,
        2.942026e03,
        3.322888e03,
        3.730960e03,
        4.168424e03,
        4.637562e03,
        5.140769e03,
        5.680414e03,
        6.259100e03,
        6.879368e03,
        7.543867e03,
        8.255453e03,
        9.016771e03,
        9.830870e03,
        1.070057e04,
        1.162904e04,
        1.261929e04,
        1.367462e04,
        1.479833e04,
        1.599377e04,
        1.726436e04,
        1.861379e04,
        2.004575e04,
        2.156398e04,
        2.317217e04,
        2.487462e04,
        2.667503e04,
        2.857789e04,
        3.058721e04,
        3.270766e04,
        3.494358e04,
        3.729938e04,
        3.978003e04,
        4.239034e04,
        4.513515e04,
        4.801943e04,
        5.104863e04,
        5.422773e04,
        5.756221e04,
        6.105763e04,
        6.471951e04,
        6.855364e04,
        7.256596e04,
        7.676252e04,
        8.114927e04,
        8.573247e04,
        9.051853e04,
        9.551399e04,
        1.007252e05,
        1.061593e05,
        1.118231e05,
        1.177230e05,
        1.238669e05,
        1.302620e05,
        1.369151e05,
        1.438344e05,
        1.510269e05,
        1.585011e05,
        1.662646e05,
        1.743254e05,
        1.826918e05,
        1.913721e05,
        2.003749e05,
        2.097086e05,
        2.193821e05,
        2.294048e05,
        2.397852e05,
        2.505325e05,
        2.616565e05,
        2.731663e05,
        2.850718e05,
        2.973825e05,
        3.101087e05,
        3.232600e05,
        3.368470e05,
        3.508807e05,
        3.653706e05,
        3.803279e05,
        3.957632e05,
        4.116883e05,
        4.281136e05,
        4.450504e05,
        4.625108e05,
        4.805059e05,
        4.990478e05,
        5.181485e05,
        5.378202e05,
        5.580750e05,
        5.789261e05,
        6.003846e05,
        6.224646e05,
        6.451784e05,
        6.685396e05,
        6.925614e05,
        7.172569e05,
        7.426405e05,
        7.687248e05,
        7.955251e05,
        8.230548e05,
        8.513281e05,
        8.803602e05,
        9.101655e05,
        9.407590e05,
        9.721548e05,
        1.004370e06,
        1.037418e06,
        1.071315e06,
        1.106078e06,
        1.141721e06,
        1.178261e06,
        1.215715e06,
        1.254098e06,
        1.293428e06,
        1.333722e06,
        1.374996e06,
        1.417268e06,
        1.460554e06,
        1.504874e06,
        1.550244e06,
        1.596682e06,
        1.644207e06,
        1.692838e06,
        1.742592e06,
        1.793488e06,
        1.845546e06,
        1.898785e06,
        1.953223e06,
        2.008881e06,
        2.065779e06,
        2.123935e06,
        2.183371e06,
        2.244106e06,
        2.306163e06,
        2.369560e06,
        2.434319e06,
        2.500462e06,
        2.568009e06,
        2.636982e06,
        2.707404e06,
        2.779295e06,
        2.852679e06,
        2.927578e06,
        3.004013e06,
        3.082010e06,
        3.161589e06,
        3.242776e06,
        3.325591e06,
        3.410061e06,
        3.496209e06,
        3.584059e06,
        3.673634e06,
        3.764960e06,
        3.858061e06,
        3.952965e06,
        4.049693e06,
        4.148272e06,
        4.248730e06,
        4.351088e06,
        4.455377e06,
        4.561620e06,
        4.669848e06,
        4.780082e06,
        4.892352e06,
        5.006686e06,
    ]
)

#  ---------------------- M = 3, I = 4 ---------------------------
M = 3
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        9.693860e00,
        7.286110e02,
        2.052138e03,
        3.765742e03,
        5.795622e03,
        8.099566e03,
        1.065031e04,
        1.343144e04,
        1.643497e04,
        1.966034e04,
        2.311386e04,
        2.680652e04,
        3.075398e04,
        3.497494e04,
        3.949041e04,
        4.432421e04,
        4.950089e04,
        5.504705e04,
        6.098959e04,
        6.735674e04,
        7.417719e04,
        8.148200e04,
        8.930109e04,
        9.766575e04,
        1.066095e05,
        1.161652e05,
        1.263658e05,
        1.372482e05,
        1.488478e05,
        1.612019e05,
        1.743472e05,
        1.883247e05,
        2.031740e05,
        2.189350e05,
        2.356501e05,
        2.533639e05,
        2.721204e05,
        2.919662e05,
        3.129454e05,
        3.351083e05,
        3.585027e05,
        3.831788e05,
        4.091905e05,
        4.365882e05,
        4.654258e05,
        4.957624e05,
        5.276496e05,
        5.611468e05,
        5.963170e05,
        6.332148e05,
        6.719059e05,
        7.124520e05,
        7.549189e05,
        7.993710e05,
        8.458764e05,
        8.945049e05,
        9.453249e05,
        9.984083e05,
        1.053826e06,
        1.111656e06,
        1.171972e06,
        1.234856e06,
        1.300379e06,
        1.368623e06,
        1.439674e06,
        1.513611e06,
        1.590524e06,
        1.670492e06,
        1.753610e06,
        1.839962e06,
        1.929642e06,
        2.022739e06,
        2.119351e06,
        2.219570e06,
        2.323499e06,
        2.431227e06,
        2.542864e06,
        2.658513e06,
        2.778268e06,
        2.902239e06,
        3.030540e06,
        3.163267e06,
        3.300539e06,
        3.442465e06,
        3.589168e06,
        3.740750e06,
        3.897328e06,
        4.059035e06,
        4.225983e06,
        4.398292e06,
        4.576090e06,
        4.759502e06,
        4.948660e06,
        5.143690e06,
        5.344725e06,
        5.551892e06,
        5.765331e06,
        5.985180e06,
        6.211579e06,
        6.444666e06,
        6.684586e06,
        6.931482e06,
        7.185500e06,
        7.446782e06,
        7.715490e06,
        7.991764e06,
        8.275772e06,
        8.567664e06,
        8.867593e06,
        9.175712e06,
        9.492203e06,
        9.817227e06,
        1.015093e07,
        1.049349e07,
        1.084509e07,
        1.120589e07,
        1.157607e07,
        1.195579e07,
        1.234524e07,
        1.274460e07,
        1.315405e07,
        1.357378e07,
        1.400397e07,
        1.444480e07,
        1.489648e07,
        1.535919e07,
        1.583314e07,
        1.631850e07,
        1.681549e07,
        1.732430e07,
        1.784514e07,
        1.837821e07,
        1.892372e07,
        1.948191e07,
        2.005293e07,
        2.063704e07,
        2.123444e07,
        2.184536e07,
        2.247001e07,
        2.310862e07,
        2.376142e07,
        2.442864e07,
        2.511048e07,
        2.580720e07,
        2.651904e07,
        2.724621e07,
        2.798898e07,
        2.874757e07,
        2.952224e07,
        3.031321e07,
        3.112077e07,
        3.194514e07,
        3.278657e07,
        3.364534e07,
        3.452170e07,
        3.541590e07,
        3.632821e07,
        3.725890e07,
        3.820824e07,
        3.917648e07,
        4.016391e07,
        4.117082e07,
        4.219747e07,
        4.324413e07,
        4.431109e07,
        4.539866e07,
        4.650710e07,
        4.763672e07,
        4.878780e07,
        4.996063e07,
        5.115550e07,
        5.237277e07,
        5.361268e07,
        5.487554e07,
        5.616170e07,
        5.747145e07,
    ]
)

#  ---------------------- M = 3, I = 5 ---------------------------
M = 3
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.813030e00,
        3.600892e02,
        1.014082e03,
        1.860805e03,
        2.863799e03,
        4.002166e03,
        5.262502e03,
        6.636539e03,
        8.120243e03,
        9.713429e03,
        1.141910e04,
        1.324287e04,
        1.519237e04,
        1.727719e04,
        1.950780e04,
        2.189589e04,
        2.445388e04,
        2.719480e04,
        3.013257e04,
        3.328074e04,
        3.665424e04,
        4.026795e04,
        4.413675e04,
        4.827698e04,
        5.270423e04,
        5.743513e04,
        6.248716e04,
        6.787719e04,
        7.362388e04,
        7.974527e04,
        8.626022e04,
        9.318860e04,
        1.005494e05,
        1.083638e05,
        1.166537e05,
        1.254391e05,
        1.347427e05,
        1.445876e05,
        1.549967e05,
        1.659941e05,
        1.776035e05,
        1.898519e05,
        2.027633e05,
        2.163637e05,
        2.306819e05,
        2.457443e05,
        2.615788e05,
        2.782148e05,
        2.956814e05,
        3.140094e05,
        3.332292e05,
        3.533726e05,
        3.744711e05,
        3.965582e05,
        4.196678e05,
        4.438332e05,
        4.690883e05,
        4.954722e05,
        5.230185e05,
        5.517647e05,
        5.817489e05,
        6.130100e05,
        6.455856e05,
        6.795180e05,
        7.148483e05,
        7.516143e05,
        7.898604e05,
        8.296320e05,
        8.709688e05,
        9.139178e05,
        9.585242e05,
        1.004832e06,
        1.052892e06,
        1.102747e06,
        1.154451e06,
        1.208049e06,
        1.263593e06,
        1.321131e06,
        1.380722e06,
        1.442410e06,
        1.506255e06,
        1.572304e06,
        1.640622e06,
        1.711256e06,
        1.784265e06,
        1.859711e06,
        1.937648e06,
        2.018139e06,
        2.101238e06,
        2.187013e06,
        2.275522e06,
        2.366832e06,
        2.461001e06,
        2.558097e06,
        2.658186e06,
        2.761333e06,
        2.867604e06,
        2.977071e06,
        3.089804e06,
        3.205868e06,
        3.325339e06,
        3.448284e06,
        3.574781e06,
        3.704902e06,
        3.838724e06,
        3.976317e06,
        4.117767e06,
        4.263141e06,
        4.412525e06,
        4.565996e06,
        4.723636e06,
        4.885531e06,
        5.051753e06,
        5.222396e06,
        5.397538e06,
        5.577272e06,
        5.761674e06,
        5.950846e06,
        6.144860e06,
        6.343822e06,
        6.547813e06,
        6.756924e06,
        6.971254e06,
        7.190894e06,
        7.415940e06,
        7.646489e06,
        7.882637e06,
        8.124482e06,
        8.372123e06,
        8.625660e06,
        8.885193e06,
        9.150831e06,
        9.422673e06,
        9.700822e06,
        9.985389e06,
        1.027648e07,
        1.057420e07,
        1.087865e07,
        1.118997e07,
        1.150823e07,
        1.183358e07,
        1.216611e07,
        1.250594e07,
        1.285320e07,
        1.320799e07,
        1.357043e07,
        1.394065e07,
        1.431876e07,
        1.470489e07,
        1.509916e07,
        1.550169e07,
        1.591261e07,
        1.633204e07,
        1.676013e07,
        1.719697e07,
        1.764274e07,
        1.809752e07,
        1.856147e07,
        1.903474e07,
        1.951743e07,
        2.000969e07,
        2.051167e07,
        2.102349e07,
        2.154530e07,
        2.207724e07,
        2.261945e07,
        2.317208e07,
        2.373528e07,
        2.430918e07,
        2.489392e07,
        2.548968e07,
        2.609659e07,
        2.671481e07,
        2.734449e07,
        2.798577e07,
        2.863883e07,
    ]
)

#  ---------------------- M = 3, I = 6 ---------------------------
M = 3
I = 6
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.732560e00,
        1.308439e02,
        3.685813e02,
        6.763945e02,
        1.041035e03,
        1.454902e03,
        1.913200e03,
        2.413032e03,
        2.953209e03,
        3.533915e03,
        4.156499e03,
        4.823380e03,
        5.537674e03,
        6.303045e03,
        7.123765e03,
        8.004388e03,
        8.949564e03,
        9.964533e03,
        1.105444e04,
        1.222466e04,
        1.348084e04,
        1.482862e04,
        1.627401e04,
        1.782304e04,
        1.948187e04,
        2.125695e04,
        2.315481e04,
        2.518216e04,
        2.734599e04,
        2.965343e04,
        3.211177e04,
        3.472865e04,
        3.751164e04,
        4.046894e04,
        4.360818e04,
        4.693842e04,
        5.046789e04,
        5.420551e04,
        5.816009e04,
        6.234127e04,
        6.675826e04,
        7.142107e04,
        7.633970e04,
        8.152423e04,
        8.698542e04,
        9.273349e04,
        9.877997e04,
        1.051355e05,
        1.118121e05,
        1.188218e05,
        1.261758e05,
        1.338869e05,
        1.419674e05,
        1.504307e05,
        1.592888e05,
        1.685564e05,
        1.782460e05,
        1.883721e05,
        1.989491e05,
        2.099906e05,
        2.215123e05,
        2.335285e05,
        2.460551e05,
        2.591078e05,
        2.727019e05,
        2.868541e05,
        3.015810e05,
        3.168993e05,
        3.328262e05,
        3.493782e05,
        3.665743e05,
        3.844320e05,
        4.029702e05,
        4.222066e05,
        4.421602e05,
        4.628517e05,
        4.842990e05,
        5.065236e05,
        5.295438e05,
        5.533829e05,
        5.780588e05,
        6.035954e05,
        6.300121e05,
        6.573328e05,
        6.855785e05,
        7.147714e05,
        7.449354e05,
        7.760936e05,
        8.082695e05,
        8.414866e05,
        8.757691e05,
        9.111436e05,
        9.476326e05,
        9.852625e05,
        1.024060e06,
        1.064049e06,
        1.105257e06,
        1.147712e06,
        1.191440e06,
        1.236468e06,
        1.282825e06,
        1.330539e06,
        1.379637e06,
        1.430151e06,
        1.482109e06,
        1.535539e06,
        1.590474e06,
        1.646944e06,
        1.704977e06,
        1.764609e06,
        1.825868e06,
        1.888788e06,
        1.953399e06,
        2.019738e06,
        2.087834e06,
        2.157723e06,
        2.229439e06,
        2.303016e06,
        2.378487e06,
        2.455892e06,
        2.535263e06,
        2.616637e06,
        2.700050e06,
        2.785540e06,
        2.873144e06,
        2.962900e06,
        3.054845e06,
        3.149018e06,
        3.245459e06,
        3.344205e06,
        3.445299e06,
        3.548780e06,
        3.654689e06,
        3.763068e06,
        3.873955e06,
        3.987395e06,
        4.103430e06,
        4.222104e06,
        4.343458e06,
        4.467538e06,
        4.594386e06,
        4.724049e06,
        4.856572e06,
        4.991999e06,
        5.130375e06,
        5.271750e06,
        5.416171e06,
        5.563681e06,
        5.714331e06,
        5.868170e06,
        6.025247e06,
        6.185609e06,
        6.349307e06,
        6.516392e06,
        6.686913e06,
        6.860922e06,
        7.038471e06,
        7.219613e06,
        7.404399e06,
        7.592883e06,
        7.785118e06,
        7.981157e06,
        8.181058e06,
        8.384875e06,
        8.592660e06,
        8.804475e06,
        9.020369e06,
        9.240407e06,
        9.464641e06,
        9.693130e06,
        9.925935e06,
        1.016311e07,
        1.040473e07,
        1.065083e07,
        1.090149e07,
        1.115676e07,
    ]
)

#  ---------------------- M = 3, I = 7 ---------------------------
M = 3
I = 7
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.789300e-01,
        6.694173e01,
        1.886102e02,
        3.461476e02,
        5.327717e02,
        7.445995e02,
        9.791830e02,
        1.235085e03,
        1.511700e03,
        1.809143e03,
        2.128107e03,
        2.469769e03,
        2.835738e03,
        3.227819e03,
        3.648133e03,
        4.098969e03,
        4.582699e03,
        5.101875e03,
        5.659118e03,
        6.257169e03,
        6.898826e03,
        7.586970e03,
        8.324625e03,
        9.114762e03,
        9.960542e03,
        1.086520e04,
        1.183213e04,
        1.286461e04,
        1.396617e04,
        1.514050e04,
        1.639117e04,
        1.772203e04,
        1.913689e04,
        2.064001e04,
        2.223524e04,
        2.392689e04,
        2.571922e04,
        2.761689e04,
        2.962419e04,
        3.174614e04,
        3.398705e04,
        3.635233e04,
        3.884663e04,
        4.147543e04,
        4.424376e04,
        4.715716e04,
        5.022104e04,
        5.344119e04,
        5.682326e04,
        6.037348e04,
        6.409755e04,
        6.800167e04,
        7.209225e04,
        7.637581e04,
        8.085871e04,
        8.554797e04,
        9.045026e04,
        9.557287e04,
        1.009224e05,
        1.065065e05,
        1.123325e05,
        1.184081e05,
        1.247407e05,
        1.313384e05,
        1.382093e05,
        1.453615e05,
        1.528030e05,
        1.605426e05,
        1.685888e05,
        1.769504e05,
        1.856360e05,
        1.946552e05,
        2.040167e05,
        2.137304e05,
        2.238055e05,
        2.342516e05,
        2.450786e05,
        2.562968e05,
        2.679164e05,
        2.799473e05,
        2.924003e05,
        3.052861e05,
        3.186154e05,
        3.323992e05,
        3.466491e05,
        3.613758e05,
        3.765914e05,
        3.923068e05,
        4.085344e05,
        4.252868e05,
        4.425748e05,
        4.604120e05,
        4.788108e05,
        4.977832e05,
        5.173427e05,
        5.375024e05,
        5.582752e05,
        5.796753e05,
        6.017155e05,
        6.244101e05,
        6.477726e05,
        6.718181e05,
        6.965603e05,
        7.220136e05,
        7.481935e05,
        7.751140e05,
        8.027916e05,
        8.312397e05,
        8.604757e05,
        8.905141e05,
        9.213715e05,
        9.530639e05,
        9.856067e05,
        1.019018e06,
        1.053313e06,
        1.088509e06,
        1.124624e06,
        1.161674e06,
        1.199678e06,
        1.238652e06,
        1.278615e06,
        1.319584e06,
        1.361580e06,
        1.404619e06,
        1.448720e06,
        1.493902e06,
        1.540186e06,
        1.587589e06,
        1.636131e06,
        1.685832e06,
        1.736714e06,
        1.788795e06,
        1.842095e06,
        1.896636e06,
        1.952439e06,
        2.009525e06,
        2.067914e06,
        2.127629e06,
        2.188690e06,
        2.251121e06,
        2.314944e06,
        2.380180e06,
        2.446852e06,
        2.514985e06,
        2.584598e06,
        2.655719e06,
        2.728370e06,
        2.802572e06,
        2.878352e06,
        2.955734e06,
        3.034741e06,
        3.115400e06,
        3.197733e06,
        3.281769e06,
        3.367530e06,
        3.455043e06,
        3.544334e06,
        3.635429e06,
        3.728356e06,
        3.823139e06,
        3.919806e06,
        4.018383e06,
        4.118900e06,
        4.221384e06,
        4.325860e06,
        4.432360e06,
        4.540909e06,
        4.651539e06,
        4.764276e06,
        4.879150e06,
        4.996191e06,
        5.115428e06,
        5.236890e06,
        5.360610e06,
        5.486615e06,
        5.614939e06,
    ]
)

#  ---------------------- M = 3, I = 8 ---------------------------
M = 3
I = 8
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.018317e01,
        7.688685e02,
        2.165826e03,
        3.974547e03,
        6.117122e03,
        8.549075e03,
        1.124182e04,
        1.417849e04,
        1.735159e04,
        2.076146e04,
        2.441595e04,
        2.832833e04,
        3.251593e04,
        3.699983e04,
        4.180437e04,
        4.695509e04,
        5.247930e04,
        5.840655e04,
        6.476616e04,
        7.158997e04,
        7.890924e04,
        8.675751e04,
        9.516855e04,
        1.041762e05,
        1.138172e05,
        1.241287e05,
        1.351464e05,
        1.469105e05,
        1.594614e05,
        1.728378e05,
        1.870849e05,
        2.022417e05,
        2.183567e05,
        2.354731e05,
        2.536375e05,
        2.728988e05,
        2.933058e05,
        3.149078e05,
        3.377591e05,
        3.619112e05,
        3.874208e05,
        4.143397e05,
        4.427289e05,
        4.726444e05,
        5.041454e05,
        5.372972e05,
        5.721616e05,
        6.087995e05,
        6.472799e05,
        6.876690e05,
        7.300362e05,
        7.744501e05,
        8.209831e05,
        8.697093e05,
        9.207011e05,
        9.740386e05,
        1.029797e06,
        1.088057e06,
        1.148900e06,
        1.212405e06,
        1.278663e06,
        1.347752e06,
        1.419769e06,
        1.494792e06,
        1.572920e06,
        1.654247e06,
        1.738862e06,
        1.826861e06,
        1.918342e06,
        2.013409e06,
        2.112162e06,
        2.214696e06,
        2.321129e06,
        2.431558e06,
        2.546090e06,
        2.664846e06,
        2.787926e06,
        2.915445e06,
        3.047527e06,
        3.184286e06,
        3.325838e06,
        3.472305e06,
        3.623810e06,
        3.780482e06,
        3.942443e06,
        4.109824e06,
        4.282759e06,
        4.461371e06,
        4.645800e06,
        4.836192e06,
        5.032673e06,
        5.235386e06,
        5.444471e06,
        5.660087e06,
        5.882366e06,
        6.111462e06,
        6.347516e06,
        6.590696e06,
        6.841155e06,
        7.099044e06,
        7.364517e06,
        7.637744e06,
        7.918894e06,
        8.208116e06,
        8.505584e06,
        8.811474e06,
        9.125951e06,
        9.449192e06,
        9.781375e06,
        1.012267e07,
        1.047327e07,
        1.083334e07,
        1.120309e07,
        1.158269e07,
        1.197233e07,
        1.237221e07,
        1.278251e07,
        1.320344e07,
        1.363520e07,
        1.407798e07,
        1.453199e07,
        1.499743e07,
        1.547452e07,
        1.596346e07,
        1.646446e07,
        1.697775e07,
        1.750353e07,
        1.804203e07,
        1.859347e07,
        1.915807e07,
        1.973607e07,
        2.032768e07,
        2.093316e07,
        2.155272e07,
        2.218661e07,
        2.283506e07,
        2.349832e07,
        2.417662e07,
        2.487023e07,
        2.557938e07,
        2.630433e07,
        2.704534e07,
        2.780265e07,
        2.857654e07,
        2.936727e07,
        3.017509e07,
        3.100027e07,
        3.184310e07,
        3.270384e07,
        3.358276e07,
        3.448014e07,
        3.539626e07,
        3.633142e07,
        3.728588e07,
        3.825994e07,
        3.925390e07,
        4.026805e07,
        4.130268e07,
        4.235810e07,
        4.343460e07,
        4.453249e07,
        4.565210e07,
        4.679370e07,
        4.795764e07,
        4.914420e07,
        5.035375e07,
        5.158655e07,
        5.284297e07,
        5.412334e07,
        5.542796e07,
        5.675719e07,
        5.811133e07,
        5.949078e07,
        6.089583e07,
        6.232682e07,
        6.378415e07,
    ]
)

#  ---------------------- M = 3, I = 9 ---------------------------
M = 3
I = 9
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.025939e01,
        7.780853e02,
        2.192024e03,
        4.022766e03,
        6.191507e03,
        8.653040e03,
        1.137884e04,
        1.435181e04,
        1.756428e04,
        2.101726e04,
        2.471805e04,
        2.867999e04,
        3.292087e04,
        3.746130e04,
        4.232569e04,
        4.753963e04,
        5.313097e04,
        5.912840e04,
        6.556172e04,
        7.246219e04,
        7.986305e04,
        8.779593e04,
        9.629532e04,
        1.053959e05,
        1.151338e05,
        1.255461e05,
        1.366706e05,
        1.485447e05,
        1.612110e05,
        1.747082e05,
        1.890807e05,
        2.043701e05,
        2.206199e05,
        2.378786e05,
        2.561919e05,
        2.756073e05,
        2.961737e05,
        3.179441e05,
        3.409693e05,
        3.653014e05,
        3.909969e05,
        4.181098e05,
        4.467016e05,
        4.768262e05,
        5.085454e05,
        5.419201e05,
        5.770169e05,
        6.138970e05,
        6.526250e05,
        6.932718e05,
        7.359051e05,
        7.805932e05,
        8.274118e05,
        8.764327e05,
        9.277281e05,
        9.813788e05,
        1.037460e06,
        1.096053e06,
        1.157238e06,
        1.221100e06,
        1.287723e06,
        1.357190e06,
        1.429589e06,
        1.505014e06,
        1.583553e06,
        1.665298e06,
        1.750344e06,
        1.838791e06,
        1.930734e06,
        2.026272e06,
        2.125506e06,
        2.228539e06,
        2.335477e06,
        2.446431e06,
        2.561504e06,
        2.680806e06,
        2.804454e06,
        2.932553e06,
        3.065232e06,
        3.202599e06,
        3.344773e06,
        3.491880e06,
        3.644044e06,
        3.801383e06,
        3.964036e06,
        4.132119e06,
        4.305769e06,
        4.485124e06,
        4.670306e06,
        4.861464e06,
        5.058736e06,
        5.262256e06,
        5.472173e06,
        5.688624e06,
        5.911762e06,
        6.141735e06,
        6.378700e06,
        6.622796e06,
        6.874190e06,
        7.133033e06,
        7.399489e06,
        7.673712e06,
        7.955873e06,
        8.246134e06,
        8.544672e06,
        8.851639e06,
        9.167217e06,
        9.491582e06,
        9.824914e06,
        1.016738e07,
        1.051917e07,
        1.088046e07,
        1.125145e07,
        1.163231e07,
        1.202323e07,
        1.242442e07,
        1.283606e07,
        1.325835e07,
        1.369150e07,
        1.413568e07,
        1.459113e07,
        1.505804e07,
        1.553661e07,
        1.602706e07,
        1.652961e07,
        1.704446e07,
        1.757184e07,
        1.811196e07,
        1.866504e07,
        1.923134e07,
        1.981104e07,
        2.040440e07,
        2.101163e07,
        2.163299e07,
        2.226870e07,
        2.291900e07,
        2.358413e07,
        2.426437e07,
        2.495991e07,
        2.567104e07,
        2.639800e07,
        2.714105e07,
        2.790045e07,
        2.867645e07,
        2.946930e07,
        3.027929e07,
        3.110670e07,
        3.195175e07,
        3.281477e07,
        3.369600e07,
        3.459571e07,
        3.551422e07,
        3.645178e07,
        3.740870e07,
        3.838525e07,
        3.938174e07,
        4.039843e07,
        4.143568e07,
        4.249373e07,
        4.357290e07,
        4.467351e07,
        4.579585e07,
        4.694025e07,
        4.810702e07,
        4.929646e07,
        5.050889e07,
        5.174464e07,
        5.300407e07,
        5.428747e07,
        5.559516e07,
        5.692750e07,
        5.828480e07,
        5.966743e07,
        6.107572e07,
        6.251002e07,
        6.397068e07,
    ]
)

#  ---------------------- M = 3, I = 10 ---------------------------
M = 3
I = 10
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.011611e01,
        7.606432e02,
        2.142444e03,
        3.931508e03,
        6.050781e03,
        8.456192e03,
        1.111961e04,
        1.402401e04,
        1.716179e04,
        2.053370e04,
        2.414710e04,
        2.801498e04,
        3.215563e04,
        3.658950e04,
        4.134081e04,
        4.643537e04,
        5.190096e04,
        5.776617e04,
        6.406074e04,
        7.081585e04,
        7.806331e04,
        8.583661e04,
        9.416875e04,
        1.030942e05,
        1.126489e05,
        1.228698e05,
        1.337943e05,
        1.454598e05,
        1.579072e05,
        1.711776e05,
        1.853113e05,
        2.003519e05,
        2.163455e05,
        2.333335e05,
        2.513666e05,
        2.704892e05,
        2.907529e05,
        3.122071e05,
        3.349040e05,
        3.588951e05,
        3.842348e05,
        4.109803e05,
        4.391888e05,
        4.689179e05,
        5.002271e05,
        5.331765e05,
        5.678301e05,
        6.042531e05,
        6.425100e05,
        6.826686e05,
        7.247962e05,
        7.689631e05,
        8.152419e05,
        8.637038e05,
        9.144236e05,
        9.674780e05,
        1.022945e06,
        1.080905e06,
        1.141440e06,
        1.204627e06,
        1.270556e06,
        1.339309e06,
        1.410973e06,
        1.485641e06,
        1.563401e06,
        1.644344e06,
        1.728569e06,
        1.816162e06,
        1.907235e06,
        2.001877e06,
        2.100190e06,
        2.202280e06,
        2.308247e06,
        2.418202e06,
        2.532251e06,
        2.650506e06,
        2.773076e06,
        2.900076e06,
        3.031614e06,
        3.167824e06,
        3.308806e06,
        3.454693e06,
        3.605607e06,
        3.761672e06,
        3.923009e06,
        4.089756e06,
        4.262030e06,
        4.439977e06,
        4.623729e06,
        4.813416e06,
        5.009182e06,
        5.211159e06,
        5.419501e06,
        5.634346e06,
        5.855846e06,
        6.084142e06,
        6.319381e06,
        6.561730e06,
        6.811327e06,
        7.068344e06,
        7.332930e06,
        7.605253e06,
        7.885465e06,
        8.173747e06,
        8.470249e06,
        8.775154e06,
        9.088627e06,
        9.410835e06,
        9.741974e06,
        1.008220e07,
        1.043171e07,
        1.079068e07,
        1.115929e07,
        1.153774e07,
        1.192620e07,
        1.232488e07,
        1.273397e07,
        1.315366e07,
        1.358416e07,
        1.402564e07,
        1.447834e07,
        1.494244e07,
        1.541817e07,
        1.590572e07,
        1.640531e07,
        1.691716e07,
        1.744149e07,
        1.797850e07,
        1.852842e07,
        1.909149e07,
        1.966793e07,
        2.025794e07,
        2.086181e07,
        2.147971e07,
        2.211193e07,
        2.275867e07,
        2.342019e07,
        2.409675e07,
        2.478856e07,
        2.549589e07,
        2.621900e07,
        2.695813e07,
        2.771354e07,
        2.848549e07,
        2.927424e07,
        3.008006e07,
        3.090322e07,
        3.174399e07,
        3.260262e07,
        3.347942e07,
        3.437463e07,
        3.528858e07,
        3.622149e07,
        3.717369e07,
        3.814547e07,
        3.913711e07,
        4.014888e07,
        4.118112e07,
        4.223410e07,
        4.330813e07,
        4.440353e07,
        4.552057e07,
        4.665960e07,
        4.782093e07,
        4.900486e07,
        5.021170e07,
        5.144178e07,
        5.269544e07,
        5.397301e07,
        5.527477e07,
        5.660111e07,
        5.795235e07,
        5.932882e07,
        6.073086e07,
        6.215883e07,
        6.361306e07,
    ]
)

#  ---------------------- M = 3, I = 11 ---------------------------
M = 3
I = 11
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.946791e01,
        4.470503e03,
        1.259147e04,
        2.310592e04,
        3.556102e04,
        4.969775e04,
        6.535012e04,
        8.241681e04,
        1.008519e05,
        1.206550e05,
        1.418675e05,
        1.645612e05,
        1.888379e05,
        2.148151e05,
        2.426307e05,
        2.724293e05,
        3.043712e05,
        3.386193e05,
        3.753466e05,
        4.147317e05,
        4.569565e05,
        5.022089e05,
        5.506812e05,
        6.025756e05,
        6.580938e05,
        7.174414e05,
        7.808443e05,
        8.485166e05,
        9.206880e05,
        9.975858e05,
        1.079455e06,
        1.166548e06,
        1.259104e06,
        1.357392e06,
        1.461671e06,
        1.572220e06,
        1.689327e06,
        1.813266e06,
        1.944345e06,
        2.082848e06,
        2.229110e06,
        2.383425e06,
        2.546143e06,
        2.717572e06,
        2.898074e06,
        3.087996e06,
        3.287693e06,
        3.497522e06,
        3.717868e06,
        3.949102e06,
        4.191641e06,
        4.445858e06,
        4.712167e06,
        4.991009e06,
        5.282761e06,
        5.587915e06,
        5.906867e06,
        6.240090e06,
        6.588050e06,
        6.951201e06,
        7.330046e06,
        7.725058e06,
        8.136736e06,
        8.565590e06,
        9.012166e06,
        9.476920e06,
        9.960460e06,
        1.046329e07,
        1.098601e07,
        1.152911e07,
        1.209326e07,
        1.267897e07,
        1.328686e07,
        1.391754e07,
        1.457164e07,
        1.524976e07,
        1.595255e07,
        1.668068e07,
        1.743475e07,
        1.821548e07,
        1.902353e07,
        1.985957e07,
        2.072435e07,
        2.161852e07,
        2.254284e07,
        2.349807e07,
        2.448487e07,
        2.550405e07,
        2.655638e07,
        2.764263e07,
        2.876356e07,
        2.992002e07,
        3.111277e07,
        3.234267e07,
        3.361055e07,
        3.491722e07,
        3.626357e07,
        3.765045e07,
        3.907876e07,
        4.054937e07,
        4.206321e07,
        4.362119e07,
        4.522422e07,
        4.687322e07,
        4.856921e07,
        5.031312e07,
        5.210590e07,
        5.394861e07,
        5.584216e07,
        5.778765e07,
        5.978600e07,
        6.183837e07,
        6.394578e07,
        6.610924e07,
        6.832982e07,
        7.060868e07,
        7.294696e07,
        7.534565e07,
        7.780593e07,
        8.032895e07,
        8.291590e07,
        8.556789e07,
        8.828611e07,
        9.107179e07,
        9.392614e07,
        9.685037e07,
        9.984571e07,
        1.029134e08,
        1.060547e08,
        1.092709e08,
        1.125633e08,
        1.159332e08,
        1.193819e08,
        1.229108e08,
        1.265212e08,
        1.302143e08,
        1.339918e08,
        1.378548e08,
        1.418050e08,
        1.458435e08,
        1.499719e08,
        1.541916e08,
        1.585041e08,
        1.629109e08,
        1.674134e08,
        1.720131e08,
        1.767117e08,
        1.815105e08,
        1.864112e08,
        1.914154e08,
        1.965245e08,
        2.017402e08,
        2.070642e08,
        2.124980e08,
        2.180433e08,
        2.237017e08,
        2.294748e08,
        2.353645e08,
        2.413725e08,
        2.475002e08,
        2.537497e08,
        2.601226e08,
        2.666206e08,
        2.732456e08,
        2.799992e08,
        2.868835e08,
        2.939002e08,
        3.010511e08,
        3.083381e08,
        3.157630e08,
        3.233278e08,
        3.310344e08,
        3.388847e08,
        3.468806e08,
        3.550242e08,
        3.633173e08,
    ]
)

#  ---------------------- M = 3, I = 12 ---------------------------
M = 3
I = 12
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.995096e01,
        2.261799e03,
        6.371201e03,
        1.169187e04,
        1.799462e04,
        2.514837e04,
        3.306945e04,
        4.170726e04,
        5.103813e04,
        6.106308e04,
        7.180236e04,
        8.329235e04,
        9.558279e04,
        1.087346e05,
        1.228140e05,
        1.378944e05,
        1.540562e05,
        1.713824e05,
        1.899567e05,
        2.098700e05,
        2.312133e05,
        2.540827e05,
        2.785728e05,
        3.047847e05,
        3.328220e05,
        3.627880e05,
        3.947933e05,
        4.289450e05,
        4.653615e05,
        5.041570e05,
        5.454511e05,
        5.893697e05,
        6.360411e05,
        6.855926e05,
        7.381579e05,
        7.938731e05,
        8.528868e05,
        9.153318e05,
        9.813678e05,
        1.051138e06,
        1.124804e06,
        1.202521e06,
        1.284451e06,
        1.370767e06,
        1.461638e06,
        1.557240e06,
        1.657755e06,
        1.763358e06,
        1.874240e06,
        1.990604e06,
        2.112627e06,
        2.240529e06,
        2.374501e06,
        2.514755e06,
        2.661508e06,
        2.814979e06,
        2.975376e06,
        3.142946e06,
        3.317913e06,
        3.500504e06,
        3.690974e06,
        3.889547e06,
        4.096506e06,
        4.312075e06,
        4.536516e06,
        4.770115e06,
        5.013131e06,
        5.265828e06,
        5.528484e06,
        5.801396e06,
        6.084839e06,
        6.379123e06,
        6.684533e06,
        7.001385e06,
        7.329976e06,
        7.670618e06,
        8.023632e06,
        8.389355e06,
        8.768103e06,
        9.160211e06,
        9.566016e06,
        9.985881e06,
        1.042016e07,
        1.086916e07,
        1.133330e07,
        1.181291e07,
        1.230839e07,
        1.282011e07,
        1.334843e07,
        1.389376e07,
        1.445651e07,
        1.503703e07,
        1.563578e07,
        1.625316e07,
        1.688956e07,
        1.754542e07,
        1.822117e07,
        1.891726e07,
        1.963410e07,
        2.037217e07,
        2.113191e07,
        2.191375e07,
        2.271818e07,
        2.354568e07,
        2.439673e07,
        2.527179e07,
        2.617137e07,
        2.709593e07,
        2.804603e07,
        2.902211e07,
        3.002473e07,
        3.105443e07,
        3.211166e07,
        3.319703e07,
        3.431104e07,
        3.545426e07,
        3.662721e07,
        3.783046e07,
        3.906458e07,
        4.033016e07,
        4.162776e07,
        4.295797e07,
        4.432139e07,
        4.571860e07,
        4.715020e07,
        4.861682e07,
        5.011909e07,
        5.165761e07,
        5.323299e07,
        5.484596e07,
        5.649708e07,
        5.818704e07,
        5.991646e07,
        6.168607e07,
        6.349652e07,
        6.534847e07,
        6.724265e07,
        6.917967e07,
        7.116036e07,
        7.318530e07,
        7.525531e07,
        7.737105e07,
        7.953329e07,
        8.174279e07,
        8.400021e07,
        8.630635e07,
        8.866200e07,
        9.106790e07,
        9.352481e07,
        9.603355e07,
        9.859486e07,
        1.012096e08,
        1.038786e08,
        1.066026e08,
        1.093824e08,
        1.122189e08,
        1.151128e08,
        1.180652e08,
        1.210768e08,
        1.241484e08,
        1.272810e08,
        1.304754e08,
        1.337324e08,
        1.370531e08,
        1.404382e08,
        1.438888e08,
        1.474056e08,
        1.509897e08,
        1.546420e08,
        1.583634e08,
        1.621548e08,
        1.660172e08,
        1.699516e08,
        1.739590e08,
        1.780403e08,
        1.821965e08,
    ]
)

#  ---------------------- M = 3, I = 13 ---------------------------
M = 3
I = 13
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        9.181300e-01,
        6.995503e01,
        1.971073e02,
        3.617463e02,
        5.567837e02,
        7.781615e02,
        1.023352e03,
        1.290876e03,
        1.580177e03,
        1.891452e03,
        2.225587e03,
        2.583933e03,
        2.968275e03,
        3.380727e03,
        3.823605e03,
        4.299458e03,
        4.810934e03,
        5.360874e03,
        5.952091e03,
        6.587671e03,
        7.270592e03,
        8.004158e03,
        8.791511e03,
        9.636056e03,
        1.054129e04,
        1.151069e04,
        1.254790e04,
        1.365681e04,
        1.484101e04,
        1.610476e04,
        1.745189e04,
        1.888674e04,
        2.041352e04,
        2.203664e04,
        2.376087e04,
        2.559056e04,
        2.753068e04,
        2.958620e04,
        3.176202e04,
        3.406331e04,
        3.649554e04,
        3.906410e04,
        4.177453e04,
        4.463243e04,
        4.764399e04,
        5.081487e04,
        5.415128e04,
        5.765957e04,
        6.134601e04,
        6.521766e04,
        6.928060e04,
        7.354192e04,
        7.800896e04,
        8.268836e04,
        8.758771e04,
        9.271449e04,
        9.807632e04,
        1.036807e05,
        1.095361e05,
        1.156503e05,
        1.220315e05,
        1.286881e05,
        1.356287e05,
        1.428623e05,
        1.503977e05,
        1.582439e05,
        1.664102e05,
        1.749058e05,
        1.837406e05,
        1.929240e05,
        2.024661e05,
        2.123774e05,
        2.226672e05,
        2.333470e05,
        2.444267e05,
        2.559177e05,
        2.678304e05,
        2.801759e05,
        2.929662e05,
        3.062125e05,
        3.199267e05,
        3.341200e05,
        3.488054e05,
        3.639945e05,
        3.797001e05,
        3.959348e05,
        4.127111e05,
        4.300426e05,
        4.479421e05,
        4.664231e05,
        4.854994e05,
        5.051847e05,
        5.254935e05,
        5.464391e05,
        5.680363e05,
        5.902997e05,
        6.132443e05,
        6.368844e05,
        6.612361e05,
        6.863149e05,
        7.121362e05,
        7.387153e05,
        7.660688e05,
        7.942129e05,
        8.231639e05,
        8.529386e05,
        8.835533e05,
        9.150268e05,
        9.473747e05,
        9.806152e05,
        1.014766e06,
        1.049845e06,
        1.085871e06,
        1.122862e06,
        1.160837e06,
        1.199813e06,
        1.239812e06,
        1.280852e06,
        1.322952e06,
        1.366132e06,
        1.410413e06,
        1.455814e06,
        1.502357e06,
        1.550060e06,
        1.598947e06,
        1.649037e06,
        1.700354e06,
        1.752916e06,
        1.806748e06,
        1.861869e06,
        1.918305e06,
        1.976076e06,
        2.035207e06,
        2.095720e06,
        2.157636e06,
        2.220983e06,
        2.285782e06,
        2.352058e06,
        2.419834e06,
        2.489135e06,
        2.559988e06,
        2.632416e06,
        2.706446e06,
        2.782102e06,
        2.859408e06,
        2.938395e06,
        3.019085e06,
        3.101507e06,
        3.185689e06,
        3.271654e06,
        3.359434e06,
        3.449053e06,
        3.540540e06,
        3.633925e06,
        3.729233e06,
        3.826498e06,
        3.925744e06,
        4.027002e06,
        4.130304e06,
        4.235674e06,
        4.343148e06,
        4.452752e06,
        4.564520e06,
        4.678482e06,
        4.794667e06,
        4.913111e06,
        5.033839e06,
        5.156890e06,
        5.282292e06,
        5.410079e06,
        5.540285e06,
        5.672941e06,
        5.808079e06,
        5.945739e06,
        6.085949e06,
        6.228746e06,
    ]
)

#  ---------------------- M = 3, I = 14 ---------------------------
M = 3
I = 14
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.070955e01,
        8.123365e02,
        2.288590e03,
        4.200027e03,
        6.464366e03,
        9.034498e03,
        1.188072e04,
        1.498574e04,
        1.834233e04,
        2.195242e04,
        2.582553e04,
        2.997699e04,
        3.442690e04,
        3.919918e04,
        4.432047e04,
        4.981933e04,
        5.572680e04,
        6.207426e04,
        6.889543e04,
        7.622379e04,
        8.409527e04,
        9.254631e04,
        1.016143e05,
        1.113367e05,
        1.217532e05,
        1.329047e05,
        1.448337e05,
        1.575806e05,
        1.711918e05,
        1.857116e05,
        2.011872e05,
        2.176646e05,
        2.351958e05,
        2.538270e05,
        2.736142e05,
        2.946102e05,
        3.168671e05,
        3.404431e05,
        3.653942e05,
        3.917795e05,
        4.196636e05,
        4.491018e05,
        4.801635e05,
        5.129110e05,
        5.474123e05,
        5.837346e05,
        6.219462e05,
        6.621222e05,
        7.043368e05,
        7.486602e05,
        7.951695e05,
        8.439459e05,
        8.950674e05,
        9.486189e05,
        1.004678e06,
        1.063332e06,
        1.124673e06,
        1.188782e06,
        1.255752e06,
        1.325673e06,
        1.398645e06,
        1.474761e06,
        1.554118e06,
        1.636818e06,
        1.722956e06,
        1.812642e06,
        1.905980e06,
        2.003073e06,
        2.104038e06,
        2.208977e06,
        2.318006e06,
        2.431244e06,
        2.548807e06,
        2.670808e06,
        2.797373e06,
        2.928627e06,
        3.064690e06,
        3.205688e06,
        3.351759e06,
        3.503023e06,
        3.659621e06,
        3.821690e06,
        3.989358e06,
        4.162770e06,
        4.342073e06,
        4.527402e06,
        4.718908e06,
        4.916745e06,
        5.121048e06,
        5.331982e06,
        5.549699e06,
        5.774354e06,
        6.006112e06,
        6.245127e06,
        6.491574e06,
        6.745604e06,
        7.007404e06,
        7.277128e06,
        7.554956e06,
        7.841067e06,
        8.135632e06,
        8.438833e06,
        8.750860e06,
        9.071888e06,
        9.402110e06,
        9.741713e06,
        1.009090e07,
        1.044984e07,
        1.081877e07,
        1.119784e07,
        1.158730e07,
        1.198732e07,
        1.239813e07,
        1.281992e07,
        1.325293e07,
        1.369734e07,
        1.415340e07,
        1.462130e07,
        1.510128e07,
        1.559357e07,
        1.609838e07,
        1.661596e07,
        1.714652e07,
        1.769032e07,
        1.824757e07,
        1.881854e07,
        1.940346e07,
        2.000258e07,
        2.061614e07,
        2.124441e07,
        2.188760e07,
        2.254603e07,
        2.321992e07,
        2.390954e07,
        2.461516e07,
        2.533705e07,
        2.607547e07,
        2.683070e07,
        2.760302e07,
        2.839271e07,
        2.920004e07,
        3.002532e07,
        3.086881e07,
        3.173082e07,
        3.261163e07,
        3.351154e07,
        3.443087e07,
        3.536991e07,
        3.632895e07,
        3.730831e07,
        3.830832e07,
        3.932926e07,
        4.037147e07,
        4.143527e07,
        4.252097e07,
        4.362893e07,
        4.475943e07,
        4.591285e07,
        4.708949e07,
        4.828972e07,
        4.951385e07,
        5.076226e07,
        5.203526e07,
        5.333325e07,
        5.465654e07,
        5.600550e07,
        5.738049e07,
        5.878190e07,
        6.021006e07,
        6.166536e07,
        6.314819e07,
        6.465888e07,
        6.619786e07,
        6.776550e07,
        6.936214e07,
        7.098826e07,
    ]
)

#  ---------------------- M = 3, I = 15 ---------------------------
M = 3
I = 15
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.394640e00,
        4.109442e02,
        1.157868e03,
        2.124994e03,
        3.270687e03,
        4.571107e03,
        6.011346e03,
        7.582597e03,
        9.281391e03,
        1.110871e04,
        1.306931e04,
        1.517082e04,
        1.742335e04,
        1.983895e04,
        2.243062e04,
        2.521306e04,
        2.820139e04,
        3.141182e04,
        3.486102e04,
        3.856575e04,
        4.254401e04,
        4.681405e04,
        5.139459e04,
        5.630527e04,
        6.156522e04,
        6.719486e04,
        7.321552e04,
        7.964854e04,
        8.651617e04,
        9.384115e04,
        1.016460e05,
        1.099563e05,
        1.187949e05,
        1.281892e05,
        1.381630e05,
        1.487449e05,
        1.599612e05,
        1.718402e05,
        1.844110e05,
        1.977042e05,
        2.117483e05,
        2.265752e05,
        2.422176e05,
        2.587079e05,
        2.760779e05,
        2.943649e05,
        3.136008e05,
        3.338232e05,
        3.550696e05,
        3.773763e05,
        4.007822e05,
        4.253252e05,
        4.510473e05,
        4.779882e05,
        5.061912e05,
        5.356961e05,
        5.665499e05,
        5.987935e05,
        6.324759e05,
        6.676398e05,
        7.043359e05,
        7.426104e05,
        7.825101e05,
        8.240889e05,
        8.673977e05,
        9.124835e05,
        9.594033e05,
        1.008211e06,
        1.058958e06,
        1.111704e06,
        1.166502e06,
        1.223411e06,
        1.282491e06,
        1.343799e06,
        1.407399e06,
        1.473350e06,
        1.541716e06,
        1.612559e06,
        1.685944e06,
        1.761942e06,
        1.840612e06,
        1.922026e06,
        2.006251e06,
        2.093359e06,
        2.183422e06,
        2.276511e06,
        2.372694e06,
        2.472055e06,
        2.574663e06,
        2.680597e06,
        2.789932e06,
        2.902747e06,
        3.019125e06,
        3.139149e06,
        3.262894e06,
        3.390446e06,
        3.521894e06,
        3.657318e06,
        3.796809e06,
        3.940448e06,
        4.088333e06,
        4.240552e06,
        4.397193e06,
        4.558348e06,
        4.724115e06,
        4.894587e06,
        5.069865e06,
        5.250039e06,
        5.435212e06,
        5.625483e06,
        5.820957e06,
        6.021730e06,
        6.227909e06,
        6.439603e06,
        6.656912e06,
        6.879946e06,
        7.108816e06,
        7.343626e06,
        7.584494e06,
        7.831525e06,
        8.084849e06,
        8.344561e06,
        8.610791e06,
        8.883657e06,
        9.163268e06,
        9.449758e06,
        9.743239e06,
        1.004384e07,
        1.035168e07,
        1.066689e07,
        1.098959e07,
        1.131992e07,
        1.165801e07,
        1.200399e07,
        1.235798e07,
        1.272013e07,
        1.309056e07,
        1.346943e07,
        1.385686e07,
        1.425299e07,
        1.465797e07,
        1.507195e07,
        1.549505e07,
        1.592745e07,
        1.636926e07,
        1.682065e07,
        1.728178e07,
        1.775276e07,
        1.823379e07,
        1.872501e07,
        1.922656e07,
        1.973862e07,
        2.026134e07,
        2.079487e07,
        2.133938e07,
        2.189504e07,
        2.246202e07,
        2.304046e07,
        2.363056e07,
        2.423247e07,
        2.484636e07,
        2.547242e07,
        2.611081e07,
        2.676171e07,
        2.742530e07,
        2.810175e07,
        2.879126e07,
        2.949400e07,
        3.021015e07,
        3.093989e07,
        3.168343e07,
        3.244094e07,
        3.321261e07,
        3.399866e07,
        3.479924e07,
        3.561458e07,
    ]
)

#  ---------------------- M = 3, I = 16 ---------------------------
M = 3
I = 16
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.295915e01,
        4.775780e03,
        1.345460e04,
        2.469181e04,
        3.800370e04,
        5.311278e04,
        6.984465e04,
        8.809583e04,
        1.078215e05,
        1.290311e05,
        1.517738e05,
        1.761371e05,
        2.022330e05,
        2.301970e05,
        2.601801e05,
        2.923500e05,
        3.268756e05,
        3.639441e05,
        4.037454e05,
        4.464741e05,
        4.923320e05,
        5.415271e05,
        5.942775e05,
        6.508028e05,
        7.113265e05,
        7.760820e05,
        8.453078e05,
        9.192467e05,
        9.981526e05,
        1.082292e06,
        1.171923e06,
        1.267315e06,
        1.368758e06,
        1.476543e06,
        1.590956e06,
        1.712308e06,
        1.840917e06,
        1.977087e06,
        2.121159e06,
        2.273473e06,
        2.434375e06,
        2.604205e06,
        2.783338e06,
        2.972142e06,
        3.171006e06,
        3.380315e06,
        3.600476e06,
        3.831875e06,
        4.074950e06,
        4.330119e06,
        4.597824e06,
        4.878515e06,
        5.172635e06,
        5.480655e06,
        5.803069e06,
        6.140331e06,
        6.492956e06,
        6.861430e06,
        7.246294e06,
        7.648073e06,
        8.067282e06,
        8.504471e06,
        8.960216e06,
        9.435065e06,
        9.929615e06,
        1.044443e07,
        1.098014e07,
        1.153735e07,
        1.211666e07,
        1.271871e07,
        1.334416e07,
        1.399362e07,
        1.466782e07,
        1.536741e07,
        1.609309e07,
        1.684551e07,
        1.762546e07,
        1.843360e07,
        1.927066e07,
        2.013746e07,
        2.103470e07,
        2.196320e07,
        2.292366e07,
        2.391697e07,
        2.494387e07,
        2.600520e07,
        2.710179e07,
        2.823452e07,
        2.940420e07,
        3.061173e07,
        3.185798e07,
        3.314380e07,
        3.447017e07,
        3.583801e07,
        3.724820e07,
        3.870172e07,
        4.019952e07,
        4.174256e07,
        4.333188e07,
        4.496840e07,
        4.665318e07,
        4.838728e07,
        5.017165e07,
        5.200740e07,
        5.389561e07,
        5.583735e07,
        5.783364e07,
        5.988569e07,
        6.199461e07,
        6.416146e07,
        6.638749e07,
        6.867377e07,
        7.102154e07,
        7.343199e07,
        7.590634e07,
        7.844571e07,
        8.105146e07,
        8.372481e07,
        8.646697e07,
        8.927926e07,
        9.216301e07,
        9.511942e07,
        9.814997e07,
        1.012559e08,
        1.044386e08,
        1.076993e08,
        1.110396e08,
        1.144608e08,
        1.179644e08,
        1.215516e08,
        1.252241e08,
        1.289833e08,
        1.328306e08,
        1.367675e08,
        1.407957e08,
        1.449164e08,
        1.491314e08,
        1.534422e08,
        1.578503e08,
        1.623573e08,
        1.669650e08,
        1.716746e08,
        1.764882e08,
        1.814073e08,
        1.864334e08,
        1.915684e08,
        1.968138e08,
        2.021716e08,
        2.076433e08,
        2.132308e08,
        2.189357e08,
        2.247600e08,
        2.307054e08,
        2.367737e08,
        2.429668e08,
        2.492865e08,
        2.557347e08,
        2.623134e08,
        2.690243e08,
        2.758695e08,
        2.828508e08,
        2.899701e08,
        2.972298e08,
        3.046315e08,
        3.121773e08,
        3.198694e08,
        3.277097e08,
        3.357002e08,
        3.438432e08,
        3.521405e08,
        3.605945e08,
        3.692073e08,
        3.779810e08,
        3.869178e08,
        3.960200e08,
        4.052896e08,
    ]
)

#  ---------------------- M = 3, I = 17 ---------------------------
M = 3
I = 17
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.126567e01,
        2.362010e03,
        6.653739e03,
        1.221051e04,
        1.879316e04,
        2.626447e04,
        3.453787e04,
        4.356149e04,
        5.331364e04,
        6.379765e04,
        7.503938e04,
        8.708147e04,
        9.998024e04,
        1.138041e05,
        1.286285e05,
        1.445357e05,
        1.616128e05,
        1.799519e05,
        1.996462e05,
        2.207944e05,
        2.434973e05,
        2.678588e05,
        2.939855e05,
        3.219866e05,
        3.519763e05,
        3.840710e05,
        4.183868e05,
        4.550447e05,
        4.941742e05,
        5.359053e05,
        5.803658e05,
        6.276941e05,
        6.780312e05,
        7.315213e05,
        7.883119e05,
        8.485581e05,
        9.124080e05,
        9.800237e05,
        1.051575e06,
        1.127220e06,
        1.207142e06,
        1.291512e06,
        1.380510e06,
        1.474325e06,
        1.573144e06,
        1.677168e06,
        1.786591e06,
        1.901612e06,
        2.022451e06,
        2.149307e06,
        2.282409e06,
        2.421973e06,
        2.568228e06,
        2.721418e06,
        2.881762e06,
        3.049503e06,
        3.224910e06,
        3.408205e06,
        3.599666e06,
        3.799557e06,
        4.008133e06,
        4.225669e06,
        4.452440e06,
        4.688742e06,
        4.934864e06,
        5.191084e06,
        5.457716e06,
        5.735050e06,
        6.023406e06,
        6.323116e06,
        6.634468e06,
        6.957803e06,
        7.293467e06,
        7.641780e06,
        8.003085e06,
        8.377742e06,
        8.766122e06,
        9.168553e06,
        9.585412e06,
        1.001709e07,
        1.046394e07,
        1.092639e07,
        1.140478e07,
        1.189953e07,
        1.241103e07,
        1.293971e07,
        1.348598e07,
        1.405025e07,
        1.463297e07,
        1.523455e07,
        1.585545e07,
        1.649609e07,
        1.715694e07,
        1.783848e07,
        1.854115e07,
        1.926541e07,
        2.001179e07,
        2.078071e07,
        2.157272e07,
        2.238827e07,
        2.322791e07,
        2.409212e07,
        2.498146e07,
        2.589638e07,
        2.683750e07,
        2.780528e07,
        2.880035e07,
        2.982319e07,
        3.087441e07,
        3.195455e07,
        3.306416e07,
        3.420390e07,
        3.537427e07,
        3.657594e07,
        3.780946e07,
        3.907546e07,
        4.037457e07,
        4.170740e07,
        4.307458e07,
        4.447674e07,
        4.591456e07,
        4.738867e07,
        4.889974e07,
        5.044841e07,
        5.203540e07,
        5.366135e07,
        5.532700e07,
        5.703306e07,
        5.878013e07,
        6.056905e07,
        6.240048e07,
        6.427519e07,
        6.619386e07,
        6.815728e07,
        7.016617e07,
        7.222130e07,
        7.432351e07,
        7.647348e07,
        7.867203e07,
        8.091997e07,
        8.321813e07,
        8.556722e07,
        8.796816e07,
        9.042171e07,
        9.292876e07,
        9.549011e07,
        9.810667e07,
        1.007792e08,
        1.035087e08,
        1.062959e08,
        1.091418e08,
        1.120472e08,
        1.150131e08,
        1.180403e08,
        1.211298e08,
        1.242826e08,
        1.274995e08,
        1.307815e08,
        1.341295e08,
        1.375446e08,
        1.410276e08,
        1.445796e08,
        1.482015e08,
        1.518944e08,
        1.556593e08,
        1.594971e08,
        1.634089e08,
        1.673958e08,
        1.714587e08,
        1.755987e08,
        1.798170e08,
        1.841145e08,
        1.884924e08,
        1.929516e08,
        1.974934e08,
        2.021189e08,
    ]
)

#  ---------------------- M = 3, I = 18 ---------------------------
M = 3
I = 18
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.837627e02,
        1.387967e04,
        3.909803e04,
        7.174973e04,
        1.104283e05,
        1.543309e05,
        2.029434e05,
        2.559580e05,
        3.132406e05,
        3.748050e05,
        4.407836e05,
        5.114192e05,
        5.870305e05,
        6.680003e05,
        7.547560e05,
        8.477726e05,
        9.475368e05,
        1.054582e06,
        1.169449e06,
        1.292692e06,
        1.424898e06,
        1.566662e06,
        1.718594e06,
        1.881319e06,
        2.055491e06,
        2.241760e06,
        2.440823e06,
        2.653357e06,
        2.880106e06,
        3.121812e06,
        3.379209e06,
        3.653089e06,
        3.944236e06,
        4.253526e06,
        4.581753e06,
        4.929803e06,
        5.298553e06,
        5.688930e06,
        6.101879e06,
        6.538337e06,
        6.999325e06,
        7.485814e06,
        7.998834e06,
        8.539473e06,
        9.108804e06,
        9.707966e06,
        1.033803e07,
        1.100023e07,
        1.169569e07,
        1.242568e07,
        1.319142e07,
        1.399419e07,
        1.483526e07,
        1.571596e07,
        1.663761e07,
        1.760170e07,
        1.860954e07,
        1.966258e07,
        2.076236e07,
        2.191031e07,
        2.310791e07,
        2.435683e07,
        2.565854e07,
        2.701471e07,
        2.842701e07,
        2.989710e07,
        3.142661e07,
        3.301744e07,
        3.467120e07,
        3.638967e07,
        3.817485e07,
        4.002844e07,
        4.195248e07,
        4.394874e07,
        4.601924e07,
        4.816607e07,
        5.039106e07,
        5.269646e07,
        5.508422e07,
        5.755659e07,
        6.011559e07,
        6.276353e07,
        6.550260e07,
        6.833496e07,
        7.126300e07,
        7.428912e07,
        7.741560e07,
        8.064479e07,
        8.397913e07,
        8.742121e07,
        9.097347e07,
        9.463835e07,
        9.841865e07,
        1.023169e08,
        1.063354e08,
        1.104775e08,
        1.147455e08,
        1.191421e08,
        1.236703e08,
        1.283330e08,
        1.331328e08,
        1.380728e08,
        1.431559e08,
        1.483852e08,
        1.537637e08,
        1.592942e08,
        1.649801e08,
        1.708245e08,
        1.768305e08,
        1.830015e08,
        1.893405e08,
        1.958510e08,
        2.025364e08,
        2.093999e08,
        2.164450e08,
        2.236751e08,
        2.310939e08,
        2.387049e08,
        2.465116e08,
        2.545176e08,
        2.627268e08,
        2.711426e08,
        2.797689e08,
        2.886098e08,
        2.976687e08,
        3.069497e08,
        3.164567e08,
        3.261937e08,
        3.361646e08,
        3.463737e08,
        3.568248e08,
        3.675224e08,
        3.784706e08,
        3.896733e08,
        4.011353e08,
        4.128607e08,
        4.248538e08,
        4.371189e08,
        4.496609e08,
        4.624839e08,
        4.755926e08,
        4.889916e08,
        5.026858e08,
        5.166797e08,
        5.309777e08,
        5.455850e08,
        5.605064e08,
        5.757467e08,
        5.913112e08,
        6.072043e08,
        6.234311e08,
        6.399973e08,
        6.569072e08,
        6.741666e08,
        6.917803e08,
        7.097538e08,
        7.280923e08,
        7.468014e08,
        7.658867e08,
        7.853528e08,
        8.052060e08,
        8.254517e08,
        8.460953e08,
        8.671429e08,
        8.885996e08,
        9.104718e08,
        9.327650e08,
        9.554851e08,
        9.786380e08,
        1.002230e09,
        1.026267e09,
        1.050754e09,
        1.075698e09,
        1.101107e09,
        1.126984e09,
        1.153337e09,
    ]
)

#  ---------------------- M = 4, I = 1 ---------------------------
M = 4
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.834054e01,
        3.016016e02,
        6.001924e02,
        8.988074e02,
        1.197498e03,
        1.496709e03,
        1.797823e03,
        2.103285e03,
        2.416237e03,
        2.740046e03,
        3.077980e03,
        3.433067e03,
        3.808070e03,
        4.205517e03,
        4.627758e03,
        5.077011e03,
        5.555411e03,
        6.065047e03,
        6.607987e03,
        7.186308e03,
        7.802105e03,
        8.457512e03,
        9.154706e03,
        9.895923e03,
        1.068346e04,
        1.151968e04,
        1.240701e04,
        1.334798e04,
        1.434516e04,
        1.540125e04,
        1.651898e04,
        1.770123e04,
        1.895091e04,
        2.027106e04,
        2.166480e04,
        2.313534e04,
        2.468602e04,
        2.632023e04,
        2.804150e04,
        2.985343e04,
        3.175977e04,
        3.376432e04,
        3.587102e04,
        3.808392e04,
        4.040717e04,
        4.284502e04,
        4.540186e04,
        4.808216e04,
        5.089054e04,
        5.383169e04,
        5.691045e04,
        6.013176e04,
        6.350068e04,
        6.702236e04,
        7.070211e04,
        7.454531e04,
        7.855746e04,
        8.274419e04,
        8.711122e04,
        9.166437e04,
        9.640958e04,
        1.013529e05,
        1.065004e05,
        1.118584e05,
        1.174331e05,
        1.232310e05,
        1.292585e05,
        1.355222e05,
        1.420287e05,
        1.487848e05,
        1.557971e05,
        1.630726e05,
        1.706179e05,
        1.784402e05,
        1.865463e05,
        1.949432e05,
        2.036378e05,
        2.126373e05,
        2.219487e05,
        2.315789e05,
        2.415351e05,
        2.518242e05,
        2.624534e05,
        2.734295e05,
        2.847595e05,
        2.964505e05,
        3.085092e05,
        3.209425e05,
        3.337573e05,
        3.469602e05,
        3.605579e05,
        3.745571e05,
        3.889642e05,
        4.037857e05,
        4.190280e05,
        4.346973e05,
        4.507998e05,
        4.673415e05,
        4.843284e05,
        5.017665e05,
        5.196613e05,
        5.380185e05,
        5.568437e05,
        5.761421e05,
        5.959191e05,
        6.161798e05,
        6.369291e05,
        6.581719e05,
        6.799128e05,
        7.021566e05,
        7.249075e05,
        7.481698e05,
        7.719478e05,
        7.962454e05,
        8.210663e05,
        8.464145e05,
        8.722932e05,
        8.987061e05,
        9.256562e05,
        9.531467e05,
        9.811806e05,
        1.009761e06,
        1.038889e06,
        1.068569e06,
        1.098803e06,
        1.129593e06,
        1.160940e06,
        1.192847e06,
        1.225316e06,
        1.258347e06,
        1.291944e06,
        1.326106e06,
        1.360835e06,
        1.396133e06,
        1.431999e06,
        1.468436e06,
        1.505443e06,
        1.543020e06,
        1.581169e06,
        1.619890e06,
        1.659183e06,
        1.699047e06,
        1.739482e06,
        1.780489e06,
        1.822067e06,
        1.864215e06,
        1.906934e06,
        1.950221e06,
        1.994077e06,
        2.038500e06,
        2.083489e06,
        2.129044e06,
        2.175162e06,
        2.221843e06,
        2.269086e06,
        2.316888e06,
        2.365247e06,
        2.414164e06,
        2.463635e06,
        2.513658e06,
        2.564232e06,
        2.615355e06,
        2.667024e06,
        2.719237e06,
        2.771992e06,
        2.825287e06,
        2.879119e06,
        2.933486e06,
        2.988385e06,
        3.043814e06,
        3.099769e06,
        3.156248e06,
        3.213249e06,
        3.270768e06,
        3.328803e06,
        3.387350e06,
        3.446406e06,
        3.505969e06,
        3.566036e06,
        3.626603e06,
        3.687666e06,
        3.749224e06,
        3.811272e06,
        3.873807e06,
        3.936826e06,
        4.000325e06,
        4.064302e06,
        4.128752e06,
        4.193672e06,
        4.259058e06,
        4.324908e06,
        4.391217e06,
        4.457982e06,
        4.525200e06,
        4.592866e06,
        4.660977e06,
        4.729530e06,
        4.798520e06,
        4.867944e06,
        4.937799e06,
        5.008080e06,
        5.078784e06,
        5.149907e06,
        5.221446e06,
        5.293396e06,
        5.365753e06,
        5.438515e06,
        5.511677e06,
        5.585236e06,
        5.659187e06,
        5.733527e06,
        5.808252e06,
        5.883358e06,
        5.958842e06,
        6.034699e06,
        6.110926e06,
        6.187520e06,
        6.264475e06,
        6.341789e06,
        6.419458e06,
        6.497478e06,
        6.575844e06,
        6.654554e06,
        6.733604e06,
        6.812990e06,
        6.892708e06,
        6.972754e06,
        7.053125e06,
        7.133816e06,
        7.214826e06,
        7.296148e06,
        7.377781e06,
        7.459719e06,
        7.541961e06,
        7.624501e06,
        7.707336e06,
        7.790463e06,
        7.873879e06,
        7.957578e06,
        8.041559e06,
        8.125817e06,
        8.210349e06,
        8.295151e06,
        8.380220e06,
        8.465552e06,
        8.551144e06,
        8.636993e06,
        8.723094e06,
        8.809445e06,
        8.896042e06,
        8.982882e06,
    ]
)

#  ---------------------- M = 4, I = 2 ---------------------------
M = 4
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.222856e01,
        2.011405e02,
        4.003536e02,
        5.996615e02,
        7.991092e02,
        9.990614e02,
        1.200554e03,
        1.405397e03,
        1.615831e03,
        1.834200e03,
        2.062784e03,
        2.303629e03,
        2.558624e03,
        2.829471e03,
        3.117766e03,
        3.425050e03,
        3.752753e03,
        4.102350e03,
        4.475234e03,
        4.872840e03,
        5.296650e03,
        5.748165e03,
        6.228913e03,
        6.740417e03,
        7.284339e03,
        7.862305e03,
        8.476054e03,
        9.127358e03,
        9.818007e03,
        1.054988e04,
        1.132500e04,
        1.214527e04,
        1.301286e04,
        1.392980e04,
        1.489831e04,
        1.592072e04,
        1.699933e04,
        1.813650e04,
        1.933465e04,
        2.059648e04,
        2.192444e04,
        2.332135e04,
        2.478986e04,
        2.633284e04,
        2.795313e04,
        2.965383e04,
        3.143800e04,
        3.330869e04,
        3.526918e04,
        3.732275e04,
        3.947275e04,
        4.172267e04,
        4.407610e04,
        4.653671e04,
        4.910823e04,
        5.179425e04,
        5.459898e04,
        5.752616e04,
        6.058007e04,
        6.376470e04,
        6.708449e04,
        7.054360e04,
        7.414663e04,
        7.789815e04,
        8.180281e04,
        8.586522e04,
        9.009033e04,
        9.448303e04,
        9.904846e04,
        1.037917e05,
        1.087180e05,
        1.138327e05,
        1.191414e05,
        1.246497e05,
        1.303630e05,
        1.362872e05,
        1.424284e05,
        1.487924e05,
        1.553853e05,
        1.622135e05,
        1.692834e05,
        1.766012e05,
        1.841737e05,
        1.920075e05,
        2.001097e05,
        2.084867e05,
        2.171461e05,
        2.260948e05,
        2.353401e05,
        2.448897e05,
        2.547509e05,
        2.649314e05,
        2.754390e05,
        2.862820e05,
        2.974681e05,
        3.090057e05,
        3.209029e05,
        3.331687e05,
        3.458111e05,
        3.588390e05,
        3.722616e05,
        3.860877e05,
        4.003264e05,
        4.149873e05,
        4.300793e05,
        4.456126e05,
        4.615966e05,
        4.780413e05,
        4.949566e05,
        5.123527e05,
        5.302399e05,
        5.486289e05,
        5.675301e05,
        5.869545e05,
        6.069124e05,
        6.274157e05,
        6.484752e05,
        6.701022e05,
        6.923088e05,
        7.151059e05,
        7.385061e05,
        7.625212e05,
        7.871631e05,
        8.124445e05,
        8.383776e05,
        8.649755e05,
        8.922511e05,
        9.202168e05,
        9.488864e05,
        9.782731e05,
        1.008390e06,
        1.039252e06,
        1.070871e06,
        1.103263e06,
        1.136442e06,
        1.170421e06,
        1.205216e06,
        1.240841e06,
        1.277312e06,
        1.314642e06,
        1.352849e06,
        1.391947e06,
        1.431951e06,
        1.472878e06,
        1.514745e06,
        1.557566e06,
        1.601359e06,
        1.646140e06,
        1.691926e06,
        1.738734e06,
        1.786582e06,
        1.835486e06,
        1.885465e06,
        1.936536e06,
        1.988717e06,
        2.042026e06,
        2.096482e06,
        2.152104e06,
        2.208910e06,
        2.266919e06,
        2.326151e06,
        2.386625e06,
        2.448361e06,
        2.511378e06,
        2.575697e06,
        2.641338e06,
        2.708322e06,
        2.776668e06,
        2.846400e06,
        2.917536e06,
        2.990100e06,
        3.064111e06,
        3.139593e06,
        3.216567e06,
        3.295056e06,
        3.375082e06,
    ]
)

#  ---------------------- M = 4, I = 3 ---------------------------
M = 4
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.256526e01,
        2.080869e02,
        4.142500e02,
        6.205111e02,
        8.269083e02,
        1.033772e03,
        1.242093e03,
        1.453602e03,
        1.670525e03,
        1.895214e03,
        2.129981e03,
        2.376914e03,
        2.637982e03,
        2.914901e03,
        3.209368e03,
        3.522887e03,
        3.857001e03,
        4.213185e03,
        4.592889e03,
        4.997581e03,
        5.428733e03,
        5.887874e03,
        6.376560e03,
        6.896343e03,
        7.448865e03,
        8.035829e03,
        8.658960e03,
        9.319999e03,
        1.002082e04,
        1.076333e04,
        1.154942e04,
        1.238119e04,
        1.326072e04,
        1.419008e04,
        1.517143e04,
        1.620721e04,
        1.729969e04,
        1.845127e04,
        1.966438e04,
        2.094161e04,
        2.228561e04,
        2.369906e04,
        2.518473e04,
        2.674545e04,
        2.838410e04,
        3.010380e04,
        3.190749e04,
        3.379832e04,
        3.577964e04,
        3.785476e04,
        4.002697e04,
        4.229982e04,
        4.467683e04,
        4.716170e04,
        4.975823e04,
        5.247004e04,
        5.530117e04,
        5.825564e04,
        6.133755e04,
        6.455106e04,
        6.790052e04,
        7.139005e04,
        7.502442e04,
        7.880813e04,
        8.274562e04,
        8.684195e04,
        9.110174e04,
        9.553009e04,
        1.001320e05,
        1.049128e05,
        1.098775e05,
        1.150316e05,
        1.203805e05,
        1.259299e05,
        1.316857e05,
        1.376532e05,
        1.438385e05,
        1.502479e05,
        1.568873e05,
        1.637628e05,
        1.708812e05,
        1.782486e05,
        1.858719e05,
        1.937574e05,
        2.019124e05,
        2.103435e05,
        2.190582e05,
        2.280632e05,
        2.373661e05,
        2.469743e05,
        2.568955e05,
        2.671372e05,
        2.777073e05,
        2.886138e05,
        2.998648e05,
        3.114686e05,
        3.234334e05,
        3.357677e05,
        3.484802e05,
        3.615796e05,
        3.750749e05,
        3.889752e05,
        4.032894e05,
        4.180269e05,
        4.331973e05,
        4.488102e05,
        4.648751e05,
        4.814022e05,
        4.984014e05,
        5.158830e05,
        5.338571e05,
        5.523341e05,
        5.713253e05,
        5.908406e05,
        6.108916e05,
        6.314891e05,
        6.526444e05,
        6.743689e05,
        6.966742e05,
        7.195719e05,
        7.430743e05,
        7.671928e05,
        7.919402e05,
        8.173284e05,
        8.433701e05,
        8.700783e05,
        8.974653e05,
        9.255449e05,
        9.543294e05,
        9.838329e05,
        1.014069e06,
        1.045050e06,
        1.076792e06,
        1.109308e06,
        1.142611e06,
        1.176718e06,
        1.211642e06,
        1.247397e06,
        1.284000e06,
        1.321465e06,
        1.359807e06,
        1.399043e06,
        1.439187e06,
        1.480256e06,
        1.522265e06,
        1.565232e06,
        1.609171e06,
        1.654101e06,
        1.700038e06,
        1.746998e06,
        1.795000e06,
        1.844060e06,
        1.894197e06,
        1.945428e06,
        1.997770e06,
        2.051243e06,
        2.105865e06,
        2.161654e06,
        2.218630e06,
        2.276810e06,
        2.336216e06,
        2.396864e06,
        2.458777e06,
        2.521974e06,
        2.586474e06,
        2.652298e06,
        2.719466e06,
        2.788000e06,
        2.857920e06,
        2.929247e06,
        3.002003e06,
        3.076209e06,
        3.151888e06,
        3.229061e06,
        3.307750e06,
        3.387980e06,
    ]
)

#  ---------------------- M = 4, I = 4 ---------------------------
M = 4
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.920009e01,
        3.193816e02,
        6.358818e02,
        9.525320e02,
        1.269392e03,
        1.586983e03,
        1.906819e03,
        2.231621e03,
        2.564811e03,
        2.910018e03,
        3.270780e03,
        3.650417e03,
        4.051873e03,
        4.477876e03,
        4.931017e03,
        5.413766e03,
        5.928387e03,
        6.477164e03,
        7.062454e03,
        7.686493e03,
        8.351633e03,
        9.060190e03,
        9.814583e03,
        1.061722e04,
        1.147081e04,
        1.237778e04,
        1.334087e04,
        1.436287e04,
        1.544662e04,
        1.659506e04,
        1.781131e04,
        1.909836e04,
        2.045953e04,
        2.189821e04,
        2.341770e04,
        2.502151e04,
        2.671353e04,
        2.849723e04,
        3.037651e04,
        3.235551e04,
        3.443819e04,
        3.662862e04,
        3.893132e04,
        4.135055e04,
        4.389090e04,
        4.655709e04,
        4.935379e04,
        5.228607e04,
        5.535866e04,
        5.857697e04,
        6.194628e04,
        6.547190e04,
        6.915948e04,
        7.301461e04,
        7.704295e04,
        8.125083e04,
        8.564401e04,
        9.022885e04,
        9.501173e04,
        9.999909e04,
        1.051977e05,
        1.106143e05,
        1.162557e05,
        1.221292e05,
        1.282420e05,
        1.346015e05,
        1.412153e05,
        1.480910e05,
        1.552365e05,
        1.626599e05,
        1.703693e05,
        1.783731e05,
        1.866800e05,
        1.952985e05,
        2.042375e05,
        2.135062e05,
        2.231135e05,
        2.330688e05,
        2.433819e05,
        2.540625e05,
        2.651203e05,
        2.765653e05,
        2.884082e05,
        3.006592e05,
        3.133289e05,
        3.264282e05,
        3.399683e05,
        3.539598e05,
        3.684149e05,
        3.833445e05,
        3.987610e05,
        4.146759e05,
        4.311017e05,
        4.480505e05,
        4.655352e05,
        4.835685e05,
        5.021632e05,
        5.213328e05,
        5.410906e05,
        5.614503e05,
        5.824256e05,
        6.040307e05,
        6.262797e05,
        6.491874e05,
        6.727680e05,
        6.970374e05,
        7.220099e05,
        7.477012e05,
        7.741267e05,
        8.013024e05,
        8.292446e05,
        8.579696e05,
        8.874938e05,
        9.178335e05,
        9.490066e05,
        9.810301e05,
        1.013921e06,
        1.047698e06,
        1.082378e06,
        1.117980e06,
        1.154522e06,
        1.192024e06,
        1.230503e06,
        1.269980e06,
        1.310473e06,
        1.352004e06,
        1.394590e06,
        1.438254e06,
        1.483015e06,
        1.528894e06,
        1.575913e06,
        1.624092e06,
        1.673454e06,
        1.724020e06,
        1.775813e06,
        1.828855e06,
        1.883168e06,
        1.938776e06,
        1.995702e06,
        2.053969e06,
        2.113602e06,
        2.174624e06,
        2.237060e06,
        2.300936e06,
        2.366274e06,
        2.433103e06,
        2.501445e06,
        2.571329e06,
        2.642780e06,
        2.715823e06,
        2.790487e06,
        2.866799e06,
        2.944785e06,
        3.024473e06,
        3.105892e06,
        3.189071e06,
        3.274037e06,
        3.360820e06,
        3.449449e06,
        3.539953e06,
        3.632364e06,
        3.726710e06,
        3.823023e06,
        3.921334e06,
        4.021673e06,
        4.124073e06,
        4.228565e06,
        4.335183e06,
        4.443957e06,
        4.554922e06,
        4.668111e06,
        4.783556e06,
        4.901294e06,
        5.021357e06,
        5.143780e06,
        5.268599e06,
    ]
)

#  ---------------------- M = 4, I = 5 ---------------------------
M = 4
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.126859e02,
        1.864509e03,
        3.711701e03,
        5.559770e03,
        7.409060e03,
        9.262436e03,
        1.112884e04,
        1.302350e04,
        1.496642e04,
        1.697860e04,
        1.908053e04,
        2.129100e04,
        2.362782e04,
        2.610612e04,
        2.874132e04,
        3.154718e04,
        3.453696e04,
        3.772415e04,
        4.112140e04,
        4.474253e04,
        4.860004e04,
        5.270834e04,
        5.708061e04,
        6.173070e04,
        6.667417e04,
        7.192540e04,
        7.749930e04,
        8.341287e04,
        8.968139e04,
        9.632295e04,
        1.033539e05,
        1.107929e05,
        1.186581e05,
        1.269691e05,
        1.357447e05,
        1.450058e05,
        1.547736e05,
        1.650686e05,
        1.759141e05,
        1.873318e05,
        1.993451e05,
        2.119782e05,
        2.252566e05,
        2.392045e05,
        2.538486e05,
        2.692152e05,
        2.853310e05,
        3.022263e05,
        3.199273e05,
        3.384653e05,
        3.578704e05,
        3.781728e05,
        3.994046e05,
        4.215990e05,
        4.447877e05,
        4.690061e05,
        4.942895e05,
        5.206713e05,
        5.481903e05,
        5.768826e05,
        6.067872e05,
        6.379417e05,
        6.703877e05,
        7.041640e05,
        7.393128e05,
        7.758767e05,
        8.138982e05,
        8.534227e05,
        8.944954e05,
        9.371609e05,
        9.814658e05,
        1.027460e06,
        1.075192e06,
        1.124709e06,
        1.176064e06,
        1.229308e06,
        1.284495e06,
        1.341676e06,
        1.400908e06,
        1.462245e06,
        1.525743e06,
        1.591463e06,
        1.659462e06,
        1.729799e06,
        1.802536e06,
        1.877734e06,
        1.955456e06,
        2.035768e06,
        2.118733e06,
        2.204417e06,
        2.292890e06,
        2.384219e06,
        2.478473e06,
        2.575724e06,
        2.676044e06,
        2.779507e06,
        2.886184e06,
        2.996153e06,
        3.109493e06,
        3.226277e06,
        3.346586e06,
        3.470502e06,
        3.598108e06,
        3.729483e06,
        3.864712e06,
        4.003881e06,
        4.147080e06,
        4.294392e06,
        4.445907e06,
        4.601719e06,
        4.761916e06,
        4.926595e06,
        5.095849e06,
        5.269773e06,
        5.448463e06,
        5.632024e06,
        5.820548e06,
        6.014144e06,
        6.212908e06,
        6.416949e06,
        6.626371e06,
        6.841280e06,
        7.061789e06,
        7.288003e06,
        7.520035e06,
        7.758000e06,
        8.002011e06,
        8.252184e06,
        8.508638e06,
        8.771489e06,
        9.040859e06,
        9.316869e06,
        9.599643e06,
        9.889311e06,
        1.018599e07,
        1.048982e07,
        1.080092e07,
        1.111943e07,
        1.144548e07,
        1.177920e07,
        1.212074e07,
        1.247022e07,
        1.282778e07,
        1.319359e07,
        1.356776e07,
        1.395045e07,
        1.434180e07,
        1.474197e07,
        1.515110e07,
        1.556933e07,
        1.599684e07,
        1.643377e07,
        1.688027e07,
        1.733652e07,
        1.780266e07,
        1.827886e07,
        1.876528e07,
        1.926210e07,
        1.976946e07,
        2.028756e07,
        2.081655e07,
        2.135661e07,
        2.190792e07,
        2.247066e07,
        2.304498e07,
        2.363109e07,
        2.422917e07,
        2.483940e07,
        2.546196e07,
        2.609704e07,
        2.674484e07,
        2.740554e07,
        2.807935e07,
        2.876645e07,
        2.946704e07,
        3.018133e07,
    ]
)

#  ---------------------- M = 5, I = 1 ---------------------------
M = 5
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.011870e00,
        7.573520e00,
        1.480009e01,
        2.203056e01,
        2.926249e01,
        3.649540e01,
        4.372913e01,
        5.096362e01,
        5.819883e01,
        6.543475e01,
        7.267137e01,
        7.990872e01,
        8.714687e01,
        9.438597e01,
        1.016263e02,
        1.088684e02,
        1.161130e02,
        1.233610e02,
        1.306138e02,
        1.378730e02,
        1.451405e02,
        1.524185e02,
        1.597093e02,
        1.670157e02,
        1.743404e02,
        1.816863e02,
        1.890565e02,
        1.964539e02,
        2.038817e02,
        2.113428e02,
        2.188405e02,
        2.263775e02,
        2.339567e02,
        2.415811e02,
        2.492532e02,
        2.569757e02,
        2.647511e02,
        2.725817e02,
        2.804698e02,
        2.884176e02,
        2.964271e02,
        3.045004e02,
        3.126391e02,
        3.208450e02,
        3.291199e02,
        3.374652e02,
        3.458824e02,
        3.543729e02,
        3.629381e02,
        3.715790e02,
        3.802970e02,
        3.890930e02,
        3.979682e02,
        4.069234e02,
        4.159597e02,
        4.250779e02,
        4.342787e02,
        4.435630e02,
        4.529316e02,
        4.623850e02,
        4.719240e02,
        4.815492e02,
        4.912611e02,
        5.010603e02,
        5.109473e02,
        5.209227e02,
        5.309869e02,
        5.411404e02,
        5.513836e02,
        5.617168e02,
        5.721405e02,
        5.826552e02,
        5.932609e02,
        6.039583e02,
        6.147475e02,
        6.256289e02,
        6.366028e02,
        6.476694e02,
        6.588291e02,
        6.700820e02,
        6.814285e02,
        6.928687e02,
        7.044030e02,
        7.160315e02,
        7.277544e02,
        7.395719e02,
        7.514843e02,
        7.634917e02,
        7.755944e02,
        7.877924e02,
        8.000860e02,
        8.124754e02,
        8.249606e02,
        8.375419e02,
        8.502194e02,
        8.629933e02,
        8.758637e02,
        8.888307e02,
        9.018945e02,
        9.150553e02,
        9.283131e02,
        9.416680e02,
        9.551203e02,
        9.686700e02,
        9.823173e02,
        9.960622e02,
        1.009905e03,
        1.023845e03,
        1.037884e03,
        1.052021e03,
        1.066256e03,
        1.080589e03,
        1.095020e03,
        1.109551e03,
        1.124179e03,
        1.138907e03,
        1.153733e03,
        1.168658e03,
        1.183682e03,
        1.198806e03,
        1.214028e03,
        1.229350e03,
        1.244771e03,
        1.260292e03,
        1.275912e03,
        1.291632e03,
        1.307451e03,
        1.323370e03,
        1.339390e03,
        1.355509e03,
        1.371728e03,
        1.388047e03,
        1.404467e03,
        1.420987e03,
        1.437607e03,
        1.454327e03,
        1.471149e03,
        1.488070e03,
        1.505093e03,
        1.522216e03,
        1.539440e03,
        1.556765e03,
        1.574191e03,
        1.591718e03,
        1.609346e03,
        1.627076e03,
        1.644907e03,
        1.662839e03,
        1.680872e03,
        1.699007e03,
        1.717244e03,
        1.735582e03,
        1.754022e03,
        1.772564e03,
        1.791208e03,
        1.809954e03,
        1.828801e03,
        1.847751e03,
        1.866803e03,
        1.885957e03,
        1.905214e03,
        1.924573e03,
        1.944034e03,
        1.963598e03,
        1.983264e03,
        2.003034e03,
        2.022906e03,
        2.042880e03,
        2.062958e03,
        2.083138e03,
        2.103422e03,
        2.123809e03,
        2.144299e03,
        2.164892e03,
        2.185588e03,
        2.206388e03,
        2.227291e03,
        2.248298e03,
        2.269408e03,
        2.290622e03,
        2.311939e03,
        2.333361e03,
        2.354886e03,
        2.376515e03,
        2.398249e03,
        2.420086e03,
        2.442027e03,
        2.464073e03,
        2.486223e03,
        2.508477e03,
        2.530836e03,
        2.553299e03,
        2.575867e03,
        2.598539e03,
        2.621316e03,
        2.644198e03,
        2.667185e03,
        2.690276e03,
        2.713473e03,
        2.736775e03,
        2.760181e03,
        2.783693e03,
        2.807310e03,
        2.831033e03,
        2.854861e03,
        2.878794e03,
        2.902833e03,
        2.926977e03,
        2.951227e03,
        2.975583e03,
        3.000045e03,
        3.024612e03,
        3.049286e03,
        3.074065e03,
        3.098951e03,
        3.123943e03,
        3.149041e03,
        3.174245e03,
        3.199555e03,
        3.224973e03,
        3.250496e03,
        3.276126e03,
        3.301863e03,
        3.327706e03,
        3.353657e03,
        3.379714e03,
        3.405878e03,
        3.432149e03,
        3.458527e03,
        3.485012e03,
        3.511605e03,
        3.538304e03,
        3.565111e03,
        3.592026e03,
        3.619048e03,
        3.646177e03,
        3.673414e03,
        3.700759e03,
        3.728212e03,
        3.755772e03,
        3.783440e03,
        3.811216e03,
        3.839101e03,
        3.867093e03,
        3.895193e03,
        3.923402e03,
        3.951719e03,
        3.980145e03,
        4.008679e03,
        4.037321e03,
        4.066072e03,
        4.094932e03,
        4.123900e03,
        4.152977e03,
        4.182163e03,
        4.211458e03,
        4.240862e03,
        4.270375e03,
        4.299997e03,
        4.329729e03,
        4.359569e03,
        4.389519e03,
        4.419579e03,
        4.449747e03,
        4.480026e03,
        4.510414e03,
        4.540912e03,
        4.571519e03,
        4.602236e03,
        4.633064e03,
        4.664001e03,
        4.695048e03,
        4.726205e03,
        4.757472e03,
        4.788850e03,
        4.820338e03,
        4.851936e03,
        4.883645e03,
        4.915464e03,
        4.947394e03,
        4.979434e03,
        5.011585e03,
        5.043847e03,
        5.076220e03,
        5.108703e03,
        5.141298e03,
        5.174003e03,
        5.206820e03,
        5.239748e03,
        5.272787e03,
        5.305937e03,
        5.339199e03,
        5.372572e03,
        5.406056e03,
        5.439652e03,
        5.473360e03,
        5.507179e03,
        5.541110e03,
        5.575153e03,
        5.609308e03,
        5.643574e03,
        5.677953e03,
        5.712444e03,
        5.747047e03,
        5.781762e03,
        5.816589e03,
        5.851528e03,
        5.886580e03,
        5.921745e03,
        5.957021e03,
        5.992411e03,
        6.027913e03,
        6.063527e03,
        6.099255e03,
        6.135095e03,
        6.171048e03,
        6.207114e03,
        6.243293e03,
        6.279585e03,
        6.315990e03,
        6.352508e03,
        6.389140e03,
        6.425885e03,
        6.462743e03,
        6.499714e03,
        6.536799e03,
        6.573998e03,
        6.611310e03,
        6.648735e03,
        6.686275e03,
        6.723928e03,
        6.761694e03,
        6.799575e03,
        6.837570e03,
        6.875678e03,
        6.913901e03,
        6.952238e03,
        6.990688e03,
        7.029253e03,
        7.067933e03,
        7.106726e03,
        7.145634e03,
        7.184656e03,
        7.223793e03,
        7.263044e03,
        7.302410e03,
        7.341891e03,
        7.381486e03,
        7.421195e03,
        7.461020e03,
        7.500959e03,
        7.541014e03,
        7.581183e03,
        7.621467e03,
        7.661866e03,
        7.702380e03,
        7.743010e03,
        7.783754e03,
        7.824614e03,
        7.865589e03,
        7.906680e03,
        7.947885e03,
        7.989206e03,
        8.030643e03,
        8.072195e03,
        8.113863e03,
        8.155646e03,
        8.197545e03,
        8.239560e03,
        8.281690e03,
        8.323936e03,
        8.366298e03,
        8.408776e03,
        8.451369e03,
        8.494079e03,
        8.536905e03,
        8.579847e03,
        8.622904e03,
        8.666078e03,
        8.709368e03,
        8.752775e03,
        8.796297e03,
        8.839936e03,
        8.883691e03,
        8.927563e03,
        8.971551e03,
        9.015655e03,
        9.059876e03,
        9.104213e03,
        9.148667e03,
        9.193238e03,
        9.237925e03,
        9.282729e03,
        9.327650e03,
        9.372687e03,
        9.417841e03,
        9.463112e03,
        9.508500e03,
        9.554005e03,
        9.599626e03,
        9.645365e03,
        9.691221e03,
        9.737193e03,
        9.783283e03,
        9.829489e03,
        9.875813e03,
        9.922254e03,
        9.968812e03,
        1.001549e04,
        1.006228e04,
        1.010919e04,
        1.015622e04,
        1.020336e04,
        1.025062e04,
        1.029800e04,
        1.034550e04,
        1.039311e04,
        1.044085e04,
        1.048869e04,
        1.053666e04,
        1.058475e04,
        1.063295e04,
        1.068127e04,
        1.072970e04,
        1.077826e04,
        1.082693e04,
        1.087572e04,
        1.092463e04,
        1.097365e04,
        1.102280e04,
        1.107206e04,
        1.112144e04,
        1.117093e04,
        1.122055e04,
        1.127028e04,
        1.132013e04,
        1.137010e04,
        1.142018e04,
        1.147039e04,
        1.152071e04,
        1.157115e04,
        1.162170e04,
        1.167238e04,
        1.172317e04,
        1.177409e04,
        1.182512e04,
        1.187626e04,
        1.192753e04,
        1.197891e04,
        1.203042e04,
        1.208204e04,
    ]
)

#  ---------------------- M = 5, I = 2 ---------------------------
M = 5
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.030290e00,
        1.581148e01,
        3.093044e01,
        4.605695e01,
        6.118637e01,
        7.631778e01,
        9.145088e01,
        1.065855e02,
        1.217217e02,
        1.368594e02,
        1.519985e02,
        1.671392e02,
        1.822816e02,
        1.974261e02,
        2.125736e02,
        2.277251e02,
        2.428826e02,
        2.580484e02,
        2.732257e02,
        2.884181e02,
        3.036302e02,
        3.188669e02,
        3.341338e02,
        3.494367e02,
        3.647819e02,
        3.801760e02,
        3.956256e02,
        4.111372e02,
        4.267178e02,
        4.423738e02,
        4.581119e02,
        4.739383e02,
        4.898593e02,
        5.058809e02,
        5.220087e02,
        5.382483e02,
        5.546050e02,
        5.710838e02,
        5.876893e02,
        6.044262e02,
        6.212987e02,
        6.383109e02,
        6.554665e02,
        6.727693e02,
        6.902226e02,
        7.078295e02,
        7.255932e02,
        7.435165e02,
        7.616020e02,
        7.798524e02,
        7.982699e02,
        8.168568e02,
        8.356152e02,
        8.545471e02,
        8.736544e02,
        8.929388e02,
        9.124020e02,
        9.320457e02,
        9.518712e02,
        9.718800e02,
        9.920733e02,
        1.012453e03,
        1.033019e03,
        1.053773e03,
        1.074717e03,
        1.095851e03,
        1.117176e03,
        1.138693e03,
        1.160404e03,
        1.182308e03,
        1.204406e03,
        1.226700e03,
        1.249191e03,
        1.271877e03,
        1.294762e03,
        1.317844e03,
        1.341125e03,
        1.364605e03,
        1.388285e03,
        1.412165e03,
        1.436246e03,
        1.460528e03,
        1.485012e03,
        1.509698e03,
        1.534586e03,
        1.559678e03,
        1.584973e03,
        1.610472e03,
        1.636175e03,
        1.662083e03,
        1.688195e03,
        1.714513e03,
        1.741037e03,
        1.767766e03,
        1.794701e03,
        1.821843e03,
        1.849192e03,
        1.876748e03,
        1.904512e03,
        1.932483e03,
        1.960662e03,
        1.989049e03,
        2.017644e03,
        2.046449e03,
        2.075462e03,
        2.104685e03,
        2.134116e03,
        2.163758e03,
        2.193609e03,
        2.223671e03,
        2.253943e03,
        2.284425e03,
        2.315119e03,
        2.346023e03,
        2.377138e03,
        2.408465e03,
        2.440003e03,
        2.471753e03,
        2.503715e03,
        2.535889e03,
        2.568276e03,
        2.600875e03,
        2.633687e03,
        2.666711e03,
        2.699949e03,
        2.733400e03,
        2.767065e03,
        2.800943e03,
        2.835035e03,
        2.869341e03,
        2.903861e03,
        2.938595e03,
        2.973544e03,
        3.008708e03,
        3.044086e03,
        3.079680e03,
        3.115488e03,
        3.151512e03,
        3.187752e03,
        3.224207e03,
        3.260878e03,
        3.297764e03,
        3.334867e03,
        3.372187e03,
        3.409722e03,
        3.447475e03,
        3.485444e03,
        3.523630e03,
        3.562033e03,
        3.600653e03,
        3.639491e03,
        3.678547e03,
        3.717820e03,
        3.757310e03,
        3.797019e03,
        3.836946e03,
        3.877092e03,
        3.917456e03,
        3.958038e03,
        3.998839e03,
        4.039860e03,
        4.081099e03,
        4.122557e03,
        4.164235e03,
        4.206133e03,
        4.248250e03,
        4.290587e03,
        4.333143e03,
        4.375921e03,
        4.418918e03,
        4.462136e03,
        4.505574e03,
        4.549233e03,
        4.593113e03,
        4.637214e03,
        4.681536e03,
        4.726079e03,
        4.770844e03,
        4.815831e03,
        4.861039e03,
        4.906469e03,
        4.952121e03,
        4.997996e03,
        5.044093e03,
        5.090412e03,
        5.136954e03,
        5.183719e03,
        5.230707e03,
        5.277917e03,
        5.325351e03,
        5.373009e03,
        5.420890e03,
        5.468995e03,
        5.517323e03,
        5.565876e03,
        5.614652e03,
        5.663653e03,
        5.712879e03,
        5.762329e03,
        5.812003e03,
        5.861903e03,
        5.912027e03,
        5.962377e03,
        6.012952e03,
        6.063752e03,
        6.114778e03,
        6.166030e03,
        6.217508e03,
        6.269212e03,
        6.321142e03,
        6.373298e03,
        6.425681e03,
        6.478290e03,
        6.531126e03,
        6.584189e03,
        6.637479e03,
        6.690997e03,
        6.744742e03,
        6.798714e03,
        6.852914e03,
        6.907342e03,
        6.961997e03,
        7.016881e03,
        7.071993e03,
        7.127334e03,
        7.182903e03,
        7.238700e03,
        7.294727e03,
        7.350982e03,
        7.407467e03,
        7.464181e03,
        7.521124e03,
        7.578297e03,
        7.635699e03,
        7.693332e03,
        7.751194e03,
        7.809287e03,
        7.867610e03,
        7.926163e03,
        7.984947e03,
        8.043962e03,
        8.103207e03,
        8.162684e03,
        8.222391e03,
        8.282330e03,
        8.342501e03,
        8.402903e03,
        8.463537e03,
        8.524402e03,
        8.585500e03,
        8.646830e03,
        8.708392e03,
        8.770187e03,
        8.832214e03,
        8.894474e03,
        8.956967e03,
        9.019693e03,
        9.082652e03,
        9.145844e03,
        9.209270e03,
        9.272930e03,
        9.336823e03,
        9.400950e03,
        9.465311e03,
        9.529906e03,
        9.594736e03,
        9.659800e03,
        9.725098e03,
        9.790631e03,
        9.856400e03,
        9.922403e03,
        9.988641e03,
        1.005511e04,
        1.012182e04,
        1.018877e04,
        1.025595e04,
        1.032336e04,
        1.039102e04,
        1.045890e04,
        1.052703e04,
        1.059539e04,
        1.066399e04,
        1.073282e04,
        1.080189e04,
        1.087120e04,
        1.094074e04,
        1.101052e04,
        1.108054e04,
        1.115080e04,
        1.122129e04,
        1.129202e04,
        1.136299e04,
        1.143420e04,
        1.150565e04,
        1.157733e04,
        1.164925e04,
        1.172141e04,
        1.179381e04,
        1.186645e04,
        1.193932e04,
        1.201244e04,
        1.208579e04,
        1.215939e04,
        1.223322e04,
        1.230729e04,
        1.238161e04,
        1.245616e04,
        1.253095e04,
        1.260598e04,
        1.268125e04,
        1.275676e04,
        1.283252e04,
        1.290851e04,
        1.298474e04,
        1.306122e04,
        1.313793e04,
        1.321489e04,
        1.329208e04,
        1.336952e04,
        1.344720e04,
        1.352512e04,
        1.360328e04,
        1.368169e04,
        1.376033e04,
        1.383922e04,
        1.391835e04,
        1.399772e04,
        1.407733e04,
        1.415719e04,
        1.423729e04,
        1.431763e04,
        1.439821e04,
        1.447903e04,
        1.456010e04,
        1.464141e04,
        1.472297e04,
        1.480477e04,
        1.488681e04,
        1.496909e04,
        1.505162e04,
        1.513439e04,
        1.521740e04,
        1.530066e04,
        1.538416e04,
        1.546791e04,
        1.555190e04,
        1.563614e04,
        1.572061e04,
        1.580534e04,
        1.589030e04,
        1.597551e04,
        1.606097e04,
        1.614667e04,
        1.623262e04,
        1.631881e04,
        1.640524e04,
        1.649192e04,
        1.657885e04,
        1.666602e04,
        1.675344e04,
        1.684110e04,
        1.692901e04,
        1.701716e04,
        1.710556e04,
        1.719420e04,
        1.728309e04,
        1.737222e04,
        1.746161e04,
        1.755123e04,
        1.764111e04,
        1.773123e04,
        1.782159e04,
        1.791221e04,
        1.800306e04,
        1.809417e04,
        1.818552e04,
        1.827712e04,
        1.836897e04,
        1.846106e04,
        1.855340e04,
        1.864598e04,
        1.873882e04,
        1.883190e04,
        1.892522e04,
        1.901880e04,
        1.911262e04,
        1.920669e04,
        1.930100e04,
        1.939557e04,
        1.949038e04,
        1.958544e04,
        1.968074e04,
        1.977629e04,
        1.987210e04,
        1.996815e04,
        2.006444e04,
        2.016099e04,
        2.025778e04,
        2.035482e04,
        2.045211e04,
        2.054965e04,
        2.064743e04,
        2.074547e04,
        2.084375e04,
        2.094228e04,
        2.104106e04,
        2.114008e04,
        2.123936e04,
        2.133888e04,
        2.143865e04,
        2.153867e04,
        2.163894e04,
        2.173946e04,
        2.184022e04,
        2.194124e04,
        2.204250e04,
        2.214402e04,
        2.224578e04,
        2.234779e04,
        2.245005e04,
        2.255255e04,
        2.265531e04,
        2.275832e04,
        2.286157e04,
        2.296507e04,
        2.306883e04,
        2.317283e04,
        2.327708e04,
        2.338158e04,
        2.348633e04,
        2.359133e04,
        2.369657e04,
        2.380207e04,
        2.390782e04,
        2.401381e04,
        2.412006e04,
        2.422655e04,
        2.433329e04,
        2.444028e04,
        2.454752e04,
        2.465502e04,
        2.476276e04,
        2.487074e04,
        2.497898e04,
        2.508747e04,
        2.519621e04,
        2.530519e04,
        2.541443e04,
        2.552392e04,
        2.563365e04,
        2.574363e04,
    ]
)

#  ---------------------- M = 5, I = 3 ---------------------------
M = 5
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.015450e00,
        7.934590e00,
        1.552296e01,
        2.311511e01,
        3.070871e01,
        3.830330e01,
        4.589875e01,
        5.349498e01,
        6.109197e01,
        6.868969e01,
        7.628815e01,
        8.388739e01,
        9.148750e01,
        9.908871e01,
        1.066914e02,
        1.142961e02,
        1.219039e02,
        1.295159e02,
        1.371337e02,
        1.447592e02,
        1.523947e02,
        1.600426e02,
        1.677058e02,
        1.753873e02,
        1.830902e02,
        1.908178e02,
        1.985735e02,
        2.063605e02,
        2.141824e02,
        2.220424e02,
        2.299438e02,
        2.378898e02,
        2.458836e02,
        2.539281e02,
        2.620262e02,
        2.701807e02,
        2.783942e02,
        2.866693e02,
        2.950083e02,
        3.034135e02,
        3.118870e02,
        3.204310e02,
        3.290472e02,
        3.377375e02,
        3.465036e02,
        3.553472e02,
        3.642697e02,
        3.732725e02,
        3.823570e02,
        3.915246e02,
        4.007762e02,
        4.101132e02,
        4.195365e02,
        4.290471e02,
        4.386461e02,
        4.483341e02,
        4.581122e02,
        4.679810e02,
        4.779414e02,
        4.879940e02,
        4.981395e02,
        5.083786e02,
        5.187117e02,
        5.291395e02,
        5.396626e02,
        5.502813e02,
        5.609963e02,
        5.718079e02,
        5.827166e02,
        5.937229e02,
        6.048270e02,
        6.160294e02,
        6.273304e02,
        6.387304e02,
        6.502297e02,
        6.618287e02,
        6.735275e02,
        6.853265e02,
        6.972260e02,
        7.092263e02,
        7.213275e02,
        7.335299e02,
        7.458338e02,
        7.582394e02,
        7.707469e02,
        7.833566e02,
        7.960685e02,
        8.088830e02,
        8.218001e02,
        8.348201e02,
        8.479432e02,
        8.611695e02,
        8.744993e02,
        8.879325e02,
        9.014695e02,
        9.151104e02,
        9.288553e02,
        9.427043e02,
        9.566576e02,
        9.707154e02,
        9.848778e02,
        9.991449e02,
        1.013517e03,
        1.027994e03,
        1.042576e03,
        1.057263e03,
        1.072055e03,
        1.086953e03,
        1.101957e03,
        1.117066e03,
        1.132281e03,
        1.147601e03,
        1.163028e03,
        1.178561e03,
        1.194200e03,
        1.209945e03,
        1.225797e03,
        1.241756e03,
        1.257820e03,
        1.273992e03,
        1.290270e03,
        1.306656e03,
        1.323148e03,
        1.339747e03,
        1.356454e03,
        1.373267e03,
        1.390188e03,
        1.407217e03,
        1.424353e03,
        1.441596e03,
        1.458948e03,
        1.476407e03,
        1.493974e03,
        1.511649e03,
        1.529431e03,
        1.547322e03,
        1.565322e03,
        1.583429e03,
        1.601645e03,
        1.619969e03,
        1.638402e03,
        1.656944e03,
        1.675594e03,
        1.694353e03,
        1.713221e03,
        1.732197e03,
        1.751283e03,
        1.770478e03,
        1.789782e03,
        1.809195e03,
        1.828718e03,
        1.848350e03,
        1.868091e03,
        1.887942e03,
        1.907903e03,
        1.927973e03,
        1.948153e03,
        1.968443e03,
        1.988843e03,
        2.009353e03,
        2.029973e03,
        2.050703e03,
        2.071543e03,
        2.092494e03,
        2.113555e03,
        2.134727e03,
        2.156009e03,
        2.177402e03,
        2.198905e03,
        2.220519e03,
        2.242244e03,
        2.264080e03,
        2.286027e03,
        2.308085e03,
        2.330255e03,
        2.352535e03,
        2.374927e03,
        2.397430e03,
        2.420044e03,
        2.442771e03,
        2.465608e03,
        2.488557e03,
        2.511619e03,
        2.534791e03,
        2.558076e03,
        2.581473e03,
        2.604982e03,
        2.628603e03,
        2.652336e03,
        2.676181e03,
        2.700139e03,
        2.724209e03,
        2.748391e03,
        2.772686e03,
        2.797094e03,
        2.821615e03,
        2.846248e03,
        2.870994e03,
        2.895853e03,
        2.920825e03,
        2.945910e03,
        2.971108e03,
        2.996420e03,
        3.021844e03,
        3.047382e03,
        3.073034e03,
        3.098799e03,
        3.124678e03,
        3.150670e03,
        3.176776e03,
        3.202996e03,
        3.229330e03,
        3.255778e03,
        3.282340e03,
        3.309015e03,
        3.335806e03,
        3.362710e03,
        3.389729e03,
        3.416862e03,
        3.444109e03,
        3.471471e03,
        3.498948e03,
        3.526540e03,
        3.554246e03,
        3.582067e03,
        3.610003e03,
        3.638054e03,
        3.666220e03,
        3.694501e03,
        3.722898e03,
        3.751409e03,
        3.780036e03,
        3.808779e03,
        3.837637e03,
        3.866611e03,
        3.895700e03,
        3.924905e03,
        3.954226e03,
        3.983662e03,
        4.013215e03,
        4.042883e03,
        4.072668e03,
        4.102569e03,
        4.132586e03,
        4.162720e03,
        4.192969e03,
        4.223336e03,
        4.253818e03,
        4.284418e03,
        4.315134e03,
        4.345967e03,
        4.376916e03,
        4.407983e03,
        4.439166e03,
        4.470467e03,
        4.501884e03,
        4.533419e03,
        4.565071e03,
        4.596841e03,
        4.628727e03,
        4.660731e03,
        4.692853e03,
        4.725092e03,
        4.757449e03,
        4.789924e03,
        4.822517e03,
        4.855227e03,
        4.888055e03,
        4.921002e03,
        4.954066e03,
        4.987249e03,
        5.020550e03,
        5.053969e03,
        5.087506e03,
        5.121162e03,
        5.154936e03,
        5.188829e03,
        5.222841e03,
        5.256971e03,
        5.291221e03,
        5.325588e03,
        5.360075e03,
        5.394681e03,
        5.429406e03,
        5.464250e03,
        5.499213e03,
        5.534296e03,
        5.569497e03,
        5.604818e03,
        5.640259e03,
        5.675819e03,
        5.711498e03,
        5.747298e03,
        5.783217e03,
        5.819255e03,
        5.855414e03,
        5.891692e03,
        5.928090e03,
        5.964609e03,
        6.001247e03,
        6.038006e03,
        6.074885e03,
        6.111884e03,
        6.149003e03,
        6.186243e03,
        6.223603e03,
        6.261084e03,
        6.298685e03,
        6.336407e03,
        6.374250e03,
        6.412213e03,
        6.450298e03,
        6.488503e03,
        6.526829e03,
        6.565276e03,
        6.603844e03,
        6.642533e03,
        6.681344e03,
        6.720275e03,
        6.759328e03,
        6.798502e03,
        6.837798e03,
        6.877215e03,
        6.916754e03,
        6.956414e03,
        6.996196e03,
        7.036099e03,
        7.076125e03,
        7.116272e03,
        7.156541e03,
        7.196931e03,
        7.237444e03,
        7.278079e03,
        7.318835e03,
        7.359714e03,
        7.400715e03,
        7.441839e03,
        7.483084e03,
        7.524452e03,
        7.565942e03,
        7.607555e03,
        7.649290e03,
        7.691147e03,
        7.733127e03,
        7.775230e03,
        7.817455e03,
        7.859804e03,
        7.902274e03,
        7.944868e03,
        7.987585e03,
        8.030424e03,
        8.073386e03,
        8.116471e03,
        8.159680e03,
        8.203011e03,
        8.246466e03,
        8.290043e03,
        8.333744e03,
        8.377568e03,
        8.421516e03,
        8.465586e03,
        8.509781e03,
        8.554098e03,
        8.598539e03,
        8.643104e03,
        8.687792e03,
        8.732603e03,
        8.777538e03,
        8.822597e03,
        8.867780e03,
        8.913086e03,
        8.958516e03,
        9.004070e03,
        9.049748e03,
        9.095549e03,
        9.141475e03,
        9.187524e03,
        9.233697e03,
        9.279995e03,
        9.326416e03,
        9.372962e03,
        9.419631e03,
        9.466425e03,
        9.513343e03,
        9.560385e03,
        9.607552e03,
        9.654843e03,
        9.702258e03,
        9.749797e03,
        9.797461e03,
        9.845249e03,
        9.893161e03,
        9.941198e03,
        9.989360e03,
        1.003765e04,
        1.008606e04,
        1.013459e04,
        1.018325e04,
        1.023204e04,
        1.028094e04,
        1.032998e04,
        1.037914e04,
        1.042842e04,
        1.047783e04,
        1.052736e04,
        1.057702e04,
        1.062680e04,
        1.067670e04,
        1.072674e04,
        1.077689e04,
        1.082717e04,
        1.087758e04,
        1.092811e04,
        1.097877e04,
        1.102955e04,
        1.108045e04,
        1.113149e04,
        1.118264e04,
        1.123392e04,
        1.128533e04,
        1.133686e04,
        1.138851e04,
        1.144030e04,
        1.149220e04,
        1.154423e04,
        1.159639e04,
        1.164867e04,
        1.170108e04,
        1.175361e04,
        1.180627e04,
        1.185905e04,
        1.191196e04,
        1.196499e04,
        1.201815e04,
        1.207143e04,
        1.212484e04,
        1.217837e04,
        1.223203e04,
        1.228581e04,
        1.233972e04,
        1.239375e04,
        1.244791e04,
        1.250220e04,
        1.255661e04,
        1.261114e04,
        1.266580e04,
        1.272059e04,
        1.277550e04,
        1.283053e04,
        1.288570e04,
        1.294098e04,
    ]
)

#  ---------------------- M = 5, I = 4 ---------------------------
M = 5
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.081920e00,
        4.656398e01,
        9.104865e01,
        1.355563e02,
        1.800726e02,
        2.245949e02,
        2.691223e02,
        3.136542e02,
        3.581906e02,
        4.027313e02,
        4.472763e02,
        4.918259e02,
        5.363805e02,
        5.809412e02,
        6.255100e02,
        6.700904e02,
        7.146872e02,
        7.593070e02,
        8.039587e02,
        8.486526e02,
        8.934013e02,
        9.382189e02,
        9.831211e02,
        1.028125e03,
        1.073248e03,
        1.118509e03,
        1.163927e03,
        1.209521e03,
        1.255311e03,
        1.301316e03,
        1.347555e03,
        1.394046e03,
        1.440807e03,
        1.487857e03,
        1.535211e03,
        1.582885e03,
        1.630896e03,
        1.679258e03,
        1.727985e03,
        1.777089e03,
        1.826585e03,
        1.876483e03,
        1.926795e03,
        1.977532e03,
        2.028704e03,
        2.080320e03,
        2.132389e03,
        2.184919e03,
        2.237919e03,
        2.291396e03,
        2.345357e03,
        2.399809e03,
        2.454758e03,
        2.510210e03,
        2.566171e03,
        2.622645e03,
        2.679638e03,
        2.737155e03,
        2.795199e03,
        2.853775e03,
        2.912888e03,
        2.972540e03,
        3.032735e03,
        3.093477e03,
        3.154769e03,
        3.216614e03,
        3.279014e03,
        3.341973e03,
        3.405493e03,
        3.469576e03,
        3.534226e03,
        3.599443e03,
        3.665230e03,
        3.731590e03,
        3.798524e03,
        3.866034e03,
        3.934122e03,
        4.002789e03,
        4.072038e03,
        4.141869e03,
        4.212285e03,
        4.283286e03,
        4.354874e03,
        4.427051e03,
        4.499818e03,
        4.573175e03,
        4.647125e03,
        4.721668e03,
        4.796805e03,
        4.872538e03,
        4.948867e03,
        5.025794e03,
        5.103320e03,
        5.181445e03,
        5.260171e03,
        5.339498e03,
        5.419427e03,
        5.499959e03,
        5.581096e03,
        5.662837e03,
        5.745183e03,
        5.828137e03,
        5.911697e03,
        5.995865e03,
        6.080641e03,
        6.166027e03,
        6.252023e03,
        6.338630e03,
        6.425848e03,
        6.513677e03,
        6.602120e03,
        6.691176e03,
        6.780846e03,
        6.871130e03,
        6.962030e03,
        7.053545e03,
        7.145676e03,
        7.238425e03,
        7.331791e03,
        7.425775e03,
        7.520378e03,
        7.615600e03,
        7.711441e03,
        7.807903e03,
        7.904986e03,
        8.002690e03,
        8.101016e03,
        8.199964e03,
        8.299536e03,
        8.399730e03,
        8.500549e03,
        8.601992e03,
        8.704060e03,
        8.806753e03,
        8.910073e03,
        9.014018e03,
        9.118591e03,
        9.223791e03,
        9.329619e03,
        9.436075e03,
        9.543160e03,
        9.650874e03,
        9.759219e03,
        9.868193e03,
        9.977798e03,
        1.008803e04,
        1.019890e04,
        1.031040e04,
        1.042253e04,
        1.053530e04,
        1.064870e04,
        1.076273e04,
        1.087740e04,
        1.099270e04,
        1.110864e04,
        1.122521e04,
        1.134242e04,
        1.146026e04,
        1.157875e04,
        1.169787e04,
        1.181763e04,
        1.193802e04,
        1.205906e04,
        1.218073e04,
        1.230305e04,
        1.242600e04,
        1.254960e04,
        1.267383e04,
        1.279871e04,
        1.292423e04,
        1.305039e04,
        1.317719e04,
        1.330464e04,
        1.343273e04,
        1.356147e04,
        1.369085e04,
        1.382087e04,
        1.395154e04,
        1.408286e04,
        1.421482e04,
        1.434743e04,
        1.448068e04,
        1.461459e04,
        1.474914e04,
        1.488434e04,
        1.502019e04,
        1.515669e04,
        1.529383e04,
        1.543163e04,
        1.557008e04,
        1.570918e04,
        1.584893e04,
        1.598933e04,
        1.613039e04,
        1.627209e04,
        1.641445e04,
        1.655747e04,
        1.670114e04,
        1.684546e04,
        1.699044e04,
        1.713607e04,
        1.728236e04,
        1.742930e04,
        1.757690e04,
        1.772516e04,
        1.787408e04,
        1.802365e04,
        1.817388e04,
        1.832477e04,
        1.847632e04,
        1.862853e04,
        1.878140e04,
        1.893493e04,
        1.908912e04,
        1.924398e04,
        1.939949e04,
        1.955567e04,
        1.971250e04,
        1.987001e04,
        2.002817e04,
        2.018700e04,
        2.034649e04,
        2.050665e04,
        2.066748e04,
        2.082897e04,
        2.099112e04,
        2.115394e04,
        2.131743e04,
        2.148159e04,
        2.164641e04,
        2.181190e04,
        2.197807e04,
        2.214490e04,
        2.231239e04,
        2.248056e04,
        2.264940e04,
        2.281891e04,
        2.298910e04,
        2.315995e04,
        2.333147e04,
        2.350367e04,
        2.367654e04,
        2.385009e04,
        2.402431e04,
        2.419920e04,
        2.437476e04,
        2.455101e04,
        2.472792e04,
        2.490552e04,
        2.508379e04,
        2.526273e04,
        2.544236e04,
        2.562266e04,
        2.580364e04,
        2.598529e04,
        2.616763e04,
        2.635065e04,
        2.653434e04,
        2.671872e04,
        2.690377e04,
        2.708951e04,
        2.727593e04,
        2.746303e04,
        2.765081e04,
        2.783928e04,
        2.802843e04,
        2.821826e04,
        2.840877e04,
        2.859997e04,
        2.879186e04,
        2.898443e04,
        2.917768e04,
        2.937162e04,
        2.956625e04,
        2.976157e04,
        2.995757e04,
        3.015426e04,
        3.035163e04,
        3.054970e04,
        3.074845e04,
        3.094790e04,
        3.114803e04,
        3.134885e04,
        3.155037e04,
        3.175257e04,
        3.195547e04,
        3.215905e04,
        3.236333e04,
        3.256830e04,
        3.277397e04,
        3.298033e04,
        3.318738e04,
        3.339512e04,
        3.360356e04,
        3.381270e04,
        3.402252e04,
        3.423305e04,
        3.444427e04,
        3.465619e04,
        3.486880e04,
        3.508211e04,
        3.529612e04,
        3.551082e04,
        3.572623e04,
        3.594233e04,
        3.615913e04,
        3.637663e04,
        3.659483e04,
        3.681373e04,
        3.703333e04,
        3.725363e04,
        3.747464e04,
        3.769634e04,
        3.791875e04,
        3.814186e04,
        3.836567e04,
        3.859018e04,
        3.881540e04,
        3.904132e04,
        3.926794e04,
        3.949527e04,
        3.972330e04,
        3.995204e04,
        4.018149e04,
        4.041164e04,
        4.064249e04,
        4.087405e04,
        4.110632e04,
        4.133930e04,
        4.157298e04,
        4.180737e04,
        4.204247e04,
        4.227828e04,
        4.251480e04,
        4.275202e04,
        4.298996e04,
        4.322860e04,
        4.346796e04,
        4.370802e04,
        4.394880e04,
        4.419028e04,
        4.443248e04,
        4.467539e04,
        4.491901e04,
        4.516335e04,
        4.540839e04,
        4.565415e04,
        4.590062e04,
        4.614781e04,
        4.639571e04,
        4.664432e04,
        4.689365e04,
        4.714369e04,
        4.739445e04,
        4.764592e04,
        4.789811e04,
        4.815101e04,
        4.840463e04,
        4.865897e04,
        4.891402e04,
        4.916979e04,
        4.942627e04,
        4.968348e04,
        4.994140e04,
        5.020004e04,
        5.045939e04,
        5.071947e04,
        5.098026e04,
        5.124178e04,
        5.150401e04,
        5.176696e04,
        5.203063e04,
        5.229502e04,
        5.256014e04,
        5.282597e04,
        5.309252e04,
        5.335979e04,
        5.362779e04,
        5.389650e04,
        5.416594e04,
        5.443610e04,
        5.470698e04,
        5.497858e04,
        5.525091e04,
        5.552396e04,
        5.579773e04,
        5.607222e04,
        5.634744e04,
        5.662338e04,
        5.690004e04,
        5.717743e04,
        5.745555e04,
        5.773438e04,
        5.801394e04,
        5.829423e04,
        5.857524e04,
        5.885698e04,
        5.913944e04,
        5.942262e04,
        5.970654e04,
        5.999117e04,
        6.027654e04,
        6.056263e04,
        6.084944e04,
        6.113698e04,
        6.142525e04,
        6.171425e04,
        6.200397e04,
        6.229442e04,
        6.258560e04,
        6.287750e04,
        6.317013e04,
        6.346349e04,
        6.375758e04,
        6.405239e04,
        6.434794e04,
        6.464421e04,
        6.494121e04,
        6.523894e04,
        6.553739e04,
        6.583658e04,
        6.613649e04,
        6.643713e04,
        6.673850e04,
        6.704060e04,
        6.734343e04,
        6.764699e04,
        6.795128e04,
        6.825630e04,
        6.856205e04,
        6.886853e04,
        6.917573e04,
        6.948367e04,
        6.979234e04,
        7.010173e04,
        7.041186e04,
        7.072272e04,
        7.103431e04,
        7.134663e04,
        7.165967e04,
        7.197345e04,
        7.228796e04,
        7.260320e04,
        7.291917e04,
        7.323588e04,
        7.355331e04,
        7.387147e04,
        7.419036e04,
        7.450999e04,
        7.483035e04,
        7.515143e04,
    ]
)

#  ---------------------- M = 5, I = 5 ---------------------------
M = 5
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.039420e00,
        1.660365e01,
        3.251624e01,
        4.843614e01,
        6.435894e01,
        8.028378e01,
        9.621037e01,
        1.121386e02,
        1.280684e02,
        1.439997e02,
        1.599326e02,
        1.758672e02,
        1.918036e02,
        2.077426e02,
        2.236851e02,
        2.396326e02,
        2.555873e02,
        2.715523e02,
        2.875312e02,
        3.035287e02,
        3.195498e02,
        3.356005e02,
        3.516871e02,
        3.678163e02,
        3.839953e02,
        4.002313e02,
        4.165317e02,
        4.329040e02,
        4.493555e02,
        4.658935e02,
        4.825251e02,
        4.992572e02,
        5.160964e02,
        5.330491e02,
        5.501215e02,
        5.673195e02,
        5.846486e02,
        6.021141e02,
        6.197210e02,
        6.374741e02,
        6.553778e02,
        6.734364e02,
        6.916539e02,
        7.100339e02,
        7.285802e02,
        7.472958e02,
        7.661840e02,
        7.852478e02,
        8.044898e02,
        8.239127e02,
        8.435189e02,
        8.633107e02,
        8.832903e02,
        9.034597e02,
        9.238208e02,
        9.443754e02,
        9.651252e02,
        9.860718e02,
        1.007217e03,
        1.028562e03,
        1.050107e03,
        1.071856e03,
        1.093807e03,
        1.115964e03,
        1.138326e03,
        1.160895e03,
        1.183672e03,
        1.206658e03,
        1.229853e03,
        1.253259e03,
        1.276876e03,
        1.300705e03,
        1.324747e03,
        1.349002e03,
        1.373471e03,
        1.398155e03,
        1.423054e03,
        1.448169e03,
        1.473501e03,
        1.499050e03,
        1.524816e03,
        1.550800e03,
        1.577002e03,
        1.603424e03,
        1.630065e03,
        1.656925e03,
        1.684006e03,
        1.711308e03,
        1.738830e03,
        1.766574e03,
        1.794539e03,
        1.822727e03,
        1.851137e03,
        1.879770e03,
        1.908625e03,
        1.937705e03,
        1.967007e03,
        1.996534e03,
        2.026285e03,
        2.056261e03,
        2.086461e03,
        2.116887e03,
        2.147537e03,
        2.178414e03,
        2.209516e03,
        2.240845e03,
        2.272400e03,
        2.304181e03,
        2.336189e03,
        2.368425e03,
        2.400887e03,
        2.433577e03,
        2.466495e03,
        2.499641e03,
        2.533015e03,
        2.566618e03,
        2.600449e03,
        2.634509e03,
        2.668798e03,
        2.703316e03,
        2.738063e03,
        2.773040e03,
        2.808247e03,
        2.843684e03,
        2.879351e03,
        2.915249e03,
        2.951377e03,
        2.987736e03,
        3.024325e03,
        3.061146e03,
        3.098198e03,
        3.135482e03,
        3.172998e03,
        3.210745e03,
        3.248724e03,
        3.286935e03,
        3.325379e03,
        3.364056e03,
        3.402965e03,
        3.442107e03,
        3.481482e03,
        3.521090e03,
        3.560932e03,
        3.601007e03,
        3.641316e03,
        3.681859e03,
        3.722636e03,
        3.763647e03,
        3.804893e03,
        3.846373e03,
        3.888088e03,
        3.930038e03,
        3.972223e03,
        4.014644e03,
        4.057299e03,
        4.100190e03,
        4.143317e03,
        4.186680e03,
        4.230279e03,
        4.274114e03,
        4.318186e03,
        4.362494e03,
        4.407039e03,
        4.451821e03,
        4.496839e03,
        4.542095e03,
        4.587588e03,
        4.633319e03,
        4.679287e03,
        4.725494e03,
        4.771938e03,
        4.818620e03,
        4.865541e03,
        4.912700e03,
        4.960098e03,
        5.007734e03,
        5.055610e03,
        5.103724e03,
        5.152078e03,
        5.200672e03,
        5.249504e03,
        5.298577e03,
        5.347889e03,
        5.397442e03,
        5.447235e03,
        5.497268e03,
        5.547541e03,
        5.598056e03,
        5.648811e03,
        5.699807e03,
        5.751044e03,
        5.802523e03,
        5.854243e03,
        5.906205e03,
        5.958408e03,
        6.010853e03,
        6.063541e03,
        6.116471e03,
        6.169643e03,
        6.223058e03,
        6.276715e03,
        6.330616e03,
        6.384759e03,
        6.439146e03,
        6.493776e03,
        6.548649e03,
        6.603766e03,
        6.659127e03,
        6.714732e03,
        6.770581e03,
        6.826675e03,
        6.883013e03,
        6.939595e03,
        6.996422e03,
        7.053495e03,
        7.110812e03,
        7.168374e03,
        7.226182e03,
        7.284235e03,
        7.342534e03,
        7.401079e03,
        7.459870e03,
        7.518907e03,
        7.578191e03,
        7.637721e03,
        7.697497e03,
        7.757520e03,
        7.817791e03,
        7.878308e03,
        7.939072e03,
        8.000084e03,
        8.061344e03,
        8.122851e03,
        8.184606e03,
        8.246609e03,
        8.308860e03,
        8.371360e03,
        8.434108e03,
        8.497104e03,
        8.560349e03,
        8.623844e03,
        8.687587e03,
        8.751580e03,
        8.815821e03,
        8.880313e03,
        8.945054e03,
        9.010045e03,
        9.075286e03,
        9.140777e03,
        9.206518e03,
        9.272509e03,
        9.338752e03,
        9.405244e03,
        9.471988e03,
        9.538983e03,
        9.606229e03,
        9.673726e03,
        9.741475e03,
        9.809475e03,
        9.877727e03,
        9.946231e03,
        1.001499e04,
        1.008399e04,
        1.015325e04,
        1.022277e04,
        1.029253e04,
        1.036255e04,
        1.043282e04,
        1.050335e04,
        1.057412e04,
        1.064515e04,
        1.071644e04,
        1.078797e04,
        1.085976e04,
        1.093181e04,
        1.100411e04,
        1.107666e04,
        1.114947e04,
        1.122253e04,
        1.129585e04,
        1.136942e04,
        1.144324e04,
        1.151732e04,
        1.159166e04,
        1.166625e04,
        1.174110e04,
        1.181620e04,
        1.189155e04,
        1.196717e04,
        1.204304e04,
        1.211916e04,
        1.219554e04,
        1.227218e04,
        1.234907e04,
        1.242622e04,
        1.250363e04,
        1.258129e04,
        1.265921e04,
        1.273739e04,
        1.281582e04,
        1.289451e04,
        1.297346e04,
        1.305267e04,
        1.313213e04,
        1.321185e04,
        1.329183e04,
        1.337207e04,
        1.345256e04,
        1.353332e04,
        1.361433e04,
        1.369560e04,
        1.377713e04,
        1.385891e04,
        1.394096e04,
        1.402326e04,
        1.410583e04,
        1.418865e04,
        1.427173e04,
        1.435507e04,
        1.443867e04,
        1.452253e04,
        1.460665e04,
        1.469103e04,
        1.477567e04,
        1.486057e04,
        1.494572e04,
        1.503114e04,
        1.511682e04,
        1.520276e04,
        1.528896e04,
        1.537542e04,
        1.546214e04,
        1.554912e04,
        1.563636e04,
        1.572387e04,
        1.581163e04,
        1.589966e04,
        1.598794e04,
        1.607649e04,
        1.616530e04,
        1.625437e04,
        1.634370e04,
        1.643329e04,
        1.652315e04,
        1.661326e04,
        1.670364e04,
        1.679428e04,
        1.688518e04,
        1.697635e04,
        1.706777e04,
        1.715946e04,
        1.725141e04,
        1.734363e04,
        1.743610e04,
        1.752884e04,
        1.762184e04,
        1.771510e04,
        1.780863e04,
        1.790242e04,
        1.799647e04,
        1.809078e04,
        1.818536e04,
        1.828020e04,
        1.837531e04,
        1.847067e04,
        1.856630e04,
        1.866220e04,
        1.875836e04,
        1.885478e04,
        1.895146e04,
        1.904841e04,
        1.914562e04,
        1.924309e04,
        1.934083e04,
        1.943883e04,
        1.953710e04,
        1.963563e04,
        1.973443e04,
        1.983348e04,
        1.993281e04,
        2.003239e04,
        2.013224e04,
        2.023236e04,
        2.033273e04,
        2.043338e04,
        2.053428e04,
        2.063546e04,
        2.073689e04,
        2.083859e04,
        2.094056e04,
        2.104279e04,
        2.114528e04,
        2.124804e04,
        2.135106e04,
        2.145435e04,
        2.155790e04,
        2.166172e04,
        2.176580e04,
        2.187014e04,
        2.197476e04,
        2.207963e04,
        2.218477e04,
        2.229018e04,
        2.239585e04,
        2.250178e04,
        2.260798e04,
        2.271445e04,
        2.282118e04,
        2.292817e04,
        2.303543e04,
        2.314296e04,
        2.325075e04,
        2.335880e04,
        2.346712e04,
        2.357571e04,
        2.368455e04,
        2.379367e04,
        2.390305e04,
        2.401269e04,
        2.412260e04,
        2.423278e04,
        2.434322e04,
        2.445392e04,
        2.456489e04,
        2.467613e04,
        2.478763e04,
        2.489939e04,
        2.501142e04,
        2.512372e04,
        2.523628e04,
        2.534910e04,
        2.546220e04,
        2.557555e04,
        2.568917e04,
        2.580306e04,
        2.591721e04,
        2.603162e04,
        2.614630e04,
        2.626125e04,
        2.637646e04,
        2.649193e04,
        2.660767e04,
        2.672367e04,
        2.683994e04,
        2.695648e04,
        2.707328e04,
        2.719034e04,
        2.730767e04,
        2.742526e04,
        2.754312e04,
        2.766124e04,
    ]
)

#  ---------------------- M = 5, I = 6 ---------------------------
M = 5
I = 6
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.220898e01,
        9.732970e01,
        1.905089e02,
        2.837327e02,
        3.769738e02,
        4.702271e02,
        5.634907e02,
        6.567639e02,
        7.500463e02,
        8.433378e02,
        9.366383e02,
        1.029949e03,
        1.123270e03,
        1.216605e03,
        1.309959e03,
        1.403341e03,
        1.496762e03,
        1.590239e03,
        1.683792e03,
        1.777446e03,
        1.871230e03,
        1.965177e03,
        2.059322e03,
        2.153704e03,
        2.248362e03,
        2.343338e03,
        2.438674e03,
        2.534412e03,
        2.630596e03,
        2.727266e03,
        2.824463e03,
        2.922228e03,
        3.020599e03,
        3.119613e03,
        3.219306e03,
        3.319712e03,
        3.420863e03,
        3.522791e03,
        3.625525e03,
        3.729092e03,
        3.833519e03,
        3.938831e03,
        4.045052e03,
        4.152203e03,
        4.260305e03,
        4.369377e03,
        4.479439e03,
        4.590508e03,
        4.702599e03,
        4.815729e03,
        4.929912e03,
        5.045161e03,
        5.161489e03,
        5.278909e03,
        5.397431e03,
        5.517067e03,
        5.637826e03,
        5.759718e03,
        5.882752e03,
        6.006937e03,
        6.132280e03,
        6.258790e03,
        6.386472e03,
        6.515335e03,
        6.645385e03,
        6.776627e03,
        6.909068e03,
        7.042712e03,
        7.177566e03,
        7.313634e03,
        7.450922e03,
        7.589432e03,
        7.729171e03,
        7.870141e03,
        8.012348e03,
        8.155794e03,
        8.300483e03,
        8.446420e03,
        8.593606e03,
        8.742045e03,
        8.891741e03,
        9.042696e03,
        9.194913e03,
        9.348394e03,
        9.503144e03,
        9.659162e03,
        9.816454e03,
        9.975020e03,
        1.013486e04,
        1.029599e04,
        1.045839e04,
        1.062208e04,
        1.078705e04,
        1.095331e04,
        1.112086e04,
        1.128970e04,
        1.145983e04,
        1.163126e04,
        1.180398e04,
        1.197801e04,
        1.215333e04,
        1.232995e04,
        1.250788e04,
        1.268711e04,
        1.286765e04,
        1.304949e04,
        1.323264e04,
        1.341711e04,
        1.360288e04,
        1.378997e04,
        1.397837e04,
        1.416809e04,
        1.435913e04,
        1.455148e04,
        1.474515e04,
        1.494015e04,
        1.513646e04,
        1.533410e04,
        1.553307e04,
        1.573336e04,
        1.593497e04,
        1.613792e04,
        1.634219e04,
        1.654779e04,
        1.675473e04,
        1.696300e04,
        1.717260e04,
        1.738353e04,
        1.759580e04,
        1.780941e04,
        1.802436e04,
        1.824064e04,
        1.845827e04,
        1.867723e04,
        1.889754e04,
        1.911919e04,
        1.934219e04,
        1.956653e04,
        1.979221e04,
        2.001925e04,
        2.024763e04,
        2.047736e04,
        2.070844e04,
        2.094087e04,
        2.117466e04,
        2.140979e04,
        2.164629e04,
        2.188413e04,
        2.212333e04,
        2.236389e04,
        2.260581e04,
        2.284909e04,
        2.309373e04,
        2.333972e04,
        2.358708e04,
        2.383580e04,
        2.408589e04,
        2.433734e04,
        2.459015e04,
        2.484434e04,
        2.509989e04,
        2.535680e04,
        2.561509e04,
        2.587475e04,
        2.613578e04,
        2.639818e04,
        2.666195e04,
        2.692710e04,
        2.719362e04,
        2.746152e04,
        2.773080e04,
        2.800145e04,
        2.827348e04,
        2.854690e04,
        2.882169e04,
        2.909786e04,
        2.937542e04,
        2.965436e04,
        2.993468e04,
        3.021639e04,
        3.049948e04,
        3.078396e04,
        3.106983e04,
        3.135709e04,
        3.164574e04,
        3.193578e04,
        3.222721e04,
        3.252003e04,
        3.281424e04,
        3.310985e04,
        3.340686e04,
        3.370526e04,
        3.400506e04,
        3.430625e04,
        3.460885e04,
        3.491284e04,
        3.521824e04,
        3.552504e04,
        3.583324e04,
        3.614284e04,
        3.645385e04,
        3.676626e04,
        3.708008e04,
        3.739530e04,
        3.771194e04,
        3.802998e04,
        3.834943e04,
        3.867030e04,
        3.899257e04,
        3.931626e04,
        3.964136e04,
        3.996788e04,
        4.029581e04,
        4.062516e04,
        4.095592e04,
        4.128810e04,
        4.162170e04,
        4.195673e04,
        4.229317e04,
        4.263103e04,
        4.297032e04,
        4.331103e04,
        4.365316e04,
        4.399672e04,
        4.434171e04,
        4.468812e04,
        4.503596e04,
        4.538523e04,
        4.573593e04,
        4.608806e04,
        4.644162e04,
        4.679662e04,
        4.715304e04,
        4.751091e04,
        4.787020e04,
        4.823094e04,
        4.859311e04,
        4.895671e04,
        4.932176e04,
        4.968825e04,
        5.005618e04,
        5.042554e04,
        5.079636e04,
        5.116861e04,
        5.154231e04,
        5.191745e04,
        5.229404e04,
        5.267208e04,
        5.305156e04,
        5.343249e04,
        5.381488e04,
        5.419871e04,
        5.458399e04,
        5.497073e04,
        5.535892e04,
        5.574856e04,
        5.613965e04,
        5.653221e04,
        5.692621e04,
        5.732168e04,
        5.771860e04,
        5.811699e04,
        5.851683e04,
        5.891813e04,
        5.932090e04,
        5.972512e04,
        6.013081e04,
        6.053797e04,
        6.094659e04,
        6.135667e04,
        6.176822e04,
        6.218124e04,
        6.259573e04,
        6.301168e04,
        6.342911e04,
        6.384801e04,
        6.426837e04,
        6.469022e04,
        6.511353e04,
        6.553832e04,
        6.596458e04,
        6.639232e04,
        6.682153e04,
        6.725222e04,
        6.768439e04,
        6.811804e04,
        6.855317e04,
        6.898978e04,
        6.942787e04,
        6.986744e04,
        7.030849e04,
        7.075103e04,
        7.119505e04,
        7.164056e04,
        7.208755e04,
        7.253603e04,
        7.298599e04,
        7.343745e04,
        7.389039e04,
        7.434483e04,
        7.480075e04,
        7.525816e04,
        7.571707e04,
        7.617747e04,
        7.663936e04,
        7.710275e04,
        7.756763e04,
        7.803400e04,
        7.850187e04,
        7.897124e04,
        7.944211e04,
        7.991447e04,
        8.038834e04,
        8.086370e04,
        8.134057e04,
        8.181893e04,
        8.229880e04,
        8.278016e04,
        8.326304e04,
        8.374741e04,
        8.423329e04,
        8.472068e04,
        8.520957e04,
        8.569996e04,
        8.619187e04,
        8.668528e04,
        8.718020e04,
        8.767663e04,
        8.817457e04,
        8.867401e04,
        8.917497e04,
        8.967744e04,
        9.018143e04,
        9.068692e04,
        9.119393e04,
        9.170245e04,
        9.221249e04,
        9.272404e04,
        9.323710e04,
        9.375169e04,
        9.426779e04,
        9.478540e04,
        9.530454e04,
        9.582519e04,
        9.634736e04,
        9.687105e04,
        9.739626e04,
        9.792299e04,
        9.845125e04,
        9.898102e04,
        9.951232e04,
        1.000451e05,
        1.005795e05,
        1.011153e05,
        1.016527e05,
        1.021916e05,
        1.027321e05,
        1.032740e05,
        1.038175e05,
        1.043626e05,
        1.049091e05,
        1.054572e05,
        1.060068e05,
        1.065579e05,
        1.071105e05,
        1.076647e05,
        1.082204e05,
        1.087777e05,
        1.093365e05,
        1.098968e05,
        1.104586e05,
        1.110220e05,
        1.115869e05,
        1.121533e05,
        1.127213e05,
        1.132908e05,
        1.138618e05,
        1.144344e05,
        1.150085e05,
        1.155841e05,
        1.161613e05,
        1.167400e05,
        1.173202e05,
        1.179020e05,
        1.184853e05,
        1.190701e05,
        1.196565e05,
        1.202444e05,
        1.208339e05,
        1.214249e05,
        1.220174e05,
        1.226115e05,
        1.232071e05,
        1.238043e05,
        1.244030e05,
        1.250032e05,
        1.256050e05,
        1.262083e05,
        1.268131e05,
        1.274195e05,
        1.280275e05,
        1.286369e05,
        1.292479e05,
        1.298605e05,
        1.304746e05,
        1.310902e05,
        1.317074e05,
        1.323261e05,
        1.329464e05,
        1.335682e05,
        1.341915e05,
        1.348164e05,
        1.354429e05,
        1.360708e05,
        1.367004e05,
        1.373314e05,
        1.379640e05,
        1.385982e05,
        1.392339e05,
        1.398711e05,
        1.405099e05,
        1.411502e05,
        1.417921e05,
        1.424355e05,
        1.430804e05,
        1.437269e05,
        1.443750e05,
        1.450246e05,
        1.456757e05,
        1.463284e05,
        1.469826e05,
        1.476384e05,
        1.482957e05,
        1.489545e05,
        1.496149e05,
        1.502769e05,
        1.509404e05,
        1.516054e05,
        1.522720e05,
        1.529401e05,
        1.536098e05,
        1.542810e05,
        1.549538e05,
        1.556281e05,
        1.563039e05,
        1.569813e05,
        1.576602e05,
        1.583407e05,
        1.590227e05,
        1.597063e05,
        1.603914e05,
    ]
)

#  ---------------------- M = 5, I = 7 ---------------------------
M = 5
I = 7
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.018640e00,
        8.214730e00,
        1.608377e01,
        2.395650e01,
        3.183067e01,
        3.970586e01,
        4.758192e01,
        5.545878e01,
        6.333642e01,
        7.121483e01,
        7.909401e01,
        8.697401e01,
        9.485494e01,
        1.027371e02,
        1.106209e02,
        1.185071e02,
        1.263968e02,
        1.342914e02,
        1.421927e02,
        1.501028e02,
        1.580244e02,
        1.659601e02,
        1.739131e02,
        1.818867e02,
        1.898844e02,
        1.979096e02,
        2.059660e02,
        2.140572e02,
        2.221869e02,
        2.303586e02,
        2.385758e02,
        2.468418e02,
        2.551601e02,
        2.635336e02,
        2.719655e02,
        2.804586e02,
        2.890157e02,
        2.976394e02,
        3.063322e02,
        3.150964e02,
        3.239342e02,
        3.328478e02,
        3.418392e02,
        3.509100e02,
        3.600623e02,
        3.692975e02,
        3.786172e02,
        3.880229e02,
        3.975159e02,
        4.070976e02,
        4.167692e02,
        4.265318e02,
        4.363864e02,
        4.463342e02,
        4.563759e02,
        4.665126e02,
        4.767451e02,
        4.870742e02,
        4.975006e02,
        5.080251e02,
        5.186483e02,
        5.293708e02,
        5.401933e02,
        5.511163e02,
        5.621404e02,
        5.732661e02,
        5.844938e02,
        5.958240e02,
        6.072572e02,
        6.187938e02,
        6.304342e02,
        6.421787e02,
        6.540277e02,
        6.659816e02,
        6.780407e02,
        6.902053e02,
        7.024757e02,
        7.148522e02,
        7.273350e02,
        7.399245e02,
        7.526209e02,
        7.654244e02,
        7.783353e02,
        7.913538e02,
        8.044801e02,
        8.177145e02,
        8.310571e02,
        8.445081e02,
        8.580677e02,
        8.717362e02,
        8.855137e02,
        8.994003e02,
        9.133963e02,
        9.275017e02,
        9.417169e02,
        9.560418e02,
        9.704767e02,
        9.850217e02,
        9.996770e02,
        1.014443e03,
        1.029319e03,
        1.044306e03,
        1.059403e03,
        1.074612e03,
        1.089932e03,
        1.105363e03,
        1.120905e03,
        1.136558e03,
        1.152323e03,
        1.168200e03,
        1.184189e03,
        1.200289e03,
        1.216502e03,
        1.232826e03,
        1.249263e03,
        1.265812e03,
        1.282473e03,
        1.299247e03,
        1.316134e03,
        1.333133e03,
        1.350245e03,
        1.367470e03,
        1.384808e03,
        1.402259e03,
        1.419823e03,
        1.437501e03,
        1.455292e03,
        1.473196e03,
        1.491214e03,
        1.509346e03,
        1.527592e03,
        1.545951e03,
        1.564424e03,
        1.583011e03,
        1.601713e03,
        1.620528e03,
        1.639458e03,
        1.658502e03,
        1.677661e03,
        1.696934e03,
        1.716321e03,
        1.735824e03,
        1.755441e03,
        1.775173e03,
        1.795020e03,
        1.814982e03,
        1.835060e03,
        1.855252e03,
        1.875560e03,
        1.895983e03,
        1.916521e03,
        1.937175e03,
        1.957945e03,
        1.978830e03,
        1.999832e03,
        2.020949e03,
        2.042182e03,
        2.063530e03,
        2.084995e03,
        2.106577e03,
        2.128274e03,
        2.150088e03,
        2.172018e03,
        2.194065e03,
        2.216228e03,
        2.238508e03,
        2.260905e03,
        2.283418e03,
        2.306048e03,
        2.328796e03,
        2.351660e03,
        2.374642e03,
        2.397740e03,
        2.420956e03,
        2.444290e03,
        2.467740e03,
        2.491309e03,
        2.514994e03,
        2.538798e03,
        2.562719e03,
        2.586758e03,
        2.610915e03,
        2.635190e03,
        2.659584e03,
        2.684095e03,
        2.708724e03,
        2.733472e03,
        2.758338e03,
        2.783322e03,
        2.808426e03,
        2.833647e03,
        2.858988e03,
        2.884447e03,
        2.910025e03,
        2.935722e03,
        2.961537e03,
        2.987472e03,
        3.013526e03,
        3.039700e03,
        3.065992e03,
        3.092404e03,
        3.118936e03,
        3.145587e03,
        3.172357e03,
        3.199248e03,
        3.226258e03,
        3.253388e03,
        3.280638e03,
        3.308007e03,
        3.335497e03,
        3.363107e03,
        3.390838e03,
        3.418688e03,
        3.446659e03,
        3.474751e03,
        3.502963e03,
        3.531296e03,
        3.559749e03,
        3.588323e03,
        3.617018e03,
        3.645834e03,
        3.674771e03,
        3.703829e03,
        3.733008e03,
        3.762308e03,
        3.791730e03,
        3.821273e03,
        3.850937e03,
        3.880723e03,
        3.910631e03,
        3.940660e03,
        3.970811e03,
        4.001084e03,
        4.031479e03,
        4.061996e03,
        4.092635e03,
        4.123396e03,
        4.154279e03,
        4.185284e03,
        4.216412e03,
        4.247663e03,
        4.279035e03,
        4.310531e03,
        4.342149e03,
        4.373890e03,
        4.405753e03,
        4.437740e03,
        4.469850e03,
        4.502082e03,
        4.534438e03,
        4.566917e03,
        4.599519e03,
        4.632244e03,
        4.665093e03,
        4.698065e03,
        4.731161e03,
        4.764381e03,
        4.797724e03,
        4.831191e03,
        4.864782e03,
        4.898496e03,
        4.932335e03,
        4.966298e03,
        5.000385e03,
        5.034596e03,
        5.068931e03,
        5.103391e03,
        5.137975e03,
        5.172683e03,
        5.207516e03,
        5.242474e03,
        5.277557e03,
        5.312764e03,
        5.348096e03,
        5.383553e03,
        5.419135e03,
        5.454842e03,
        5.490674e03,
        5.526631e03,
        5.562713e03,
        5.598921e03,
        5.635254e03,
        5.671712e03,
        5.708296e03,
        5.745006e03,
        5.781841e03,
        5.818802e03,
        5.855889e03,
        5.893102e03,
        5.930440e03,
        5.967904e03,
        6.005495e03,
        6.043211e03,
        6.081054e03,
        6.119023e03,
        6.157118e03,
        6.195340e03,
        6.233688e03,
        6.272162e03,
        6.310763e03,
        6.349490e03,
        6.388345e03,
        6.427325e03,
        6.466433e03,
        6.505668e03,
        6.545029e03,
        6.584517e03,
        6.624133e03,
        6.663875e03,
        6.703745e03,
        6.743741e03,
        6.783865e03,
        6.824117e03,
        6.864495e03,
        6.905001e03,
        6.945635e03,
        6.986396e03,
        7.027284e03,
        7.068301e03,
        7.109445e03,
        7.150716e03,
        7.192116e03,
        7.233643e03,
        7.275298e03,
        7.317081e03,
        7.358993e03,
        7.401032e03,
        7.443199e03,
        7.485495e03,
        7.527918e03,
        7.570470e03,
        7.613151e03,
        7.655959e03,
        7.698896e03,
        7.741962e03,
        7.785156e03,
        7.828478e03,
        7.871929e03,
        7.915509e03,
        7.959218e03,
        8.003055e03,
        8.047021e03,
        8.091116e03,
        8.135339e03,
        8.179692e03,
        8.224173e03,
        8.268784e03,
        8.313523e03,
        8.358392e03,
        8.403390e03,
        8.448517e03,
        8.493773e03,
        8.539158e03,
        8.584673e03,
        8.630317e03,
        8.676090e03,
        8.721993e03,
        8.768025e03,
        8.814186e03,
        8.860478e03,
        8.906898e03,
        8.953448e03,
        9.000128e03,
        9.046938e03,
        9.093877e03,
        9.140946e03,
        9.188144e03,
        9.235473e03,
        9.282931e03,
        9.330519e03,
        9.378237e03,
        9.426085e03,
        9.474063e03,
        9.522171e03,
        9.570408e03,
        9.618776e03,
        9.667274e03,
        9.715902e03,
        9.764660e03,
        9.813548e03,
        9.862566e03,
        9.911715e03,
        9.960994e03,
        1.001040e04,
        1.005994e04,
        1.010961e04,
        1.015941e04,
        1.020934e04,
        1.025940e04,
        1.030959e04,
        1.035991e04,
        1.041037e04,
        1.046095e04,
        1.051166e04,
        1.056250e04,
        1.061348e04,
        1.066458e04,
        1.071581e04,
        1.076718e04,
        1.081867e04,
        1.087030e04,
        1.092206e04,
        1.097395e04,
        1.102596e04,
        1.107811e04,
        1.113039e04,
        1.118280e04,
        1.123534e04,
        1.128801e04,
        1.134081e04,
        1.139375e04,
        1.144681e04,
        1.150000e04,
        1.155333e04,
        1.160678e04,
        1.166037e04,
        1.171409e04,
        1.176793e04,
        1.182191e04,
        1.187602e04,
        1.193026e04,
        1.198463e04,
        1.203913e04,
        1.209377e04,
        1.214853e04,
        1.220342e04,
        1.225845e04,
        1.231360e04,
        1.236889e04,
        1.242431e04,
        1.247985e04,
        1.253553e04,
        1.259134e04,
        1.264728e04,
        1.270335e04,
        1.275955e04,
        1.281589e04,
        1.287235e04,
        1.292894e04,
        1.298567e04,
        1.304252e04,
        1.309951e04,
        1.315662e04,
        1.321387e04,
        1.327125e04,
        1.332876e04,
        1.338640e04,
        1.344417e04,
        1.350207e04,
        1.356010e04,
        1.361826e04,
    ]
)

#  ---------------------- M = 5, I = 8 ---------------------------
M = 5
I = 8
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.024260e00,
        8.644900e00,
        1.694486e01,
        2.524838e01,
        3.355335e01,
        4.185935e01,
        5.016626e01,
        5.847401e01,
        6.678257e01,
        7.509194e01,
        8.340213e01,
        9.171321e01,
        1.000254e02,
        1.083389e02,
        1.166545e02,
        1.249731e02,
        1.332960e02,
        1.416249e02,
        1.499621e02,
        1.583101e02,
        1.666720e02,
        1.750509e02,
        1.834505e02,
        1.918746e02,
        2.003270e02,
        2.088118e02,
        2.173329e02,
        2.258944e02,
        2.345004e02,
        2.431546e02,
        2.518609e02,
        2.606229e02,
        2.694442e02,
        2.783282e02,
        2.872781e02,
        2.962969e02,
        3.053877e02,
        3.145531e02,
        3.237958e02,
        3.331182e02,
        3.425226e02,
        3.520113e02,
        3.615863e02,
        3.712495e02,
        3.810028e02,
        3.908478e02,
        4.007862e02,
        4.108194e02,
        4.209489e02,
        4.311760e02,
        4.415019e02,
        4.519278e02,
        4.624548e02,
        4.730840e02,
        4.838163e02,
        4.946525e02,
        5.055937e02,
        5.166406e02,
        5.277939e02,
        5.390545e02,
        5.504229e02,
        5.618998e02,
        5.734859e02,
        5.851816e02,
        5.969876e02,
        6.089044e02,
        6.209324e02,
        6.330722e02,
        6.453241e02,
        6.576887e02,
        6.701662e02,
        6.827571e02,
        6.954618e02,
        7.082806e02,
        7.212138e02,
        7.342617e02,
        7.474247e02,
        7.607031e02,
        7.740971e02,
        7.876070e02,
        8.012330e02,
        8.149755e02,
        8.288346e02,
        8.428107e02,
        8.569038e02,
        8.711142e02,
        8.854422e02,
        8.998879e02,
        9.144515e02,
        9.291333e02,
        9.439334e02,
        9.588519e02,
        9.738891e02,
        9.890452e02,
        1.004320e03,
        1.019714e03,
        1.035228e03,
        1.050861e03,
        1.066613e03,
        1.082486e03,
        1.098478e03,
        1.114590e03,
        1.130822e03,
        1.147175e03,
        1.163648e03,
        1.180242e03,
        1.196956e03,
        1.213792e03,
        1.230748e03,
        1.247825e03,
        1.265023e03,
        1.282343e03,
        1.299784e03,
        1.317346e03,
        1.335031e03,
        1.352836e03,
        1.370764e03,
        1.388814e03,
        1.406986e03,
        1.425280e03,
        1.443696e03,
        1.462234e03,
        1.480895e03,
        1.499679e03,
        1.518585e03,
        1.537614e03,
        1.556766e03,
        1.576041e03,
        1.595439e03,
        1.614960e03,
        1.634605e03,
        1.654372e03,
        1.674264e03,
        1.694278e03,
        1.714417e03,
        1.734679e03,
        1.755065e03,
        1.775574e03,
        1.796208e03,
        1.816966e03,
        1.837848e03,
        1.858855e03,
        1.879985e03,
        1.901240e03,
        1.922620e03,
        1.944124e03,
        1.965753e03,
        1.987507e03,
        2.009386e03,
        2.031390e03,
        2.053519e03,
        2.075772e03,
        2.098152e03,
        2.120656e03,
        2.143286e03,
        2.166041e03,
        2.188922e03,
        2.211929e03,
        2.235061e03,
        2.258320e03,
        2.281704e03,
        2.305214e03,
        2.328850e03,
        2.352613e03,
        2.376502e03,
        2.400517e03,
        2.424658e03,
        2.448926e03,
        2.473321e03,
        2.497842e03,
        2.522490e03,
        2.547265e03,
        2.572167e03,
        2.597196e03,
        2.622352e03,
        2.647635e03,
        2.673046e03,
        2.698584e03,
        2.724249e03,
        2.750042e03,
        2.775962e03,
        2.802011e03,
        2.828187e03,
        2.854490e03,
        2.880922e03,
        2.907482e03,
        2.934170e03,
        2.960986e03,
        2.987930e03,
        3.015003e03,
        3.042204e03,
        3.069534e03,
        3.096992e03,
        3.124579e03,
        3.152295e03,
        3.180140e03,
        3.208113e03,
        3.236216e03,
        3.264448e03,
        3.292809e03,
        3.321299e03,
        3.349918e03,
        3.378667e03,
        3.407546e03,
        3.436554e03,
        3.465692e03,
        3.494959e03,
        3.524357e03,
        3.553884e03,
        3.583542e03,
        3.613329e03,
        3.643247e03,
        3.673295e03,
        3.703473e03,
        3.733781e03,
        3.764221e03,
        3.794790e03,
        3.825491e03,
        3.856322e03,
        3.887284e03,
        3.918377e03,
        3.949600e03,
        3.980955e03,
        4.012441e03,
        4.044059e03,
        4.075807e03,
        4.107687e03,
        4.139699e03,
        4.171842e03,
        4.204116e03,
        4.236523e03,
        4.269061e03,
        4.301731e03,
        4.334532e03,
        4.367466e03,
        4.400532e03,
        4.433731e03,
        4.467061e03,
        4.500524e03,
        4.534119e03,
        4.567847e03,
        4.601707e03,
        4.635700e03,
        4.669825e03,
        4.704084e03,
        4.738475e03,
        4.772999e03,
        4.807656e03,
        4.842447e03,
        4.877370e03,
        4.912427e03,
        4.947617e03,
        4.982940e03,
        5.018397e03,
        5.053988e03,
        5.089712e03,
        5.125570e03,
        5.161561e03,
        5.197686e03,
        5.233946e03,
        5.270339e03,
        5.306866e03,
        5.343528e03,
        5.380323e03,
        5.417253e03,
        5.454318e03,
        5.491516e03,
        5.528849e03,
        5.566317e03,
        5.603919e03,
        5.641656e03,
        5.679528e03,
        5.717535e03,
        5.755676e03,
        5.793953e03,
        5.832364e03,
        5.870911e03,
        5.909592e03,
        5.948409e03,
        5.987362e03,
        6.026449e03,
        6.065672e03,
        6.105031e03,
        6.144525e03,
        6.184155e03,
        6.223920e03,
        6.263821e03,
        6.303858e03,
        6.344031e03,
        6.384340e03,
        6.424784e03,
        6.465365e03,
        6.506082e03,
        6.546935e03,
        6.587924e03,
        6.629050e03,
        6.670312e03,
        6.711710e03,
        6.753245e03,
        6.794916e03,
        6.836724e03,
        6.878669e03,
        6.920750e03,
        6.962968e03,
        7.005323e03,
        7.047814e03,
        7.090443e03,
        7.133208e03,
        7.176111e03,
        7.219151e03,
        7.262327e03,
        7.305641e03,
        7.349092e03,
        7.392681e03,
        7.436407e03,
        7.480270e03,
        7.524270e03,
        7.568408e03,
        7.612684e03,
        7.657097e03,
        7.701647e03,
        7.746336e03,
        7.791162e03,
        7.836126e03,
        7.881227e03,
        7.926467e03,
        7.971844e03,
        8.017359e03,
        8.063013e03,
        8.108804e03,
        8.154733e03,
        8.200801e03,
        8.247006e03,
        8.293350e03,
        8.339832e03,
        8.386452e03,
        8.433210e03,
        8.480107e03,
        8.527142e03,
        8.574316e03,
        8.621628e03,
        8.669078e03,
        8.716667e03,
        8.764395e03,
        8.812261e03,
        8.860266e03,
        8.908409e03,
        8.956691e03,
        9.005112e03,
        9.053671e03,
        9.102369e03,
        9.151206e03,
        9.200182e03,
        9.249297e03,
        9.298551e03,
        9.347943e03,
        9.397474e03,
        9.447145e03,
        9.496954e03,
        9.546902e03,
        9.596990e03,
        9.647216e03,
        9.697582e03,
        9.748087e03,
        9.798730e03,
        9.849513e03,
        9.900435e03,
        9.951496e03,
        1.000270e04,
        1.005404e04,
        1.010552e04,
        1.015713e04,
        1.020889e04,
        1.026079e04,
        1.031282e04,
        1.036500e04,
        1.041731e04,
        1.046977e04,
        1.052236e04,
        1.057509e04,
        1.062797e04,
        1.068098e04,
        1.073413e04,
        1.078742e04,
        1.084085e04,
        1.089442e04,
        1.094813e04,
        1.100198e04,
        1.105596e04,
        1.111009e04,
        1.116436e04,
        1.121876e04,
        1.127331e04,
        1.132799e04,
        1.138282e04,
        1.143778e04,
        1.149289e04,
        1.154813e04,
        1.160351e04,
        1.165903e04,
        1.171470e04,
        1.177050e04,
        1.182644e04,
        1.188252e04,
        1.193874e04,
        1.199510e04,
        1.205159e04,
        1.210823e04,
        1.216501e04,
        1.222193e04,
        1.227898e04,
        1.233618e04,
        1.239351e04,
        1.245099e04,
        1.250860e04,
        1.256636e04,
        1.262425e04,
        1.268228e04,
        1.274045e04,
        1.279876e04,
        1.285722e04,
        1.291581e04,
        1.297453e04,
        1.303340e04,
        1.309241e04,
        1.315156e04,
        1.321084e04,
        1.327027e04,
        1.332983e04,
        1.338954e04,
        1.344938e04,
        1.350936e04,
        1.356949e04,
        1.362975e04,
        1.369015e04,
        1.375069e04,
        1.381136e04,
        1.387218e04,
        1.393314e04,
        1.399423e04,
        1.405547e04,
        1.411684e04,
        1.417835e04,
        1.424000e04,
        1.430179e04,
        1.436372e04,
        1.442579e04,
        1.448799e04,
        1.455034e04,
        1.461282e04,
        1.467545e04,
    ]
)

#  ---------------------- M = 5, I = 9 ---------------------------
M = 5
I = 9
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.128630e00,
        5.062329e01,
        9.917483e01,
        1.477481e02,
        1.963300e02,
        2.449180e02,
        2.935114e02,
        3.421098e02,
        3.907129e02,
        4.393208e02,
        4.879334e02,
        5.365511e02,
        5.851749e02,
        6.338065e02,
        6.824492e02,
        7.311080e02,
        7.797902e02,
        8.285052e02,
        8.772651e02,
        9.260840e02,
        9.749786e02,
        1.023967e03,
        1.073070e03,
        1.122307e03,
        1.171702e03,
        1.221277e03,
        1.271055e03,
        1.321059e03,
        1.371312e03,
        1.421836e03,
        1.472653e03,
        1.523784e03,
        1.575250e03,
        1.627071e03,
        1.679265e03,
        1.731850e03,
        1.784843e03,
        1.838260e03,
        1.892117e03,
        1.946428e03,
        2.001207e03,
        2.056467e03,
        2.112219e03,
        2.168475e03,
        2.225246e03,
        2.282542e03,
        2.340373e03,
        2.398746e03,
        2.457671e03,
        2.517156e03,
        2.577207e03,
        2.637832e03,
        2.699037e03,
        2.760829e03,
        2.823213e03,
        2.886195e03,
        2.949779e03,
        3.013971e03,
        3.078775e03,
        3.144196e03,
        3.210237e03,
        3.276902e03,
        3.344196e03,
        3.412121e03,
        3.480680e03,
        3.549878e03,
        3.619716e03,
        3.690198e03,
        3.761326e03,
        3.833102e03,
        3.905530e03,
        3.978611e03,
        4.052348e03,
        4.126742e03,
        4.201796e03,
        4.277511e03,
        4.353890e03,
        4.430934e03,
        4.508645e03,
        4.587024e03,
        4.666073e03,
        4.745793e03,
        4.826187e03,
        4.907254e03,
        4.988997e03,
        5.071417e03,
        5.154515e03,
        5.238293e03,
        5.322751e03,
        5.407890e03,
        5.493712e03,
        5.580218e03,
        5.667408e03,
        5.755285e03,
        5.843848e03,
        5.933099e03,
        6.023038e03,
        6.113667e03,
        6.204986e03,
        6.296996e03,
        6.389699e03,
        6.483094e03,
        6.577183e03,
        6.671967e03,
        6.767446e03,
        6.863621e03,
        6.960492e03,
        7.058061e03,
        7.156329e03,
        7.255295e03,
        7.354961e03,
        7.455327e03,
        7.556394e03,
        7.658162e03,
        7.760633e03,
        7.863807e03,
        7.967684e03,
        8.072266e03,
        8.177552e03,
        8.283544e03,
        8.390242e03,
        8.497647e03,
        8.605758e03,
        8.714578e03,
        8.824106e03,
        8.934343e03,
        9.045289e03,
        9.156946e03,
        9.269313e03,
        9.382392e03,
        9.496182e03,
        9.610685e03,
        9.725901e03,
        9.841830e03,
        9.958473e03,
        1.007583e04,
        1.019390e04,
        1.031269e04,
        1.043220e04,
        1.055242e04,
        1.067336e04,
        1.079501e04,
        1.091739e04,
        1.104048e04,
        1.116429e04,
        1.128882e04,
        1.141408e04,
        1.154005e04,
        1.166674e04,
        1.179416e04,
        1.192230e04,
        1.205116e04,
        1.218075e04,
        1.231106e04,
        1.244209e04,
        1.257385e04,
        1.270633e04,
        1.283954e04,
        1.297348e04,
        1.310814e04,
        1.324353e04,
        1.337965e04,
        1.351649e04,
        1.365407e04,
        1.379237e04,
        1.393140e04,
        1.407117e04,
        1.421166e04,
        1.435289e04,
        1.449485e04,
        1.463754e04,
        1.478096e04,
        1.492512e04,
        1.507001e04,
        1.521563e04,
        1.536199e04,
        1.550909e04,
        1.565692e04,
        1.580548e04,
        1.595479e04,
        1.610483e04,
        1.625560e04,
        1.640712e04,
        1.655937e04,
        1.671237e04,
        1.686610e04,
        1.702057e04,
        1.717579e04,
        1.733174e04,
        1.748844e04,
        1.764588e04,
        1.780406e04,
        1.796298e04,
        1.812265e04,
        1.828306e04,
        1.844421e04,
        1.860611e04,
        1.876876e04,
        1.893215e04,
        1.909629e04,
        1.926117e04,
        1.942680e04,
        1.959318e04,
        1.976031e04,
        1.992819e04,
        2.009681e04,
        2.026619e04,
        2.043631e04,
        2.060719e04,
        2.077882e04,
        2.095120e04,
        2.112433e04,
        2.129821e04,
        2.147285e04,
        2.164824e04,
        2.182438e04,
        2.200128e04,
        2.217893e04,
        2.235734e04,
        2.253651e04,
        2.271643e04,
        2.289711e04,
        2.307854e04,
        2.326073e04,
        2.344368e04,
        2.362739e04,
        2.381186e04,
        2.399709e04,
        2.418308e04,
        2.436983e04,
        2.455734e04,
        2.474561e04,
        2.493464e04,
        2.512444e04,
        2.531500e04,
        2.550632e04,
        2.569841e04,
        2.589126e04,
        2.608487e04,
        2.627925e04,
        2.647440e04,
        2.667031e04,
        2.686699e04,
        2.706444e04,
        2.726265e04,
        2.746163e04,
        2.766138e04,
        2.786190e04,
        2.806319e04,
        2.826524e04,
        2.846807e04,
        2.867167e04,
        2.887604e04,
        2.908118e04,
        2.928709e04,
        2.949378e04,
        2.970124e04,
        2.990947e04,
        3.011847e04,
        3.032825e04,
        3.053880e04,
        3.075013e04,
        3.096224e04,
        3.117512e04,
        3.138877e04,
        3.160321e04,
        3.181842e04,
        3.203441e04,
        3.225117e04,
        3.246872e04,
        3.268704e04,
        3.290614e04,
        3.312602e04,
        3.334669e04,
        3.356813e04,
        3.379035e04,
        3.401336e04,
        3.423714e04,
        3.446171e04,
        3.468706e04,
        3.491320e04,
        3.514011e04,
        3.536782e04,
        3.559630e04,
        3.582557e04,
        3.605563e04,
        3.628647e04,
        3.651809e04,
        3.675050e04,
        3.698370e04,
        3.721769e04,
        3.745246e04,
        3.768802e04,
        3.792437e04,
        3.816150e04,
        3.839943e04,
        3.863814e04,
        3.887764e04,
        3.911794e04,
        3.935902e04,
        3.960089e04,
        3.984356e04,
        4.008701e04,
        4.033126e04,
        4.057630e04,
        4.082213e04,
        4.106875e04,
        4.131617e04,
        4.156438e04,
        4.181338e04,
        4.206318e04,
        4.231377e04,
        4.256515e04,
        4.281734e04,
        4.307031e04,
        4.332408e04,
        4.357865e04,
        4.383401e04,
        4.409017e04,
        4.434713e04,
        4.460488e04,
        4.486344e04,
        4.512278e04,
        4.538293e04,
        4.564388e04,
        4.590562e04,
        4.616816e04,
        4.643150e04,
        4.669564e04,
        4.696058e04,
        4.722632e04,
        4.749286e04,
        4.776021e04,
        4.802835e04,
        4.829729e04,
        4.856703e04,
        4.883758e04,
        4.910893e04,
        4.938108e04,
        4.965403e04,
        4.992778e04,
        5.020234e04,
        5.047770e04,
        5.075386e04,
        5.103083e04,
        5.130860e04,
        5.158717e04,
        5.186655e04,
        5.214674e04,
        5.242772e04,
        5.270951e04,
        5.299211e04,
        5.327551e04,
        5.355972e04,
        5.384474e04,
        5.413056e04,
        5.441718e04,
        5.470461e04,
        5.499285e04,
        5.528189e04,
        5.557175e04,
        5.586240e04,
        5.615387e04,
        5.644614e04,
        5.673922e04,
        5.703311e04,
        5.732781e04,
        5.762331e04,
        5.791962e04,
        5.821674e04,
        5.851467e04,
        5.881341e04,
        5.911295e04,
        5.941331e04,
        5.971447e04,
        6.001644e04,
        6.031922e04,
        6.062281e04,
        6.092721e04,
        6.123242e04,
        6.153844e04,
        6.184527e04,
        6.215291e04,
        6.246136e04,
        6.277062e04,
        6.308069e04,
        6.339157e04,
        6.370326e04,
        6.401576e04,
        6.432907e04,
        6.464320e04,
        6.495813e04,
        6.527387e04,
        6.559043e04,
        6.590779e04,
        6.622597e04,
        6.654496e04,
        6.686476e04,
        6.718537e04,
        6.750679e04,
        6.782902e04,
        6.815206e04,
        6.847592e04,
        6.880058e04,
        6.912606e04,
        6.945235e04,
        6.977945e04,
        7.010736e04,
        7.043609e04,
        7.076562e04,
        7.109597e04,
        7.142713e04,
        7.175910e04,
        7.209188e04,
        7.242547e04,
        7.275988e04,
        7.309509e04,
        7.343112e04,
        7.376796e04,
        7.410561e04,
        7.444407e04,
        7.478335e04,
        7.512343e04,
        7.546433e04,
        7.580603e04,
        7.614855e04,
        7.649188e04,
        7.683602e04,
        7.718098e04,
        7.752674e04,
        7.787331e04,
        7.822070e04,
        7.856889e04,
        7.891790e04,
        7.926772e04,
        7.961835e04,
        7.996979e04,
        8.032204e04,
        8.067510e04,
        8.102897e04,
        8.138365e04,
        8.173914e04,
        8.209544e04,
        8.245255e04,
        8.281047e04,
        8.316920e04,
        8.352874e04,
        8.388909e04,
        8.425025e04,
        8.461221e04,
        8.497499e04,
    ]
)

#  ---------------------- M = 6, I = 1 ---------------------------
M = 6
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.000000e00,
        1.273695e01,
        3.049472e01,
        5.478766e01,
        8.367753e01,
        1.164151e02,
        1.525835e02,
        1.918873e02,
        2.341011e02,
        2.790524e02,
        3.266165e02,
        3.767179e02,
        4.293326e02,
        4.844902e02,
        5.422734e02,
        6.028155e02,
        6.662963e02,
        7.329384e02,
        8.030016e02,
        8.767796e02,
        9.545964e02,
        1.036804e03,
        1.123780e03,
        1.215929e03,
        1.313679e03,
        1.417485e03,
        1.527828e03,
        1.645218e03,
        1.770193e03,
        1.903324e03,
        2.045215e03,
        2.196504e03,
        2.357871e03,
        2.530032e03,
        2.713751e03,
        2.909836e03,
        3.119144e03,
        3.342585e03,
        3.581125e03,
        3.835788e03,
        4.107662e03,
        4.397900e03,
        4.707726e03,
        5.038440e03,
        5.391417e03,
        5.768118e03,
        6.170091e03,
        6.598978e03,
        7.056516e03,
        7.544548e03,
        8.065026e03,
        8.620015e03,
        9.211704e03,
        9.842405e03,
        1.051457e04,
        1.123079e04,
        1.199379e04,
        1.280649e04,
        1.367192e04,
        1.459334e04,
        1.557414e04,
        1.661792e04,
        1.772850e04,
        1.890986e04,
        2.016624e04,
        2.150208e04,
        2.292207e04,
        2.443115e04,
        2.603450e04,
        2.773758e04,
        2.954614e04,
        3.150651e04,
        3.355181e04,
        3.572292e04,
        3.802703e04,
        4.047168e04,
        4.306485e04,
        4.581488e04,
        4.873055e04,
        5.182111e04,
        5.509623e04,
        5.856610e04,
        6.224140e04,
        6.613336e04,
        7.025373e04,
        7.461487e04,
        7.922970e04,
        8.411182e04,
        8.927543e04,
        9.473544e04,
        1.005075e05,
        1.066079e05,
        1.130538e05,
        1.198631e05,
        1.270545e05,
        1.346478e05,
        1.426634e05,
        1.511227e05,
        1.600483e05,
        1.694635e05,
        1.793929e05,
        1.898620e05,
        2.008977e05,
        2.125277e05,
        2.247814e05,
        2.376890e05,
        2.512823e05,
        2.655945e05,
        2.806600e05,
        2.965148e05,
        3.131965e05,
        3.307442e05,
        3.491987e05,
        3.686022e05,
        3.889992e05,
        4.104356e05,
        4.329593e05,
        4.566203e05,
        4.814703e05,
        5.075634e05,
        5.349557e05,
        5.637057e05,
        5.938740e05,
        6.255236e05,
        6.587202e05,
        6.935319e05,
        7.300294e05,
        7.682862e05,
        8.083785e05,
        8.503856e05,
        8.943897e05,
        9.404760e05,
        9.887330e05,
        1.039252e06,
        1.092129e06,
        1.147463e06,
        1.205355e06,
        1.265911e06,
        1.329242e06,
        1.395461e06,
        1.464686e06,
        1.537038e06,
        1.612646e06,
        1.691638e06,
        1.774151e06,
        1.860324e06,
        1.950303e06,
        2.044237e06,
        2.142281e06,
        2.244596e06,
        2.351347e06,
        2.462706e06,
        2.578850e06,
        2.699960e06,
        2.826228e06,
        2.957846e06,
        3.095017e06,
        3.237950e06,
        3.386857e06,
        3.541963e06,
        3.703494e06,
        3.871687e06,
        4.046785e06,
        4.229040e06,
        4.418710e06,
        4.616063e06,
        4.821373e06,
        5.034924e06,
        5.257009e06,
        5.487928e06,
        5.727992e06,
        5.977520e06,
        6.236841e06,
        6.506295e06,
        6.786230e06,
        7.077006e06,
    ]
)

#  ---------------------- M = 6, I = 2 ---------------------------
M = 6
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.000001e01,
        2.547411e01,
        6.098959e01,
        1.095756e02,
        1.673556e02,
        2.328309e02,
        3.051677e02,
        3.837737e02,
        4.682005e02,
        5.581019e02,
        6.532270e02,
        7.534273e02,
        8.586439e02,
        9.689291e02,
        1.084461e03,
        1.205482e03,
        1.332363e03,
        1.465530e03,
        1.605503e03,
        1.752860e03,
        1.908229e03,
        2.072336e03,
        2.245903e03,
        2.429737e03,
        2.624664e03,
        2.831592e03,
        3.051489e03,
        3.285303e03,
        3.534174e03,
        3.799126e03,
        4.081393e03,
        4.382239e03,
        4.702959e03,
        5.044945e03,
        5.409694e03,
        5.798822e03,
        6.213891e03,
        6.656804e03,
        7.129283e03,
        7.633410e03,
        8.171277e03,
        8.745069e03,
        9.357183e03,
        1.001001e04,
        1.070636e04,
        1.144891e04,
        1.224067e04,
        1.308471e04,
        1.398443e04,
        1.494334e04,
        1.596502e04,
        1.705351e04,
        1.821287e04,
        1.944758e04,
        2.076216e04,
        2.216156e04,
        2.365078e04,
        2.523547e04,
        2.692124e04,
        2.871415e04,
        3.062057e04,
        3.264725e04,
        3.480122e04,
        3.708988e04,
        3.952125e04,
        4.210358e04,
        4.484543e04,
        4.775615e04,
        5.084522e04,
        5.412274e04,
        5.759952e04,
        6.128669e04,
        6.519606e04,
        6.933999e04,
        7.373142e04,
        7.838393e04,
        8.331199e04,
        8.853045e04,
        9.405527e04,
        9.990284e04,
        1.060906e05,
        1.126365e05,
        1.195598e05,
        1.268805e05,
        1.346193e05,
        1.427982e05,
        1.514402e05,
        1.605692e05,
        1.702104e05,
        1.803902e05,
        1.911358e05,
        2.024762e05,
        2.144415e05,
        2.270628e05,
        2.403733e05,
        2.544072e05,
        2.692002e05,
        2.847901e05,
        3.012156e05,
        3.185180e05,
        3.367395e05,
        3.559247e05,
        3.761201e05,
        3.973740e05,
        4.197368e05,
        4.432611e05,
        4.680017e05,
        4.940161e05,
        5.213635e05,
        5.501059e05,
        5.803083e05,
        6.120376e05,
        6.453640e05,
        6.803606e05,
        7.171028e05,
        7.556704e05,
        7.961449e05,
        8.386119e05,
        8.831604e05,
        9.298828e05,
        9.788752e05,
        1.030238e06,
        1.084073e06,
        1.140491e06,
        1.199602e06,
        1.261522e06,
        1.326373e06,
        1.394281e06,
        1.465374e06,
        1.539790e06,
        1.617667e06,
        1.699151e06,
        1.784394e06,
        1.873552e06,
        1.966787e06,
        2.064268e06,
        2.166169e06,
        2.272673e06,
        2.383965e06,
        2.500240e06,
        2.621701e06,
        2.748556e06,
        2.881020e06,
        3.019317e06,
        3.163680e06,
        3.314348e06,
        3.471569e06,
        3.635602e06,
        3.806711e06,
        3.985172e06,
        4.171270e06,
        4.365299e06,
        4.567564e06,
        4.778380e06,
        4.998073e06,
        5.226979e06,
        5.465447e06,
        5.713837e06,
        5.972520e06,
        6.241880e06,
        6.522314e06,
        6.814234e06,
        7.118060e06,
        7.434232e06,
        7.763201e06,
        8.105433e06,
        8.461408e06,
        8.831625e06,
        9.216596e06,
        9.616850e06,
        1.003293e07,
        1.046541e07,
        1.091485e07,
        1.138187e07,
        1.186708e07,
        1.237112e07,
    ]
)

#  ---------------------- M = 6, I = 3 ---------------------------
M = 6
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[4]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.136790e00,
        9.190122e01,
        2.433209e02,
        4.407898e02,
        6.744479e02,
        9.391965e02,
        1.231752e03,
        1.549735e03,
        1.891357e03,
        2.255315e03,
        2.640780e03,
        3.047413e03,
        3.475380e03,
        3.925354e03,
        4.398488e03,
        4.896378e03,
        5.421024e03,
        5.974778e03,
        6.560313e03,
        7.180591e03,
        7.838835e03,
        8.538523e03,
        9.283379e03,
        1.007737e04,
        1.092472e04,
        1.182991e04,
        1.279770e04,
        1.383315e04,
        1.494161e04,
        1.612880e04,
        1.740075e04,
        1.876392e04,
        2.022515e04,
        2.179171e04,
        2.347136e04,
        2.527233e04,
        2.720338e04,
        2.927384e04,
        3.149364e04,
        3.387330e04,
        3.642407e04,
        3.915786e04,
        4.208734e04,
        4.522600e04,
        4.858815e04,
        5.218897e04,
        5.604463e04,
        6.017224e04,
        6.458999e04,
        6.931716e04,
        7.437420e04,
        7.978279e04,
        8.556591e04,
        9.174789e04,
        9.835451e04,
        1.054131e05,
        1.129524e05,
        1.210032e05,
        1.295976e05,
        1.387699e05,
        1.485562e05,
        1.589946e05,
        1.701255e05,
        1.819914e05,
        1.946373e05,
        2.081105e05,
        2.224612e05,
        2.377420e05,
        2.540087e05,
        2.713198e05,
        2.897370e05,
        3.093255e05,
        3.301538e05,
        3.522940e05,
        3.758220e05,
        4.008176e05,
        4.273649e05,
        4.555521e05,
        4.854721e05,
        5.172225e05,
        5.509057e05,
        5.866294e05,
        6.245067e05,
        6.646560e05,
        7.072021e05,
        7.522754e05,
        8.000130e05,
        8.505587e05,
        9.040628e05,
        9.606834e05,
        1.020586e06,
        1.083943e06,
        1.150937e06,
        1.221758e06,
        1.296603e06,
        1.375682e06,
        1.459212e06,
        1.547420e06,
        1.640545e06,
        1.738836e06,
        1.842553e06,
        1.951967e06,
        2.067363e06,
        2.189037e06,
        2.317299e06,
        2.452473e06,
        2.594895e06,
        2.744919e06,
        2.902912e06,
        3.069257e06,
        3.244354e06,
        3.428620e06,
        3.622489e06,
        3.826415e06,
        4.040869e06,
        4.266343e06,
        4.503349e06,
        4.752420e06,
        5.014112e06,
        5.289002e06,
        5.577692e06,
        5.880808e06,
        6.199001e06,
        6.532948e06,
        6.883354e06,
        7.250950e06,
        7.636499e06,
        8.040792e06,
        8.464650e06,
        8.908929e06,
        9.374515e06,
        9.862331e06,
        1.037333e07,
        1.090852e07,
        1.146891e07,
        1.205559e07,
        1.266966e07,
        1.331228e07,
        1.398464e07,
        1.468798e07,
        1.542360e07,
        1.619281e07,
        1.699702e07,
        1.783764e07,
        1.871616e07,
        1.963413e07,
        2.059313e07,
        2.159483e07,
        2.264092e07,
        2.373319e07,
        2.487345e07,
        2.606363e07,
        2.730567e07,
        2.860161e07,
        2.995356e07,
        3.136369e07,
        3.283426e07,
        3.436760e07,
        3.596611e07,
        3.763229e07,
        3.936871e07,
        4.117804e07,
        4.306303e07,
        4.502651e07,
        4.707144e07,
        4.920084e07,
        5.141786e07,
        5.372573e07,
        5.612780e07,
        5.862752e07,
        6.122847e07,
        6.393432e07,
        6.674887e07,
        6.967606e07,
        7.271992e07,
        7.588465e07,
        7.917453e07,
        8.259403e07,
        8.614773e07,
        8.984036e07,
        9.367680e07,
        9.766207e07,
        1.018014e08,
        1.061000e08,
        1.105636e08,
        1.151977e08,
        1.200082e08,
        1.250011e08,
        1.301826e08,
        1.355593e08,
        1.411375e08,
        1.469242e08,
        1.529262e08,
        1.591509e08,
        1.656056e08,
        1.722979e08,
        1.792357e08,
        1.864271e08,
        1.938803e08,
        2.016041e08,
        2.096070e08,
        2.178983e08,
        2.264872e08,
        2.353833e08,
        2.445965e08,
        2.541369e08,
        2.640150e08,
        2.742414e08,
        2.848271e08,
        2.957836e08,
        3.071224e08,
        3.188555e08,
        3.309952e08,
        3.435542e08,
        3.565454e08,
        3.699822e08,
        3.838782e08,
        3.982476e08,
        4.131049e08,
        4.284647e08,
        4.443425e08,
        4.607539e08,
        4.777149e08,
        4.952421e08,
        5.133524e08,
        5.320631e08,
    ]
)

#  ---------------------- M = 6, I = 4 ---------------------------
M = 6
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.626998e01,
        1.839479e02,
        4.870414e02,
        8.823115e02,
        1.350022e03,
        1.879967e03,
        2.465569e03,
        3.102094e03,
        3.785903e03,
        4.514479e03,
        5.286106e03,
        6.100196e03,
        6.957045e03,
        7.858055e03,
        8.805535e03,
        9.802766e03,
        1.085371e04,
        1.196313e04,
        1.313628e04,
        1.437935e04,
        1.569859e04,
        1.710107e04,
        1.859418e04,
        2.018607e04,
        2.188496e04,
        2.370019e04,
        2.564086e04,
        2.771745e04,
        2.994063e04,
        3.232161e04,
        3.487298e04,
        3.760723e04,
        4.053859e04,
        4.368088e04,
        4.705047e04,
        5.066330e04,
        5.453713e04,
        5.869100e04,
        6.314418e04,
        6.791804e04,
        7.303545e04,
        7.852005e04,
        8.439702e04,
        9.069327e04,
        9.743844e04,
        1.046622e05,
        1.123971e05,
        1.206774e05,
        1.295392e05,
        1.390219e05,
        1.491664e05,
        1.600155e05,
        1.716162e05,
        1.840160e05,
        1.972679e05,
        2.114260e05,
        2.265476e05,
        2.426952e05,
        2.599326e05,
        2.783288e05,
        2.979556e05,
        3.188895e05,
        3.412118e05,
        3.650082e05,
        3.903670e05,
        4.173853e05,
        4.461617e05,
        4.768023e05,
        5.094192e05,
        5.441294e05,
        5.810569e05,
        6.203311e05,
        6.620900e05,
        7.064783e05,
        7.536471e05,
        8.037577e05,
        8.569763e05,
        9.134819e05,
        9.734592e05,
        1.037104e06,
        1.104621e06,
        1.176227e06,
        1.252147e06,
        1.332619e06,
        1.417893e06,
        1.508228e06,
        1.603903e06,
        1.705201e06,
        1.812425e06,
        1.925893e06,
        2.045933e06,
        2.172894e06,
        2.307139e06,
        2.449047e06,
        2.599017e06,
        2.757465e06,
        2.924828e06,
        3.101559e06,
        3.288137e06,
        3.485058e06,
        3.692845e06,
        3.912041e06,
        4.143216e06,
        4.386961e06,
        4.643897e06,
        4.914672e06,
        5.199959e06,
        5.500466e06,
        5.816930e06,
        6.150113e06,
        6.500818e06,
        6.869878e06,
        7.258162e06,
        7.666580e06,
        8.096072e06,
        8.547624e06,
        9.022260e06,
        9.521045e06,
        1.004509e07,
        1.059556e07,
        1.117365e07,
        1.178061e07,
        1.241774e07,
        1.308641e07,
        1.378802e07,
        1.452403e07,
        1.529597e07,
        1.610542e07,
        1.695402e07,
        1.784349e07,
        1.877560e07,
        1.975219e07,
        2.077518e07,
        2.184655e07,
        2.296837e07,
        2.414278e07,
        2.537200e07,
        2.665835e07,
        2.800420e07,
        2.941204e07,
        3.088444e07,
        3.242407e07,
        3.403370e07,
        3.571618e07,
        3.747450e07,
        3.931172e07,
        4.123103e07,
        4.323575e07,
        4.532928e07,
        4.751517e07,
        4.979709e07,
        5.217884e07,
        5.466433e07,
        5.725764e07,
        5.996298e07,
        6.278469e07,
        6.572729e07,
        6.879543e07,
        7.199392e07,
        7.532775e07,
        7.880208e07,
        8.242220e07,
        8.619364e07,
        9.012207e07,
        9.421338e07,
        9.847362e07,
        1.029091e08,
        1.075262e08,
        1.123317e08,
        1.173325e08,
        1.225357e08,
        1.279487e08,
        1.335791e08,
        1.394346e08,
        1.455235e08,
        1.518540e08,
    ]
)

#  ---------------------- M = 7, I = 1 ---------------------------
M = 7
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.259272e00,
        1.541160e01,
        2.984283e01,
        4.432568e01,
        5.882297e01,
        7.332720e01,
        8.783584e01,
        1.023478e02,
        1.168627e02,
        1.313804e02,
        1.459015e02,
        1.604275e02,
        1.749609e02,
        1.895058e02,
        2.040679e02,
        2.186540e02,
        2.332724e02,
        2.479320e02,
        2.626424e02,
        2.774132e02,
        2.922540e02,
        3.071739e02,
        3.221816e02,
        3.372850e02,
        3.524912e02,
        3.678063e02,
        3.832358e02,
        3.987841e02,
        4.144551e02,
        4.302515e02,
        4.461757e02,
        4.622292e02,
        4.784130e02,
        4.947276e02,
        5.111729e02,
        5.277485e02,
        5.444538e02,
        5.612875e02,
        5.782484e02,
        5.953349e02,
        6.125453e02,
        6.298776e02,
        6.473299e02,
        6.649000e02,
        6.825859e02,
        7.003851e02,
        7.182956e02,
        7.363149e02,
        7.544408e02,
        7.726710e02,
        7.910032e02,
        8.094352e02,
        8.279648e02,
        8.465897e02,
        8.653078e02,
        8.841171e02,
        9.030155e02,
        9.220009e02,
        9.410715e02,
        9.602254e02,
        9.794607e02,
        9.987757e02,
        1.018169e03,
        1.037638e03,
        1.057182e03,
        1.076799e03,
        1.096488e03,
        1.116247e03,
        1.136075e03,
        1.155971e03,
        1.175934e03,
        1.195961e03,
        1.216053e03,
        1.236207e03,
        1.256424e03,
        1.276701e03,
        1.297039e03,
        1.317435e03,
        1.337890e03,
        1.358403e03,
        1.378972e03,
        1.399598e03,
        1.420279e03,
        1.441014e03,
        1.461804e03,
        1.482647e03,
        1.503544e03,
        1.524493e03,
        1.545494e03,
        1.566547e03,
        1.587651e03,
        1.608806e03,
        1.630012e03,
        1.651268e03,
        1.672575e03,
        1.693931e03,
        1.715336e03,
        1.736791e03,
        1.758295e03,
        1.779848e03,
        1.801450e03,
        1.823100e03,
        1.844800e03,
        1.866547e03,
        1.888343e03,
        1.910188e03,
        1.932080e03,
        1.954021e03,
        1.976010e03,
        1.998048e03,
        2.020133e03,
        2.042267e03,
        2.064449e03,
        2.086680e03,
        2.108959e03,
        2.131286e03,
        2.153662e03,
        2.176086e03,
        2.198559e03,
        2.221081e03,
        2.243651e03,
        2.266271e03,
        2.288939e03,
        2.311657e03,
        2.334424e03,
        2.357240e03,
        2.380105e03,
        2.403021e03,
        2.425986e03,
        2.449001e03,
        2.472066e03,
        2.495181e03,
        2.518346e03,
        2.541562e03,
        2.564828e03,
        2.588145e03,
        2.611513e03,
        2.634932e03,
        2.658402e03,
        2.681924e03,
        2.705497e03,
        2.729122e03,
        2.752798e03,
        2.776526e03,
        2.800307e03,
        2.824140e03,
        2.848025e03,
        2.871962e03,
        2.895953e03,
        2.919996e03,
        2.944092e03,
        2.968242e03,
        2.992444e03,
        3.016701e03,
        3.041010e03,
        3.065374e03,
        3.089791e03,
        3.114262e03,
        3.138788e03,
        3.163367e03,
        3.188002e03,
        3.212690e03,
        3.237434e03,
        3.262232e03,
        3.287085e03,
        3.311993e03,
        3.336957e03,
        3.361975e03,
        3.387050e03,
        3.412179e03,
        3.437365e03,
        3.462606e03,
        3.487903e03,
        3.513256e03,
        3.538665e03,
        3.564130e03,
        3.589652e03,
        3.615230e03,
        3.640865e03,
        3.666556e03,
        3.692304e03,
        3.718109e03,
        3.743970e03,
        3.769889e03,
        3.795864e03,
        3.821897e03,
        3.847987e03,
        3.874134e03,
        3.900338e03,
        3.926600e03,
        3.952920e03,
        3.979297e03,
        4.005731e03,
        4.032224e03,
        4.058774e03,
        4.085382e03,
        4.112047e03,
        4.138771e03,
        4.165553e03,
        4.192392e03,
        4.219290e03,
        4.246246e03,
        4.273260e03,
        4.300332e03,
        4.327463e03,
        4.354651e03,
        4.381898e03,
        4.409204e03,
        4.436567e03,
        4.463989e03,
        4.491470e03,
        4.519009e03,
        4.546606e03,
        4.574262e03,
        4.601977e03,
        4.629750e03,
        4.657581e03,
        4.685471e03,
        4.713419e03,
        4.741426e03,
        4.769492e03,
        4.797616e03,
        4.825799e03,
        4.854040e03,
        4.882340e03,
        4.910698e03,
        4.939115e03,
        4.967591e03,
        4.996125e03,
        5.024717e03,
        5.053368e03,
        5.082078e03,
        5.110846e03,
        5.139672e03,
        5.168557e03,
        5.197500e03,
        5.226502e03,
        5.255562e03,
        5.284680e03,
        5.313857e03,
        5.343091e03,
        5.372384e03,
        5.401736e03,
        5.431145e03,
        5.460613e03,
        5.490138e03,
        5.519722e03,
        5.549364e03,
        5.579063e03,
        5.608821e03,
        5.638636e03,
        5.668509e03,
        5.698440e03,
        5.728429e03,
        5.758475e03,
        5.788579e03,
        5.818741e03,
        5.848960e03,
        5.879236e03,
        5.909570e03,
        5.939961e03,
        5.970409e03,
        6.000915e03,
        6.031477e03,
        6.062097e03,
        6.092774e03,
        6.123507e03,
        6.154298e03,
        6.185145e03,
        6.216049e03,
        6.247009e03,
        6.278026e03,
        6.309100e03,
        6.340229e03,
        6.371416e03,
        6.402658e03,
        6.433957e03,
        6.465311e03,
        6.496722e03,
        6.528188e03,
        6.559710e03,
        6.591288e03,
        6.622922e03,
        6.654611e03,
        6.686355e03,
        6.718155e03,
        6.750010e03,
        6.781920e03,
        6.813886e03,
        6.845906e03,
        6.877981e03,
        6.910111e03,
        6.942296e03,
        6.974535e03,
        7.006828e03,
        7.039176e03,
        7.071578e03,
        7.104035e03,
        7.136545e03,
        7.169109e03,
        7.201728e03,
        7.234399e03,
        7.267125e03,
        7.299904e03,
        7.332736e03,
        7.365622e03,
        7.398560e03,
        7.431552e03,
        7.464597e03,
        7.497694e03,
        7.530844e03,
        7.564047e03,
        7.597302e03,
        7.630610e03,
        7.663969e03,
        7.697381e03,
        7.730845e03,
        7.764360e03,
        7.797928e03,
        7.831547e03,
        7.865217e03,
        7.898939e03,
        7.932712e03,
        7.966535e03,
        8.000410e03,
        8.034336e03,
        8.068313e03,
        8.102340e03,
        8.136417e03,
        8.170545e03,
        8.204723e03,
        8.238951e03,
        8.273228e03,
        8.307556e03,
        8.341933e03,
        8.376360e03,
        8.410836e03,
        8.445361e03,
        8.479935e03,
        8.514559e03,
        8.549231e03,
        8.583951e03,
        8.618721e03,
        8.653538e03,
        8.688404e03,
        8.723318e03,
        8.758280e03,
        8.793289e03,
        8.828347e03,
        8.863452e03,
        8.898604e03,
        8.933803e03,
        8.969050e03,
        9.004343e03,
        9.039683e03,
        9.075070e03,
        9.110503e03,
        9.145983e03,
        9.181509e03,
        9.217080e03,
        9.252698e03,
        9.288362e03,
        9.324071e03,
        9.359825e03,
        9.395625e03,
        9.431470e03,
        9.467359e03,
        9.503294e03,
        9.539273e03,
        9.575297e03,
        9.611365e03,
        9.647478e03,
        9.683634e03,
        9.719834e03,
        9.756078e03,
        9.792366e03,
    ]
)

#  ---------------------- M = 7, I = 2 ---------------------------
M = 7
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.562445e00,
        3.092123e01,
        6.151168e01,
        9.218904e01,
        1.228922e02,
        1.536083e02,
        1.843329e02,
        2.150641e02,
        2.458012e02,
        2.765444e02,
        3.072954e02,
        3.380581e02,
        3.688395e02,
        3.996500e02,
        4.305039e02,
        4.614188e02,
        4.924152e02,
        5.235163e02,
        5.547468e02,
        5.861323e02,
        6.176990e02,
        6.494730e02,
        6.814797e02,
        7.137437e02,
        7.462888e02,
        7.791373e02,
        8.123102e02,
        8.458274e02,
        8.797073e02,
        9.139671e02,
        9.486225e02,
        9.836883e02,
        1.019178e03,
        1.055104e03,
        1.091478e03,
        1.128311e03,
        1.165612e03,
        1.203390e03,
        1.241654e03,
        1.280411e03,
        1.319669e03,
        1.359433e03,
        1.399711e03,
        1.440506e03,
        1.481826e03,
        1.523674e03,
        1.566055e03,
        1.608973e03,
        1.652432e03,
        1.696437e03,
        1.740989e03,
        1.786093e03,
        1.831752e03,
        1.877969e03,
        1.924746e03,
        1.972085e03,
        2.019991e03,
        2.068465e03,
        2.117509e03,
        2.167125e03,
        2.217317e03,
        2.268085e03,
        2.319433e03,
        2.371362e03,
        2.423874e03,
        2.476971e03,
        2.530656e03,
        2.584929e03,
        2.639793e03,
        2.695250e03,
        2.751302e03,
        2.807950e03,
        2.865197e03,
        2.923044e03,
        2.981493e03,
        3.040546e03,
        3.100206e03,
        3.160473e03,
        3.221350e03,
        3.282838e03,
        3.344940e03,
        3.407658e03,
        3.470993e03,
        3.534948e03,
        3.599524e03,
        3.664723e03,
        3.730548e03,
        3.797000e03,
        3.864082e03,
        3.931795e03,
        4.000141e03,
        4.069124e03,
        4.138744e03,
        4.209003e03,
        4.279905e03,
        4.351450e03,
        4.423642e03,
        4.496482e03,
        4.569972e03,
        4.644115e03,
        4.718912e03,
        4.794367e03,
        4.870480e03,
        4.947254e03,
        5.024692e03,
        5.102796e03,
        5.181567e03,
        5.261008e03,
        5.341122e03,
        5.421910e03,
        5.503374e03,
        5.585517e03,
        5.668341e03,
        5.751848e03,
        5.836040e03,
        5.920920e03,
        6.006490e03,
        6.092751e03,
        6.179707e03,
        6.267359e03,
        6.355709e03,
        6.444760e03,
        6.534513e03,
        6.624971e03,
        6.716136e03,
        6.808010e03,
        6.900596e03,
        6.993894e03,
        7.087908e03,
        7.182639e03,
        7.278090e03,
        7.374263e03,
        7.471159e03,
        7.568780e03,
        7.667129e03,
        7.766208e03,
        7.866019e03,
        7.966563e03,
        8.067842e03,
        8.169859e03,
        8.272615e03,
        8.376113e03,
        8.480353e03,
        8.585339e03,
        8.691071e03,
        8.797553e03,
        8.904784e03,
        9.012769e03,
        9.121507e03,
        9.231001e03,
        9.341252e03,
        9.452263e03,
        9.564035e03,
        9.676570e03,
        9.789869e03,
        9.903935e03,
        1.001877e04,
        1.013437e04,
        1.025074e04,
        1.036789e04,
        1.048581e04,
        1.060450e04,
        1.072397e04,
        1.084422e04,
        1.096526e04,
        1.108707e04,
        1.120966e04,
        1.133304e04,
        1.145721e04,
        1.158216e04,
        1.170790e04,
        1.183443e04,
        1.196175e04,
        1.208986e04,
        1.221877e04,
        1.234847e04,
        1.247897e04,
        1.261026e04,
        1.274236e04,
        1.287525e04,
        1.300894e04,
        1.314344e04,
        1.327874e04,
        1.341484e04,
        1.355175e04,
        1.368946e04,
        1.382798e04,
        1.396731e04,
        1.410745e04,
        1.424840e04,
        1.439016e04,
        1.453273e04,
        1.467611e04,
        1.482031e04,
        1.496532e04,
        1.511115e04,
        1.525780e04,
        1.540526e04,
        1.555354e04,
        1.570264e04,
        1.585255e04,
        1.600329e04,
        1.615485e04,
        1.630723e04,
        1.646043e04,
        1.661446e04,
        1.676931e04,
        1.692498e04,
        1.708148e04,
        1.723880e04,
        1.739695e04,
        1.755593e04,
        1.771573e04,
        1.787636e04,
        1.803782e04,
        1.820010e04,
        1.836322e04,
        1.852716e04,
        1.869193e04,
        1.885754e04,
        1.902397e04,
        1.919124e04,
        1.935933e04,
        1.952826e04,
        1.969802e04,
        1.986861e04,
        2.004004e04,
        2.021229e04,
        2.038538e04,
        2.055931e04,
        2.073406e04,
        2.090965e04,
        2.108607e04,
        2.126333e04,
        2.144142e04,
        2.162034e04,
        2.180010e04,
        2.198070e04,
        2.216212e04,
        2.234438e04,
        2.252748e04,
        2.271141e04,
        2.289618e04,
        2.308177e04,
        2.326821e04,
        2.345548e04,
        2.364358e04,
        2.383251e04,
        2.402229e04,
        2.421289e04,
        2.440433e04,
        2.459660e04,
        2.478971e04,
        2.498365e04,
        2.517842e04,
        2.537403e04,
        2.557046e04,
        2.576774e04,
        2.596584e04,
        2.616477e04,
        2.636454e04,
        2.656514e04,
        2.676657e04,
        2.696883e04,
        2.717193e04,
        2.737585e04,
        2.758060e04,
        2.778618e04,
        2.799260e04,
        2.819984e04,
        2.840791e04,
        2.861680e04,
        2.882653e04,
        2.903708e04,
        2.924846e04,
        2.946066e04,
        2.967369e04,
        2.988754e04,
        3.010222e04,
        3.031773e04,
        3.053405e04,
        3.075120e04,
        3.096917e04,
        3.118797e04,
        3.140758e04,
        3.162802e04,
        3.184927e04,
        3.207135e04,
        3.229424e04,
        3.251795e04,
        3.274248e04,
        3.296783e04,
        3.319399e04,
        3.342096e04,
        3.364875e04,
        3.387736e04,
        3.410677e04,
        3.433700e04,
        3.456804e04,
        3.479989e04,
        3.503255e04,
        3.526602e04,
        3.550030e04,
        3.573539e04,
        3.597128e04,
        3.620797e04,
        3.644547e04,
        3.668378e04,
        3.692289e04,
        3.716280e04,
        3.740351e04,
        3.764502e04,
        3.788733e04,
        3.813044e04,
        3.837434e04,
        3.861904e04,
        3.886454e04,
        3.911083e04,
        3.935791e04,
        3.960579e04,
        3.985445e04,
        4.010391e04,
        4.035416e04,
        4.060519e04,
        4.085701e04,
        4.110962e04,
        4.136301e04,
        4.161719e04,
        4.187214e04,
        4.212788e04,
        4.238440e04,
        4.264170e04,
        4.289977e04,
        4.315863e04,
        4.341825e04,
        4.367866e04,
        4.393983e04,
        4.420178e04,
        4.446450e04,
        4.472798e04,
        4.499224e04,
        4.525726e04,
        4.552305e04,
        4.578960e04,
        4.605692e04,
        4.632499e04,
        4.659383e04,
        4.686343e04,
        4.713378e04,
        4.740489e04,
        4.767676e04,
        4.794938e04,
        4.822276e04,
        4.849688e04,
        4.877176e04,
        4.904738e04,
        4.932375e04,
        4.960087e04,
        4.987873e04,
        5.015733e04,
        5.043668e04,
        5.071676e04,
        5.099758e04,
        5.127915e04,
        5.156144e04,
        5.184447e04,
        5.212824e04,
        5.241273e04,
        5.269796e04,
        5.298391e04,
        5.327059e04,
        5.355800e04,
        5.384613e04,
        5.413498e04,
        5.442456e04,
        5.471485e04,
    ]
)

#  ---------------------- M = 7, I = 3 ---------------------------
M = 7
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.092314e01,
        1.808102e02,
        3.594239e02,
        5.385443e02,
        7.178153e02,
        8.971617e02,
        1.076558e03,
        1.255992e03,
        1.435461e03,
        1.614965e03,
        1.794512e03,
        1.974123e03,
        2.153834e03,
        2.333703e03,
        2.513805e03,
        2.694239e03,
        2.875119e03,
        3.056572e03,
        3.238738e03,
        3.421762e03,
        3.605792e03,
        3.790976e03,
        3.977461e03,
        4.165389e03,
        4.354895e03,
        4.546108e03,
        4.739152e03,
        4.934142e03,
        5.131184e03,
        5.330380e03,
        5.531821e03,
        5.735595e03,
        5.941780e03,
        6.150451e03,
        6.361674e03,
        6.575513e03,
        6.792026e03,
        7.011265e03,
        7.233281e03,
        7.458117e03,
        7.685816e03,
        7.916417e03,
        8.149955e03,
        8.386465e03,
        8.625976e03,
        8.868517e03,
        9.114116e03,
        9.362797e03,
        9.614584e03,
        9.869498e03,
        1.012756e04,
        1.038879e04,
        1.065321e04,
        1.092083e04,
        1.119167e04,
        1.146574e04,
        1.174307e04,
        1.202366e04,
        1.230753e04,
        1.259470e04,
        1.288517e04,
        1.317895e04,
        1.347607e04,
        1.377654e04,
        1.408035e04,
        1.438754e04,
        1.469810e04,
        1.501205e04,
        1.532940e04,
        1.565016e04,
        1.597435e04,
        1.630197e04,
        1.663303e04,
        1.696755e04,
        1.730554e04,
        1.764700e04,
        1.799195e04,
        1.834041e04,
        1.869237e04,
        1.904786e04,
        1.940687e04,
        1.976944e04,
        2.013556e04,
        2.050525e04,
        2.087851e04,
        2.125537e04,
        2.163583e04,
        2.201990e04,
        2.240760e04,
        2.279894e04,
        2.319392e04,
        2.359257e04,
        2.399490e04,
        2.440090e04,
        2.481061e04,
        2.522403e04,
        2.564117e04,
        2.606205e04,
        2.648668e04,
        2.691506e04,
        2.734723e04,
        2.778317e04,
        2.822292e04,
        2.866648e04,
        2.911386e04,
        2.956508e04,
        3.002015e04,
        3.047908e04,
        3.094189e04,
        3.140859e04,
        3.187919e04,
        3.235370e04,
        3.283214e04,
        3.331452e04,
        3.380086e04,
        3.429116e04,
        3.478544e04,
        3.528371e04,
        3.578598e04,
        3.629228e04,
        3.680260e04,
        3.731697e04,
        3.783539e04,
        3.835788e04,
        3.888445e04,
        3.941511e04,
        3.994988e04,
        4.048877e04,
        4.103179e04,
        4.157894e04,
        4.213026e04,
        4.268574e04,
        4.324540e04,
        4.380925e04,
        4.437731e04,
        4.494957e04,
        4.552607e04,
        4.610680e04,
        4.669179e04,
        4.728103e04,
        4.787455e04,
        4.847235e04,
        4.907444e04,
        4.968084e04,
        5.029156e04,
        5.090661e04,
        5.152600e04,
        5.214974e04,
        5.277783e04,
        5.341030e04,
        5.404715e04,
        5.468839e04,
        5.533403e04,
        5.598409e04,
        5.663857e04,
        5.729748e04,
        5.796083e04,
        5.862863e04,
        5.930089e04,
        5.997762e04,
        6.065884e04,
        6.134454e04,
        6.203474e04,
        6.272945e04,
        6.342867e04,
        6.413242e04,
        6.484070e04,
        6.555352e04,
        6.627089e04,
        6.699282e04,
        6.771932e04,
        6.845039e04,
        6.918604e04,
        6.992629e04,
        7.067113e04,
        7.142058e04,
        7.217464e04,
        7.293332e04,
        7.369663e04,
        7.446457e04,
        7.523716e04,
        7.601439e04,
        7.679628e04,
        7.758283e04,
        7.837405e04,
        7.916995e04,
        7.997052e04,
        8.077579e04,
        8.158575e04,
        8.240040e04,
        8.321976e04,
        8.404384e04,
        8.487263e04,
        8.570614e04,
        8.654437e04,
        8.738735e04,
        8.823506e04,
        8.908751e04,
        8.994471e04,
        9.080666e04,
        9.167337e04,
        9.254484e04,
        9.342108e04,
        9.430209e04,
        9.518787e04,
        9.607843e04,
        9.697378e04,
        9.787391e04,
        9.877883e04,
        9.968855e04,
        1.006031e05,
        1.015224e05,
        1.024465e05,
        1.033754e05,
        1.043092e05,
        1.052477e05,
        1.061911e05,
        1.071393e05,
        1.080923e05,
        1.090502e05,
        1.100128e05,
        1.109803e05,
        1.119527e05,
        1.129299e05,
        1.139119e05,
        1.148987e05,
        1.158904e05,
        1.168869e05,
        1.178883e05,
        1.188945e05,
        1.199056e05,
        1.209215e05,
        1.219423e05,
        1.229679e05,
        1.239984e05,
        1.250338e05,
        1.260739e05,
        1.271190e05,
        1.281689e05,
        1.292237e05,
        1.302833e05,
        1.313477e05,
        1.324171e05,
        1.334913e05,
        1.345703e05,
        1.356543e05,
        1.367430e05,
        1.378367e05,
        1.389352e05,
        1.400385e05,
        1.411467e05,
        1.422598e05,
        1.433777e05,
        1.445005e05,
        1.456282e05,
        1.467607e05,
        1.478980e05,
        1.490402e05,
        1.501873e05,
        1.513392e05,
        1.524960e05,
        1.536576e05,
        1.548240e05,
        1.559954e05,
        1.571715e05,
        1.583525e05,
        1.595383e05,
        1.607290e05,
        1.619245e05,
        1.631249e05,
        1.643301e05,
        1.655401e05,
        1.667549e05,
        1.679746e05,
        1.691991e05,
        1.704284e05,
        1.716626e05,
        1.729015e05,
        1.741453e05,
        1.753939e05,
        1.766473e05,
        1.779055e05,
        1.791685e05,
        1.804363e05,
        1.817088e05,
        1.829862e05,
        1.842684e05,
        1.855554e05,
        1.868471e05,
        1.881436e05,
        1.894449e05,
        1.907510e05,
        1.920619e05,
        1.933775e05,
        1.946978e05,
        1.960229e05,
        1.973528e05,
        1.986874e05,
        2.000268e05,
        2.013709e05,
        2.027197e05,
        2.040733e05,
        2.054316e05,
        2.067946e05,
        2.081624e05,
        2.095348e05,
        2.109120e05,
        2.122938e05,
        2.136804e05,
        2.150716e05,
        2.164676e05,
        2.178682e05,
        2.192735e05,
        2.206834e05,
        2.220981e05,
        2.235174e05,
        2.249413e05,
        2.263699e05,
        2.278031e05,
        2.292410e05,
        2.306835e05,
        2.321307e05,
        2.335825e05,
        2.350388e05,
        2.364998e05,
        2.379654e05,
        2.394356e05,
        2.409104e05,
        2.423898e05,
        2.438737e05,
        2.453622e05,
        2.468553e05,
        2.483530e05,
        2.498552e05,
        2.513619e05,
        2.528732e05,
        2.543890e05,
        2.559094e05,
        2.574342e05,
        2.589636e05,
        2.604975e05,
        2.620359e05,
        2.635788e05,
        2.651261e05,
        2.666780e05,
        2.682343e05,
        2.697950e05,
        2.713603e05,
        2.729299e05,
        2.745041e05,
        2.760826e05,
        2.776656e05,
        2.792530e05,
        2.808448e05,
        2.824410e05,
        2.840416e05,
        2.856466e05,
        2.872560e05,
        2.888698e05,
        2.904879e05,
        2.921104e05,
        2.937372e05,
        2.953684e05,
        2.970038e05,
        2.986437e05,
        3.002878e05,
        3.019362e05,
        3.035890e05,
        3.052460e05,
        3.069073e05,
        3.085729e05,
        3.102428e05,
        3.119169e05,
        3.135953e05,
        3.152779e05,
        3.169647e05,
    ]
)

#  ---------------------- M = 7, I = 3 ---------------------------
M = 7
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.092314e01,
        1.808102e02,
        3.594239e02,
        5.385443e02,
        7.178153e02,
        8.971617e02,
        1.076558e03,
        1.255992e03,
        1.435461e03,
        1.614965e03,
        1.794512e03,
        1.974123e03,
        2.153834e03,
        2.333703e03,
        2.513805e03,
        2.694239e03,
        2.875119e03,
        3.056572e03,
        3.238738e03,
        3.421762e03,
        3.605792e03,
        3.790976e03,
        3.977461e03,
        4.165389e03,
        4.354895e03,
        4.546108e03,
        4.739152e03,
        4.934142e03,
        5.131184e03,
        5.330380e03,
        5.531821e03,
        5.735595e03,
        5.941780e03,
        6.150451e03,
        6.361674e03,
        6.575513e03,
        6.792026e03,
        7.011265e03,
        7.233281e03,
        7.458117e03,
        7.685816e03,
        7.916417e03,
        8.149955e03,
        8.386465e03,
        8.625976e03,
        8.868517e03,
        9.114116e03,
        9.362797e03,
        9.614584e03,
        9.869498e03,
        1.012756e04,
        1.038879e04,
        1.065321e04,
        1.092083e04,
        1.119167e04,
        1.146574e04,
        1.174307e04,
        1.202366e04,
        1.230753e04,
        1.259470e04,
        1.288517e04,
        1.317895e04,
        1.347607e04,
        1.377654e04,
        1.408035e04,
        1.438754e04,
        1.469810e04,
        1.501205e04,
        1.532940e04,
        1.565016e04,
        1.597435e04,
        1.630197e04,
        1.663303e04,
        1.696755e04,
        1.730554e04,
        1.764700e04,
        1.799195e04,
        1.834041e04,
        1.869237e04,
        1.904786e04,
        1.940687e04,
        1.976944e04,
        2.013556e04,
        2.050525e04,
        2.087851e04,
        2.125537e04,
        2.163583e04,
        2.201990e04,
        2.240760e04,
        2.279894e04,
        2.319392e04,
        2.359257e04,
        2.399490e04,
        2.440090e04,
        2.481061e04,
        2.522403e04,
        2.564117e04,
        2.606205e04,
        2.648668e04,
        2.691506e04,
        2.734723e04,
        2.778317e04,
        2.822292e04,
        2.866648e04,
        2.911386e04,
        2.956508e04,
        3.002015e04,
        3.047908e04,
        3.094189e04,
        3.140859e04,
        3.187919e04,
        3.235370e04,
        3.283214e04,
        3.331452e04,
        3.380086e04,
        3.429116e04,
        3.478544e04,
        3.528371e04,
        3.578598e04,
        3.629228e04,
        3.680260e04,
        3.731697e04,
        3.783539e04,
        3.835788e04,
        3.888445e04,
        3.941511e04,
        3.994988e04,
        4.048877e04,
        4.103179e04,
        4.157894e04,
        4.213026e04,
        4.268574e04,
        4.324540e04,
        4.380925e04,
        4.437731e04,
        4.494957e04,
        4.552607e04,
        4.610680e04,
        4.669179e04,
        4.728103e04,
        4.787455e04,
        4.847235e04,
        4.907444e04,
        4.968084e04,
        5.029156e04,
        5.090661e04,
        5.152600e04,
        5.214974e04,
        5.277783e04,
        5.341030e04,
        5.404715e04,
        5.468839e04,
        5.533403e04,
        5.598409e04,
        5.663857e04,
        5.729748e04,
        5.796083e04,
        5.862863e04,
        5.930089e04,
        5.997762e04,
        6.065884e04,
        6.134454e04,
        6.203474e04,
        6.272945e04,
        6.342867e04,
        6.413242e04,
        6.484070e04,
        6.555352e04,
        6.627089e04,
        6.699282e04,
        6.771932e04,
        6.845039e04,
        6.918604e04,
        6.992629e04,
        7.067113e04,
        7.142058e04,
        7.217464e04,
        7.293332e04,
        7.369663e04,
        7.446457e04,
        7.523716e04,
        7.601439e04,
        7.679628e04,
        7.758283e04,
        7.837405e04,
        7.916995e04,
        7.997052e04,
        8.077579e04,
        8.158575e04,
        8.240040e04,
        8.321976e04,
        8.404384e04,
        8.487263e04,
        8.570614e04,
        8.654437e04,
        8.738735e04,
        8.823506e04,
        8.908751e04,
        8.994471e04,
        9.080666e04,
        9.167337e04,
        9.254484e04,
        9.342108e04,
        9.430209e04,
        9.518787e04,
        9.607843e04,
        9.697378e04,
        9.787391e04,
        9.877883e04,
        9.968855e04,
        1.006031e05,
        1.015224e05,
        1.024465e05,
        1.033754e05,
        1.043092e05,
        1.052477e05,
        1.061911e05,
        1.071393e05,
        1.080923e05,
        1.090502e05,
        1.100128e05,
        1.109803e05,
        1.119527e05,
        1.129299e05,
        1.139119e05,
        1.148987e05,
        1.158904e05,
        1.168869e05,
        1.178883e05,
        1.188945e05,
        1.199056e05,
        1.209215e05,
        1.219423e05,
        1.229679e05,
        1.239984e05,
        1.250338e05,
        1.260739e05,
        1.271190e05,
        1.281689e05,
        1.292237e05,
        1.302833e05,
        1.313477e05,
        1.324171e05,
        1.334913e05,
        1.345703e05,
        1.356543e05,
        1.367430e05,
        1.378367e05,
        1.389352e05,
        1.400385e05,
        1.411467e05,
        1.422598e05,
        1.433777e05,
        1.445005e05,
        1.456282e05,
        1.467607e05,
        1.478980e05,
        1.490402e05,
        1.501873e05,
        1.513392e05,
        1.524960e05,
        1.536576e05,
        1.548240e05,
        1.559954e05,
        1.571715e05,
        1.583525e05,
        1.595383e05,
        1.607290e05,
        1.619245e05,
        1.631249e05,
        1.643301e05,
        1.655401e05,
        1.667549e05,
        1.679746e05,
        1.691991e05,
        1.704284e05,
        1.716626e05,
        1.729015e05,
        1.741453e05,
        1.753939e05,
        1.766473e05,
        1.779055e05,
        1.791685e05,
        1.804363e05,
        1.817088e05,
        1.829862e05,
        1.842684e05,
        1.855554e05,
        1.868471e05,
        1.881436e05,
        1.894449e05,
        1.907510e05,
        1.920619e05,
        1.933775e05,
        1.946978e05,
        1.960229e05,
        1.973528e05,
        1.986874e05,
        2.000268e05,
        2.013709e05,
        2.027197e05,
        2.040733e05,
        2.054316e05,
        2.067946e05,
        2.081624e05,
        2.095348e05,
        2.109120e05,
        2.122938e05,
        2.136804e05,
        2.150716e05,
        2.164676e05,
        2.178682e05,
        2.192735e05,
        2.206834e05,
        2.220981e05,
        2.235174e05,
        2.249413e05,
        2.263699e05,
        2.278031e05,
        2.292410e05,
        2.306835e05,
        2.321307e05,
        2.335825e05,
        2.350388e05,
        2.364998e05,
        2.379654e05,
        2.394356e05,
        2.409104e05,
        2.423898e05,
        2.438737e05,
        2.453622e05,
        2.468553e05,
        2.483530e05,
        2.498552e05,
        2.513619e05,
        2.528732e05,
        2.543890e05,
        2.559094e05,
        2.574342e05,
        2.589636e05,
        2.604975e05,
        2.620359e05,
        2.635788e05,
        2.651261e05,
        2.666780e05,
        2.682343e05,
        2.697950e05,
        2.713603e05,
        2.729299e05,
        2.745041e05,
        2.760826e05,
        2.776656e05,
        2.792530e05,
        2.808448e05,
        2.824410e05,
        2.840416e05,
        2.856466e05,
        2.872560e05,
        2.888698e05,
        2.904879e05,
        2.921104e05,
        2.937372e05,
        2.953684e05,
        2.970038e05,
        2.986437e05,
        3.002878e05,
        3.019362e05,
        3.035890e05,
        3.052460e05,
        3.069073e05,
        3.085729e05,
        3.102428e05,
        3.119169e05,
        3.135953e05,
        3.152779e05,
        3.169647e05,
    ]
)

#  ---------------------- M = 7, I = 4 ---------------------------
M = 7
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.270969e00,
        1.687773e01,
        3.312258e01,
        4.941808e01,
        6.572814e01,
        8.204535e01,
        9.836721e01,
        1.146927e02,
        1.310214e02,
        1.473535e02,
        1.636904e02,
        1.800346e02,
        1.963907e02,
        2.127654e02,
        2.291674e02,
        2.456073e02,
        2.620976e02,
        2.786516e02,
        2.952836e02,
        3.120083e02,
        3.288405e02,
        3.457946e02,
        3.628847e02,
        3.801244e02,
        3.975266e02,
        4.151032e02,
        4.328657e02,
        4.508247e02,
        4.689898e02,
        4.873702e02,
        5.059742e02,
        5.248095e02,
        5.438832e02,
        5.632018e02,
        5.827712e02,
        6.025970e02,
        6.226842e02,
        6.430374e02,
        6.636609e02,
        6.845586e02,
        7.057342e02,
        7.271909e02,
        7.489318e02,
        7.709599e02,
        7.932777e02,
        8.158878e02,
        8.387923e02,
        8.619935e02,
        8.854934e02,
        9.092938e02,
        9.333964e02,
        9.578031e02,
        9.825153e02,
        1.007535e03,
        1.032862e03,
        1.058500e03,
        1.084448e03,
        1.110709e03,
        1.137284e03,
        1.164173e03,
        1.191378e03,
        1.218900e03,
        1.246741e03,
        1.274900e03,
        1.303379e03,
        1.332180e03,
        1.361303e03,
        1.390749e03,
        1.420519e03,
        1.450614e03,
        1.481036e03,
        1.511784e03,
        1.542861e03,
        1.574267e03,
        1.606003e03,
        1.638069e03,
        1.670468e03,
        1.703200e03,
        1.736266e03,
        1.769667e03,
        1.803403e03,
        1.837477e03,
        1.871889e03,
        1.906639e03,
        1.941730e03,
        1.977162e03,
        2.012936e03,
        2.049053e03,
        2.085515e03,
        2.122321e03,
        2.159474e03,
        2.196974e03,
        2.234823e03,
        2.273021e03,
        2.311570e03,
        2.350471e03,
        2.389724e03,
        2.429331e03,
        2.469293e03,
        2.509612e03,
        2.550287e03,
        2.591320e03,
        2.632713e03,
        2.674467e03,
        2.716582e03,
        2.759059e03,
        2.801900e03,
        2.845107e03,
        2.888679e03,
        2.932618e03,
        2.976925e03,
        3.021602e03,
        3.066649e03,
        3.112067e03,
        3.157858e03,
        3.204022e03,
        3.250562e03,
        3.297476e03,
        3.344768e03,
        3.392438e03,
        3.440486e03,
        3.488915e03,
        3.537724e03,
        3.586916e03,
        3.636491e03,
        3.686450e03,
        3.736794e03,
        3.787524e03,
        3.838641e03,
        3.890147e03,
        3.942042e03,
        3.994327e03,
        4.047003e03,
        4.100071e03,
        4.153533e03,
        4.207388e03,
        4.261638e03,
        4.316284e03,
        4.371327e03,
        4.426768e03,
        4.482608e03,
        4.538846e03,
        4.595486e03,
        4.652526e03,
        4.709969e03,
        4.767815e03,
        4.826064e03,
        4.884718e03,
        4.943778e03,
        5.003244e03,
        5.063117e03,
        5.123398e03,
        5.184088e03,
        5.245187e03,
        5.306697e03,
        5.368617e03,
        5.430949e03,
        5.493693e03,
        5.556851e03,
        5.620423e03,
        5.684409e03,
        5.748810e03,
        5.813627e03,
        5.878861e03,
        5.944512e03,
        6.010580e03,
        6.077068e03,
        6.143974e03,
        6.211300e03,
        6.279047e03,
        6.347214e03,
        6.415803e03,
        6.484814e03,
        6.554247e03,
        6.624104e03,
        6.694384e03,
        6.765089e03,
        6.836218e03,
        6.907772e03,
        6.979752e03,
        7.052159e03,
        7.124992e03,
        7.198252e03,
        7.271939e03,
        7.346055e03,
        7.420599e03,
        7.495571e03,
        7.570973e03,
        7.646805e03,
        7.723066e03,
        7.799758e03,
        7.876881e03,
        7.954435e03,
        8.032420e03,
        8.110837e03,
        8.189686e03,
        8.268968e03,
        8.348682e03,
        8.428830e03,
        8.509410e03,
        8.590424e03,
        8.671872e03,
        8.753754e03,
        8.836071e03,
        8.918822e03,
        9.002007e03,
        9.085628e03,
        9.169684e03,
        9.254175e03,
        9.339102e03,
        9.424465e03,
        9.510263e03,
        9.596498e03,
        9.683169e03,
        9.770276e03,
        9.857820e03,
        9.945801e03,
        1.003422e04,
        1.012307e04,
        1.021236e04,
        1.030209e04,
        1.039226e04,
        1.048286e04,
        1.057390e04,
        1.066537e04,
        1.075729e04,
        1.084964e04,
        1.094243e04,
        1.103566e04,
        1.112932e04,
        1.122342e04,
        1.131796e04,
        1.141293e04,
        1.150835e04,
        1.160420e04,
        1.170048e04,
        1.179721e04,
        1.189437e04,
        1.199197e04,
        1.209001e04,
        1.218848e04,
        1.228739e04,
        1.238673e04,
        1.248652e04,
        1.258674e04,
        1.268739e04,
        1.278848e04,
        1.289001e04,
        1.299198e04,
        1.309438e04,
        1.319721e04,
        1.330048e04,
        1.340419e04,
        1.350833e04,
        1.361290e04,
        1.371791e04,
        1.382336e04,
        1.392924e04,
        1.403555e04,
        1.414230e04,
        1.424948e04,
        1.435709e04,
        1.446514e04,
        1.457362e04,
        1.468253e04,
        1.479187e04,
        1.490165e04,
        1.501185e04,
        1.512249e04,
        1.523356e04,
        1.534506e04,
        1.545699e04,
        1.556935e04,
        1.568214e04,
        1.579536e04,
        1.590901e04,
        1.602309e04,
        1.613759e04,
        1.625253e04,
        1.636789e04,
        1.648367e04,
        1.659989e04,
        1.671653e04,
        1.683360e04,
        1.695109e04,
        1.706900e04,
        1.718735e04,
        1.730611e04,
        1.742530e04,
        1.754492e04,
        1.766495e04,
        1.778541e04,
        1.790629e04,
        1.802759e04,
        1.814932e04,
        1.827146e04,
        1.839402e04,
        1.851701e04,
        1.864041e04,
        1.876423e04,
        1.888847e04,
        1.901313e04,
        1.913820e04,
        1.926369e04,
        1.938959e04,
        1.951592e04,
        1.964265e04,
        1.976980e04,
        1.989737e04,
        2.002534e04,
        2.015373e04,
        2.028253e04,
        2.041175e04,
        2.054137e04,
        2.067141e04,
        2.080185e04,
        2.093270e04,
        2.106396e04,
        2.119563e04,
        2.132771e04,
        2.146019e04,
        2.159308e04,
        2.172638e04,
        2.186007e04,
        2.199418e04,
        2.212868e04,
        2.226359e04,
        2.239890e04,
        2.253461e04,
        2.267073e04,
        2.280724e04,
        2.294415e04,
        2.308146e04,
        2.321917e04,
        2.335728e04,
        2.349578e04,
        2.363468e04,
        2.377397e04,
        2.391366e04,
        2.405374e04,
        2.419421e04,
        2.433508e04,
        2.447634e04,
        2.461799e04,
        2.476002e04,
        2.490245e04,
        2.504527e04,
        2.518847e04,
        2.533206e04,
        2.547604e04,
        2.562040e04,
        2.576515e04,
        2.591028e04,
        2.605580e04,
        2.620169e04,
        2.634797e04,
        2.649463e04,
        2.664167e04,
        2.678908e04,
        2.693688e04,
        2.708505e04,
        2.723360e04,
        2.738253e04,
        2.753183e04,
        2.768151e04,
        2.783155e04,
        2.798198e04,
        2.813277e04,
        2.828393e04,
        2.843547e04,
        2.858737e04,
        2.873964e04,
        2.889228e04,
        2.904528e04,
        2.919865e04,
        2.935239e04,
    ]
)

#  ---------------------- M = 7, I = 5 ---------------------------
M = 7
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.157469e01,
        1.910172e02,
        3.804688e02,
        5.704593e02,
        7.606097e02,
        9.508401e02,
        1.141123e03,
        1.331447e03,
        1.521808e03,
        1.712208e03,
        1.902659e03,
        2.093190e03,
        2.283847e03,
        2.474702e03,
        2.665851e03,
        2.857410e03,
        3.049515e03,
        3.242316e03,
        3.435973e03,
        3.630652e03,
        3.826519e03,
        4.023741e03,
        4.222477e03,
        4.422884e03,
        4.625110e03,
        4.829294e03,
        5.035569e03,
        5.244058e03,
        5.454873e03,
        5.668122e03,
        5.883902e03,
        6.102304e03,
        6.323410e03,
        6.547298e03,
        6.774037e03,
        7.003694e03,
        7.236326e03,
        7.471990e03,
        7.710735e03,
        7.952609e03,
        8.197654e03,
        8.445909e03,
        8.697412e03,
        8.952197e03,
        9.210295e03,
        9.471735e03,
        9.736545e03,
        1.000475e04,
        1.027637e04,
        1.055144e04,
        1.082997e04,
        1.111198e04,
        1.139749e04,
        1.168652e04,
        1.197908e04,
        1.227520e04,
        1.257488e04,
        1.287815e04,
        1.318501e04,
        1.349548e04,
        1.380958e04,
        1.412731e04,
        1.444869e04,
        1.477374e04,
        1.510246e04,
        1.543486e04,
        1.577096e04,
        1.611078e04,
        1.645431e04,
        1.680158e04,
        1.715259e04,
        1.750736e04,
        1.786589e04,
        1.822821e04,
        1.859431e04,
        1.896422e04,
        1.933794e04,
        1.971548e04,
        2.009687e04,
        2.048210e04,
        2.087119e04,
        2.126415e04,
        2.166100e04,
        2.206174e04,
        2.246639e04,
        2.287496e04,
        2.328746e04,
        2.370391e04,
        2.412431e04,
        2.454868e04,
        2.497703e04,
        2.540938e04,
        2.584574e04,
        2.628611e04,
        2.673051e04,
        2.717896e04,
        2.763147e04,
        2.808804e04,
        2.854870e04,
        2.901346e04,
        2.948232e04,
        2.995531e04,
        3.043243e04,
        3.091370e04,
        3.139913e04,
        3.188873e04,
        3.238252e04,
        3.288051e04,
        3.338272e04,
        3.388915e04,
        3.439982e04,
        3.491474e04,
        3.543392e04,
        3.595739e04,
        3.648514e04,
        3.701720e04,
        3.755358e04,
        3.809428e04,
        3.863933e04,
        3.918873e04,
        3.974250e04,
        4.030065e04,
        4.086319e04,
        4.143014e04,
        4.200151e04,
        4.257730e04,
        4.315754e04,
        4.374223e04,
        4.433139e04,
        4.492502e04,
        4.552315e04,
        4.612578e04,
        4.673292e04,
        4.734459e04,
        4.796079e04,
        4.858154e04,
        4.920686e04,
        4.983674e04,
        5.047121e04,
        5.111027e04,
        5.175393e04,
        5.240221e04,
        5.305511e04,
        5.371265e04,
        5.437484e04,
        5.504169e04,
        5.571320e04,
        5.638939e04,
        5.707027e04,
        5.775584e04,
        5.844613e04,
        5.914113e04,
        5.984085e04,
        6.054532e04,
        6.125452e04,
        6.196849e04,
        6.268721e04,
        6.341071e04,
        6.413899e04,
        6.487206e04,
        6.560993e04,
        6.635261e04,
        6.710010e04,
        6.785242e04,
        6.860957e04,
        6.937155e04,
        7.013839e04,
        7.091008e04,
        7.168663e04,
        7.246805e04,
        7.325435e04,
        7.404554e04,
        7.484161e04,
        7.564259e04,
        7.644847e04,
        7.725926e04,
        7.807497e04,
        7.889561e04,
        7.972118e04,
        8.055169e04,
        8.138714e04,
        8.222754e04,
        8.307289e04,
        8.392321e04,
        8.477849e04,
        8.563874e04,
        8.650398e04,
        8.737419e04,
        8.824940e04,
        8.912959e04,
        9.001479e04,
        9.090498e04,
        9.180018e04,
        9.270040e04,
        9.360563e04,
        9.451588e04,
        9.543115e04,
        9.635146e04,
        9.727679e04,
        9.820716e04,
        9.914257e04,
        1.000830e05,
        1.010285e05,
        1.019791e05,
        1.029347e05,
        1.038953e05,
        1.048611e05,
        1.058318e05,
        1.068077e05,
        1.077886e05,
        1.087746e05,
        1.097656e05,
        1.107617e05,
        1.117630e05,
        1.127692e05,
        1.137806e05,
        1.147971e05,
        1.158186e05,
        1.168452e05,
        1.178769e05,
        1.189137e05,
        1.199556e05,
        1.210026e05,
        1.220546e05,
        1.231118e05,
        1.241741e05,
        1.252414e05,
        1.263139e05,
        1.273914e05,
        1.284741e05,
        1.295618e05,
        1.306547e05,
        1.317526e05,
        1.328556e05,
        1.339638e05,
        1.350770e05,
        1.361953e05,
        1.373188e05,
        1.384473e05,
        1.395809e05,
        1.407197e05,
        1.418635e05,
        1.430124e05,
        1.441664e05,
        1.453255e05,
        1.464897e05,
        1.476590e05,
        1.488334e05,
        1.500129e05,
        1.511974e05,
        1.523871e05,
        1.535818e05,
        1.547816e05,
        1.559865e05,
        1.571964e05,
        1.584115e05,
        1.596316e05,
        1.608568e05,
        1.620871e05,
        1.633224e05,
        1.645628e05,
        1.658083e05,
        1.670588e05,
        1.683144e05,
        1.695750e05,
        1.708407e05,
        1.721114e05,
        1.733872e05,
        1.746680e05,
        1.759539e05,
        1.772448e05,
        1.785407e05,
        1.798417e05,
        1.811477e05,
        1.824587e05,
        1.837748e05,
        1.850958e05,
        1.864219e05,
        1.877530e05,
        1.890890e05,
        1.904301e05,
        1.917762e05,
        1.931273e05,
        1.944833e05,
        1.958443e05,
        1.972104e05,
        1.985814e05,
        1.999573e05,
        2.013382e05,
        2.027241e05,
        2.041150e05,
        2.055107e05,
        2.069115e05,
        2.083171e05,
        2.097278e05,
        2.111433e05,
        2.125638e05,
        2.139891e05,
        2.154194e05,
        2.168546e05,
        2.182947e05,
        2.197397e05,
        2.211896e05,
        2.226444e05,
        2.241041e05,
        2.255686e05,
        2.270380e05,
        2.285122e05,
        2.299914e05,
        2.314753e05,
        2.329641e05,
        2.344578e05,
        2.359562e05,
        2.374595e05,
        2.389676e05,
        2.404806e05,
        2.419983e05,
        2.435208e05,
        2.450481e05,
        2.465802e05,
        2.481171e05,
        2.496587e05,
        2.512051e05,
        2.527563e05,
        2.543122e05,
        2.558729e05,
        2.574382e05,
        2.590083e05,
        2.605832e05,
        2.621627e05,
        2.637469e05,
        2.653359e05,
        2.669295e05,
        2.685278e05,
        2.701308e05,
        2.717384e05,
        2.733507e05,
        2.749677e05,
        2.765893e05,
        2.782155e05,
        2.798463e05,
        2.814818e05,
        2.831219e05,
        2.847665e05,
        2.864158e05,
        2.880697e05,
        2.897281e05,
        2.913911e05,
        2.930586e05,
        2.947307e05,
        2.964074e05,
        2.980885e05,
        2.997742e05,
        3.014644e05,
        3.031591e05,
        3.048584e05,
        3.065620e05,
        3.082702e05,
        3.099829e05,
        3.117000e05,
        3.134215e05,
        3.151475e05,
        3.168780e05,
        3.186128e05,
        3.203521e05,
        3.220958e05,
        3.238439e05,
        3.255963e05,
        3.273532e05,
        3.291144e05,
        3.308799e05,
        3.326499e05,
        3.344241e05,
        3.362027e05,
        3.379856e05,
        3.397728e05,
    ]
)

#  ---------------------- M = 7, I = 5 ---------------------------
M = 7
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.157469e01,
        1.910172e02,
        3.804688e02,
        5.704593e02,
        7.606097e02,
        9.508401e02,
        1.141123e03,
        1.331447e03,
        1.521808e03,
        1.712208e03,
        1.902659e03,
        2.093190e03,
        2.283847e03,
        2.474702e03,
        2.665851e03,
        2.857410e03,
        3.049515e03,
        3.242316e03,
        3.435973e03,
        3.630652e03,
        3.826519e03,
        4.023741e03,
        4.222477e03,
        4.422884e03,
        4.625110e03,
        4.829294e03,
        5.035569e03,
        5.244058e03,
        5.454873e03,
        5.668122e03,
        5.883902e03,
        6.102304e03,
        6.323410e03,
        6.547298e03,
        6.774037e03,
        7.003694e03,
        7.236326e03,
        7.471990e03,
        7.710735e03,
        7.952609e03,
        8.197654e03,
        8.445909e03,
        8.697412e03,
        8.952197e03,
        9.210295e03,
        9.471735e03,
        9.736545e03,
        1.000475e04,
        1.027637e04,
        1.055144e04,
        1.082997e04,
        1.111198e04,
        1.139749e04,
        1.168652e04,
        1.197908e04,
        1.227520e04,
        1.257488e04,
        1.287815e04,
        1.318501e04,
        1.349548e04,
        1.380958e04,
        1.412731e04,
        1.444869e04,
        1.477374e04,
        1.510246e04,
        1.543486e04,
        1.577096e04,
        1.611078e04,
        1.645431e04,
        1.680158e04,
        1.715259e04,
        1.750736e04,
        1.786589e04,
        1.822821e04,
        1.859431e04,
        1.896422e04,
        1.933794e04,
        1.971548e04,
        2.009687e04,
        2.048210e04,
        2.087119e04,
        2.126415e04,
        2.166100e04,
        2.206174e04,
        2.246639e04,
        2.287496e04,
        2.328746e04,
        2.370391e04,
        2.412431e04,
        2.454868e04,
        2.497703e04,
        2.540938e04,
        2.584574e04,
        2.628611e04,
        2.673051e04,
        2.717896e04,
        2.763147e04,
        2.808804e04,
        2.854870e04,
        2.901346e04,
        2.948232e04,
        2.995531e04,
        3.043243e04,
        3.091370e04,
        3.139913e04,
        3.188873e04,
        3.238252e04,
        3.288051e04,
        3.338272e04,
        3.388915e04,
        3.439982e04,
        3.491474e04,
        3.543392e04,
        3.595739e04,
        3.648514e04,
        3.701720e04,
        3.755358e04,
        3.809428e04,
        3.863933e04,
        3.918873e04,
        3.974250e04,
        4.030065e04,
        4.086319e04,
        4.143014e04,
        4.200151e04,
        4.257730e04,
        4.315754e04,
        4.374223e04,
        4.433139e04,
        4.492502e04,
        4.552315e04,
        4.612578e04,
        4.673292e04,
        4.734459e04,
        4.796079e04,
        4.858154e04,
        4.920686e04,
        4.983674e04,
        5.047121e04,
        5.111027e04,
        5.175393e04,
        5.240221e04,
        5.305511e04,
        5.371265e04,
        5.437484e04,
        5.504169e04,
        5.571320e04,
        5.638939e04,
        5.707027e04,
        5.775584e04,
        5.844613e04,
        5.914113e04,
        5.984085e04,
        6.054532e04,
        6.125452e04,
        6.196849e04,
        6.268721e04,
        6.341071e04,
        6.413899e04,
        6.487206e04,
        6.560993e04,
        6.635261e04,
        6.710010e04,
        6.785242e04,
        6.860957e04,
        6.937155e04,
        7.013839e04,
        7.091008e04,
        7.168663e04,
        7.246805e04,
        7.325435e04,
        7.404554e04,
        7.484161e04,
        7.564259e04,
        7.644847e04,
        7.725926e04,
        7.807497e04,
        7.889561e04,
        7.972118e04,
        8.055169e04,
        8.138714e04,
        8.222754e04,
        8.307289e04,
        8.392321e04,
        8.477849e04,
        8.563874e04,
        8.650398e04,
        8.737419e04,
        8.824940e04,
        8.912959e04,
        9.001479e04,
        9.090498e04,
        9.180018e04,
        9.270040e04,
        9.360563e04,
        9.451588e04,
        9.543115e04,
        9.635146e04,
        9.727679e04,
        9.820716e04,
        9.914257e04,
        1.000830e05,
        1.010285e05,
        1.019791e05,
        1.029347e05,
        1.038953e05,
        1.048611e05,
        1.058318e05,
        1.068077e05,
        1.077886e05,
        1.087746e05,
        1.097656e05,
        1.107617e05,
        1.117630e05,
        1.127692e05,
        1.137806e05,
        1.147971e05,
        1.158186e05,
        1.168452e05,
        1.178769e05,
        1.189137e05,
        1.199556e05,
        1.210026e05,
        1.220546e05,
        1.231118e05,
        1.241741e05,
        1.252414e05,
        1.263139e05,
        1.273914e05,
        1.284741e05,
        1.295618e05,
        1.306547e05,
        1.317526e05,
        1.328556e05,
        1.339638e05,
        1.350770e05,
        1.361953e05,
        1.373188e05,
        1.384473e05,
        1.395809e05,
        1.407197e05,
        1.418635e05,
        1.430124e05,
        1.441664e05,
        1.453255e05,
        1.464897e05,
        1.476590e05,
        1.488334e05,
        1.500129e05,
        1.511974e05,
        1.523871e05,
        1.535818e05,
        1.547816e05,
        1.559865e05,
        1.571964e05,
        1.584115e05,
        1.596316e05,
        1.608568e05,
        1.620871e05,
        1.633224e05,
        1.645628e05,
        1.658083e05,
        1.670588e05,
        1.683144e05,
        1.695750e05,
        1.708407e05,
        1.721114e05,
        1.733872e05,
        1.746680e05,
        1.759539e05,
        1.772448e05,
        1.785407e05,
        1.798417e05,
        1.811477e05,
        1.824587e05,
        1.837748e05,
        1.850958e05,
        1.864219e05,
        1.877530e05,
        1.890890e05,
        1.904301e05,
        1.917762e05,
        1.931273e05,
        1.944833e05,
        1.958443e05,
        1.972104e05,
        1.985814e05,
        1.999573e05,
        2.013382e05,
        2.027241e05,
        2.041150e05,
        2.055107e05,
        2.069115e05,
        2.083171e05,
        2.097278e05,
        2.111433e05,
        2.125638e05,
        2.139891e05,
        2.154194e05,
        2.168546e05,
        2.182947e05,
        2.197397e05,
        2.211896e05,
        2.226444e05,
        2.241041e05,
        2.255686e05,
        2.270380e05,
        2.285122e05,
        2.299914e05,
        2.314753e05,
        2.329641e05,
        2.344578e05,
        2.359562e05,
        2.374595e05,
        2.389676e05,
        2.404806e05,
        2.419983e05,
        2.435208e05,
        2.450481e05,
        2.465802e05,
        2.481171e05,
        2.496587e05,
        2.512051e05,
        2.527563e05,
        2.543122e05,
        2.558729e05,
        2.574382e05,
        2.590083e05,
        2.605832e05,
        2.621627e05,
        2.637469e05,
        2.653359e05,
        2.669295e05,
        2.685278e05,
        2.701308e05,
        2.717384e05,
        2.733507e05,
        2.749677e05,
        2.765893e05,
        2.782155e05,
        2.798463e05,
        2.814818e05,
        2.831219e05,
        2.847665e05,
        2.864158e05,
        2.880697e05,
        2.897281e05,
        2.913911e05,
        2.930586e05,
        2.947307e05,
        2.964074e05,
        2.980885e05,
        2.997742e05,
        3.014644e05,
        3.031591e05,
        3.048584e05,
        3.065620e05,
        3.082702e05,
        3.099829e05,
        3.117000e05,
        3.134215e05,
        3.151475e05,
        3.168780e05,
        3.186128e05,
        3.203521e05,
        3.220958e05,
        3.238439e05,
        3.255963e05,
        3.273532e05,
        3.291144e05,
        3.308799e05,
        3.326499e05,
        3.344241e05,
        3.362027e05,
        3.379856e05,
        3.397728e05,
    ]
)

#  ---------------------- M = 7, I = 6 ---------------------------
M = 7
I = 6
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[5]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        7.197400e01,
        5.586187e02,
        1.111229e03,
        1.665410e03,
        2.220057e03,
        2.774938e03,
        3.329973e03,
        3.885127e03,
        4.440388e03,
        4.995759e03,
        5.551272e03,
        6.106999e03,
        6.663066e03,
        7.219666e03,
        7.777057e03,
        8.335560e03,
        8.895550e03,
        9.457446e03,
        1.002170e04,
        1.058877e04,
        1.115914e04,
        1.173327e04,
        1.231163e04,
        1.289467e04,
        1.348281e04,
        1.407645e04,
        1.467598e04,
        1.528176e04,
        1.589412e04,
        1.651337e04,
        1.713979e04,
        1.777365e04,
        1.841520e04,
        1.906465e04,
        1.972223e04,
        2.038811e04,
        2.106247e04,
        2.174549e04,
        2.243730e04,
        2.313805e04,
        2.384786e04,
        2.456684e04,
        2.529512e04,
        2.603279e04,
        2.677994e04,
        2.753666e04,
        2.830303e04,
        2.907913e04,
        2.986503e04,
        3.066080e04,
        3.146649e04,
        3.228216e04,
        3.310788e04,
        3.394370e04,
        3.478965e04,
        3.564581e04,
        3.651220e04,
        3.738887e04,
        3.827587e04,
        3.917323e04,
        4.008100e04,
        4.099922e04,
        4.192792e04,
        4.286713e04,
        4.381690e04,
        4.477727e04,
        4.574825e04,
        4.672990e04,
        4.772225e04,
        4.872532e04,
        4.973916e04,
        5.076379e04,
        5.179925e04,
        5.284558e04,
        5.390280e04,
        5.497096e04,
        5.605008e04,
        5.714021e04,
        5.824136e04,
        5.935359e04,
        6.047692e04,
        6.161139e04,
        6.275703e04,
        6.391387e04,
        6.508197e04,
        6.626134e04,
        6.745202e04,
        6.865406e04,
        6.986749e04,
        7.109234e04,
        7.232865e04,
        7.357646e04,
        7.483581e04,
        7.610672e04,
        7.738925e04,
        7.868343e04,
        7.998930e04,
        8.130689e04,
        8.263624e04,
        8.397740e04,
        8.533040e04,
        8.669528e04,
        8.807207e04,
        8.946082e04,
        9.086157e04,
        9.227436e04,
        9.369922e04,
        9.513619e04,
        9.658532e04,
        9.804664e04,
        9.952019e04,
        1.010060e05,
        1.025041e05,
        1.040146e05,
        1.055375e05,
        1.070728e05,
        1.086206e05,
        1.101808e05,
        1.117536e05,
        1.133390e05,
        1.149371e05,
        1.165477e05,
        1.181711e05,
        1.198072e05,
        1.214561e05,
        1.231178e05,
        1.247924e05,
        1.264798e05,
        1.281802e05,
        1.298935e05,
        1.316198e05,
        1.333592e05,
        1.351116e05,
        1.368771e05,
        1.386558e05,
        1.404477e05,
        1.422528e05,
        1.440711e05,
        1.459027e05,
        1.477476e05,
        1.496059e05,
        1.514775e05,
        1.533626e05,
        1.552611e05,
        1.571732e05,
        1.590987e05,
        1.610378e05,
        1.629905e05,
        1.649567e05,
        1.669367e05,
        1.689303e05,
        1.709376e05,
        1.729586e05,
        1.749935e05,
        1.770421e05,
        1.791045e05,
        1.811808e05,
        1.832710e05,
        1.853751e05,
        1.874931e05,
        1.896251e05,
        1.917711e05,
        1.939311e05,
        1.961052e05,
        1.982934e05,
        2.004956e05,
        2.027120e05,
        2.049425e05,
        2.071872e05,
        2.094461e05,
        2.117192e05,
        2.140066e05,
        2.163082e05,
        2.186241e05,
        2.209544e05,
        2.232989e05,
        2.256579e05,
        2.280312e05,
        2.304189e05,
        2.328211e05,
        2.352376e05,
        2.376687e05,
        2.401142e05,
        2.425742e05,
        2.450488e05,
        2.475379e05,
        2.500415e05,
        2.525597e05,
        2.550925e05,
        2.576400e05,
        2.602020e05,
        2.627787e05,
        2.653700e05,
        2.679761e05,
        2.705968e05,
        2.732322e05,
        2.758823e05,
        2.785471e05,
        2.812268e05,
        2.839211e05,
        2.866302e05,
        2.893542e05,
        2.920929e05,
        2.948464e05,
        2.976148e05,
        3.003980e05,
        3.031960e05,
        3.060089e05,
        3.088366e05,
        3.116792e05,
        3.145368e05,
        3.174092e05,
        3.202965e05,
        3.231987e05,
        3.261158e05,
        3.290479e05,
        3.319949e05,
        3.349569e05,
        3.379338e05,
        3.409257e05,
        3.439325e05,
        3.469543e05,
        3.499911e05,
        3.530429e05,
        3.561096e05,
        3.591914e05,
        3.622881e05,
        3.653999e05,
        3.685267e05,
        3.716684e05,
        3.748252e05,
        3.779970e05,
        3.811839e05,
        3.843857e05,
        3.876026e05,
        3.908345e05,
        3.940814e05,
        3.973434e05,
        4.006204e05,
        4.039124e05,
        4.072195e05,
        4.105416e05,
        4.138787e05,
        4.172308e05,
        4.205980e05,
        4.239803e05,
        4.273775e05,
        4.307898e05,
        4.342171e05,
        4.376594e05,
        4.411168e05,
        4.445892e05,
        4.480765e05,
        4.515790e05,
        4.550964e05,
        4.586288e05,
        4.621762e05,
        4.657386e05,
        4.693160e05,
        4.729085e05,
        4.765158e05,
        4.801382e05,
        4.837756e05,
        4.874279e05,
        4.910951e05,
        4.947774e05,
        4.984745e05,
        5.021866e05,
        5.059137e05,
        5.096557e05,
        5.134126e05,
        5.171844e05,
        5.209711e05,
        5.247727e05,
        5.285892e05,
        5.324206e05,
        5.362668e05,
        5.401279e05,
        5.440038e05,
        5.478946e05,
        5.518002e05,
        5.557207e05,
        5.596559e05,
        5.636060e05,
        5.675708e05,
        5.715504e05,
        5.755448e05,
        5.795539e05,
        5.835777e05,
        5.876163e05,
        5.916696e05,
        5.957376e05,
        5.998203e05,
        6.039177e05,
        6.080298e05,
        6.121564e05,
        6.162978e05,
        6.204537e05,
        6.246243e05,
        6.288094e05,
        6.330091e05,
        6.372234e05,
        6.414523e05,
        6.456957e05,
        6.499535e05,
        6.542259e05,
        6.585128e05,
        6.628142e05,
        6.671300e05,
        6.714602e05,
        6.758049e05,
        6.801639e05,
        6.845374e05,
        6.889252e05,
        6.933274e05,
        6.977439e05,
        7.021747e05,
        7.066198e05,
        7.110792e05,
        7.155528e05,
        7.200407e05,
        7.245429e05,
        7.290592e05,
        7.335897e05,
        7.381343e05,
        7.426932e05,
        7.472661e05,
        7.518531e05,
        7.564543e05,
        7.610694e05,
        7.656987e05,
        7.703419e05,
        7.749992e05,
        7.796704e05,
        7.843556e05,
        7.890547e05,
        7.937678e05,
        7.984947e05,
        8.032355e05,
        8.079901e05,
        8.127586e05,
        8.175409e05,
        8.223370e05,
        8.271468e05,
        8.319703e05,
        8.368076e05,
        8.416586e05,
        8.465232e05,
        8.514015e05,
        8.562933e05,
        8.611988e05,
        8.661178e05,
        8.710504e05,
        8.759965e05,
        8.809561e05,
        8.859292e05,
        8.909157e05,
        8.959156e05,
        9.009290e05,
        9.059557e05,
        9.109957e05,
        9.160491e05,
        9.211157e05,
        9.261956e05,
        9.312888e05,
        9.363952e05,
        9.415147e05,
        9.466474e05,
        9.517933e05,
        9.569522e05,
        9.621243e05,
        9.673094e05,
        9.725075e05,
        9.777186e05,
        9.829427e05,
        9.881797e05,
    ]
)

#  ---------------------- M = 8, I = 1 ---------------------------
M = 8
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.187882e01,
        5.438944e01,
        1.046755e02,
        1.605493e02,
        2.237848e02,
        2.936074e02,
        3.693790e02,
        4.493987e02,
        5.325091e02,
        6.180282e02,
        7.054511e02,
        7.943992e02,
        8.845954e02,
        9.758218e02,
        1.067921e03,
        1.160750e03,
        1.254256e03,
        1.348352e03,
        1.443007e03,
        1.538179e03,
        1.633904e03,
        1.730134e03,
        1.826913e03,
        1.924263e03,
        2.022194e03,
        2.120743e03,
        2.219926e03,
        2.319814e03,
        2.420412e03,
        2.521749e03,
        2.623906e03,
        2.726868e03,
        2.830696e03,
        2.935398e03,
        3.041038e03,
        3.147623e03,
        3.255221e03,
        3.363806e03,
        3.473413e03,
        3.584110e03,
        3.695900e03,
        3.808781e03,
        3.922787e03,
        4.037949e03,
        4.154301e03,
        4.271797e03,
        4.390503e03,
        4.510451e03,
        4.631630e03,
        4.754023e03,
        4.877700e03,
        5.002642e03,
        5.128876e03,
        5.256379e03,
        5.385224e03,
        5.515334e03,
        5.646783e03,
        5.779540e03,
        5.913678e03,
        6.049113e03,
        6.185916e03,
        6.324108e03,
        6.463595e03,
        6.604508e03,
        6.746748e03,
        6.890451e03,
        7.035454e03,
        7.181892e03,
        7.329656e03,
        7.478888e03,
        7.629473e03,
        7.781490e03,
        7.934955e03,
        8.089742e03,
        8.246004e03,
        8.403681e03,
        8.562787e03,
        8.723261e03,
        8.885184e03,
        9.048571e03,
        9.213358e03,
        9.379626e03,
        9.547237e03,
        9.716351e03,
        9.886903e03,
        1.005890e04,
        1.023227e04,
        1.040718e04,
        1.058348e04,
        1.076127e04,
        1.094045e04,
        1.112113e04,
        1.130323e04,
        1.148684e04,
        1.167188e04,
        1.185836e04,
        1.204629e04,
        1.223566e04,
        1.242649e04,
        1.261887e04,
        1.281263e04,
        1.300787e04,
        1.320458e04,
        1.340278e04,
        1.360238e04,
        1.380347e04,
        1.400606e04,
        1.421006e04,
        1.441557e04,
        1.462260e04,
        1.483105e04,
        1.504093e04,
        1.525234e04,
        1.546529e04,
        1.567956e04,
        1.589539e04,
        1.611265e04,
        1.633148e04,
        1.655176e04,
        1.677349e04,
        1.699667e04,
        1.722133e04,
        1.744744e04,
        1.767514e04,
        1.790419e04,
        1.813483e04,
        1.836696e04,
        1.860044e04,
        1.883553e04,
        1.907199e04,
        1.931006e04,
        1.954950e04,
        1.979055e04,
        2.003299e04,
        2.027692e04,
        2.052237e04,
        2.076931e04,
        2.101764e04,
        2.126762e04,
        2.151898e04,
        2.177186e04,
        2.202612e04,
        2.228205e04,
        2.253936e04,
        2.279821e04,
        2.305845e04,
        2.332023e04,
        2.358354e04,
        2.384840e04,
        2.411465e04,
        2.438245e04,
        2.465165e04,
        2.492240e04,
        2.519456e04,
        2.546842e04,
        2.574354e04,
        2.602037e04,
        2.629846e04,
        2.657826e04,
        2.685948e04,
        2.714211e04,
        2.742631e04,
        2.771194e04,
        2.799913e04,
        2.828791e04,
        2.857810e04,
        2.886972e04,
        2.916292e04,
        2.945755e04,
        2.975376e04,
        3.005141e04,
        3.035064e04,
        3.065130e04,
        3.095340e04,
        3.125708e04,
        3.156221e04,
    ]
)

#  ---------------------- M = 8, I = 2 ---------------------------
M = 8
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        7.941320e00,
        3.745917e01,
        7.221608e01,
        1.108280e02,
        1.545250e02,
        2.027736e02,
        2.552148e02,
        3.105134e02,
        3.679482e02,
        4.270480e02,
        4.874637e02,
        5.489392e02,
        6.112725e02,
        6.743180e02,
        7.379665e02,
        8.021363e02,
        8.667588e02,
        9.318076e02,
        9.972455e02,
        1.063065e03,
        1.129260e03,
        1.195844e03,
        1.262803e03,
        1.330177e03,
        1.397975e03,
        1.466208e03,
        1.534920e03,
        1.604131e03,
        1.673861e03,
        1.744132e03,
        1.814968e03,
        1.886392e03,
        1.958449e03,
        2.031145e03,
        2.104487e03,
        2.178540e03,
        2.253291e03,
        2.328765e03,
        2.404963e03,
        2.481933e03,
        2.559679e03,
        2.638222e03,
        2.717563e03,
        2.797724e03,
        2.878728e03,
        2.960569e03,
        3.043241e03,
        3.126792e03,
        3.211244e03,
        3.296556e03,
        3.382746e03,
        3.469862e03,
        3.557861e03,
        3.646792e03,
        3.736671e03,
        3.827446e03,
        3.919168e03,
        4.011816e03,
        4.105405e03,
        4.199946e03,
        4.295455e03,
        4.391908e03,
        4.489355e03,
        4.587730e03,
        4.687084e03,
        4.787429e03,
        4.888735e03,
        4.991012e03,
        5.094314e03,
        5.198564e03,
        5.303815e03,
        5.410032e03,
        5.517270e03,
        5.625490e03,
        5.734750e03,
        5.844962e03,
        5.956183e03,
        6.068418e03,
        6.181628e03,
        6.295921e03,
        6.411150e03,
        6.527425e03,
        6.644701e03,
        6.762984e03,
        6.882281e03,
        7.002598e03,
        7.123940e03,
        7.246257e03,
        7.369611e03,
        7.494009e03,
        7.619456e03,
        7.745839e03,
        7.873343e03,
        8.001789e03,
        8.131307e03,
        8.261840e03,
        8.393389e03,
        8.525963e03,
        8.659562e03,
        8.794193e03,
        8.929860e03,
        9.066566e03,
        9.204314e03,
        9.343044e03,
        9.482892e03,
        9.623727e03,
        9.765553e03,
        9.908441e03,
        1.005239e04,
        1.019735e04,
        1.034337e04,
        1.049040e04,
        1.063844e04,
        1.078756e04,
        1.093769e04,
        1.108883e04,
        1.124107e04,
        1.139433e04,
        1.154862e04,
        1.170400e04,
        1.186034e04,
        1.201778e04,
        1.217626e04,
        1.233577e04,
        1.249631e04,
        1.265790e04,
        1.282053e04,
        1.298420e04,
        1.314892e04,
        1.331460e04,
        1.348141e04,
        1.364928e04,
        1.381820e04,
        1.398809e04,
        1.415904e04,
        1.433114e04,
        1.450421e04,
        1.467825e04,
        1.485345e04,
        1.502963e04,
        1.520687e04,
        1.538519e04,
        1.556458e04,
        1.574495e04,
        1.592640e04,
        1.610883e04,
        1.629244e04,
        1.647703e04,
        1.666261e04,
        1.684928e04,
        1.703703e04,
        1.722587e04,
        1.741570e04,
        1.760653e04,
        1.779854e04,
        1.799145e04,
        1.818556e04,
        1.838056e04,
        1.857677e04,
        1.877397e04,
        1.897217e04,
        1.917148e04,
        1.937178e04,
        1.957319e04,
        1.977572e04,
        1.997924e04,
        2.018376e04,
        2.038940e04,
        2.059605e04,
        2.080370e04,
        2.101258e04,
        2.122235e04,
        2.143324e04,
        2.164514e04,
        2.185817e04,
        2.207220e04,
    ]
)

#  ---------------------- M = 8, I = 3 ---------------------------
M = 8
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.189184e01,
        5.706583e01,
        1.101111e02,
        1.690336e02,
        2.357137e02,
        3.093392e02,
        3.894382e02,
        4.738273e02,
        5.614765e02,
        6.516668e02,
        7.438655e02,
        8.376816e02,
        9.328071e02,
        1.029019e03,
        1.126152e03,
        1.224093e03,
        1.322726e03,
        1.422012e03,
        1.521894e03,
        1.622376e03,
        1.723436e03,
        1.825094e03,
        1.927347e03,
        2.030239e03,
        2.133784e03,
        2.238044e03,
        2.343022e03,
        2.448769e03,
        2.555318e03,
        2.662726e03,
        2.771034e03,
        2.880252e03,
        2.990447e03,
        3.101631e03,
        3.213843e03,
        3.327092e03,
        3.441482e03,
        3.556955e03,
        3.673617e03,
        3.791438e03,
        3.910456e03,
        4.030706e03,
        4.152188e03,
        4.274977e03,
        4.399026e03,
        4.524369e03,
        4.651037e03,
        4.779063e03,
        4.908435e03,
        5.039134e03,
        5.171234e03,
        5.304767e03,
        5.439664e03,
        5.575945e03,
        5.713690e03,
        5.852870e03,
        5.993512e03,
        6.135528e03,
        6.279050e03,
        6.424044e03,
        6.570531e03,
        6.718415e03,
        6.867831e03,
        7.018739e03,
        7.171158e03,
        7.325106e03,
        7.480473e03,
        7.637402e03,
        7.795844e03,
        7.955817e03,
        8.117334e03,
        8.280340e03,
        8.444852e03,
        8.610949e03,
        8.778504e03,
        8.947672e03,
        9.118396e03,
        9.290609e03,
        9.464401e03,
        9.639785e03,
        9.816691e03,
        9.995128e03,
        1.017511e04,
        1.035664e04,
        1.053982e04,
        1.072449e04,
        1.091073e04,
        1.109857e04,
        1.128800e04,
        1.147896e04,
        1.167153e04,
        1.186564e04,
        1.206128e04,
        1.225857e04,
        1.245741e04,
        1.265782e04,
        1.285979e04,
        1.306344e04,
        1.326857e04,
        1.347539e04,
        1.368371e04,
        1.389363e04,
        1.410515e04,
        1.431819e04,
        1.453295e04,
        1.474923e04,
        1.496703e04,
        1.518647e04,
        1.540755e04,
        1.563017e04,
        1.585444e04,
        1.608026e04,
        1.630775e04,
        1.653679e04,
        1.676739e04,
        1.699955e04,
        1.723340e04,
        1.746882e04,
        1.770581e04,
        1.794450e04,
        1.818465e04,
        1.842652e04,
        1.866997e04,
        1.891501e04,
        1.916153e04,
        1.940978e04,
        1.965962e04,
        1.991107e04,
        2.016414e04,
        2.041882e04,
        2.067511e04,
        2.093290e04,
        2.119244e04,
        2.145347e04,
        2.171627e04,
        2.198056e04,
        2.224635e04,
        2.251392e04,
        2.278313e04,
        2.305384e04,
        2.332620e04,
        2.360007e04,
        2.387573e04,
        2.415291e04,
        2.443174e04,
        2.471209e04,
        2.499410e04,
        2.527778e04,
        2.556313e04,
        2.584999e04,
        2.613838e04,
        2.642845e04,
        2.672019e04,
        2.701361e04,
        2.730857e04,
        2.760506e04,
        2.790322e04,
        2.820309e04,
        2.850449e04,
        2.880758e04,
        2.911222e04,
        2.941855e04,
        2.972642e04,
        3.003600e04,
        3.034711e04,
        3.065978e04,
        3.097415e04,
        3.129023e04,
        3.160787e04,
        3.192705e04,
        3.224796e04,
        3.257041e04,
        3.289459e04,
        3.322032e04,
        3.354777e04,
        3.387661e04,
    ]
)

#  ---------------------- M = 9, I = 1 ---------------------------
M = 9
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.454300e00,
        1.022319e02,
        2.882009e02,
        5.289590e02,
        8.141879e02,
        1.138246e03,
        1.498364e03,
        1.893680e03,
        2.324649e03,
        2.792534e03,
        3.299086e03,
        3.846299e03,
        4.436548e03,
        5.072346e03,
        5.756332e03,
        6.491539e03,
        7.281118e03,
        8.128285e03,
        9.036571e03,
        1.000965e04,
        1.105141e04,
        1.216570e04,
        1.335683e04,
        1.462901e04,
        1.598660e04,
        1.743436e04,
        1.897692e04,
        2.061904e04,
        2.236584e04,
        2.422246e04,
        2.619414e04,
        2.828645e04,
        3.050468e04,
        3.285482e04,
        3.534284e04,
        3.797440e04,
        4.075593e04,
        4.369377e04,
        4.679420e04,
        5.006431e04,
        5.351042e04,
        5.713968e04,
        6.095944e04,
        6.497664e04,
        6.919892e04,
        7.363414e04,
        7.828963e04,
        8.317352e04,
        8.829416e04,
        9.365966e04,
        9.927870e04,
        1.051597e05,
        1.113113e05,
        1.177434e05,
        1.244642e05,
        1.314837e05,
        1.388114e05,
        1.464570e05,
        1.544299e05,
        1.627414e05,
        1.714005e05,
        1.804188e05,
        1.898065e05,
        1.995743e05,
        2.097337e05,
        2.202957e05,
        2.312719e05,
        2.426739e05,
        2.545138e05,
        2.668032e05,
        2.795549e05,
        2.927811e05,
        3.064944e05,
        3.207079e05,
        3.354346e05,
        3.506881e05,
        3.664818e05,
        3.828290e05,
        3.997436e05,
        4.172406e05,
        4.353337e05,
        4.540374e05,
        4.733667e05,
        4.933375e05,
        5.139636e05,
        5.352603e05,
        5.572451e05,
        5.799322e05,
        6.033387e05,
        6.274802e05,
        6.523742e05,
        6.780366e05,
        7.044845e05,
        7.317353e05,
        7.598073e05,
        7.887176e05,
        8.184840e05,
        8.491238e05,
        8.806575e05,
        9.131028e05,
        9.464777e05,
        9.808023e05,
        1.016096e06,
        1.052379e06,
        1.089669e06,
        1.127988e06,
        1.167357e06,
        1.207794e06,
        1.249321e06,
        1.291961e06,
        1.335732e06,
        1.380659e06,
        1.426761e06,
        1.474061e06,
        1.522583e06,
        1.572347e06,
        1.623377e06,
        1.675696e06,
        1.729329e06,
        1.784297e06,
        1.840624e06,
        1.898336e06,
        1.957457e06,
        2.018012e06,
        2.080025e06,
        2.143521e06,
        2.208524e06,
        2.275064e06,
        2.343163e06,
        2.412851e06,
        2.484152e06,
        2.557091e06,
        2.631700e06,
        2.708003e06,
        2.786027e06,
        2.865802e06,
        2.947356e06,
        3.030718e06,
        3.115914e06,
        3.202976e06,
        3.291932e06,
        3.382810e06,
        3.475643e06,
        3.570459e06,
        3.667290e06,
        3.766164e06,
        3.867117e06,
        3.970174e06,
        4.075372e06,
        4.182739e06,
        4.292312e06,
        4.404117e06,
        4.518192e06,
        4.634568e06,
        4.753277e06,
        4.874358e06,
        4.997837e06,
        5.123754e06,
        5.252144e06,
        5.383038e06,
        5.516472e06,
        5.652484e06,
        5.791109e06,
        5.932381e06,
        6.076339e06,
        6.223016e06,
        6.372454e06,
        6.524687e06,
        6.679752e06,
        6.837689e06,
        6.998536e06,
        7.162331e06,
        7.329112e06,
        7.498922e06,
        7.671795e06,
        7.847772e06,
    ]
)

#  ---------------------- M = 9, I = 2 ---------------------------
M = 9
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.314830e00,
        1.027046e02,
        2.895361e02,
        5.313995e02,
        8.179047e02,
        1.143446e03,
        1.505213e03,
        1.902320e03,
        2.335259e03,
        2.805284e03,
        3.314118e03,
        3.863828e03,
        4.456728e03,
        5.095327e03,
        5.782419e03,
        6.520963e03,
        7.314000e03,
        8.164932e03,
        9.077250e03,
        1.005464e04,
        1.110102e04,
        1.222023e04,
        1.341664e04,
        1.469432e04,
        1.605802e04,
        1.751204e04,
        1.906127e04,
        2.071061e04,
        2.246511e04,
        2.432974e04,
        2.631009e04,
        2.841143e04,
        3.063941e04,
        3.299970e04,
        3.549845e04,
        3.814136e04,
        4.093511e04,
        4.388563e04,
        4.699944e04,
        5.028368e04,
        5.374467e04,
        5.738960e04,
        6.122559e04,
        6.526014e04,
        6.950067e04,
        7.395475e04,
        7.863036e04,
        8.353538e04,
        8.867784e04,
        9.406655e04,
        9.970955e04,
        1.056157e05,
        1.117939e05,
        1.182531e05,
        1.250031e05,
        1.320525e05,
        1.394112e05,
        1.470895e05,
        1.550966e05,
        1.634432e05,
        1.721394e05,
        1.811964e05,
        1.906239e05,
        2.004330e05,
        2.106356e05,
        2.212424e05,
        2.322657e05,
        2.437162e05,
        2.556059e05,
        2.679482e05,
        2.807536e05,
        2.940361e05,
        3.078079e05,
        3.220813e05,
        3.368710e05,
        3.521889e05,
        3.680495e05,
        3.844658e05,
        4.014520e05,
        4.190232e05,
        4.371929e05,
        4.559761e05,
        4.753874e05,
        4.954424e05,
        5.161552e05,
        5.375425e05,
        5.596200e05,
        5.824029e05,
        6.059083e05,
        6.301519e05,
        6.551502e05,
        6.809212e05,
        7.074811e05,
        7.348473e05,
        7.630374e05,
        7.920695e05,
        8.219613e05,
        8.527311e05,
        8.843978e05,
        9.169790e05,
        9.504949e05,
        9.849644e05,
        1.020406e06,
        1.056841e06,
        1.094290e06,
        1.132770e06,
        1.172304e06,
        1.212911e06,
        1.254614e06,
        1.297432e06,
        1.341388e06,
        1.386503e06,
        1.432799e06,
        1.480299e06,
        1.529023e06,
        1.578997e06,
        1.630242e06,
        1.682781e06,
        1.736639e06,
        1.791837e06,
        1.848402e06,
        1.906357e06,
        1.965726e06,
        2.026534e06,
        2.088807e06,
        2.152569e06,
        2.217847e06,
        2.284665e06,
        2.353051e06,
        2.423030e06,
        2.494629e06,
        2.567875e06,
        2.642796e06,
        2.719418e06,
        2.797771e06,
        2.877882e06,
        2.959776e06,
        3.043487e06,
        3.129040e06,
        3.216467e06,
        3.305794e06,
        3.397055e06,
        3.490276e06,
        3.585490e06,
        3.682726e06,
        3.782016e06,
        3.883388e06,
        3.986878e06,
        4.092517e06,
        4.200333e06,
        4.310363e06,
        4.422637e06,
        4.537190e06,
        4.654052e06,
        4.773258e06,
        4.894845e06,
        5.018842e06,
        5.145286e06,
        5.274211e06,
        5.405652e06,
        5.539647e06,
        5.676225e06,
        5.815431e06,
        5.957293e06,
        6.101851e06,
        6.249144e06,
        6.399204e06,
        6.552073e06,
        6.707787e06,
        6.866385e06,
        7.027904e06,
        7.192382e06,
        7.359862e06,
        7.530380e06,
        7.703973e06,
        7.880689e06,
    ]
)

#  ---------------------- M = 10, I = 1 ---------------------------
M = 10
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.067800e00,
        2.332671e02,
        6.566540e02,
        1.204608e03,
        1.853462e03,
        2.589584e03,
        3.403999e03,
        4.290795e03,
        5.246348e03,
        6.268939e03,
        7.358458e03,
        8.515917e03,
        9.743304e03,
        1.104335e04,
        1.241945e04,
        1.387519e04,
        1.541486e04,
        1.704306e04,
        1.876472e04,
        2.058489e04,
        2.250873e04,
        2.454224e04,
        2.669106e04,
        2.896127e04,
        3.135884e04,
        3.389046e04,
        3.656272e04,
        3.938207e04,
        4.235539e04,
        4.549001e04,
        4.879273e04,
        5.227161e04,
        5.593368e04,
        5.978687e04,
        6.383887e04,
        6.809790e04,
        7.257236e04,
        7.727028e04,
        8.220086e04,
        8.737241e04,
        9.279450e04,
        9.847505e04,
        1.044246e05,
        1.106525e05,
        1.171684e05,
        1.239821e05,
        1.311035e05,
        1.385434e05,
        1.463120e05,
        1.544204e05,
        1.628794e05,
        1.717004e05,
        1.808944e05,
        1.904724e05,
        2.004476e05,
        2.108313e05,
        2.216352e05,
        2.328730e05,
        2.445559e05,
        2.566978e05,
        2.693113e05,
        2.824111e05,
        2.960088e05,
        3.101196e05,
        3.247566e05,
        3.399344e05,
        3.556676e05,
        3.719701e05,
        3.888595e05,
        4.063475e05,
        4.244521e05,
        4.431882e05,
        4.625704e05,
        4.826163e05,
        5.033429e05,
        5.247666e05,
        5.469033e05,
        5.697703e05,
        5.933851e05,
        6.177656e05,
        6.429297e05,
        6.688959e05,
        6.956828e05,
        7.233073e05,
        7.517906e05,
        7.811517e05,
        8.114085e05,
        8.425809e05,
        8.746909e05,
        9.077571e05,
        9.417998e05,
        9.768401e05,
        1.012899e06,
        1.050001e06,
        1.088162e06,
        1.127407e06,
        1.167759e06,
        1.209239e06,
        1.251871e06,
        1.295677e06,
        1.340680e06,
        1.386904e06,
        1.434373e06,
        1.483110e06,
        1.533142e06,
        1.584490e06,
        1.637182e06,
        1.691244e06,
        1.746699e06,
        1.803572e06,
        1.861893e06,
        1.921685e06,
        1.982978e06,
        2.045797e06,
        2.110167e06,
        2.176121e06,
        2.243683e06,
        2.312882e06,
        2.383749e06,
        2.456307e06,
        2.530594e06,
        2.606631e06,
        2.684450e06,
        2.764086e06,
        2.845564e06,
        2.928916e06,
        3.014177e06,
        3.101370e06,
        3.190535e06,
        3.281700e06,
        3.374897e06,
        3.470160e06,
        3.567520e06,
        3.667012e06,
        3.768671e06,
        3.872526e06,
        3.978618e06,
        4.086977e06,
        4.197639e06,
        4.310638e06,
        4.426011e06,
        4.543793e06,
        4.664020e06,
        4.786729e06,
        4.911957e06,
        5.039746e06,
        5.170124e06,
        5.303134e06,
        5.438818e06,
        5.577205e06,
        5.718344e06,
        5.862272e06,
        6.009019e06,
        6.158638e06,
        6.311162e06,
        6.466636e06,
        6.625096e06,
        6.786586e06,
        6.951149e06,
        7.118822e06,
        7.289654e06,
        7.463683e06,
        7.640954e06,
        7.821510e06,
        8.005394e06,
        8.192658e06,
        8.383334e06,
        8.577472e06,
        8.775125e06,
        8.976324e06,
        9.181131e06,
        9.389576e06,
        9.601719e06,
        9.817605e06,
        1.003727e07,
        1.026078e07,
    ]
)

#  ---------------------- M = 11, I = 1 ---------------------------
M = 11
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.834090e00,
        3.544986e01,
        8.933083e01,
        1.601234e02,
        2.441067e02,
        3.392668e02,
        4.443978e02,
        5.586602e02,
        6.814457e02,
        8.123287e02,
        9.510416e02,
        1.097456e03,
        1.251567e03,
        1.413475e03,
        1.583372e03,
        1.761529e03,
        1.948287e03,
        2.144046e03,
        2.349255e03,
        2.564410e03,
        2.790043e03,
        3.026722e03,
        3.275047e03,
        3.535644e03,
        3.809167e03,
        4.096297e03,
        4.397737e03,
        4.714220e03,
        5.046499e03,
        5.395358e03,
        5.761605e03,
        6.146077e03,
        6.549640e03,
        6.973192e03,
        7.417660e03,
        7.884006e03,
        8.373224e03,
        8.886347e03,
        9.424443e03,
        9.988617e03,
        1.058002e04,
        1.119983e04,
        1.184929e04,
        1.252967e04,
        1.324228e04,
        1.398851e04,
        1.476975e04,
        1.558747e04,
        1.644319e04,
        1.733848e04,
        1.827495e04,
        1.925429e04,
        2.027822e04,
        2.134854e04,
        2.246709e04,
        2.363579e04,
        2.485661e04,
        2.613158e04,
        2.746282e04,
        2.885248e04,
        3.030281e04,
        3.181610e04,
        3.339475e04,
        3.504120e04,
        3.675797e04,
        3.854766e04,
        4.041296e04,
        4.235662e04,
        4.438148e04,
        4.649045e04,
        4.868654e04,
        5.097282e04,
        5.335248e04,
        5.582878e04,
        5.840505e04,
        6.108474e04,
        6.387137e04,
        6.676857e04,
        6.978004e04,
        7.290961e04,
        7.616117e04,
        7.953873e04,
        8.304638e04,
        8.668833e04,
        9.046886e04,
        9.439239e04,
        9.846341e04,
        1.026865e05,
        1.070664e05,
        1.116079e05,
        1.163160e05,
        1.211955e05,
        1.262517e05,
        1.314898e05,
        1.369150e05,
        1.425329e05,
        1.483489e05,
        1.543688e05,
        1.605982e05,
        1.670429e05,
        1.737090e05,
        1.806025e05,
        1.877295e05,
        1.950963e05,
        2.027093e05,
        2.105748e05,
        2.186995e05,
        2.270900e05,
        2.357531e05,
        2.446956e05,
        2.539243e05,
        2.634465e05,
        2.732691e05,
        2.833994e05,
        2.938447e05,
        3.046123e05,
        3.157098e05,
        3.271446e05,
        3.389245e05,
        3.510570e05,
        3.635501e05,
        3.764116e05,
        3.896493e05,
        4.032714e05,
        4.172859e05,
        4.317008e05,
        4.465246e05,
        4.617653e05,
        4.774313e05,
        4.935310e05,
        5.100729e05,
        5.270654e05,
        5.445171e05,
        5.624366e05,
        5.808324e05,
        5.997132e05,
        6.190879e05,
        6.389651e05,
        6.593535e05,
        6.802621e05,
        7.016996e05,
        7.236749e05,
        7.461970e05,
        7.692747e05,
        7.929169e05,
        8.171327e05,
        8.419309e05,
        8.673206e05,
        8.933106e05,
        9.199101e05,
        9.471280e05,
        9.749732e05,
        1.003455e06,
        1.032582e06,
        1.062363e06,
        1.092807e06,
        1.123924e06,
        1.155722e06,
        1.188210e06,
        1.221397e06,
        1.255292e06,
        1.289903e06,
        1.325240e06,
        1.361311e06,
        1.398126e06,
        1.435692e06,
        1.474019e06,
        1.513114e06,
        1.552988e06,
        1.593648e06,
        1.635103e06,
        1.677361e06,
        1.720431e06,
        1.764321e06,
        1.809040e06,
        1.854596e06,
        1.900996e06,
        1.948250e06,
        1.996365e06,
        2.045349e06,
        2.095211e06,
        2.145958e06,
        2.197599e06,
        2.250140e06,
        2.303590e06,
        2.357956e06,
        2.413246e06,
        2.469467e06,
        2.526627e06,
        2.584734e06,
        2.643794e06,
        2.703815e06,
        2.764803e06,
        2.826766e06,
        2.889712e06,
        2.953646e06,
        3.018575e06,
        3.084507e06,
        3.151448e06,
        3.219404e06,
        3.288382e06,
        3.358388e06,
        3.429429e06,
        3.501511e06,
        3.574640e06,
        3.648822e06,
        3.724062e06,
        3.800367e06,
        3.877743e06,
        3.956195e06,
        4.035729e06,
        4.116350e06,
        4.198063e06,
        4.280875e06,
        4.364789e06,
        4.449812e06,
        4.535948e06,
        4.623202e06,
        4.711579e06,
        4.801083e06,
        4.891720e06,
        4.983494e06,
        5.076409e06,
        5.170470e06,
        5.265680e06,
        5.362045e06,
        5.459568e06,
        5.558252e06,
        5.658103e06,
        5.759124e06,
        5.861317e06,
        5.964688e06,
        6.069240e06,
        6.174975e06,
        6.281898e06,
        6.390011e06,
        6.499317e06,
        6.609820e06,
        6.721523e06,
        6.834428e06,
        6.948538e06,
        7.063856e06,
        7.180384e06,
        7.298125e06,
        7.417081e06,
        7.537255e06,
        7.658648e06,
        7.781264e06,
        7.905103e06,
        8.030168e06,
        8.156460e06,
        8.283982e06,
        8.412735e06,
        8.542721e06,
        8.673941e06,
        8.806397e06,
        8.940089e06,
        9.075020e06,
        9.211190e06,
        9.348600e06,
        9.487252e06,
        9.627147e06,
        9.768284e06,
        9.910666e06,
        1.005429e07,
        1.019916e07,
        1.034528e07,
        1.049264e07,
        1.064125e07,
        1.079111e07,
        1.094222e07,
        1.109457e07,
        1.124817e07,
        1.140301e07,
        1.155911e07,
        1.171645e07,
        1.187503e07,
        1.203487e07,
        1.219595e07,
        1.235827e07,
        1.252184e07,
        1.268666e07,
        1.285272e07,
        1.302002e07,
        1.318857e07,
        1.335836e07,
        1.352938e07,
        1.370165e07,
        1.387516e07,
        1.404990e07,
        1.422589e07,
        1.440310e07,
        1.458155e07,
        1.476124e07,
        1.494215e07,
        1.512430e07,
        1.530767e07,
        1.549227e07,
        1.567809e07,
        1.586514e07,
        1.605341e07,
    ]
)

#  ---------------------- M = 11, I = 2 ---------------------------
M = 11
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.689360e00,
        2.371743e01,
        5.973090e01,
        1.070476e02,
        1.631783e02,
        2.267778e02,
        2.970405e02,
        3.734061e02,
        4.554693e02,
        5.429478e02,
        6.356653e02,
        7.335395e02,
        8.365694e02,
        9.448250e02,
        1.058437e03,
        1.177588e03,
        1.302505e03,
        1.433451e03,
        1.570721e03,
        1.714634e03,
        1.865531e03,
        2.023770e03,
        2.189723e03,
        2.363775e03,
        2.546320e03,
        2.737759e03,
        2.938503e03,
        3.148970e03,
        3.369585e03,
        3.600778e03,
        3.842989e03,
        4.096664e03,
        4.362256e03,
        4.640230e03,
        4.931055e03,
        5.235214e03,
        5.553197e03,
        5.885507e03,
        6.232655e03,
        6.595167e03,
        6.973580e03,
        7.368444e03,
        7.780322e03,
        8.209792e03,
        8.657444e03,
        9.123885e03,
        9.609736e03,
        1.011563e04,
        1.064223e04,
        1.119020e04,
        1.176022e04,
        1.235300e04,
        1.296927e04,
        1.360974e04,
        1.427520e04,
        1.496640e04,
        1.568415e04,
        1.642926e04,
        1.720255e04,
        1.800489e04,
        1.883715e04,
        1.970021e04,
        2.059500e04,
        2.152244e04,
        2.248350e04,
        2.347915e04,
        2.451040e04,
        2.557826e04,
        2.668378e04,
        2.782802e04,
        2.901208e04,
        3.023707e04,
        3.150413e04,
        3.281442e04,
        3.416912e04,
        3.556945e04,
        3.701663e04,
        3.851194e04,
        4.005664e04,
        4.165205e04,
        4.329951e04,
        4.500037e04,
        4.675603e04,
        4.856789e04,
        5.043739e04,
        5.236600e04,
        5.435520e04,
        5.640652e04,
        5.852151e04,
        6.070172e04,
        6.294876e04,
        6.526426e04,
        6.764987e04,
        7.010727e04,
        7.263815e04,
        7.524427e04,
        7.792737e04,
        8.068925e04,
        8.353171e04,
        8.645661e04,
        8.946581e04,
        9.256120e04,
        9.574471e04,
        9.901829e04,
        1.023839e05,
        1.058436e05,
        1.093993e05,
        1.130531e05,
        1.168072e05,
        1.206635e05,
        1.246243e05,
        1.286917e05,
        1.328678e05,
        1.371549e05,
        1.415551e05,
        1.460708e05,
        1.507042e05,
        1.554576e05,
        1.603333e05,
        1.653337e05,
        1.704610e05,
        1.757178e05,
        1.811063e05,
        1.866290e05,
        1.922883e05,
        1.980868e05,
        2.040268e05,
        2.101108e05,
        2.163414e05,
        2.227210e05,
        2.292523e05,
        2.359378e05,
        2.427799e05,
        2.497814e05,
        2.569448e05,
        2.642727e05,
        2.717677e05,
        2.794324e05,
        2.872695e05,
        2.952817e05,
        3.034715e05,
        3.118417e05,
        3.203948e05,
        3.291337e05,
        3.380608e05,
        3.471791e05,
        3.564910e05,
        3.659994e05,
        3.757069e05,
        3.856162e05,
        3.957300e05,
        4.060510e05,
        4.165819e05,
        4.273253e05,
        4.382841e05,
        4.494608e05,
        4.608582e05,
        4.724789e05,
        4.843256e05,
        4.964010e05,
        5.087078e05,
        5.212486e05,
        5.340260e05,
        5.470427e05,
        5.603014e05,
        5.738046e05,
        5.875549e05,
        6.015551e05,
        6.158075e05,
        6.303150e05,
        6.450799e05,
        6.601048e05,
        6.753923e05,
        6.909449e05,
        7.067651e05,
        7.228554e05,
        7.392182e05,
        7.558561e05,
        7.727714e05,
        7.899665e05,
        8.074439e05,
        8.252060e05,
        8.432551e05,
        8.615934e05,
        8.802235e05,
        8.991475e05,
        9.183677e05,
        9.378864e05,
        9.577058e05,
        9.778282e05,
        9.982556e05,
        1.018990e06,
        1.040034e06,
        1.061390e06,
        1.083059e06,
        1.105044e06,
        1.127346e06,
        1.149969e06,
        1.172913e06,
        1.196180e06,
        1.219773e06,
        1.243694e06,
        1.267944e06,
        1.292525e06,
        1.317439e06,
        1.342688e06,
        1.368273e06,
        1.394197e06,
        1.420461e06,
        1.447066e06,
        1.474015e06,
        1.501309e06,
        1.528949e06,
        1.556938e06,
        1.585276e06,
        1.613965e06,
        1.643007e06,
        1.672403e06,
        1.702154e06,
        1.732262e06,
        1.762729e06,
        1.793555e06,
        1.824742e06,
        1.856291e06,
        1.888203e06,
        1.920480e06,
        1.953123e06,
        1.986132e06,
        2.019510e06,
        2.053256e06,
        2.087373e06,
        2.121861e06,
        2.156721e06,
        2.191954e06,
        2.227562e06,
        2.263544e06,
        2.299902e06,
        2.336637e06,
        2.373749e06,
        2.411240e06,
        2.449110e06,
        2.487359e06,
        2.525989e06,
        2.565001e06,
        2.604394e06,
        2.644169e06,
        2.684328e06,
        2.724871e06,
        2.765797e06,
        2.807108e06,
        2.848805e06,
        2.890886e06,
        2.933354e06,
        2.976209e06,
        3.019450e06,
        3.063078e06,
        3.107094e06,
        3.151498e06,
        3.196289e06,
        3.241469e06,
        3.287037e06,
        3.332994e06,
        3.379340e06,
        3.426074e06,
        3.473198e06,
        3.520711e06,
        3.568613e06,
        3.616905e06,
        3.665585e06,
        3.714655e06,
        3.764114e06,
        3.813962e06,
        3.864200e06,
        3.914826e06,
        3.965841e06,
        4.017245e06,
        4.069037e06,
        4.121218e06,
        4.173787e06,
        4.226743e06,
        4.280088e06,
        4.333819e06,
        4.387938e06,
        4.442443e06,
        4.497335e06,
        4.552613e06,
        4.608276e06,
        4.664325e06,
        4.720758e06,
        4.777576e06,
        4.834778e06,
        4.892363e06,
        4.950330e06,
        5.008681e06,
        5.067413e06,
        5.126526e06,
        5.186021e06,
        5.245895e06,
        5.306149e06,
        5.366782e06,
        5.427793e06,
    ]
)

#  ---------------------- M = 12, I = 1 ---------------------------
M = 12
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.573524e01,
        2.896824e03,
        8.174539e03,
        1.500830e04,
        2.310835e04,
        3.233901e04,
        4.267884e04,
        5.420733e04,
        6.708747e04,
        8.154826e04,
        9.787188e04,
        1.163871e05,
        1.374678e05,
        1.615349e05,
        1.890610e05,
        2.205764e05,
        2.566761e05,
        2.980283e05,
        3.453830e05,
        3.995815e05,
        4.615675e05,
        5.323980e05,
        6.132560e05,
        7.054636e05,
        8.104973e05,
        9.300032e05,
        1.065814e06,
        1.219969e06,
        1.394732e06,
        1.592616e06,
        1.816403e06,
        2.069175e06,
        2.354336e06,
        2.675644e06,
        3.037246e06,
        3.443706e06,
        3.900048e06,
        4.411790e06,
        4.984997e06,
        5.626315e06,
        6.343026e06,
        7.143101e06,
        8.035255e06,
        9.029012e06,
        1.013476e07,
        1.136382e07,
        1.272855e07,
        1.424236e07,
        1.591986e07,
        1.777692e07,
        1.983076e07,
        2.210007e07,
        2.460508e07,
        2.736772e07,
        3.041171e07,
        3.376270e07,
        3.744839e07,
        4.149872e07,
        4.594593e07,
        5.082484e07,
        5.617291e07,
        6.203049e07,
        6.844098e07,
        7.545107e07,
        8.311086e07,
        9.147421e07,
        1.005989e08,
        1.105468e08,
        1.213843e08,
        1.331825e08,
        1.460176e08,
        1.599709e08,
        1.751294e08,
        1.915862e08,
        2.094406e08,
        2.287987e08,
        2.497734e08,
        2.724856e08,
        2.970635e08,
        3.236443e08,
        3.523735e08,
        3.834064e08,
        4.169078e08,
        4.530531e08,
        4.920286e08,
        5.340321e08,
        5.792739e08,
        6.279767e08,
        6.803770e08,
        7.367252e08,
        7.972871e08,
        8.623440e08,
        9.321937e08,
        1.007151e09,
        1.087551e09,
        1.173744e09,
        1.266104e09,
        1.365025e09,
        1.470923e09,
        1.584237e09,
        1.705430e09,
        1.834993e09,
        1.973439e09,
        2.121315e09,
        2.279192e09,
        2.447675e09,
        2.627399e09,
        2.819035e09,
        3.023286e09,
        3.240894e09,
        3.472638e09,
        3.719338e09,
        3.981857e09,
        4.261099e09,
        4.558015e09,
        4.873603e09,
        5.208913e09,
        5.565043e09,
        5.943148e09,
        6.344438e09,
        6.770183e09,
        7.221711e09,
        7.700418e09,
        8.207763e09,
        8.745275e09,
        9.314557e09,
        9.917283e09,
        1.055521e10,
        1.123017e10,
        1.194408e10,
        1.269895e10,
        1.349688e10,
        1.434006e10,
        1.523078e10,
        1.617143e10,
        1.716451e10,
        1.821263e10,
        1.931852e10,
        2.048501e10,
        2.171506e10,
        2.301179e10,
        2.437840e10,
        2.581826e10,
        2.733487e10,
        2.893189e10,
        3.061313e10,
        3.238254e10,
        3.424425e10,
        3.620258e10,
        3.826198e10,
        4.042712e10,
        4.270285e10,
        4.509420e10,
        4.760643e10,
        5.024498e10,
        5.301553e10,
        5.592397e10,
        5.897644e10,
        6.217929e10,
        6.553915e10,
        6.906289e10,
        7.275761e10,
        7.663079e10,
        8.069007e10,
        8.494343e10,
        8.939920e10,
        9.406595e10,
        9.895261e10,
        1.040684e11,
        1.094230e11,
        1.150262e11,
        1.208886e11,
        1.270205e11,
        1.334333e11,
        1.401384e11,
        1.471476e11,
    ]
)

#  ---------------------- M = 12, I = 2 ---------------------------
M = 12
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.382603e01,
        1.931437e03,
        5.450319e03,
        1.000669e04,
        1.540736e04,
        2.156205e04,
        2.845720e04,
        3.614739e04,
        4.474377e04,
        5.440219e04,
        6.531440e04,
        7.770355e04,
        9.182310e04,
        1.079584e05,
        1.264298e05,
        1.475967e05,
        1.718627e05,
        1.996812e05,
        2.315613e05,
        2.680746e05,
        3.098624e05,
        3.576437e05,
        4.122233e05,
        4.745014e05,
        5.454834e05,
        6.262912e05,
        7.181744e05,
        8.225232e05,
        9.408828e05,
        1.074968e06,
        1.226680e06,
        1.398121e06,
        1.591620e06,
        1.809745e06,
        2.055330e06,
        2.331499e06,
        2.641689e06,
        2.989677e06,
        3.379614e06,
        3.816053e06,
        4.303982e06,
        4.848864e06,
        5.456671e06,
        6.133931e06,
        6.887769e06,
        7.725955e06,
        8.656957e06,
        9.689991e06,
        1.083508e07,
        1.210311e07,
        1.350592e07,
        1.505634e07,
        1.676827e07,
        1.865678e07,
        2.073817e07,
        2.303008e07,
        2.555154e07,
        2.832314e07,
        3.136707e07,
        3.470727e07,
        3.836952e07,
        4.238158e07,
        4.677333e07,
        5.157688e07,
        5.682677e07,
        6.256005e07,
        6.881650e07,
        7.563878e07,
        8.307263e07,
        9.116702e07,
        9.997437e07,
        1.095508e08,
        1.199563e08,
        1.312550e08,
        1.435154e08,
        1.568106e08,
        1.712185e08,
        1.868225e08,
        2.037110e08,
        2.219786e08,
        2.417258e08,
        2.630596e08,
        2.860939e08,
        3.109496e08,
        3.377555e08,
        3.666480e08,
        3.977722e08,
        4.312820e08,
        4.673407e08,
        5.061213e08,
        5.478072e08,
        5.925928e08,
        6.406837e08,
        6.922978e08,
        7.476655e08,
        8.070303e08,
        8.706501e08,
        9.387968e08,
        1.011758e09,
        1.089838e09,
        1.173356e09,
        1.262651e09,
        1.358080e09,
        1.460018e09,
        1.568862e09,
        1.685029e09,
        1.808960e09,
        1.941117e09,
        2.081987e09,
        2.232084e09,
        2.391947e09,
        2.562142e09,
        2.743268e09,
        2.935948e09,
        3.140842e09,
        3.358640e09,
        3.590069e09,
        3.835888e09,
        4.096897e09,
        4.373935e09,
        4.667879e09,
        4.979648e09,
        5.310211e09,
        5.660576e09,
        6.031804e09,
        6.425001e09,
        6.841331e09,
        7.282006e09,
        7.748297e09,
        8.241535e09,
        8.763108e09,
        9.314471e09,
        9.897139e09,
        1.051270e10,
        1.116282e10,
        1.184921e10,
        1.257370e10,
        1.333817e10,
        1.414458e10,
        1.499499e10,
        1.589154e10,
        1.683648e10,
        1.783212e10,
        1.888090e10,
        1.998535e10,
        2.114810e10,
        2.237192e10,
        2.365965e10,
        2.501428e10,
        2.643891e10,
        2.793676e10,
        2.951121e10,
        3.116574e10,
        3.290399e10,
        3.472976e10,
        3.664695e10,
        3.865967e10,
        4.077217e10,
        4.298886e10,
        4.531432e10,
        4.775333e10,
        5.031083e10,
        5.299197e10,
        5.580208e10,
        5.874669e10,
        6.183156e10,
        6.506265e10,
        6.844617e10,
        7.198850e10,
        7.569632e10,
        7.957652e10,
        8.363629e10,
        8.788300e10,
        9.232438e10,
        9.696836e10,
        1.018233e11,
    ]
)

#  ---------------------- M = 13, I = 1 ---------------------------
M = 13
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.538496e01,
        1.602673e01,
        1.728778e01,
        2.005293e01,
        2.374009e01,
        2.800797e01,
        3.266623e01,
        3.759941e01,
        4.273326e01,
        4.801797e01,
        5.341894e01,
        5.891142e01,
        6.447729e01,
        7.010295e01,
        7.577806e01,
        8.149456e01,
        8.724613e01,
        9.302771e01,
        9.883525e01,
        1.046654e02,
        1.105156e02,
        1.163834e02,
        1.222671e02,
        1.281652e02,
        1.340764e02,
        1.399998e02,
        1.459345e02,
        1.518800e02,
        1.578359e02,
        1.638019e02,
        1.697777e02,
        1.757636e02,
        1.817594e02,
        1.877655e02,
        1.937821e02,
        1.998096e02,
        2.058484e02,
        2.118992e02,
        2.179624e02,
        2.240388e02,
        2.301290e02,
        2.362337e02,
        2.423537e02,
        2.484898e02,
        2.546428e02,
        2.608134e02,
        2.670027e02,
        2.732114e02,
        2.794403e02,
        2.856903e02,
        2.919624e02,
        2.982572e02,
        3.045757e02,
        3.109188e02,
        3.172871e02,
        3.236817e02,
        3.301032e02,
        3.365525e02,
        3.430303e02,
        3.495374e02,
        3.560745e02,
        3.626425e02,
        3.692419e02,
        3.758735e02,
        3.825380e02,
        3.892360e02,
        3.959682e02,
        4.027353e02,
        4.095377e02,
        4.163762e02,
        4.232513e02,
        4.301635e02,
        4.371135e02,
        4.441017e02,
        4.511287e02,
        4.581950e02,
        4.653011e02,
        4.724475e02,
        4.796345e02,
        4.868628e02,
        4.941326e02,
        5.014445e02,
        5.087989e02,
        5.161961e02,
        5.236366e02,
        5.311207e02,
        5.386489e02,
        5.462214e02,
        5.538387e02,
        5.615011e02,
        5.692089e02,
        5.769624e02,
        5.847620e02,
        5.926080e02,
        6.005006e02,
        6.084403e02,
        6.164272e02,
        6.244617e02,
        6.325440e02,
        6.406744e02,
        6.488532e02,
        6.570806e02,
        6.653569e02,
        6.736823e02,
        6.820571e02,
        6.904815e02,
        6.989557e02,
        7.074801e02,
        7.160547e02,
        7.246798e02,
        7.333557e02,
        7.420826e02,
        7.508606e02,
        7.596900e02,
        7.685709e02,
        7.775036e02,
        7.864883e02,
        7.955252e02,
        8.046144e02,
        8.137561e02,
        8.229506e02,
        8.321980e02,
        8.414985e02,
        8.508522e02,
        8.602594e02,
        8.697202e02,
        8.792348e02,
        8.888034e02,
        8.984261e02,
        9.081031e02,
        9.178345e02,
        9.276206e02,
        9.374615e02,
        9.473573e02,
        9.573083e02,
        9.673144e02,
        9.773761e02,
        9.874933e02,
        9.976662e02,
        1.007895e03,
        1.018180e03,
        1.028521e03,
        1.038918e03,
        1.049372e03,
        1.059883e03,
        1.070450e03,
        1.081075e03,
        1.091756e03,
        1.102495e03,
        1.113291e03,
        1.124144e03,
        1.135055e03,
        1.146024e03,
        1.157051e03,
        1.168136e03,
        1.179280e03,
        1.190482e03,
        1.201742e03,
        1.213061e03,
        1.224439e03,
        1.235875e03,
        1.247371e03,
        1.258926e03,
        1.270541e03,
        1.282215e03,
        1.293948e03,
        1.305742e03,
        1.317595e03,
        1.329509e03,
        1.341483e03,
        1.353517e03,
        1.365612e03,
        1.377767e03,
        1.389983e03,
        1.402260e03,
        1.414599e03,
        1.426998e03,
        1.439459e03,
        1.451981e03,
        1.464566e03,
        1.477211e03,
        1.489919e03,
        1.502689e03,
        1.515521e03,
        1.528416e03,
        1.541373e03,
        1.554393e03,
        1.567476e03,
        1.580621e03,
        1.593830e03,
        1.607102e03,
        1.620437e03,
        1.633836e03,
        1.647299e03,
        1.660825e03,
        1.674416e03,
        1.688070e03,
        1.701789e03,
        1.715573e03,
        1.729421e03,
        1.743334e03,
        1.757311e03,
        1.771354e03,
        1.785462e03,
        1.799635e03,
        1.813874e03,
        1.828179e03,
        1.842549e03,
        1.856985e03,
        1.871488e03,
        1.886056e03,
        1.900691e03,
        1.915393e03,
        1.930162e03,
        1.944997e03,
        1.959899e03,
        1.974869e03,
        1.989906e03,
        2.005010e03,
        2.020183e03,
        2.035423e03,
        2.050731e03,
        2.066107e03,
        2.081552e03,
        2.097065e03,
        2.112647e03,
        2.128297e03,
        2.144017e03,
        2.159805e03,
        2.175663e03,
        2.191591e03,
        2.207588e03,
        2.223654e03,
        2.239791e03,
        2.255998e03,
        2.272275e03,
        2.288623e03,
        2.305041e03,
        2.321530e03,
        2.338090e03,
        2.354721e03,
        2.371423e03,
        2.388197e03,
        2.405042e03,
        2.421959e03,
        2.438948e03,
        2.456009e03,
        2.473143e03,
        2.490349e03,
        2.507627e03,
        2.524978e03,
        2.542402e03,
        2.559899e03,
        2.577470e03,
        2.595114e03,
        2.612831e03,
        2.630622e03,
        2.648488e03,
        2.666427e03,
        2.684441e03,
        2.702529e03,
        2.720691e03,
        2.738929e03,
        2.757241e03,
        2.775629e03,
        2.794091e03,
        2.812630e03,
        2.831243e03,
        2.849933e03,
        2.868698e03,
        2.887540e03,
        2.906458e03,
        2.925453e03,
        2.944524e03,
        2.963671e03,
        2.982896e03,
        3.002198e03,
        3.021577e03,
        3.041034e03,
        3.060568e03,
        3.080180e03,
        3.099870e03,
        3.119638e03,
        3.139484e03,
        3.159409e03,
        3.179412e03,
        3.199494e03,
        3.219655e03,
        3.239895e03,
        3.260214e03,
        3.280613e03,
        3.301091e03,
        3.321649e03,
        3.342287e03,
        3.363005e03,
        3.383803e03,
        3.404681e03,
        3.425640e03,
        3.446680e03,
        3.467800e03,
        3.489001e03,
        3.510284e03,
        3.531647e03,
        3.553093e03,
        3.574619e03,
        3.596228e03,
        3.617918e03,
        3.639691e03,
        3.661545e03,
        3.683482e03,
        3.705502e03,
        3.727604e03,
        3.749788e03,
        3.772056e03,
        3.794407e03,
        3.816841e03,
        3.839358e03,
        3.861959e03,
        3.884644e03,
        3.907412e03,
        3.930264e03,
        3.953201e03,
        3.976221e03,
        3.999326e03,
        4.022515e03,
        4.045789e03,
        4.069147e03,
        4.092591e03,
        4.116119e03,
        4.139733e03,
        4.163432e03,
        4.187216e03,
        4.211086e03,
        4.235041e03,
        4.259082e03,
        4.283209e03,
        4.307422e03,
        4.331721e03,
        4.356107e03,
        4.380578e03,
        4.405137e03,
        4.429781e03,
        4.454513e03,
        4.479331e03,
        4.504237e03,
        4.529229e03,
        4.554309e03,
        4.579476e03,
        4.604730e03,
        4.630072e03,
        4.655502e03,
        4.681019e03,
        4.706624e03,
        4.732317e03,
        4.758098e03,
        4.783967e03,
        4.809924e03,
        4.835970e03,
        4.862104e03,
        4.888326e03,
        4.914637e03,
        4.941037e03,
        4.967526e03,
        4.994104e03,
        5.020770e03,
        5.047526e03,
        5.074371e03,
        5.101305e03,
        5.128328e03,
        5.155441e03,
        5.182643e03,
        5.209935e03,
        5.237316e03,
        5.264787e03,
        5.292348e03,
        5.319999e03,
        5.347739e03,
        5.375570e03,
        5.403491e03,
        5.431502e03,
        5.459603e03,
        5.487794e03,
        5.516076e03,
        5.544448e03,
        5.572910e03,
        5.601464e03,
        5.630107e03,
        5.658842e03,
        5.687667e03,
        5.716582e03,
        5.745589e03,
        5.774686e03,
        5.803874e03,
        5.833154e03,
        5.862524e03,
        5.891985e03,
        5.921537e03,
        5.951181e03,
        5.980916e03,
        6.010741e03,
        6.040658e03,
        6.070667e03,
        6.100766e03,
        6.130957e03,
        6.161240e03,
        6.191614e03,
        6.222079e03,
        6.252635e03,
        6.283284e03,
        6.314023e03,
        6.344855e03,
        6.375777e03,
        6.406792e03,
        6.437898e03,
        6.469095e03,
        6.500385e03,
        6.531765e03,
        6.563238e03,
        6.594802e03,
        6.626458e03,
        6.658206e03,
        6.690045e03,
        6.721976e03,
        6.753999e03,
        6.786113e03,
        6.818319e03,
        6.850617e03,
        6.883007e03,
        6.915488e03,
        6.948061e03,
        6.980726e03,
        7.013482e03,
        7.046330e03,
        7.079270e03,
        7.112302e03,
        7.145425e03,
        7.178640e03,
        7.211946e03,
        7.245344e03,
        7.278834e03,
        7.312415e03,
        7.346088e03,
        7.379852e03,
        7.413708e03,
        7.447655e03,
        7.481694e03,
        7.515824e03,
        7.550045e03,
        7.584358e03,
        7.618763e03,
        7.653258e03,
    ]
)

#  ---------------------- M = 13, I = 2 ---------------------------
M = 13
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.597389e01,
        1.605971e01,
        1.732986e01,
        2.012387e01,
        2.384501e01,
        2.814934e01,
        3.284552e01,
        3.781754e01,
        4.299087e01,
        4.831550e01,
        5.375673e01,
        5.928972e01,
        6.489630e01,
        7.056284e01,
        7.627897e01,
        8.203662e01,
        8.783033e01,
        9.365333e01,
        9.950433e01,
        1.053783e02,
        1.112735e02,
        1.171880e02,
        1.231211e02,
        1.290729e02,
        1.350413e02,
        1.410255e02,
        1.470291e02,
        1.530492e02,
        1.590887e02,
        1.651462e02,
        1.712253e02,
        1.773248e02,
        1.834470e02,
        1.895945e02,
        1.957642e02,
        2.019629e02,
        2.081875e02,
        2.144411e02,
        2.207268e02,
        2.270436e02,
        2.333928e02,
        2.397777e02,
        2.461972e02,
        2.526550e02,
        2.591499e02,
        2.656857e02,
        2.722610e02,
        2.788770e02,
        2.855378e02,
        2.922419e02,
        2.989905e02,
        3.057878e02,
        3.126291e02,
        3.195186e02,
        3.264576e02,
        3.334441e02,
        3.404823e02,
        3.475737e02,
        3.547126e02,
        3.619069e02,
        3.691508e02,
        3.764523e02,
        3.838055e02,
        3.912149e02,
        3.986779e02,
        4.061993e02,
        4.137762e02,
        4.214096e02,
        4.290963e02,
        4.368453e02,
        4.446536e02,
        4.525179e02,
        4.604431e02,
        4.684258e02,
        4.764670e02,
        4.845716e02,
        4.927317e02,
        5.009570e02,
        5.092437e02,
        5.175879e02,
        5.259950e02,
        5.344656e02,
        5.429958e02,
        5.515910e02,
        5.602469e02,
        5.689641e02,
        5.777484e02,
        5.865952e02,
        5.955001e02,
        6.044738e02,
        6.135065e02,
        6.226095e02,
        6.317725e02,
        6.410014e02,
        6.502913e02,
        6.596482e02,
        6.690726e02,
        6.785594e02,
        6.881090e02,
        6.977277e02,
        7.074100e02,
        7.171565e02,
        7.269735e02,
        7.368494e02,
        7.467968e02,
        7.568101e02,
        7.668831e02,
        7.770291e02,
        7.872422e02,
        7.975161e02,
        8.078577e02,
        8.182674e02,
        8.287457e02,
        8.392861e02,
        8.498957e02,
        8.605749e02,
        8.713171e02,
        8.821296e02,
        8.930058e02,
        9.039529e02,
        9.149714e02,
        9.260471e02,
        9.372022e02,
        9.484149e02,
        9.597003e02,
        9.710512e02,
        9.824755e02,
        9.939582e02,
        1.005515e03,
        1.017146e03,
        1.028836e03,
        1.040601e03,
        1.052425e03,
        1.064325e03,
        1.076292e03,
        1.088328e03,
        1.100432e03,
        1.112604e03,
        1.124845e03,
        1.137155e03,
        1.149542e03,
        1.161991e03,
        1.174509e03,
        1.187097e03,
        1.199746e03,
        1.212474e03,
        1.225273e03,
        1.238133e03,
        1.251065e03,
        1.264076e03,
        1.277150e03,
        1.290286e03,
        1.303503e03,
        1.316783e03,
        1.330135e03,
        1.343559e03,
        1.357046e03,
        1.370616e03,
        1.384249e03,
        1.397945e03,
        1.411724e03,
        1.425567e03,
        1.439474e03,
        1.453465e03,
        1.467520e03,
        1.481639e03,
        1.495832e03,
        1.510100e03,
        1.524443e03,
        1.538850e03,
        1.553323e03,
        1.567870e03,
        1.582494e03,
        1.597182e03,
        1.611947e03,
        1.626776e03,
    ]
)

#  ---------------------- M = 13, I = 3 ---------------------------
M = 13
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.398602e01,
        2.529396e01,
        3.190248e01,
        4.103232e01,
        5.180328e01,
        6.382165e01,
        7.678389e01,
        9.046186e01,
        1.046887e02,
        1.193429e02,
        1.343350e02,
        1.495984e02,
        1.650827e02,
        1.807493e02,
        1.965682e02,
        2.125155e02,
        2.285724e02,
        2.447236e02,
        2.609566e02,
        2.772613e02,
        2.936290e02,
        3.100527e02,
        3.265296e02,
        3.430483e02,
        3.596111e02,
        3.762111e02,
        3.928490e02,
        4.095183e02,
        4.262208e02,
        4.429551e02,
        4.597196e02,
        4.765132e02,
        4.933399e02,
        5.101943e02,
        5.270811e02,
        5.439947e02,
        5.609459e02,
        5.779297e02,
        5.949463e02,
        6.120082e02,
        6.290982e02,
        6.462353e02,
        6.634146e02,
        6.806371e02,
        6.979040e02,
        7.152234e02,
        7.325899e02,
        7.500121e02,
        7.674917e02,
        7.850226e02,
        8.026143e02,
        8.202684e02,
        8.379869e02,
        8.557801e02,
        8.736330e02,
        8.915558e02,
        9.095506e02,
        9.276191e02,
        9.457727e02,
        9.639948e02,
        9.823062e02,
        1.000699e03,
        1.019167e03,
        1.037730e03,
        1.056380e03,
        1.075110e03,
        1.093943e03,
        1.112858e03,
        1.131880e03,
        1.150989e03,
        1.170197e03,
        1.189507e03,
        1.208908e03,
        1.228415e03,
        1.248030e03,
        1.267742e03,
        1.287565e03,
        1.307488e03,
        1.327527e03,
        1.347670e03,
        1.367918e03,
        1.388287e03,
        1.408751e03,
        1.429339e03,
        1.450040e03,
        1.470854e03,
        1.491784e03,
        1.512831e03,
        1.533996e03,
        1.555282e03,
        1.576689e03,
        1.598204e03,
        1.619844e03,
        1.641594e03,
        1.663488e03,
        1.685495e03,
        1.707617e03,
        1.729870e03,
        1.752241e03,
        1.774729e03,
        1.797354e03,
        1.820116e03,
        1.842984e03,
        1.865991e03,
        1.889123e03,
        1.912380e03,
        1.935764e03,
        1.959275e03,
        1.982915e03,
        2.006703e03,
        2.030604e03,
        2.054636e03,
        2.078802e03,
        2.103083e03,
        2.127519e03,
        2.152071e03,
        2.176760e03,
        2.201588e03,
        2.226555e03,
        2.251642e03,
        2.276871e03,
        2.302222e03,
        2.327716e03,
        2.353353e03,
        2.379116e03,
        2.405003e03,
        2.431038e03,
        2.457199e03,
        2.483508e03,
        2.509946e03,
        2.536534e03,
        2.563252e03,
        2.590101e03,
        2.617102e03,
        2.644213e03,
        2.671478e03,
        2.698899e03,
        2.726432e03,
        2.754121e03,
        2.781922e03,
        2.809883e03,
        2.837979e03,
        2.866213e03,
        2.894608e03,
        2.923117e03,
        2.951765e03,
        2.980577e03,
        3.009504e03,
        3.038597e03,
        3.067806e03,
        3.097157e03,
        3.126676e03,
        3.156312e03,
        3.186092e03,
        3.216016e03,
        3.246085e03,
        3.276300e03,
        3.306660e03,
        3.337166e03,
        3.367793e03,
        3.398568e03,
        3.429490e03,
        3.460562e03,
        3.491782e03,
        3.523124e03,
        3.554617e03,
        3.586261e03,
        3.618055e03,
        3.649974e03,
        3.682073e03,
        3.714268e03,
        3.746645e03,
        3.779146e03,
        3.811803e03,
        3.844614e03,
        3.877551e03,
    ]
)

#  ---------------------- M = 14, I = 1 ---------------------------
M = 14
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.000000e00,
        4.626210e00,
        6.976320e00,
        9.595800e00,
        1.226348e01,
        1.494872e01,
        1.764266e01,
        2.034174e01,
        2.304424e01,
        2.574926e01,
        2.845624e01,
        3.116485e01,
        3.387487e01,
        3.658615e01,
        3.929857e01,
        4.201207e01,
        4.472657e01,
        4.744205e01,
        5.015846e01,
        5.287579e01,
        5.559401e01,
        5.831312e01,
        6.103312e01,
        6.375401e01,
        6.647583e01,
        6.919858e01,
        7.192233e01,
        7.464713e01,
        7.737305e01,
        8.010018e01,
        8.282863e01,
        8.555853e01,
        8.829002e01,
        9.102328e01,
        9.375848e01,
        9.649584e01,
        9.923557e01,
        1.019779e02,
        1.047231e02,
        1.074715e02,
        1.102232e02,
        1.129788e02,
        1.157383e02,
        1.185022e02,
        1.212707e02,
        1.240443e02,
        1.268232e02,
        1.296079e02,
        1.323986e02,
        1.351957e02,
        1.379995e02,
        1.408105e02,
        1.436289e02,
        1.464552e02,
        1.492896e02,
        1.521325e02,
        1.549843e02,
        1.578453e02,
        1.607158e02,
        1.635962e02,
        1.664868e02,
        1.693878e02,
        1.722998e02,
        1.752228e02,
        1.781573e02,
        1.811035e02,
        1.840617e02,
        1.870323e02,
        1.900154e02,
        1.930114e02,
        1.960205e02,
        1.990429e02,
        2.020790e02,
        2.051289e02,
        2.081930e02,
        2.112714e02,
        2.143644e02,
        2.174721e02,
        2.205948e02,
        2.237328e02,
        2.268862e02,
        2.300551e02,
        2.332399e02,
        2.364407e02,
        2.396577e02,
        2.428910e02,
        2.461408e02,
        2.494073e02,
        2.526907e02,
        2.559911e02,
        2.593087e02,
        2.626436e02,
        2.659960e02,
        2.693660e02,
        2.727538e02,
        2.761594e02,
        2.795831e02,
        2.830250e02,
        2.864851e02,
        2.899636e02,
        2.934607e02,
        2.969764e02,
        3.005109e02,
        3.040643e02,
        3.076367e02,
        3.112281e02,
        3.148388e02,
        3.184687e02,
        3.221181e02,
        3.257869e02,
        3.294754e02,
        3.331835e02,
        3.369115e02,
        3.406592e02,
        3.444270e02,
        3.482148e02,
        3.520228e02,
        3.558509e02,
        3.596994e02,
        3.635682e02,
        3.674576e02,
        3.713674e02,
        3.752979e02,
        3.792490e02,
        3.832209e02,
        3.872136e02,
        3.912273e02,
        3.952619e02,
        3.993176e02,
        4.033944e02,
        4.074924e02,
        4.116116e02,
        4.157521e02,
        4.199140e02,
        4.240974e02,
        4.283022e02,
        4.325286e02,
        4.367767e02,
        4.410464e02,
        4.453379e02,
        4.496512e02,
        4.539863e02,
        4.583434e02,
        4.627224e02,
        4.671235e02,
        4.715467e02,
        4.759920e02,
        4.804595e02,
        4.849493e02,
        4.894613e02,
        4.939958e02,
        4.985526e02,
        5.031320e02,
        5.077338e02,
        5.123582e02,
        5.170052e02,
        5.216749e02,
        5.263673e02,
        5.310825e02,
        5.358205e02,
        5.405813e02,
        5.453651e02,
        5.501718e02,
        5.550016e02,
        5.598544e02,
        5.647303e02,
        5.696293e02,
        5.745516e02,
        5.794971e02,
        5.844659e02,
        5.894580e02,
        5.944735e02,
        5.995124e02,
        6.045748e02,
        6.096607e02,
        6.147701e02,
        6.199032e02,
        6.250599e02,
        6.302403e02,
        6.354444e02,
        6.406723e02,
        6.459240e02,
        6.511995e02,
        6.564990e02,
        6.618224e02,
        6.671698e02,
        6.725412e02,
        6.779366e02,
        6.833562e02,
        6.887999e02,
        6.942678e02,
        6.997600e02,
        7.052764e02,
        7.108171e02,
        7.163821e02,
        7.219715e02,
        7.275854e02,
        7.332237e02,
        7.388865e02,
        7.445739e02,
        7.502858e02,
        7.560223e02,
        7.617835e02,
        7.675694e02,
        7.733800e02,
        7.792153e02,
        7.850755e02,
        7.909605e02,
        7.968704e02,
        8.028052e02,
        8.087649e02,
        8.147496e02,
        8.207593e02,
        8.267940e02,
        8.328539e02,
        8.389388e02,
        8.450490e02,
        8.511843e02,
        8.573448e02,
        8.635306e02,
        8.697416e02,
        8.759780e02,
        8.822397e02,
        8.885269e02,
        8.948394e02,
        9.011774e02,
        9.075409e02,
        9.139299e02,
        9.203444e02,
        9.267845e02,
        9.332502e02,
        9.397416e02,
        9.462586e02,
        9.528014e02,
        9.593698e02,
        9.659640e02,
        9.725841e02,
        9.792299e02,
        9.859015e02,
        9.925991e02,
        9.993225e02,
        1.006072e03,
        1.012847e03,
        1.019649e03,
        1.026476e03,
        1.033329e03,
        1.040209e03,
        1.047114e03,
        1.054046e03,
        1.061004e03,
        1.067988e03,
        1.074998e03,
        1.082034e03,
        1.089097e03,
        1.096186e03,
        1.103301e03,
        1.110443e03,
        1.117611e03,
        1.124805e03,
        1.132026e03,
        1.139273e03,
        1.146546e03,
        1.153846e03,
        1.161173e03,
        1.168525e03,
        1.175905e03,
        1.183311e03,
        1.190743e03,
        1.198203e03,
        1.205688e03,
        1.213201e03,
        1.220740e03,
        1.228306e03,
        1.235898e03,
        1.243517e03,
        1.251163e03,
        1.258835e03,
        1.266535e03,
        1.274261e03,
        1.282013e03,
        1.289793e03,
        1.297600e03,
        1.305433e03,
        1.313293e03,
        1.321180e03,
        1.329094e03,
        1.337035e03,
        1.345003e03,
        1.352997e03,
        1.361019e03,
        1.369067e03,
        1.377143e03,
        1.385245e03,
        1.393375e03,
        1.401531e03,
        1.409715e03,
        1.417925e03,
        1.426163e03,
        1.434428e03,
        1.442719e03,
        1.451038e03,
    ]
)

#  ---------------------- M = 14, I = 2 ---------------------------
M = 14
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        1.005366e01,
        1.753287e01,
        2.515838e01,
        3.281701e01,
        4.048954e01,
        4.816994e01,
        5.585570e01,
        6.354558e01,
        7.123892e01,
        7.893531e01,
        8.663450e01,
        9.433634e01,
        1.020407e02,
        1.097475e02,
        1.174568e02,
        1.251685e02,
        1.328827e02,
        1.405995e02,
        1.483191e02,
        1.560419e02,
        1.637681e02,
        1.714984e02,
        1.792334e02,
        1.869738e02,
        1.947206e02,
        2.024749e02,
        2.102378e02,
        2.180106e02,
        2.257947e02,
        2.335917e02,
        2.414030e02,
        2.492305e02,
        2.570757e02,
        2.649405e02,
        2.728267e02,
        2.807361e02,
        2.886704e02,
        2.966316e02,
        3.046215e02,
        3.126418e02,
        3.206944e02,
        3.287810e02,
        3.369034e02,
        3.450632e02,
        3.532621e02,
        3.615017e02,
        3.697836e02,
        3.781092e02,
        3.864802e02,
        3.948978e02,
        4.033635e02,
        4.118787e02,
        4.204445e02,
        4.290623e02,
        4.377333e02,
        4.464585e02,
        4.552392e02,
        4.640764e02,
        4.729710e02,
        4.819242e02,
        4.909369e02,
        5.000099e02,
        5.091442e02,
        5.183406e02,
        5.276000e02,
        5.369230e02,
        5.463105e02,
        5.557632e02,
        5.652818e02,
        5.748670e02,
        5.845194e02,
        5.942396e02,
        6.040283e02,
        6.138860e02,
        6.238133e02,
        6.338107e02,
        6.438787e02,
        6.540179e02,
        6.642288e02,
        6.745117e02,
        6.848672e02,
        6.952957e02,
        7.057977e02,
        7.163734e02,
        7.270235e02,
        7.377481e02,
        7.485477e02,
        7.594228e02,
        7.703735e02,
        7.814004e02,
        7.925036e02,
        8.036835e02,
        8.149406e02,
        8.262749e02,
        8.376870e02,
        8.491770e02,
        8.607452e02,
        8.723920e02,
        8.841176e02,
        8.959222e02,
        9.078062e02,
        9.197698e02,
        9.318132e02,
        9.439367e02,
        9.561405e02,
        9.684249e02,
        9.807901e02,
        9.932363e02,
        1.005764e03,
        1.018373e03,
        1.031063e03,
        1.043836e03,
        1.056690e03,
        1.069627e03,
        1.082647e03,
        1.095749e03,
        1.108934e03,
        1.122202e03,
        1.135553e03,
        1.148988e03,
        1.162506e03,
        1.176109e03,
        1.189795e03,
        1.203566e03,
        1.217421e03,
        1.231360e03,
        1.245384e03,
        1.259493e03,
        1.273688e03,
        1.287967e03,
        1.302332e03,
        1.316782e03,
        1.331318e03,
        1.345940e03,
        1.360648e03,
        1.375442e03,
        1.390322e03,
        1.405289e03,
        1.420342e03,
        1.435482e03,
        1.450709e03,
        1.466023e03,
        1.481425e03,
        1.496913e03,
        1.512490e03,
        1.528153e03,
        1.543905e03,
        1.559744e03,
        1.575672e03,
        1.591687e03,
        1.607791e03,
        1.623983e03,
        1.640264e03,
        1.656633e03,
        1.673092e03,
        1.689639e03,
        1.706275e03,
        1.723000e03,
        1.739815e03,
        1.756718e03,
        1.773712e03,
        1.790795e03,
        1.807968e03,
        1.825230e03,
        1.842583e03,
        1.860025e03,
        1.877558e03,
        1.895181e03,
        1.912894e03,
        1.930698e03,
        1.948593e03,
        1.966578e03,
        1.984654e03,
        2.002820e03,
        2.021078e03,
        2.039427e03,
        2.057867e03,
        2.076398e03,
        2.095020e03,
        2.113734e03,
        2.132540e03,
        2.151437e03,
        2.170425e03,
        2.189506e03,
        2.208678e03,
        2.227942e03,
        2.247298e03,
        2.266747e03,
        2.286287e03,
        2.305920e03,
        2.325645e03,
        2.345462e03,
        2.365371e03,
        2.385374e03,
        2.405468e03,
        2.425656e03,
        2.445936e03,
        2.466309e03,
        2.486774e03,
        2.507333e03,
        2.527984e03,
        2.548729e03,
        2.569566e03,
        2.590496e03,
        2.611520e03,
        2.632637e03,
        2.653847e03,
        2.675150e03,
        2.696547e03,
        2.718037e03,
        2.739621e03,
        2.761298e03,
        2.783068e03,
        2.804932e03,
        2.826890e03,
        2.848941e03,
        2.871086e03,
        2.893324e03,
        2.915656e03,
        2.938082e03,
        2.960602e03,
        2.983215e03,
        3.005923e03,
        3.028724e03,
        3.051619e03,
        3.074608e03,
        3.097690e03,
        3.120867e03,
        3.144138e03,
        3.167502e03,
        3.190961e03,
        3.214513e03,
        3.238160e03,
        3.261900e03,
        3.285735e03,
        3.309663e03,
        3.333686e03,
        3.357802e03,
        3.382013e03,
        3.406318e03,
        3.430716e03,
        3.455209e03,
        3.479796e03,
        3.504477e03,
        3.529252e03,
        3.554120e03,
        3.579083e03,
        3.604140e03,
        3.629291e03,
        3.654536e03,
        3.679875e03,
        3.705308e03,
        3.730835e03,
        3.756455e03,
        3.782170e03,
        3.807979e03,
        3.833881e03,
        3.859877e03,
        3.885968e03,
        3.912152e03,
        3.938429e03,
        3.964801e03,
        3.991266e03,
        4.017826e03,
        4.044478e03,
        4.071225e03,
        4.098065e03,
        4.124999e03,
        4.152026e03,
        4.179147e03,
        4.206362e03,
        4.233670e03,
        4.261071e03,
        4.288566e03,
        4.316154e03,
        4.343836e03,
        4.371610e03,
        4.399478e03,
        4.427440e03,
        4.455494e03,
        4.483642e03,
        4.511883e03,
        4.540216e03,
        4.568643e03,
        4.597163e03,
        4.625776e03,
        4.654481e03,
        4.683279e03,
        4.712171e03,
        4.741154e03,
        4.770231e03,
        4.799400e03,
        4.828661e03,
        4.858015e03,
        4.887462e03,
        4.917001e03,
        4.946632e03,
        4.976356e03,
        5.006171e03,
        5.036079e03,
    ]
)

#  ---------------------- M = 15, I = 1 ---------------------------
M = 15
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.000000e00,
        1.379368e01,
        2.419193e01,
        3.477493e01,
        4.540023e01,
        5.604342e01,
        6.669682e01,
        7.735721e01,
        8.802303e01,
        9.869341e01,
        1.093679e02,
        1.200460e02,
        1.307278e02,
        1.414129e02,
        1.521013e02,
        1.627930e02,
        1.734880e02,
        1.841863e02,
        1.948883e02,
        2.055941e02,
        2.163042e02,
        2.270192e02,
        2.377399e02,
        2.484672e02,
        2.592022e02,
        2.699463e02,
        2.807009e02,
        2.914679e02,
        3.022490e02,
        3.130462e02,
        3.238617e02,
        3.346978e02,
        3.455568e02,
        3.564412e02,
        3.673535e02,
        3.782961e02,
        3.892717e02,
        4.002829e02,
        4.113322e02,
        4.224223e02,
        4.335555e02,
        4.447346e02,
        4.559619e02,
        4.672398e02,
        4.785708e02,
        4.899571e02,
        5.014011e02,
        5.129049e02,
        5.244706e02,
        5.361002e02,
        5.477959e02,
        5.595596e02,
        5.713930e02,
        5.832980e02,
        5.952764e02,
        6.073297e02,
        6.194597e02,
        6.316679e02,
        6.439557e02,
        6.563247e02,
        6.687761e02,
        6.813114e02,
        6.939317e02,
        7.066385e02,
        7.194327e02,
        7.323156e02,
        7.452883e02,
        7.583518e02,
        7.715072e02,
        7.847553e02,
        7.980973e02,
        8.115339e02,
        8.250660e02,
        8.386946e02,
        8.524203e02,
        8.662441e02,
        8.801667e02,
        8.941887e02,
        9.083110e02,
        9.225341e02,
        9.368588e02,
        9.512857e02,
        9.658154e02,
        9.804486e02,
        9.951858e02,
        1.010028e03,
        1.024974e03,
        1.040027e03,
        1.055186e03,
        1.070451e03,
        1.085824e03,
        1.101304e03,
        1.116893e03,
        1.132590e03,
        1.148396e03,
        1.164312e03,
        1.180338e03,
        1.196474e03,
        1.212720e03,
        1.229078e03,
        1.245547e03,
        1.262129e03,
        1.278822e03,
        1.295628e03,
        1.312548e03,
        1.329580e03,
        1.346727e03,
        1.363987e03,
        1.381362e03,
        1.398851e03,
        1.416456e03,
        1.434176e03,
        1.452011e03,
        1.469963e03,
        1.488031e03,
        1.506216e03,
        1.524517e03,
        1.542936e03,
        1.561472e03,
        1.580126e03,
        1.598899e03,
        1.617789e03,
        1.636798e03,
        1.655927e03,
        1.675174e03,
        1.694541e03,
        1.714027e03,
        1.733634e03,
        1.753361e03,
        1.773209e03,
        1.793177e03,
        1.813266e03,
        1.833477e03,
        1.853809e03,
        1.874263e03,
        1.894840e03,
        1.915538e03,
        1.936359e03,
        1.957303e03,
        1.978370e03,
        1.999561e03,
        2.020875e03,
        2.042312e03,
        2.063874e03,
        2.085560e03,
        2.107371e03,
        2.129306e03,
        2.151366e03,
        2.173551e03,
        2.195862e03,
        2.218299e03,
        2.240861e03,
        2.263549e03,
        2.286364e03,
        2.309305e03,
        2.332374e03,
        2.355569e03,
        2.378891e03,
        2.402340e03,
        2.425918e03,
        2.449623e03,
        2.473456e03,
        2.497418e03,
        2.521507e03,
        2.545726e03,
        2.570074e03,
        2.594550e03,
        2.619156e03,
        2.643891e03,
        2.668756e03,
        2.693751e03,
        2.718877e03,
        2.744132e03,
        2.769518e03,
        2.795034e03,
        2.820682e03,
        2.846460e03,
        2.872370e03,
        2.898411e03,
        2.924584e03,
        2.950888e03,
        2.977325e03,
        3.003893e03,
        3.030594e03,
        3.057428e03,
        3.084394e03,
        3.111494e03,
        3.138726e03,
        3.166091e03,
        3.193590e03,
        3.221223e03,
        3.248989e03,
        3.276889e03,
        3.304923e03,
        3.333091e03,
        3.361394e03,
        3.389831e03,
        3.418403e03,
        3.447110e03,
        3.475952e03,
        3.504929e03,
        3.534041e03,
        3.563288e03,
        3.592672e03,
        3.622191e03,
        3.651846e03,
        3.681637e03,
        3.711564e03,
        3.741627e03,
        3.771827e03,
        3.802164e03,
        3.832637e03,
        3.863247e03,
        3.893994e03,
        3.924878e03,
        3.955899e03,
        3.987057e03,
        4.018353e03,
        4.049787e03,
        4.081358e03,
        4.113067e03,
        4.144914e03,
        4.176899e03,
        4.209023e03,
        4.241284e03,
        4.273684e03,
        4.306222e03,
        4.338898e03,
        4.371714e03,
        4.404668e03,
        4.437761e03,
        4.470993e03,
        4.504364e03,
        4.537874e03,
        4.571523e03,
        4.605311e03,
        4.639239e03,
        4.673306e03,
        4.707513e03,
        4.741860e03,
        4.776346e03,
        4.810971e03,
        4.845737e03,
        4.880642e03,
        4.915688e03,
        4.950873e03,
        4.986199e03,
        5.021664e03,
        5.057270e03,
        5.093016e03,
        5.128903e03,
        5.164930e03,
        5.201097e03,
        5.237404e03,
        5.273852e03,
        5.310441e03,
        5.347170e03,
        5.384040e03,
        5.421050e03,
        5.458201e03,
        5.495493e03,
        5.532926e03,
        5.570499e03,
        5.608213e03,
        5.646068e03,
        5.684064e03,
        5.722201e03,
        5.760479e03,
        5.798897e03,
        5.837457e03,
        5.876157e03,
        5.914998e03,
        5.953981e03,
        5.993104e03,
        6.032368e03,
        6.071773e03,
        6.111319e03,
        6.151006e03,
        6.190834e03,
        6.230803e03,
        6.270913e03,
        6.311164e03,
        6.351555e03,
        6.392088e03,
        6.432761e03,
        6.473575e03,
        6.514531e03,
        6.555626e03,
        6.596863e03,
        6.638241e03,
        6.679759e03,
        6.721418e03,
        6.763217e03,
        6.805157e03,
        6.847238e03,
        6.889459e03,
        6.931821e03,
        6.974323e03,
        7.016966e03,
        7.059749e03,
        7.102672e03,
    ]
)

#  ---------------------- M = 15, I = 2 ---------------------------
M = 15
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.000000e00,
        1.380884e01,
        2.422364e01,
        3.482280e01,
        4.546420e01,
        5.612347e01,
        6.679294e01,
        7.746940e01,
        8.815129e01,
        9.883774e01,
        1.095283e02,
        1.202225e02,
        1.309203e02,
        1.416215e02,
        1.523260e02,
        1.630338e02,
        1.737449e02,
        1.844594e02,
        1.951774e02,
        2.058993e02,
        2.166256e02,
        2.273568e02,
        2.380936e02,
        2.488371e02,
        2.595884e02,
        2.703487e02,
        2.811197e02,
        2.919031e02,
        3.027006e02,
        3.135144e02,
        3.243465e02,
        3.351994e02,
        3.460752e02,
        3.569765e02,
        3.679058e02,
        3.788657e02,
        3.898586e02,
        4.008872e02,
        4.119542e02,
        4.230620e02,
        4.342132e02,
        4.454103e02,
        4.566559e02,
        4.679523e02,
        4.793019e02,
        4.907071e02,
        5.021701e02,
        5.136932e02,
        5.252783e02,
        5.369277e02,
        5.486432e02,
        5.604270e02,
        5.722807e02,
        5.842062e02,
        5.962054e02,
        6.082797e02,
        6.204309e02,
        6.326605e02,
        6.449701e02,
        6.573609e02,
        6.698345e02,
        6.823922e02,
        6.950352e02,
        7.077648e02,
        7.205821e02,
        7.334884e02,
        7.464847e02,
        7.595720e02,
        7.727515e02,
        7.860240e02,
        7.993905e02,
        8.128519e02,
        8.264092e02,
        8.400631e02,
        8.538144e02,
        8.676641e02,
        8.816127e02,
        8.956611e02,
        9.098099e02,
        9.240599e02,
        9.384118e02,
        9.528660e02,
        9.674234e02,
        9.820845e02,
        9.968498e02,
        1.011720e03,
        1.026696e03,
        1.041777e03,
        1.056965e03,
        1.072260e03,
        1.087662e03,
        1.103173e03,
        1.118791e03,
        1.134519e03,
        1.150356e03,
        1.166303e03,
        1.182360e03,
        1.198527e03,
        1.214806e03,
        1.231195e03,
        1.247697e03,
        1.264311e03,
        1.281037e03,
        1.297877e03,
        1.314829e03,
        1.331896e03,
        1.349076e03,
        1.366370e03,
        1.383780e03,
        1.401304e03,
        1.418943e03,
        1.436699e03,
        1.454570e03,
        1.472557e03,
        1.490661e03,
        1.508882e03,
        1.527220e03,
        1.545676e03,
        1.564249e03,
        1.582941e03,
        1.601751e03,
        1.620679e03,
        1.639727e03,
        1.658894e03,
        1.678180e03,
        1.697586e03,
        1.717112e03,
        1.736758e03,
        1.756525e03,
        1.776412e03,
        1.796421e03,
        1.816551e03,
        1.836803e03,
        1.857176e03,
        1.877672e03,
        1.898290e03,
        1.919031e03,
        1.939894e03,
        1.960881e03,
        1.981991e03,
        2.003225e03,
        2.024582e03,
        2.046063e03,
        2.067669e03,
        2.089399e03,
        2.111255e03,
        2.133235e03,
        2.155340e03,
        2.177571e03,
        2.199928e03,
        2.222410e03,
        2.245019e03,
        2.267754e03,
        2.290615e03,
        2.313604e03,
        2.336719e03,
        2.359962e03,
        2.383332e03,
        2.406830e03,
        2.430456e03,
        2.454210e03,
        2.478092e03,
        2.502103e03,
        2.526243e03,
        2.550512e03,
        2.574909e03,
        2.599436e03,
        2.624093e03,
        2.648880e03,
        2.673796e03,
        2.698843e03,
        2.724020e03,
        2.749328e03,
        2.774766e03,
        2.800335e03,
        2.826036e03,
        2.851868e03,
        2.877831e03,
        2.903926e03,
        2.930154e03,
        2.956513e03,
        2.983004e03,
        3.009628e03,
        3.036385e03,
        3.063274e03,
        3.090296e03,
        3.117452e03,
        3.144741e03,
        3.172163e03,
        3.199719e03,
        3.227409e03,
        3.255233e03,
        3.283191e03,
        3.311284e03,
        3.339510e03,
        3.367872e03,
        3.396369e03,
        3.425000e03,
        3.453767e03,
        3.482669e03,
        3.511706e03,
        3.540879e03,
        3.570188e03,
        3.599632e03,
        3.629213e03,
        3.658929e03,
        3.688783e03,
        3.718772e03,
        3.748898e03,
        3.779161e03,
        3.809561e03,
        3.840098e03,
        3.870771e03,
        3.901583e03,
        3.932531e03,
        3.963617e03,
        3.994841e03,
        4.026202e03,
        4.057701e03,
        4.089338e03,
        4.121113e03,
        4.153027e03,
        4.185079e03,
        4.217269e03,
        4.249598e03,
        4.282065e03,
        4.314671e03,
        4.347416e03,
        4.380300e03,
        4.413323e03,
        4.446485e03,
        4.479786e03,
        4.513226e03,
        4.546806e03,
        4.580526e03,
        4.614385e03,
        4.648383e03,
        4.682522e03,
        4.716800e03,
        4.751218e03,
        4.785776e03,
        4.820474e03,
        4.855312e03,
        4.890290e03,
        4.925409e03,
        4.960667e03,
        4.996067e03,
        5.031606e03,
        5.067286e03,
        5.103107e03,
        5.139068e03,
        5.175170e03,
        5.211412e03,
        5.247795e03,
        5.284319e03,
        5.320984e03,
        5.357790e03,
        5.394736e03,
        5.431824e03,
        5.469052e03,
        5.506421e03,
        5.543932e03,
        5.581583e03,
        5.619376e03,
        5.657310e03,
        5.695385e03,
        5.733601e03,
        5.771958e03,
        5.810456e03,
        5.849096e03,
        5.887876e03,
        5.926798e03,
        5.965862e03,
        6.005066e03,
        6.044412e03,
        6.083898e03,
        6.123527e03,
        6.163296e03,
        6.203206e03,
        6.243258e03,
        6.283451e03,
        6.323785e03,
        6.364261e03,
        6.404877e03,
        6.445635e03,
        6.486534e03,
        6.527574e03,
        6.568755e03,
        6.610077e03,
        6.651540e03,
        6.693144e03,
        6.734889e03,
        6.776775e03,
        6.818802e03,
        6.860969e03,
        6.903278e03,
        6.945727e03,
        6.988317e03,
        7.031048e03,
        7.073919e03,
        7.116931e03,
    ]
)

#  ---------------------- M = 15, I = 3 ---------------------------
M = 15
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.200001e01,
        3.527472e01,
        6.604716e01,
        9.694745e01,
        1.278841e02,
        1.588401e02,
        1.898098e02,
        2.207909e02,
        2.517823e02,
        2.827832e02,
        3.137934e02,
        3.448129e02,
        3.758418e02,
        4.068811e02,
        4.379322e02,
        4.689977e02,
        5.000812e02,
        5.311880e02,
        5.623246e02,
        5.934988e02,
        6.247200e02,
        6.559986e02,
        6.873464e02,
        7.187757e02,
        7.502996e02,
        7.819318e02,
        8.136862e02,
        8.455769e02,
        8.776178e02,
        9.098230e02,
        9.422062e02,
        9.747808e02,
        1.007560e03,
        1.040555e03,
        1.073780e03,
        1.107246e03,
        1.140963e03,
        1.174943e03,
        1.209195e03,
        1.243729e03,
        1.278555e03,
        1.313680e03,
        1.349113e03,
        1.384862e03,
        1.420935e03,
        1.457337e03,
        1.494076e03,
        1.531157e03,
        1.568588e03,
        1.606372e03,
        1.644516e03,
        1.683025e03,
        1.721902e03,
        1.761153e03,
        1.800782e03,
        1.840792e03,
        1.881188e03,
        1.921974e03,
        1.963151e03,
        2.004725e03,
        2.046697e03,
        2.089072e03,
        2.131851e03,
        2.175038e03,
        2.218634e03,
        2.262643e03,
        2.307067e03,
        2.351908e03,
        2.397169e03,
        2.442851e03,
        2.488956e03,
        2.535486e03,
        2.582444e03,
        2.629831e03,
        2.677648e03,
        2.725898e03,
        2.774582e03,
        2.823702e03,
        2.873259e03,
        2.923254e03,
        2.973690e03,
        3.024567e03,
        3.075888e03,
        3.127652e03,
        3.179862e03,
        3.232519e03,
        3.285625e03,
        3.339179e03,
        3.393184e03,
        3.447641e03,
        3.502550e03,
        3.557914e03,
        3.613733e03,
        3.670008e03,
        3.726740e03,
        3.783930e03,
        3.841580e03,
        3.899690e03,
        3.958261e03,
        4.017295e03,
        4.076791e03,
        4.136753e03,
        4.197179e03,
        4.258071e03,
        4.319431e03,
        4.381258e03,
        4.443554e03,
        4.506320e03,
        4.569557e03,
        4.633264e03,
        4.697444e03,
        4.762098e03,
        4.827225e03,
        4.892827e03,
        4.958904e03,
        5.025457e03,
        5.092488e03,
        5.159997e03,
        5.227984e03,
        5.296451e03,
        5.365397e03,
        5.434825e03,
        5.504734e03,
        5.575125e03,
        5.646000e03,
        5.717358e03,
        5.789200e03,
        5.861527e03,
        5.934340e03,
        6.007640e03,
        6.081426e03,
        6.155700e03,
        6.230462e03,
        6.305713e03,
        6.381453e03,
        6.457684e03,
        6.534405e03,
        6.611617e03,
        6.689320e03,
        6.767516e03,
        6.846205e03,
        6.925387e03,
        7.005063e03,
        7.085233e03,
        7.165898e03,
        7.247058e03,
        7.328713e03,
        7.410865e03,
        7.493514e03,
        7.576660e03,
        7.660303e03,
        7.744444e03,
        7.829083e03,
        7.914221e03,
        7.999858e03,
        8.085994e03,
        8.172630e03,
        8.259766e03,
        8.347402e03,
        8.435540e03,
        8.524178e03,
        8.613317e03,
        8.702958e03,
        8.793101e03,
        8.883746e03,
        8.974893e03,
        9.066542e03,
        9.158695e03,
        9.251350e03,
        9.344509e03,
        9.438170e03,
        9.532336e03,
        9.627005e03,
        9.722177e03,
        9.817854e03,
        9.914034e03,
        1.001072e04,
        1.010791e04,
        1.020560e04,
        1.030380e04,
        1.040250e04,
        1.050171e04,
        1.060142e04,
        1.070163e04,
        1.080235e04,
        1.090358e04,
        1.100530e04,
        1.110754e04,
        1.121027e04,
        1.131352e04,
        1.141726e04,
        1.152151e04,
        1.162627e04,
        1.173152e04,
        1.183728e04,
        1.194355e04,
        1.205032e04,
        1.215759e04,
        1.226537e04,
        1.237364e04,
        1.248242e04,
        1.259171e04,
        1.270149e04,
        1.281178e04,
        1.292257e04,
        1.303386e04,
        1.314566e04,
        1.325795e04,
        1.337075e04,
        1.348404e04,
        1.359784e04,
        1.371213e04,
        1.382693e04,
        1.394222e04,
        1.405802e04,
        1.417431e04,
        1.429110e04,
        1.440838e04,
        1.452617e04,
        1.464445e04,
        1.476323e04,
        1.488250e04,
        1.500227e04,
        1.512254e04,
        1.524329e04,
        1.536455e04,
        1.548629e04,
        1.560853e04,
        1.573127e04,
        1.585449e04,
        1.597821e04,
        1.610241e04,
        1.622711e04,
        1.635230e04,
        1.647798e04,
        1.660414e04,
        1.673080e04,
        1.685794e04,
        1.698556e04,
        1.711368e04,
        1.724228e04,
        1.737136e04,
        1.750093e04,
        1.763099e04,
        1.776152e04,
        1.789254e04,
        1.802404e04,
        1.815602e04,
        1.828848e04,
        1.842142e04,
        1.855484e04,
        1.868874e04,
        1.882311e04,
        1.895796e04,
        1.909329e04,
        1.922909e04,
        1.936536e04,
        1.950211e04,
        1.963933e04,
        1.977703e04,
        1.991519e04,
        2.005382e04,
        2.019293e04,
        2.033250e04,
        2.047254e04,
        2.061304e04,
        2.075401e04,
        2.089545e04,
        2.103735e04,
        2.117971e04,
        2.132254e04,
        2.146582e04,
        2.160957e04,
        2.175378e04,
        2.189844e04,
        2.204356e04,
        2.218914e04,
        2.233518e04,
        2.248166e04,
        2.262861e04,
        2.277600e04,
        2.292385e04,
        2.307215e04,
        2.322090e04,
        2.337009e04,
        2.351974e04,
        2.366983e04,
        2.382036e04,
        2.397134e04,
        2.412277e04,
        2.427464e04,
        2.442694e04,
        2.457969e04,
        2.473288e04,
        2.488651e04,
        2.504057e04,
        2.519507e04,
        2.535001e04,
        2.550537e04,
        2.566118e04,
        2.581741e04,
    ]
)

#  ---------------------- M = 15, I = 4 ---------------------------
M = 15
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.200001e01,
        3.536447e01,
        6.622832e01,
        9.721965e01,
        1.282473e02,
        1.592942e02,
        1.903549e02,
        2.214270e02,
        2.525093e02,
        2.836013e02,
        3.147026e02,
        3.458131e02,
        3.769332e02,
        4.080636e02,
        4.392059e02,
        4.703627e02,
        5.015378e02,
        5.327363e02,
        5.639649e02,
        5.952315e02,
        6.265456e02,
        6.579177e02,
        6.893595e02,
        7.208836e02,
        7.525032e02,
        7.842320e02,
        8.160840e02,
        8.480734e02,
        8.802143e02,
        9.125207e02,
        9.450063e02,
        9.776848e02,
        1.010569e03,
        1.043672e03,
        1.077005e03,
        1.110580e03,
        1.144409e03,
        1.178502e03,
        1.212869e03,
        1.247520e03,
        1.282464e03,
        1.317709e03,
        1.353264e03,
        1.389137e03,
        1.425335e03,
        1.461864e03,
        1.498732e03,
        1.535944e03,
        1.573507e03,
        1.611425e03,
        1.649705e03,
        1.688351e03,
        1.727367e03,
        1.766759e03,
        1.806529e03,
        1.846683e03,
        1.887223e03,
        1.928154e03,
        1.969478e03,
        2.011199e03,
        2.053320e03,
        2.095842e03,
        2.138770e03,
        2.182105e03,
        2.225850e03,
        2.270007e03,
        2.314578e03,
        2.359564e03,
        2.404969e03,
        2.450792e03,
        2.497037e03,
        2.543704e03,
        2.590795e03,
        2.638311e03,
        2.686254e03,
        2.734623e03,
        2.783422e03,
        2.832649e03,
        2.882307e03,
        2.932396e03,
        2.982916e03,
        3.033868e03,
        3.085254e03,
        3.137072e03,
        3.189325e03,
        3.242011e03,
        3.295131e03,
        3.348686e03,
        3.402676e03,
        3.457100e03,
        3.511959e03,
        3.567253e03,
        3.622981e03,
        3.679143e03,
        3.735740e03,
        3.792771e03,
        3.850235e03,
        3.908133e03,
        3.966464e03,
        4.025226e03,
        4.084421e03,
        4.144048e03,
        4.204105e03,
        4.264592e03,
        4.325508e03,
        4.386854e03,
        4.448627e03,
        4.510828e03,
        4.573454e03,
        4.636507e03,
        4.699984e03,
        4.763884e03,
        4.828207e03,
        4.892952e03,
        4.958117e03,
        5.023701e03,
        5.089704e03,
        5.156124e03,
        5.222959e03,
        5.290210e03,
        5.357874e03,
        5.425950e03,
        5.494437e03,
        5.563333e03,
        5.632638e03,
        5.702349e03,
        5.772466e03,
        5.842987e03,
        5.913910e03,
        5.985234e03,
        6.056957e03,
        6.129079e03,
        6.201596e03,
        6.274509e03,
        6.347814e03,
        6.421511e03,
        6.495598e03,
        6.570073e03,
        6.644935e03,
        6.720182e03,
        6.795811e03,
        6.871822e03,
        6.948213e03,
        7.024981e03,
        7.102125e03,
        7.179643e03,
        7.257534e03,
        7.335796e03,
        7.414426e03,
        7.493422e03,
        7.572784e03,
        7.652509e03,
        7.732594e03,
        7.813039e03,
        7.893841e03,
        7.974999e03,
        8.056509e03,
        8.138371e03,
        8.220583e03,
        8.303141e03,
        8.386045e03,
        8.469292e03,
        8.552881e03,
        8.636808e03,
        8.721073e03,
        8.805673e03,
        8.890606e03,
        8.975870e03,
        9.061463e03,
        9.147383e03,
        9.233628e03,
        9.320195e03,
        9.407082e03,
        9.494288e03,
        9.581810e03,
        9.669647e03,
        9.757795e03,
        9.846253e03,
        9.935019e03,
        1.002409e04,
        1.011347e04,
        1.020314e04,
        1.029312e04,
        1.038339e04,
        1.047396e04,
        1.056482e04,
        1.065597e04,
        1.074740e04,
        1.083913e04,
        1.093114e04,
        1.102343e04,
        1.111600e04,
        1.120884e04,
        1.130197e04,
        1.139536e04,
        1.148903e04,
        1.158296e04,
        1.167716e04,
        1.177163e04,
        1.186635e04,
        1.196134e04,
        1.205658e04,
        1.215208e04,
        1.224784e04,
        1.234384e04,
        1.244010e04,
        1.253660e04,
        1.263334e04,
        1.273033e04,
        1.282756e04,
        1.292502e04,
        1.302272e04,
        1.312066e04,
        1.321883e04,
        1.331722e04,
        1.341585e04,
        1.351469e04,
        1.361377e04,
        1.371306e04,
        1.381257e04,
        1.391230e04,
        1.401224e04,
        1.411240e04,
        1.421276e04,
        1.431333e04,
        1.441411e04,
        1.451509e04,
        1.461628e04,
        1.471766e04,
        1.481925e04,
        1.492102e04,
        1.502299e04,
        1.512516e04,
        1.522751e04,
        1.533005e04,
        1.543277e04,
        1.553568e04,
        1.563877e04,
        1.574203e04,
        1.584548e04,
        1.594910e04,
        1.605289e04,
        1.615685e04,
        1.626099e04,
        1.636528e04,
        1.646975e04,
        1.657438e04,
        1.667916e04,
        1.678411e04,
        1.688922e04,
        1.699448e04,
        1.709989e04,
        1.720545e04,
        1.731117e04,
        1.741703e04,
        1.752304e04,
        1.762919e04,
        1.773548e04,
        1.784191e04,
        1.794848e04,
        1.805519e04,
        1.816203e04,
        1.826900e04,
        1.837611e04,
        1.848334e04,
        1.859070e04,
        1.869818e04,
        1.880579e04,
        1.891352e04,
        1.902137e04,
        1.912934e04,
        1.923742e04,
        1.934562e04,
        1.945393e04,
        1.956235e04,
        1.967088e04,
        1.977952e04,
        1.988826e04,
        1.999711e04,
        2.010606e04,
        2.021511e04,
        2.032426e04,
        2.043350e04,
        2.054284e04,
        2.065228e04,
        2.076181e04,
        2.087143e04,
        2.098113e04,
        2.109093e04,
        2.120081e04,
        2.131078e04,
        2.142082e04,
        2.153095e04,
        2.164116e04,
        2.175144e04,
        2.186181e04,
        2.197224e04,
        2.208275e04,
        2.219333e04,
        2.230399e04,
        2.241471e04,
    ]
)

#  ---------------------- M = 16, I = 1 ---------------------------
M = 16
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.000000e00,
        1.634928e01,
        2.947690e01,
        4.274338e01,
        5.604397e01,
        6.935994e01,
        8.268533e01,
        9.601763e01,
        1.093556e02,
        1.226986e02,
        1.360462e02,
        1.493982e02,
        1.627544e02,
        1.761147e02,
        1.894792e02,
        2.028480e02,
        2.162214e02,
        2.295997e02,
        2.429839e02,
        2.563748e02,
        2.697738e02,
        2.831826e02,
        2.966031e02,
        3.100376e02,
        3.234889e02,
        3.369598e02,
        3.504537e02,
        3.639739e02,
        3.775240e02,
        3.911080e02,
        4.047298e02,
        4.183933e02,
        4.321026e02,
        4.458619e02,
        4.596752e02,
        4.735466e02,
        4.874801e02,
        5.014796e02,
        5.155490e02,
        5.296922e02,
        5.439127e02,
        5.582142e02,
        5.726001e02,
        5.870738e02,
        6.016384e02,
        6.162971e02,
        6.310528e02,
        6.459085e02,
        6.608669e02,
        6.759306e02,
        6.911022e02,
        7.063841e02,
        7.217786e02,
        7.372879e02,
        7.529142e02,
        7.686595e02,
        7.845258e02,
        8.005148e02,
        8.166285e02,
        8.328685e02,
        8.492364e02,
        8.657339e02,
        8.823623e02,
        8.991233e02,
        9.160180e02,
        9.330480e02,
        9.502144e02,
        9.675184e02,
        9.849613e02,
        1.002544e03,
        1.020268e03,
        1.038134e03,
        1.056143e03,
        1.074296e03,
        1.092594e03,
        1.111039e03,
        1.129630e03,
        1.148368e03,
        1.167255e03,
        1.186292e03,
        1.205478e03,
        1.224815e03,
        1.244304e03,
        1.263945e03,
        1.283738e03,
        1.303686e03,
        1.323787e03,
        1.344044e03,
        1.364456e03,
        1.385024e03,
        1.405748e03,
        1.426630e03,
        1.447670e03,
        1.468868e03,
        1.490225e03,
        1.511742e03,
        1.533418e03,
        1.555255e03,
        1.577253e03,
        1.599413e03,
        1.621734e03,
        1.644218e03,
        1.666865e03,
        1.689675e03,
        1.712649e03,
        1.735787e03,
        1.759090e03,
        1.782559e03,
        1.806192e03,
        1.829993e03,
        1.853959e03,
        1.878093e03,
        1.902393e03,
        1.926862e03,
        1.951499e03,
        1.976304e03,
        2.001279e03,
        2.026423e03,
        2.051737e03,
        2.077221e03,
        2.102875e03,
        2.128701e03,
        2.154698e03,
        2.180867e03,
        2.207208e03,
        2.233722e03,
        2.260408e03,
        2.287269e03,
        2.314302e03,
        2.341510e03,
        2.368893e03,
        2.396450e03,
        2.424183e03,
        2.452091e03,
        2.480175e03,
        2.508436e03,
        2.536873e03,
        2.565488e03,
        2.594280e03,
        2.623250e03,
        2.652398e03,
        2.681725e03,
        2.711231e03,
        2.740916e03,
        2.770781e03,
        2.800826e03,
        2.831052e03,
        2.861458e03,
        2.892045e03,
        2.922814e03,
        2.953765e03,
        2.984899e03,
        3.016214e03,
        3.047713e03,
        3.079395e03,
        3.111261e03,
        3.143311e03,
        3.175545e03,
        3.207964e03,
        3.240568e03,
        3.273358e03,
        3.306334e03,
        3.339495e03,
        3.372843e03,
        3.406378e03,
        3.440101e03,
        3.474010e03,
        3.508108e03,
        3.542394e03,
        3.576869e03,
        3.611532e03,
        3.646385e03,
        3.681428e03,
        3.716660e03,
        3.752083e03,
        3.787696e03,
        3.823500e03,
        3.859496e03,
        3.895683e03,
        3.932063e03,
        3.968634e03,
        4.005398e03,
        4.042355e03,
        4.079506e03,
        4.116850e03,
        4.154388e03,
        4.192120e03,
        4.230046e03,
        4.268168e03,
        4.306485e03,
        4.344997e03,
        4.383705e03,
        4.422609e03,
        4.461709e03,
        4.501007e03,
        4.540501e03,
        4.580192e03,
        4.620081e03,
        4.660168e03,
        4.700454e03,
        4.740937e03,
        4.781620e03,
        4.822501e03,
        4.863582e03,
        4.904862e03,
        4.946342e03,
        4.988023e03,
        5.029903e03,
        5.071985e03,
        5.114267e03,
        5.156751e03,
        5.199436e03,
        5.242323e03,
        5.285411e03,
        5.328702e03,
        5.372196e03,
        5.415892e03,
        5.459791e03,
        5.503893e03,
        5.548199e03,
        5.592708e03,
        5.637422e03,
        5.682339e03,
        5.727461e03,
        5.772787e03,
        5.818318e03,
        5.864053e03,
        5.909994e03,
        5.956141e03,
        6.002493e03,
        6.049051e03,
        6.095814e03,
        6.142784e03,
        6.189960e03,
        6.237343e03,
        6.284932e03,
        6.332728e03,
        6.380732e03,
        6.428942e03,
        6.477360e03,
        6.525985e03,
        6.574818e03,
        6.623859e03,
        6.673107e03,
        6.722564e03,
        6.772229e03,
        6.822102e03,
        6.872184e03,
        6.922475e03,
        6.972974e03,
        7.023682e03,
        7.074599e03,
        7.125725e03,
        7.177060e03,
        7.228605e03,
        7.280359e03,
        7.332322e03,
        7.384495e03,
        7.436877e03,
        7.489470e03,
        7.542272e03,
        7.595283e03,
        7.648505e03,
        7.701937e03,
        7.755579e03,
        7.809431e03,
        7.863493e03,
        7.917765e03,
        7.972247e03,
        8.026940e03,
        8.081842e03,
        8.136956e03,
        8.192279e03,
        8.247813e03,
        8.303557e03,
        8.359511e03,
        8.415676e03,
        8.472051e03,
        8.528637e03,
        8.585433e03,
        8.642439e03,
        8.699655e03,
        8.757082e03,
        8.814719e03,
        8.872566e03,
        8.930624e03,
        8.988891e03,
        9.047369e03,
        9.106056e03,
        9.164954e03,
        9.224061e03,
        9.283378e03,
        9.342905e03,
        9.402642e03,
        9.462588e03,
        9.522744e03,
        9.583109e03,
        9.643684e03,
        9.704468e03,
        9.765461e03,
        9.826663e03,
    ]
)

#  ---------------------- M = 16, I = 2 ---------------------------
M = 16
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.000000e00,
        1.635327e01,
        2.948508e01,
        4.275570e01,
        5.606042e01,
        6.938053e01,
        8.271004e01,
        9.604648e01,
        1.093886e02,
        1.227357e02,
        1.360875e02,
        1.494436e02,
        1.628039e02,
        1.761684e02,
        1.895370e02,
        2.029099e02,
        2.162874e02,
        2.296699e02,
        2.430582e02,
        2.564533e02,
        2.698565e02,
        2.832694e02,
        2.966941e02,
        3.101328e02,
        3.235883e02,
        3.370634e02,
        3.505615e02,
        3.640860e02,
        3.776405e02,
        3.912288e02,
        4.048549e02,
        4.185229e02,
        4.322366e02,
        4.460004e02,
        4.598182e02,
        4.736942e02,
        4.876323e02,
        5.016365e02,
        5.157107e02,
        5.298586e02,
        5.440840e02,
        5.583904e02,
        5.727812e02,
        5.872599e02,
        6.018296e02,
        6.164934e02,
        6.312544e02,
        6.461153e02,
        6.610791e02,
        6.761482e02,
        6.913252e02,
        7.066126e02,
        7.220127e02,
        7.375277e02,
        7.531597e02,
        7.689108e02,
        7.847830e02,
        8.007780e02,
        8.168977e02,
        8.331437e02,
        8.495178e02,
        8.660215e02,
        8.826562e02,
        8.994235e02,
        9.163248e02,
        9.333612e02,
        9.505342e02,
        9.678449e02,
        9.852945e02,
        1.002884e03,
        1.020615e03,
        1.038488e03,
        1.056504e03,
        1.074664e03,
        1.092970e03,
        1.111421e03,
        1.130019e03,
        1.148765e03,
        1.167660e03,
        1.186704e03,
        1.205898e03,
        1.225242e03,
        1.244739e03,
        1.264388e03,
        1.284189e03,
        1.304145e03,
        1.324254e03,
        1.344519e03,
        1.364939e03,
        1.385515e03,
        1.406248e03,
        1.427139e03,
        1.448187e03,
        1.469393e03,
        1.490759e03,
        1.512284e03,
        1.533969e03,
        1.555815e03,
        1.577822e03,
        1.599990e03,
        1.622320e03,
        1.644813e03,
        1.667469e03,
        1.690288e03,
        1.713271e03,
        1.736419e03,
        1.759731e03,
        1.783208e03,
        1.806851e03,
        1.830660e03,
        1.854636e03,
        1.878779e03,
        1.903089e03,
        1.927566e03,
        1.952212e03,
        1.977026e03,
        2.002010e03,
        2.027162e03,
        2.052485e03,
        2.077977e03,
        2.103640e03,
        2.129474e03,
        2.155479e03,
        2.181656e03,
        2.208005e03,
        2.234526e03,
        2.261220e03,
        2.288087e03,
        2.315127e03,
        2.342341e03,
        2.369730e03,
        2.397293e03,
        2.425030e03,
        2.452943e03,
        2.481032e03,
        2.509296e03,
        2.537737e03,
        2.566354e03,
        2.595148e03,
        2.624119e03,
        2.653268e03,
        2.682595e03,
        2.712100e03,
        2.741783e03,
        2.771646e03,
        2.801687e03,
        2.831908e03,
        2.862308e03,
        2.892889e03,
        2.923650e03,
        2.954592e03,
        2.985715e03,
        3.017019e03,
        3.048505e03,
        3.080172e03,
        3.112022e03,
        3.144054e03,
        3.176269e03,
        3.208667e03,
        3.241248e03,
        3.274013e03,
        3.306962e03,
        3.340095e03,
        3.373412e03,
        3.406913e03,
        3.440600e03,
        3.474472e03,
        3.508529e03,
        3.542772e03,
        3.577201e03,
        3.611816e03,
        3.646618e03,
        3.681606e03,
        3.716781e03,
        3.752144e03,
        3.787693e03,
        3.823430e03,
        3.859355e03,
        3.895469e03,
        3.931770e03,
        3.968260e03,
        4.004938e03,
        4.041806e03,
        4.078862e03,
        4.116108e03,
        4.153544e03,
        4.191169e03,
        4.228984e03,
        4.266989e03,
        4.305184e03,
        4.343570e03,
        4.382146e03,
        4.420914e03,
        4.459872e03,
        4.499021e03,
        4.538362e03,
        4.577894e03,
        4.617618e03,
        4.657534e03,
        4.697641e03,
        4.737941e03,
        4.778433e03,
        4.819117e03,
        4.859994e03,
        4.901064e03,
        4.942326e03,
        4.983781e03,
        5.025429e03,
        5.067270e03,
        5.109305e03,
        5.151533e03,
        5.193954e03,
        5.236569e03,
        5.279378e03,
        5.322380e03,
        5.365577e03,
        5.408967e03,
        5.452551e03,
        5.496329e03,
        5.540302e03,
        5.584469e03,
        5.628830e03,
        5.673385e03,
        5.718135e03,
        5.763080e03,
        5.808219e03,
        5.853552e03,
        5.899081e03,
        5.944804e03,
        5.990722e03,
        6.036834e03,
        6.083141e03,
        6.129644e03,
        6.176341e03,
        6.223233e03,
        6.270319e03,
        6.317601e03,
        6.365078e03,
        6.412749e03,
        6.460616e03,
        6.508677e03,
        6.556933e03,
        6.605384e03,
        6.654030e03,
        6.702871e03,
        6.751907e03,
        6.801137e03,
        6.850563e03,
        6.900183e03,
        6.949997e03,
        7.000007e03,
        7.050211e03,
        7.100609e03,
        7.151202e03,
        7.201990e03,
        7.252972e03,
        7.304148e03,
        7.355518e03,
        7.407083e03,
        7.458842e03,
        7.510794e03,
        7.562941e03,
        7.615282e03,
        7.667816e03,
        7.720544e03,
        7.773466e03,
        7.826581e03,
        7.879889e03,
        7.933391e03,
        7.987085e03,
        8.040973e03,
        8.095054e03,
        8.149327e03,
        8.203793e03,
        8.258452e03,
        8.313303e03,
        8.368346e03,
        8.423581e03,
        8.479008e03,
        8.534627e03,
        8.590438e03,
        8.646440e03,
        8.702634e03,
        8.759019e03,
        8.815594e03,
        8.872361e03,
        8.929318e03,
        8.986466e03,
        9.043803e03,
        9.101331e03,
        9.159049e03,
        9.216957e03,
        9.275054e03,
        9.333341e03,
        9.391817e03,
        9.450481e03,
        9.509335e03,
        9.568377e03,
        9.627607e03,
        9.687025e03,
        9.746631e03,
    ]
)

#  ---------------------- M = 16, I = 3 ---------------------------
M = 16
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.200018e01,
        4.353101e01,
        8.267877e01,
        1.219284e02,
        1.612106e02,
        2.005120e02,
        2.398284e02,
        2.791580e02,
        3.184998e02,
        3.578535e02,
        3.972192e02,
        4.365975e02,
        4.759903e02,
        5.154010e02,
        5.548351e02,
        5.943007e02,
        6.338083e02,
        6.733713e02,
        7.130053e02,
        7.527282e02,
        7.925598e02,
        8.325212e02,
        8.726345e02,
        9.129224e02,
        9.534080e02,
        9.941141e02,
        1.035064e03,
        1.076278e03,
        1.117780e03,
        1.159590e03,
        1.201727e03,
        1.244211e03,
        1.287059e03,
        1.330289e03,
        1.373916e03,
        1.417957e03,
        1.462425e03,
        1.507334e03,
        1.552696e03,
        1.598524e03,
        1.644828e03,
        1.691619e03,
        1.738907e03,
        1.786701e03,
        1.835009e03,
        1.883840e03,
        1.933201e03,
        1.983100e03,
        2.033542e03,
        2.084536e03,
        2.136085e03,
        2.188197e03,
        2.240876e03,
        2.294127e03,
        2.347956e03,
        2.402366e03,
        2.457362e03,
        2.512948e03,
        2.569127e03,
        2.625905e03,
        2.683283e03,
        2.741265e03,
        2.799856e03,
        2.859056e03,
        2.918871e03,
        2.979301e03,
        3.040351e03,
        3.102023e03,
        3.164318e03,
        3.227241e03,
        3.290792e03,
        3.354975e03,
        3.419791e03,
        3.485243e03,
        3.551333e03,
        3.618062e03,
        3.685434e03,
        3.753448e03,
        3.822109e03,
        3.891417e03,
        3.961373e03,
        4.031981e03,
        4.103242e03,
        4.175156e03,
        4.247727e03,
        4.320955e03,
        4.394842e03,
        4.469390e03,
        4.544599e03,
        4.620473e03,
        4.697012e03,
        4.774217e03,
        4.852090e03,
        4.930633e03,
        5.009846e03,
        5.089732e03,
        5.170291e03,
        5.251524e03,
        5.333434e03,
        5.416021e03,
        5.499287e03,
        5.583232e03,
        5.667858e03,
        5.753167e03,
        5.839159e03,
        5.925836e03,
        6.013198e03,
        6.101247e03,
        6.189984e03,
        6.279409e03,
        6.369525e03,
        6.460332e03,
        6.551831e03,
        6.644024e03,
        6.736910e03,
        6.830491e03,
        6.924769e03,
        7.019743e03,
        7.115415e03,
        7.211786e03,
        7.308857e03,
        7.406628e03,
        7.505101e03,
        7.604275e03,
        7.704153e03,
        7.804734e03,
        7.906020e03,
        8.008011e03,
        8.110707e03,
        8.214111e03,
        8.318221e03,
        8.423040e03,
        8.528567e03,
        8.634803e03,
        8.741749e03,
        8.849406e03,
        8.957773e03,
        9.066852e03,
        9.176642e03,
        9.287145e03,
        9.398361e03,
        9.510290e03,
        9.622933e03,
        9.736290e03,
        9.850361e03,
        9.965148e03,
        1.008065e04,
        1.019687e04,
        1.031380e04,
        1.043145e04,
        1.054981e04,
        1.066889e04,
        1.078869e04,
        1.090921e04,
        1.103044e04,
        1.115239e04,
        1.127506e04,
        1.139844e04,
        1.152254e04,
        1.164736e04,
        1.177290e04,
        1.189916e04,
        1.202613e04,
        1.215382e04,
        1.228223e04,
        1.241135e04,
        1.254120e04,
        1.267176e04,
        1.280303e04,
        1.293503e04,
        1.306774e04,
        1.320117e04,
        1.333531e04,
        1.347018e04,
        1.360575e04,
        1.374205e04,
        1.387906e04,
        1.401678e04,
        1.415522e04,
        1.429438e04,
        1.443424e04,
        1.457483e04,
        1.471612e04,
        1.485813e04,
        1.500085e04,
        1.514429e04,
        1.528843e04,
        1.543329e04,
        1.557886e04,
        1.572514e04,
        1.587213e04,
        1.601983e04,
        1.616823e04,
        1.631735e04,
        1.646717e04,
        1.661770e04,
        1.676894e04,
        1.692088e04,
        1.707353e04,
        1.722688e04,
        1.738094e04,
        1.753570e04,
        1.769116e04,
        1.784733e04,
        1.800419e04,
        1.816176e04,
        1.832002e04,
        1.847899e04,
        1.863865e04,
        1.879901e04,
        1.896006e04,
        1.912181e04,
        1.928426e04,
        1.944740e04,
        1.961123e04,
        1.977575e04,
        1.994097e04,
        2.010688e04,
        2.027347e04,
        2.044076e04,
        2.060873e04,
        2.077739e04,
        2.094673e04,
        2.111676e04,
        2.128747e04,
        2.145887e04,
        2.163095e04,
        2.180371e04,
        2.197714e04,
        2.215126e04,
        2.232606e04,
        2.250153e04,
        2.267767e04,
        2.285449e04,
        2.303199e04,
        2.321016e04,
        2.338899e04,
        2.356850e04,
        2.374868e04,
        2.392952e04,
        2.411104e04,
        2.429321e04,
        2.447606e04,
        2.465956e04,
        2.484373e04,
        2.502856e04,
        2.521404e04,
        2.540019e04,
        2.558699e04,
        2.577445e04,
        2.596257e04,
        2.615133e04,
        2.634075e04,
        2.653083e04,
        2.672155e04,
        2.691292e04,
        2.710493e04,
        2.729760e04,
        2.749091e04,
        2.768486e04,
        2.787945e04,
        2.807469e04,
        2.827056e04,
        2.846707e04,
        2.866422e04,
        2.886201e04,
        2.906042e04,
        2.925948e04,
        2.945916e04,
        2.965947e04,
        2.986042e04,
        3.006199e04,
        3.026418e04,
        3.046700e04,
        3.067045e04,
        3.087451e04,
        3.107920e04,
        3.128450e04,
        3.149043e04,
        3.169697e04,
        3.190412e04,
        3.211189e04,
        3.232027e04,
        3.252925e04,
        3.273885e04,
        3.294906e04,
        3.315987e04,
        3.337129e04,
        3.358331e04,
        3.379593e04,
        3.400915e04,
        3.422297e04,
        3.443739e04,
        3.465240e04,
        3.486801e04,
        3.508421e04,
        3.530100e04,
        3.551839e04,
        3.573636e04,
        3.595491e04,
        3.617405e04,
    ]
)

#  ---------------------- M = 16, I = 4 ---------------------------
M = 16
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.200018e01,
        4.355487e01,
        8.272675e01,
        1.220005e02,
        1.613067e02,
        2.006322e02,
        2.399726e02,
        2.793263e02,
        3.186922e02,
        3.580700e02,
        3.974597e02,
        4.368621e02,
        4.762790e02,
        5.157139e02,
        5.551722e02,
        5.946621e02,
        6.341940e02,
        6.737815e02,
        7.134401e02,
        7.531878e02,
        7.930444e02,
        8.330310e02,
        8.731698e02,
        9.134835e02,
        9.539953e02,
        9.947280e02,
        1.035704e03,
        1.076947e03,
        1.118476e03,
        1.160314e03,
        1.202480e03,
        1.244992e03,
        1.287870e03,
        1.331130e03,
        1.374788e03,
        1.418860e03,
        1.463360e03,
        1.508301e03,
        1.553696e03,
        1.599557e03,
        1.645895e03,
        1.692720e03,
        1.740043e03,
        1.787872e03,
        1.836217e03,
        1.885084e03,
        1.934483e03,
        1.984419e03,
        2.034900e03,
        2.085932e03,
        2.137521e03,
        2.189673e03,
        2.242393e03,
        2.295685e03,
        2.349556e03,
        2.404008e03,
        2.459047e03,
        2.514677e03,
        2.570901e03,
        2.627723e03,
        2.685146e03,
        2.743175e03,
        2.801812e03,
        2.861060e03,
        2.920922e03,
        2.981401e03,
        3.042499e03,
        3.104220e03,
        3.166566e03,
        3.229539e03,
        3.293142e03,
        3.357377e03,
        3.422246e03,
        3.487751e03,
        3.553894e03,
        3.620678e03,
        3.688104e03,
        3.756175e03,
        3.824891e03,
        3.894256e03,
        3.964270e03,
        4.034936e03,
        4.106255e03,
        4.178229e03,
        4.250859e03,
        4.324148e03,
        4.398096e03,
        4.472705e03,
        4.547977e03,
        4.623914e03,
        4.700516e03,
        4.777785e03,
        4.855723e03,
        4.934331e03,
        5.013611e03,
        5.093563e03,
        5.174189e03,
        5.255491e03,
        5.337469e03,
        5.420125e03,
        5.503460e03,
        5.587476e03,
        5.672173e03,
        5.757554e03,
        5.843618e03,
        5.930367e03,
        6.017803e03,
        6.105926e03,
        6.194737e03,
        6.284239e03,
        6.374431e03,
        6.465314e03,
        6.556890e03,
        6.649160e03,
        6.742125e03,
        6.835786e03,
        6.930143e03,
        7.025198e03,
        7.120951e03,
        7.217404e03,
        7.314556e03,
        7.412410e03,
        7.510966e03,
        7.610225e03,
        7.710187e03,
        7.810854e03,
        7.912226e03,
        8.014303e03,
        8.117087e03,
        8.220578e03,
        8.324778e03,
        8.429685e03,
        8.535302e03,
        8.641629e03,
        8.748666e03,
        8.856414e03,
        8.964874e03,
        9.074045e03,
        9.183929e03,
        9.294526e03,
        9.405837e03,
        9.517861e03,
        9.630600e03,
        9.744054e03,
        9.858222e03,
        9.973107e03,
        1.008871e04,
        1.020502e04,
        1.032206e04,
        1.043980e04,
        1.055827e04,
        1.067745e04,
        1.079735e04,
        1.091797e04,
        1.103931e04,
        1.116136e04,
        1.128413e04,
        1.140762e04,
        1.153183e04,
        1.165676e04,
        1.178240e04,
        1.190877e04,
        1.203585e04,
        1.216365e04,
        1.229217e04,
        1.242140e04,
        1.255136e04,
        1.268203e04,
        1.281342e04,
        1.294553e04,
        1.307835e04,
        1.321189e04,
        1.334615e04,
        1.348113e04,
        1.361683e04,
        1.375324e04,
        1.389036e04,
        1.402821e04,
        1.416676e04,
        1.430604e04,
        1.444603e04,
        1.458673e04,
        1.472815e04,
        1.487028e04,
        1.501313e04,
        1.515669e04,
        1.530096e04,
        1.544594e04,
        1.559163e04,
        1.573804e04,
        1.588516e04,
        1.603299e04,
        1.618152e04,
        1.633077e04,
        1.648072e04,
        1.663138e04,
        1.678275e04,
        1.693483e04,
        1.708761e04,
        1.724110e04,
        1.739530e04,
        1.755019e04,
        1.770579e04,
        1.786210e04,
        1.801910e04,
        1.817681e04,
        1.833522e04,
        1.849432e04,
        1.865413e04,
        1.881464e04,
        1.897584e04,
        1.913774e04,
        1.930033e04,
        1.946362e04,
        1.962761e04,
        1.979228e04,
        1.995766e04,
        2.012372e04,
        2.029047e04,
        2.045791e04,
        2.062605e04,
        2.079487e04,
        2.096438e04,
        2.113457e04,
        2.130545e04,
        2.147701e04,
        2.164926e04,
        2.182219e04,
        2.199580e04,
        2.217009e04,
        2.234507e04,
        2.252072e04,
        2.269704e04,
        2.287405e04,
        2.305173e04,
        2.323008e04,
        2.340911e04,
        2.358881e04,
        2.376918e04,
        2.395022e04,
        2.413193e04,
        2.431431e04,
        2.449736e04,
        2.468107e04,
        2.486545e04,
        2.505049e04,
        2.523619e04,
        2.542255e04,
        2.560958e04,
        2.579726e04,
        2.598560e04,
        2.617460e04,
        2.636425e04,
        2.655456e04,
        2.674552e04,
        2.693713e04,
        2.712940e04,
        2.732231e04,
        2.751587e04,
        2.771008e04,
        2.790494e04,
        2.810044e04,
        2.829658e04,
        2.849337e04,
        2.869080e04,
        2.888886e04,
        2.908757e04,
        2.928691e04,
        2.948689e04,
        2.968751e04,
        2.988876e04,
        3.009064e04,
        3.029315e04,
        3.049629e04,
        3.070006e04,
        3.090446e04,
        3.110948e04,
        3.131513e04,
        3.152140e04,
        3.172830e04,
        3.193581e04,
        3.214394e04,
        3.235270e04,
        3.256206e04,
        3.277205e04,
        3.298265e04,
        3.319386e04,
        3.340568e04,
        3.361811e04,
        3.383115e04,
        3.404480e04,
        3.425905e04,
        3.447391e04,
        3.468937e04,
        3.490544e04,
        3.512210e04,
        3.533937e04,
        3.555723e04,
        3.577568e04,
        3.599474e04,
        3.621438e04,
    ]
)

#  ---------------------- M = 17, I = 1 ---------------------------
M = 17
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.200000e01,
        3.036750e01,
        5.612178e01,
        8.203022e01,
        1.079799e02,
        1.339502e02,
        1.599342e02,
        1.859291e02,
        2.119337e02,
        2.379470e02,
        2.639687e02,
        2.899986e02,
        3.160366e02,
        3.420830e02,
        3.681386e02,
        3.942045e02,
        4.202826e02,
        4.463759e02,
        4.724880e02,
        4.986238e02,
        5.247889e02,
        5.509901e02,
        5.772350e02,
        6.035318e02,
        6.298897e02,
        6.563182e02,
        6.828272e02,
        7.094270e02,
        7.361281e02,
        7.629408e02,
        7.898758e02,
        8.169433e02,
        8.441535e02,
        8.715165e02,
        8.990419e02,
        9.267392e02,
        9.546175e02,
        9.826856e02,
        1.010952e03,
        1.039424e03,
        1.068111e03,
        1.097019e03,
        1.126156e03,
        1.155527e03,
        1.185141e03,
        1.215002e03,
        1.245116e03,
        1.275490e03,
        1.306128e03,
        1.337035e03,
        1.368216e03,
        1.399675e03,
        1.431417e03,
        1.463446e03,
        1.495766e03,
        1.528380e03,
        1.561292e03,
        1.594505e03,
        1.628022e03,
        1.661847e03,
        1.695982e03,
        1.730431e03,
        1.765195e03,
        1.800278e03,
        1.835682e03,
        1.871408e03,
        1.907461e03,
        1.943841e03,
        1.980550e03,
        2.017592e03,
        2.054967e03,
        2.092677e03,
        2.130725e03,
        2.169112e03,
        2.207840e03,
        2.246911e03,
        2.286325e03,
        2.326085e03,
        2.366192e03,
        2.406647e03,
        2.447452e03,
        2.488609e03,
        2.530118e03,
        2.571981e03,
        2.614199e03,
        2.656774e03,
        2.699706e03,
        2.742997e03,
        2.786647e03,
        2.830659e03,
        2.875033e03,
        2.919770e03,
        2.964871e03,
        3.010338e03,
        3.056170e03,
        3.102370e03,
        3.148938e03,
        3.195875e03,
        3.243182e03,
        3.290860e03,
        3.338910e03,
        3.387332e03,
        3.436128e03,
        3.485298e03,
        3.534843e03,
        3.584764e03,
        3.635061e03,
        3.685735e03,
        3.736788e03,
        3.788220e03,
        3.840030e03,
        3.892221e03,
        3.944793e03,
        3.997746e03,
        4.051081e03,
        4.104799e03,
        4.158899e03,
        4.213384e03,
        4.268253e03,
        4.323507e03,
        4.379146e03,
        4.435171e03,
        4.491582e03,
        4.548380e03,
        4.605566e03,
        4.663139e03,
        4.721100e03,
        4.779450e03,
        4.838189e03,
        4.897317e03,
        4.956835e03,
        5.016743e03,
        5.077042e03,
        5.137731e03,
        5.198811e03,
        5.260282e03,
        5.322144e03,
        5.384399e03,
        5.447045e03,
        5.510084e03,
        5.573515e03,
        5.637339e03,
        5.701556e03,
        5.766165e03,
        5.831168e03,
        5.896563e03,
        5.962352e03,
        6.028535e03,
        6.095111e03,
        6.162081e03,
        6.229444e03,
        6.297201e03,
        6.365351e03,
        6.433896e03,
        6.502834e03,
        6.572165e03,
        6.641891e03,
        6.712010e03,
        6.782522e03,
        6.853428e03,
        6.924728e03,
        6.996420e03,
        7.068506e03,
        7.140985e03,
        7.213857e03,
        7.287122e03,
        7.360779e03,
        7.434829e03,
        7.509271e03,
        7.584105e03,
        7.659331e03,
        7.734948e03,
        7.810957e03,
        7.887357e03,
        7.964148e03,
        8.041329e03,
        8.118901e03,
        8.196862e03,
        8.275214e03,
        8.353954e03,
        8.433084e03,
        8.512603e03,
        8.592509e03,
        8.672804e03,
        8.753486e03,
        8.834556e03,
        8.916012e03,
        8.997855e03,
        9.080084e03,
        9.162699e03,
        9.245698e03,
        9.329082e03,
        9.412851e03,
        9.497003e03,
        9.581539e03,
        9.666457e03,
        9.751757e03,
        9.837440e03,
        9.923503e03,
        1.000995e04,
        1.009677e04,
        1.018398e04,
        1.027156e04,
        1.035952e04,
        1.044786e04,
        1.053658e04,
        1.062567e04,
        1.071515e04,
        1.080499e04,
        1.089521e04,
        1.098581e04,
        1.107678e04,
        1.116812e04,
        1.125984e04,
        1.135192e04,
        1.144438e04,
        1.153721e04,
        1.163041e04,
        1.172398e04,
        1.181791e04,
        1.191222e04,
        1.200689e04,
        1.210193e04,
        1.219733e04,
        1.229310e04,
        1.238923e04,
        1.248573e04,
        1.258259e04,
        1.267981e04,
        1.277739e04,
        1.287533e04,
        1.297363e04,
        1.307230e04,
        1.317132e04,
        1.327069e04,
        1.337043e04,
        1.347052e04,
        1.357096e04,
        1.367176e04,
        1.377291e04,
        1.387441e04,
        1.397627e04,
        1.407848e04,
        1.418103e04,
        1.428394e04,
        1.438719e04,
        1.449080e04,
        1.459474e04,
        1.469904e04,
        1.480368e04,
        1.490866e04,
        1.501399e04,
        1.511966e04,
        1.522567e04,
        1.533202e04,
        1.543871e04,
        1.554573e04,
        1.565310e04,
        1.576080e04,
        1.586884e04,
        1.597722e04,
        1.608592e04,
        1.619497e04,
        1.630434e04,
        1.641404e04,
        1.652408e04,
        1.663444e04,
        1.674513e04,
        1.685615e04,
        1.696750e04,
        1.707917e04,
        1.719117e04,
        1.730349e04,
        1.741613e04,
        1.752909e04,
        1.764238e04,
        1.775598e04,
        1.786991e04,
        1.798415e04,
        1.809870e04,
        1.821358e04,
        1.832876e04,
        1.844426e04,
        1.856008e04,
        1.867620e04,
        1.879264e04,
        1.890938e04,
        1.902644e04,
        1.914380e04,
        1.926147e04,
        1.937944e04,
        1.949772e04,
        1.961630e04,
        1.973518e04,
        1.985437e04,
        1.997385e04,
        2.009364e04,
        2.021372e04,
        2.033410e04,
        2.045477e04,
        2.057574e04,
    ]
)

#  ---------------------- M = 17, I = 2 ---------------------------
M = 17
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.800464e01,
        8.321075e01,
        1.599981e02,
        2.369086e02,
        3.138651e02,
        3.908526e02,
        4.678662e02,
        5.449041e02,
        6.219653e02,
        6.990504e02,
        7.761621e02,
        8.533068e02,
        9.304964e02,
        1.007750e03,
        1.085094e03,
        1.162563e03,
        1.240199e03,
        1.318049e03,
        1.396167e03,
        1.474609e03,
        1.553433e03,
        1.632699e03,
        1.712467e03,
        1.792793e03,
        1.873736e03,
        1.955349e03,
        2.037686e03,
        2.120794e03,
        2.204722e03,
        2.289512e03,
        2.375206e03,
        2.461843e03,
        2.549457e03,
        2.638082e03,
        2.727749e03,
        2.818487e03,
        2.910323e03,
        3.003280e03,
        3.097383e03,
        3.192652e03,
        3.289107e03,
        3.386767e03,
        3.485650e03,
        3.585770e03,
        3.687143e03,
        3.789784e03,
        3.893705e03,
        3.998918e03,
        4.105435e03,
        4.213267e03,
        4.322425e03,
        4.432917e03,
        4.544753e03,
        4.657942e03,
        4.772491e03,
        4.888409e03,
        5.005702e03,
        5.124379e03,
        5.244445e03,
        5.365907e03,
        5.488771e03,
        5.613043e03,
        5.738728e03,
        5.865832e03,
        5.994360e03,
        6.124317e03,
        6.255707e03,
        6.388535e03,
        6.522805e03,
        6.658522e03,
        6.795690e03,
        6.934312e03,
        7.074392e03,
        7.215933e03,
        7.358940e03,
        7.503415e03,
        7.649362e03,
        7.796783e03,
        7.945681e03,
        8.096060e03,
        8.247921e03,
        8.401268e03,
        8.556102e03,
        8.712426e03,
        8.870242e03,
        9.029552e03,
        9.190358e03,
        9.352662e03,
        9.516465e03,
        9.681769e03,
        9.848576e03,
        1.001689e04,
        1.018670e04,
        1.035802e04,
        1.053085e04,
        1.070519e04,
        1.088103e04,
        1.105839e04,
        1.123725e04,
        1.141763e04,
        1.159951e04,
        1.178291e04,
        1.196781e04,
        1.215423e04,
        1.234216e04,
        1.253160e04,
        1.272255e04,
        1.291501e04,
        1.310899e04,
        1.330447e04,
        1.350145e04,
        1.369995e04,
        1.389995e04,
        1.410146e04,
        1.430448e04,
        1.450899e04,
        1.471501e04,
        1.492253e04,
        1.513156e04,
        1.534207e04,
        1.555409e04,
        1.576760e04,
        1.598261e04,
        1.619910e04,
        1.641709e04,
        1.663656e04,
        1.685752e04,
        1.707996e04,
        1.730388e04,
        1.752928e04,
        1.775616e04,
        1.798452e04,
        1.821434e04,
        1.844564e04,
        1.867840e04,
        1.891262e04,
        1.914831e04,
        1.938545e04,
        1.962405e04,
        1.986410e04,
        2.010561e04,
        2.034856e04,
        2.059295e04,
        2.083878e04,
        2.108605e04,
        2.133476e04,
        2.158489e04,
        2.183646e04,
        2.208945e04,
        2.234386e04,
        2.259968e04,
        2.285692e04,
        2.311558e04,
        2.337563e04,
        2.363710e04,
        2.389996e04,
        2.416422e04,
        2.442987e04,
        2.469691e04,
        2.496533e04,
        2.523514e04,
        2.550632e04,
        2.577888e04,
        2.605280e04,
        2.632810e04,
        2.660475e04,
        2.688276e04,
        2.716213e04,
        2.744285e04,
        2.772491e04,
        2.800832e04,
        2.829306e04,
        2.857914e04,
        2.886655e04,
        2.915528e04,
        2.944534e04,
        2.973671e04,
        3.002940e04,
        3.032340e04,
        3.061870e04,
        3.091531e04,
        3.121321e04,
        3.151240e04,
        3.181289e04,
        3.211465e04,
        3.241770e04,
        3.272203e04,
        3.302762e04,
        3.333449e04,
        3.364262e04,
        3.395200e04,
        3.426265e04,
        3.457454e04,
        3.488768e04,
        3.520206e04,
        3.551768e04,
        3.583454e04,
        3.615262e04,
        3.647193e04,
        3.679246e04,
        3.711421e04,
        3.743717e04,
        3.776134e04,
        3.808672e04,
        3.841329e04,
        3.874106e04,
        3.907002e04,
        3.940017e04,
        3.973150e04,
        4.006401e04,
        4.039770e04,
        4.073255e04,
        4.106857e04,
        4.140576e04,
        4.174410e04,
        4.208359e04,
        4.242424e04,
        4.276602e04,
        4.310895e04,
        4.345302e04,
        4.379822e04,
        4.414455e04,
        4.449200e04,
        4.484057e04,
        4.519026e04,
        4.554105e04,
        4.589296e04,
        4.624597e04,
        4.660008e04,
        4.695528e04,
        4.731158e04,
        4.766896e04,
        4.802742e04,
        4.838697e04,
        4.874758e04,
        4.910927e04,
        4.947202e04,
        4.983584e04,
        5.020071e04,
        5.056664e04,
        5.093362e04,
        5.130164e04,
        5.167071e04,
        5.204081e04,
        5.241195e04,
        5.278412e04,
        5.315731e04,
        5.353153e04,
        5.390676e04,
        5.428300e04,
        5.466026e04,
        5.503852e04,
        5.541778e04,
        5.579805e04,
        5.617930e04,
        5.656155e04,
        5.694478e04,
        5.732899e04,
        5.771418e04,
        5.810034e04,
        5.848748e04,
        5.887558e04,
        5.926464e04,
        5.965467e04,
        6.004564e04,
        6.043757e04,
        6.083045e04,
        6.122426e04,
        6.161902e04,
        6.201471e04,
        6.241133e04,
        6.280888e04,
        6.320736e04,
        6.360675e04,
        6.400706e04,
        6.440828e04,
        6.481042e04,
        6.521345e04,
        6.561739e04,
        6.602222e04,
        6.642795e04,
        6.683456e04,
        6.724206e04,
        6.765045e04,
        6.805971e04,
        6.846985e04,
        6.888085e04,
        6.929273e04,
        6.970546e04,
        7.011906e04,
        7.053351e04,
        7.094882e04,
        7.136497e04,
        7.178197e04,
        7.219981e04,
        7.261848e04,
        7.303799e04,
        7.345833e04,
        7.387950e04,
        7.430148e04,
        7.472429e04,
    ]
)

#  ---------------------- M = 18, I = 1 ---------------------------
M = 18
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        9.761590e00,
        1.797541e02,
        3.589432e02,
        5.384749e02,
        7.198461e02,
        9.059401e02,
        1.099605e03,
        1.302867e03,
        1.516834e03,
        1.742050e03,
        1.978735e03,
        2.226901e03,
        2.486580e03,
        2.757704e03,
        3.040307e03,
        3.334331e03,
        3.639872e03,
        3.956877e03,
        4.285427e03,
        4.625509e03,
        4.977243e03,
        5.340628e03,
        5.715693e03,
        6.102457e03,
        6.501039e03,
        6.911435e03,
        7.333681e03,
        7.767794e03,
        8.213845e03,
        8.671895e03,
        9.141829e03,
        9.623827e03,
        1.011782e04,
        1.062389e04,
        1.114211e04,
        1.167236e04,
        1.221467e04,
        1.276928e04,
        1.333592e04,
        1.391481e04,
        1.450597e04,
        1.510916e04,
        1.572473e04,
        1.635254e04,
        1.699269e04,
        1.764503e04,
        1.830963e04,
        1.898657e04,
        1.967596e04,
        2.037757e04,
        2.109164e04,
        2.181793e04,
        2.255682e04,
        2.330792e04,
        2.407159e04,
        2.484758e04,
        2.563595e04,
        2.643692e04,
        2.725021e04,
        2.807621e04,
        2.891445e04,
        2.976534e04,
        3.062873e04,
        3.150468e04,
        3.239304e04,
        3.329404e04,
        3.420753e04,
        3.513376e04,
        3.607234e04,
        3.702375e04,
        3.798758e04,
        3.896408e04,
        3.995331e04,
        4.095507e04,
        4.196962e04,
        4.299675e04,
        4.403651e04,
        4.508917e04,
        4.615426e04,
        4.723232e04,
        4.832287e04,
        4.942645e04,
        5.054257e04,
        5.167152e04,
        5.281306e04,
        5.396749e04,
        5.513482e04,
        5.631483e04,
        5.750780e04,
        5.871349e04,
        5.993189e04,
        6.116335e04,
        6.240759e04,
        6.366463e04,
        6.493478e04,
        6.621748e04,
        6.751335e04,
        6.882212e04,
        7.014378e04,
        7.147838e04,
        7.282593e04,
        7.418643e04,
        7.555994e04,
        7.694646e04,
        7.834567e04,
        7.975826e04,
        8.118359e04,
        8.262236e04,
        8.407389e04,
        8.553818e04,
        8.701598e04,
        8.850660e04,
        9.001039e04,
        9.152739e04,
        9.305725e04,
        9.460073e04,
        9.615671e04,
        9.772636e04,
        9.930890e04,
        1.009044e05,
        1.025132e05,
        1.041354e05,
        1.057705e05,
        1.074191e05,
        1.090806e05,
        1.107556e05,
        1.124435e05,
        1.141450e05,
        1.158599e05,
        1.175875e05,
        1.193290e05,
        1.210832e05,
        1.228509e05,
        1.246323e05,
        1.264267e05,
        1.282343e05,
        1.300555e05,
        1.318899e05,
        1.337380e05,
        1.355993e05,
        1.374737e05,
        1.393619e05,
        1.412634e05,
        1.431781e05,
        1.451065e05,
        1.470483e05,
        1.490034e05,
        1.509722e05,
        1.529544e05,
        1.549505e05,
        1.569593e05,
        1.589821e05,
        1.610182e05,
        1.630683e05,
        1.651312e05,
        1.672086e05,
        1.692989e05,
        1.714027e05,
        1.735204e05,
        1.756516e05,
        1.777969e05,
        1.799551e05,
        1.821273e05,
        1.843131e05,
        1.865124e05,
        1.887258e05,
        1.909522e05,
        1.931928e05,
        1.954469e05,
        1.977152e05,
        1.999966e05,
        2.022921e05,
        2.046013e05,
        2.069242e05,
        2.092612e05,
        2.116114e05,
    ]
)

#  ---------------------- M = 18, I = 2 ---------------------------
M = 18
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        9.912400e00,
        1.828410e02,
        3.651190e02,
        5.477455e02,
        7.322431e02,
        9.215448e02,
        1.118548e03,
        1.325314e03,
        1.543000e03,
        1.772137e03,
        2.012972e03,
        2.265546e03,
        2.529857e03,
        2.805894e03,
        3.093647e03,
        3.393126e03,
        3.704301e03,
        4.027259e03,
        4.362060e03,
        4.708654e03,
        5.067118e03,
        5.437544e03,
        5.819917e03,
        6.214315e03,
        6.620748e03,
        7.039331e03,
        7.469975e03,
        7.912762e03,
        8.367835e03,
        8.835036e03,
        9.314552e03,
        9.806333e03,
        1.031039e04,
        1.082689e04,
        1.135564e04,
        1.189679e04,
        1.245038e04,
        1.301635e04,
        1.359485e04,
        1.418577e04,
        1.478913e04,
        1.540504e04,
        1.603337e04,
        1.667435e04,
        1.732783e04,
        1.799389e04,
        1.867251e04,
        1.936376e04,
        2.006759e04,
        2.078409e04,
        2.151317e04,
        2.225490e04,
        2.300937e04,
        2.377649e04,
        2.455631e04,
        2.534873e04,
        2.615398e04,
        2.697195e04,
        2.780269e04,
        2.864608e04,
        2.950235e04,
        3.037136e04,
        3.125337e04,
        3.214803e04,
        3.305538e04,
        3.397565e04,
        3.490891e04,
        3.585478e04,
        3.681371e04,
        3.778554e04,
        3.877029e04,
        3.976780e04,
        4.077831e04,
        4.180164e04,
        4.283805e04,
        4.388733e04,
        4.494977e04,
        4.602491e04,
        4.711326e04,
        4.821437e04,
        4.932877e04,
        5.045597e04,
        5.159626e04,
        5.274966e04,
        5.391623e04,
        5.509570e04,
        5.628837e04,
        5.749399e04,
        5.871259e04,
        5.994477e04,
        6.118969e04,
        6.244793e04,
        6.371925e04,
        6.500366e04,
        6.630117e04,
        6.761214e04,
        6.893627e04,
        7.027357e04,
        7.162408e04,
        7.298748e04,
        7.436445e04,
        7.575468e04,
        7.715820e04,
        7.857503e04,
        8.000484e04,
        8.144834e04,
        8.290486e04,
        8.437476e04,
        8.585806e04,
        8.735480e04,
        8.886462e04,
        9.038828e04,
        9.192505e04,
        9.347494e04,
        9.503836e04,
        9.661531e04,
        9.820585e04,
        9.980955e04,
        1.014269e05,
        1.030574e05,
        1.047016e05,
        1.063594e05,
        1.080305e05,
        1.097153e05,
        1.114134e05,
        1.131248e05,
        1.148503e05,
        1.165888e05,
        1.183415e05,
        1.201071e05,
        1.218866e05,
        1.236798e05,
        1.254865e05,
        1.273067e05,
        1.291407e05,
        1.309881e05,
        1.328495e05,
        1.347244e05,
        1.366128e05,
        1.385151e05,
        1.404309e05,
        1.423608e05,
        1.443038e05,
        1.462613e05,
        1.482318e05,
        1.502165e05,
        1.522147e05,
        1.542271e05,
        1.562526e05,
        1.582928e05,
        1.603461e05,
        1.624136e05,
        1.644948e05,
        1.665896e05,
        1.686987e05,
        1.708211e05,
        1.729576e05,
        1.751085e05,
        1.772726e05,
        1.794510e05,
        1.816432e05,
        1.838497e05,
        1.860695e05,
        1.883038e05,
        1.905518e05,
        1.928137e05,
        1.950900e05,
        1.973803e05,
        1.996838e05,
        2.020024e05,
        2.043343e05,
        2.066802e05,
        2.090406e05,
        2.114150e05,
        2.138033e05,
        2.162063e05,
    ]
)

#  ---------------------- M = 19, I = 1 ---------------------------
M = 19
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.780860e00,
        6.888728e01,
        1.374712e02,
        2.060890e02,
        2.747808e02,
        3.438010e02,
        4.137509e02,
        4.855483e02,
        5.602403e02,
        6.388943e02,
        7.225221e02,
        8.120553e02,
        9.083745e02,
        1.012293e03,
        1.124615e03,
        1.246077e03,
        1.377438e03,
        1.519448e03,
        1.672847e03,
        1.838414e03,
        2.016938e03,
        2.209189e03,
        2.416025e03,
        2.638267e03,
        2.876824e03,
        3.132602e03,
        3.406543e03,
        3.699623e03,
        4.012839e03,
        4.347286e03,
        4.703992e03,
        5.084126e03,
        5.488848e03,
        5.919326e03,
        6.376821e03,
        6.862632e03,
        7.378065e03,
        7.924484e03,
        8.503314e03,
        9.115988e03,
        9.764033e03,
        1.044898e04,
        1.117241e04,
        1.193599e04,
        1.274135e04,
        1.359026e04,
        1.448448e04,
        1.542590e04,
        1.641632e04,
        1.745769e04,
        1.855200e04,
        1.970131e04,
        2.090764e04,
        2.217321e04,
        2.350017e04,
        2.489078e04,
        2.634733e04,
        2.787217e04,
        2.946776e04,
        3.113658e04,
        3.288109e04,
        3.470398e04,
        3.660778e04,
        3.859534e04,
        4.066933e04,
        4.283266e04,
        4.508820e04,
        4.743892e04,
        4.988780e04,
        5.243797e04,
        5.509261e04,
        5.785493e04,
        6.072821e04,
        6.371578e04,
        6.682109e04,
        7.004764e04,
        7.339906e04,
        7.687883e04,
        8.049086e04,
        8.423872e04,
        8.812646e04,
        9.215786e04,
        9.633693e04,
        1.006678e05,
        1.051547e05,
        1.098017e05,
        1.146132e05,
        1.195935e05,
        1.247472e05,
        1.300787e05,
        1.355927e05,
        1.412939e05,
        1.471870e05,
        1.532770e05,
        1.595687e05,
        1.660673e05,
        1.727778e05,
        1.797055e05,
        1.868555e05,
        1.942334e05,
        2.018446e05,
        2.096945e05,
        2.177890e05,
        2.261336e05,
        2.347342e05,
        2.435967e05,
        2.527273e05,
        2.621318e05,
        2.718165e05,
        2.817878e05,
        2.920519e05,
        3.026154e05,
        3.134849e05,
        3.246670e05,
        3.361684e05,
        3.479962e05,
        3.601571e05,
        3.726584e05,
        3.855070e05,
        3.987105e05,
        4.122760e05,
        4.262112e05,
        4.405236e05,
        4.552207e05,
        4.703105e05,
        4.858008e05,
        5.016998e05,
        5.180154e05,
        5.347559e05,
        5.519297e05,
        5.695451e05,
        5.876108e05,
        6.061353e05,
        6.251276e05,
        6.445965e05,
        6.645510e05,
        6.850001e05,
        7.059533e05,
        7.274196e05,
        7.494089e05,
        7.719305e05,
        7.949943e05,
        8.186099e05,
        8.427874e05,
        8.675368e05,
        8.928685e05,
        9.187926e05,
        9.453196e05,
        9.724601e05,
        1.000225e06,
        1.028624e06,
        1.057670e06,
        1.087373e06,
        1.117744e06,
        1.148794e06,
        1.180535e06,
        1.212979e06,
        1.246138e06,
        1.280022e06,
        1.314645e06,
        1.350018e06,
        1.386153e06,
        1.423064e06,
        1.460762e06,
        1.499260e06,
        1.538571e06,
        1.578708e06,
        1.619685e06,
        1.661513e06,
        1.704207e06,
        1.747780e06,
        1.792246e06,
        1.837618e06,
        1.883911e06,
        1.931138e06,
        1.979315e06,
    ]
)

#  ---------------------- M = 19, I = 2 ---------------------------
M = 19
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.866200e00,
        7.060513e01,
        1.409078e02,
        2.112453e02,
        2.816616e02,
        3.524124e02,
        4.241291e02,
        4.977537e02,
        5.743694e02,
        6.550831e02,
        7.409406e02,
        8.329051e02,
        9.318879e02,
        1.038741e03,
        1.154268e03,
        1.279272e03,
        1.414522e03,
        1.560780e03,
        1.718840e03,
        1.889483e03,
        2.073538e03,
        2.271818e03,
        2.485183e03,
        2.714529e03,
        2.960748e03,
        3.224797e03,
        3.507665e03,
        3.810366e03,
        4.133950e03,
        4.479493e03,
        4.848138e03,
        5.241034e03,
        5.659402e03,
        6.104497e03,
        6.577577e03,
        7.080010e03,
        7.613174e03,
        8.178454e03,
        8.777326e03,
        9.411328e03,
        1.008198e04,
        1.079091e04,
        1.153976e04,
        1.233025e04,
        1.316410e04,
        1.404310e04,
        1.496915e04,
        1.594410e04,
        1.696994e04,
        1.804866e04,
        1.918233e04,
        2.037303e04,
        2.162293e04,
        2.293432e04,
        2.430941e04,
        2.575059e04,
        2.726019e04,
        2.884073e04,
        3.049469e04,
        3.222463e04,
        3.403321e04,
        3.592313e04,
        3.789715e04,
        3.995806e04,
        4.210879e04,
        4.435223e04,
        4.669141e04,
        4.912946e04,
        5.166950e04,
        5.431473e04,
        5.706844e04,
        5.993400e04,
        6.291482e04,
        6.601437e04,
        6.923620e04,
        7.258402e04,
        7.606148e04,
        7.967242e04,
        8.342064e04,
        8.731008e04,
        9.134474e04,
        9.552874e04,
        9.986620e04,
        1.043614e05,
        1.090186e05,
        1.138423e05,
        1.188369e05,
        1.240069e05,
        1.293571e05,
        1.348921e05,
        1.406168e05,
        1.465359e05,
        1.526546e05,
        1.589779e05,
        1.655109e05,
        1.722588e05,
        1.792271e05,
        1.864210e05,
        1.938462e05,
        2.015082e05,
        2.094126e05,
        2.175653e05,
        2.259721e05,
        2.346390e05,
        2.435721e05,
        2.527774e05,
        2.622614e05,
        2.720302e05,
        2.820903e05,
        2.924483e05,
        3.031110e05,
        3.140847e05,
        3.253767e05,
        3.369937e05,
        3.489427e05,
        3.612310e05,
        3.738659e05,
        3.868545e05,
        4.002045e05,
        4.139232e05,
        4.280186e05,
        4.424983e05,
        4.573703e05,
        4.726424e05,
        4.883229e05,
        5.044200e05,
        5.209419e05,
        5.378972e05,
        5.552945e05,
        5.731422e05,
        5.914493e05,
        6.102247e05,
        6.294775e05,
        6.492166e05,
        6.694515e05,
        6.901914e05,
        7.114458e05,
        7.332246e05,
        7.555370e05,
        7.783934e05,
        8.018036e05,
        8.257776e05,
        8.503257e05,
        8.754583e05,
        9.011859e05,
        9.275190e05,
        9.544684e05,
        9.820450e05,
        1.010260e06,
        1.039124e06,
        1.068649e06,
        1.098845e06,
        1.129726e06,
        1.161301e06,
        1.193583e06,
        1.226584e06,
        1.260317e06,
        1.294792e06,
        1.330023e06,
        1.366022e06,
        1.402801e06,
        1.440374e06,
        1.478753e06,
        1.517952e06,
        1.557983e06,
        1.598860e06,
        1.640596e06,
        1.683205e06,
        1.726701e06,
        1.771098e06,
        1.816409e06,
        1.862649e06,
        1.909833e06,
        1.957974e06,
        2.007088e06,
        2.057189e06,
    ]
)

#  ---------------------- M = 19, I = 3 ---------------------------
M = 19
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        7.583710e00,
        1.382173e02,
        2.758282e02,
        4.135070e02,
        5.513676e02,
        6.900135e02,
        8.308340e02,
        9.758329e02,
        1.127263e03,
        1.287312e03,
        1.458080e03,
        1.641493e03,
        1.839335e03,
        2.053277e03,
        2.284972e03,
        2.535982e03,
        2.807868e03,
        3.102189e03,
        3.420546e03,
        3.764540e03,
        4.135842e03,
        4.536154e03,
        4.967247e03,
        5.430907e03,
        5.929040e03,
        6.463587e03,
        7.036596e03,
        7.650158e03,
        8.306416e03,
        9.007672e03,
        9.756218e03,
        1.055447e04,
        1.140497e04,
        1.231027e04,
        1.327302e04,
        1.429603e04,
        1.538213e04,
        1.653432e04,
        1.775555e04,
        1.904896e04,
        2.041788e04,
        2.186555e04,
        2.339541e04,
        2.501105e04,
        2.671603e04,
        2.851411e04,
        3.040920e04,
        3.240513e04,
        3.450607e04,
        3.671615e04,
        3.903959e04,
        4.148094e04,
        4.404455e04,
        4.673515e04,
        4.955745e04,
        5.251625e04,
        5.561666e04,
        5.886377e04,
        6.226278e04,
        6.581899e04,
        6.953795e04,
        7.342535e04,
        7.748685e04,
        8.172822e04,
        8.615570e04,
        9.077534e04,
        9.559340e04,
        1.006162e05,
        1.058507e05,
        1.113031e05,
        1.169806e05,
        1.228899e05,
        1.290384e05,
        1.354334e05,
        1.420821e05,
        1.489923e05,
        1.561716e05,
        1.636280e05,
        1.713695e05,
        1.794043e05,
        1.877407e05,
        1.963875e05,
        2.053530e05,
        2.146464e05,
        2.242765e05,
        2.342527e05,
        2.445840e05,
        2.552802e05,
        2.663510e05,
        2.778062e05,
        2.896558e05,
        3.019102e05,
        3.145796e05,
        3.276747e05,
        3.412063e05,
        3.551851e05,
        3.696226e05,
        3.845298e05,
        3.999184e05,
        4.158000e05,
        4.321865e05,
        4.490901e05,
        4.665230e05,
        4.844975e05,
        5.030266e05,
        5.221230e05,
        5.417996e05,
        5.620701e05,
        5.829476e05,
        6.044458e05,
        6.265791e05,
        6.493608e05,
        6.728060e05,
        6.969287e05,
        7.217437e05,
        7.472664e05,
        7.735113e05,
        8.004945e05,
        8.282311e05,
        8.567373e05,
        8.860289e05,
        9.161222e05,
        9.470339e05,
        9.787808e05,
        1.011380e06,
        1.044848e06,
        1.079203e06,
        1.114462e06,
        1.150644e06,
        1.187766e06,
        1.225847e06,
        1.264906e06,
        1.304961e06,
        1.346032e06,
        1.388138e06,
        1.431299e06,
        1.475534e06,
        1.520864e06,
        1.567309e06,
        1.614891e06,
        1.663628e06,
        1.713544e06,
        1.764659e06,
        1.816995e06,
        1.870575e06,
        1.925419e06,
        1.981552e06,
        2.038995e06,
        2.097772e06,
        2.157905e06,
        2.219420e06,
        2.282339e06,
        2.346687e06,
        2.412488e06,
        2.479766e06,
        2.548548e06,
        2.618858e06,
        2.690721e06,
        2.764165e06,
        2.839214e06,
        2.915895e06,
        2.994236e06,
        3.074263e06,
        3.156003e06,
        3.239484e06,
        3.324735e06,
        3.411783e06,
        3.500657e06,
        3.591387e06,
        3.683999e06,
        3.778527e06,
        3.874996e06,
        3.973440e06,
        4.073888e06,
        4.176370e06,
        4.280919e06,
    ]
)

#  ---------------------- M = 19, I = 4 ---------------------------
M = 19
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.529716e01,
        2.790462e02,
        5.568808e02,
        8.348524e02,
        1.113124e03,
        1.392726e03,
        1.676127e03,
        1.967024e03,
        2.269724e03,
        2.588528e03,
        2.927570e03,
        3.290640e03,
        3.681356e03,
        4.103003e03,
        4.558813e03,
        5.051868e03,
        5.585175e03,
        6.161870e03,
        6.784985e03,
        7.457593e03,
        8.182895e03,
        8.964139e03,
        9.804763e03,
        1.070818e04,
        1.167802e04,
        1.271790e04,
        1.383181e04,
        1.502371e04,
        1.629759e04,
        1.765790e04,
        1.910900e04,
        2.065548e04,
        2.230214e04,
        2.405374e04,
        2.591542e04,
        2.789238e04,
        2.999010e04,
        3.221416e04,
        3.457015e04,
        3.706422e04,
        3.970237e04,
        4.249085e04,
        4.543618e04,
        4.854516e04,
        5.182439e04,
        5.528126e04,
        5.892283e04,
        6.275655e04,
        6.679011e04,
        7.103145e04,
        7.548857e04,
        8.016983e04,
        8.508371e04,
        9.023910e04,
        9.564456e04,
        1.013096e05,
        1.072436e05,
        1.134560e05,
        1.199569e05,
        1.267562e05,
        1.338645e05,
        1.412920e05,
        1.490498e05,
        1.571490e05,
        1.656006e05,
        1.744166e05,
        1.836087e05,
        1.931887e05,
        2.031692e05,
        2.135629e05,
        2.243826e05,
        2.356413e05,
        2.473527e05,
        2.595302e05,
        2.721881e05,
        2.853405e05,
        2.990019e05,
        3.131871e05,
        3.279114e05,
        3.431903e05,
        3.590394e05,
        3.754746e05,
        3.925124e05,
        4.101694e05,
        4.284625e05,
        4.474091e05,
        4.670263e05,
        4.873326e05,
        5.083460e05,
        5.300849e05,
        5.525683e05,
        5.758153e05,
        5.998453e05,
        6.246787e05,
        6.503350e05,
        6.768352e05,
        7.042000e05,
        7.324508e05,
        7.616091e05,
        7.916970e05,
        8.227364e05,
        8.547503e05,
        8.877616e05,
        9.217938e05,
        9.568705e05,
        9.930163e05,
        1.030255e06,
        1.068612e06,
        1.108113e06,
        1.148782e06,
        1.190646e06,
        1.233733e06,
        1.278068e06,
        1.323678e06,
        1.370591e06,
        1.418836e06,
        1.468441e06,
        1.519434e06,
        1.571845e06,
        1.625704e06,
        1.681041e06,
        1.737886e06,
        1.796270e06,
        1.856224e06,
        1.917781e06,
        1.980972e06,
        2.045832e06,
        2.112391e06,
        2.180684e06,
        2.250746e06,
        2.322610e06,
        2.396312e06,
        2.471886e06,
        2.549370e06,
        2.628798e06,
        2.710208e06,
        2.793637e06,
        2.879123e06,
        2.966704e06,
        3.056419e06,
        3.148307e06,
        3.242406e06,
        3.338759e06,
        3.437405e06,
        3.538386e06,
        3.641742e06,
        3.747517e06,
        3.855753e06,
        3.966492e06,
        4.079779e06,
        4.195658e06,
        4.314174e06,
        4.435371e06,
        4.559296e06,
        4.685994e06,
        4.815512e06,
        4.947899e06,
        5.083202e06,
        5.221468e06,
        5.362749e06,
        5.507091e06,
        5.654546e06,
        5.805164e06,
        5.958997e06,
        6.116096e06,
        6.276514e06,
        6.440302e06,
        6.607517e06,
        6.778209e06,
        6.952435e06,
        7.130249e06,
        7.311707e06,
        7.496867e06,
        7.685785e06,
        7.878517e06,
        8.075122e06,
    ]
)

#  ---------------------- M = 19, I = 5 ---------------------------
M = 19
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.005750e00,
        7.341299e01,
        1.465248e02,
        2.196725e02,
        2.929080e02,
        3.665343e02,
        4.412543e02,
        5.180980e02,
        5.982340e02,
        6.828353e02,
        7.730027e02,
        8.697668e02,
        9.740684e02,
        1.086823e03,
        1.208879e03,
        1.341069e03,
        1.484232e03,
        1.639180e03,
        1.806745e03,
        1.987801e03,
        2.183188e03,
        2.393832e03,
        2.620622e03,
        2.864546e03,
        3.126558e03,
        3.407697e03,
        3.709043e03,
        4.031658e03,
        4.376687e03,
        4.745342e03,
        5.138807e03,
        5.558356e03,
        6.005318e03,
        6.481015e03,
        6.986846e03,
        7.524300e03,
        8.094828e03,
        8.699968e03,
        9.341331e03,
        1.002056e04,
        1.073933e04,
        1.149937e04,
        1.230251e04,
        1.315057e04,
        1.404547e04,
        1.498914e04,
        1.598358e04,
        1.703092e04,
        1.813322e04,
        1.929266e04,
        2.051152e04,
        2.179207e04,
        2.313669e04,
        2.454777e04,
        2.602783e04,
        2.757939e04,
        2.920503e04,
        3.090744e04,
        3.268941e04,
        3.455366e04,
        3.650309e04,
        3.854064e04,
        4.066930e04,
        4.289217e04,
        4.521234e04,
        4.763307e04,
        5.015761e04,
        5.278935e04,
        5.553171e04,
        5.838817e04,
        6.136237e04,
        6.445786e04,
        6.767842e04,
        7.102788e04,
        7.451010e04,
        7.812908e04,
        8.188878e04,
        8.579338e04,
        8.984714e04,
        9.405423e04,
        9.841911e04,
        1.029462e05,
        1.076400e05,
        1.125052e05,
        1.175464e05,
        1.227686e05,
        1.281765e05,
        1.337751e05,
        1.395696e05,
        1.455650e05,
        1.517667e05,
        1.581798e05,
        1.648099e05,
        1.716626e05,
        1.787433e05,
        1.860579e05,
        1.936120e05,
        2.014118e05,
        2.094632e05,
        2.177721e05,
        2.263450e05,
        2.351881e05,
        2.443078e05,
        2.537105e05,
        2.634030e05,
        2.733918e05,
        2.836841e05,
        2.942864e05,
        3.052060e05,
        3.164500e05,
        3.280255e05,
        3.399401e05,
        3.522011e05,
        3.648163e05,
        3.777931e05,
        3.911396e05,
        4.048633e05,
        4.189728e05,
        4.334758e05,
        4.483808e05,
        4.636960e05,
        4.794302e05,
        4.955917e05,
        5.121894e05,
        5.292323e05,
        5.467291e05,
        5.646892e05,
        5.831215e05,
        6.020357e05,
        6.214410e05,
        6.413472e05,
        6.617640e05,
        6.827011e05,
        7.041687e05,
        7.261769e05,
        7.487358e05,
        7.718559e05,
        7.955477e05,
        8.198219e05,
        8.446893e05,
        8.701605e05,
        8.962469e05,
        9.229596e05,
        9.503098e05,
        9.783092e05,
        1.006969e06,
        1.036302e06,
        1.066319e06,
        1.097032e06,
        1.128454e06,
        1.160596e06,
        1.193472e06,
        1.227094e06,
        1.261474e06,
        1.296626e06,
        1.332563e06,
        1.369297e06,
        1.406843e06,
        1.445213e06,
        1.484422e06,
        1.524483e06,
        1.565410e06,
        1.607217e06,
        1.649919e06,
        1.693530e06,
        1.738064e06,
        1.783536e06,
        1.829962e06,
        1.877355e06,
        1.925733e06,
        1.975109e06,
        2.025500e06,
        2.076920e06,
        2.129387e06,
        2.182916e06,
        2.237523e06,
    ]
)

#  ---------------------- M = 20, I = 1 ---------------------------
M = 20
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.091110e00,
        4.947081e01,
        1.416480e02,
        2.592507e02,
        3.983023e02,
        5.559709e02,
        7.302920e02,
        9.198257e02,
        1.123477e03,
        1.340418e03,
        1.570058e03,
        1.812038e03,
        2.066230e03,
        2.332728e03,
        2.611836e03,
        2.904051e03,
        3.210045e03,
        3.530639e03,
        3.866789e03,
        4.219566e03,
        4.590146e03,
        4.979793e03,
        5.389860e03,
        5.821776e03,
        6.277046e03,
        6.757251e03,
        7.264045e03,
        7.799159e03,
        8.364401e03,
        8.961659e03,
        9.592904e03,
        1.026019e04,
        1.096512e04,
        1.170966e04,
        1.249659e04,
        1.332840e04,
        1.420757e04,
        1.513680e04,
        1.611862e04,
        1.715616e04,
        1.825218e04,
        1.940974e04,
        2.063218e04,
        2.192282e04,
        2.328522e04,
        2.472293e04,
        2.623979e04,
        2.783973e04,
        2.952702e04,
        3.130573e04,
        3.318041e04,
        3.515575e04,
        3.723663e04,
        3.942790e04,
        4.173473e04,
        4.416289e04,
        4.671773e04,
        4.940519e04,
        5.223118e04,
        5.520223e04,
        5.832512e04,
        6.160614e04,
        6.505245e04,
        6.867173e04,
        7.247112e04,
        7.645903e04,
        8.064278e04,
        8.503157e04,
        8.963402e04,
        9.445875e04,
        9.951574e04,
        1.048142e05,
        1.103643e05,
        1.161765e05,
        1.222616e05,
        1.286309e05,
        1.352955e05,
        1.422674e05,
        1.495587e05,
        1.571827e05,
        1.651519e05,
        1.734802e05,
        1.821813e05,
        1.912699e05,
        2.007604e05,
        2.106690e05,
        2.210108e05,
        2.318027e05,
        2.430609e05,
        2.548036e05,
        2.670483e05,
        2.798136e05,
        2.931184e05,
        3.069823e05,
        3.214256e05,
        3.364693e05,
        3.521348e05,
        3.684439e05,
        3.854199e05,
        4.030855e05,
        4.214650e05,
        4.405834e05,
        4.604660e05,
        4.811396e05,
        5.026303e05,
        5.249660e05,
        5.481756e05,
        5.722878e05,
        5.973333e05,
        6.233430e05,
        6.503482e05,
        6.783817e05,
        7.074775e05,
        7.376698e05,
        7.689940e05,
        8.014861e05,
        8.351831e05,
        8.701245e05,
        9.063479e05,
        9.438955e05,
        9.828070e05,
        1.023125e06,
        1.064895e06,
        1.108158e06,
        1.152963e06,
        1.199355e06,
        1.247383e06,
        1.297095e06,
        1.348543e06,
        1.401778e06,
        1.456853e06,
        1.513823e06,
        1.572742e06,
        1.633669e06,
        1.696660e06,
        1.761777e06,
        1.829081e06,
        1.898632e06,
        1.970497e06,
        2.044741e06,
        2.121430e06,
        2.200634e06,
        2.282422e06,
        2.366867e06,
        2.454042e06,
        2.544023e06,
        2.636886e06,
        2.732710e06,
        2.831576e06,
        2.933566e06,
        3.038763e06,
        3.147255e06,
        3.259128e06,
        3.374473e06,
        3.493381e06,
        3.615946e06,
        3.742264e06,
        3.872434e06,
        4.006554e06,
        4.144726e06,
        4.287056e06,
        4.433650e06,
        4.584616e06,
        4.740066e06,
        4.900110e06,
        5.064870e06,
        5.234458e06,
        5.408999e06,
        5.588613e06,
        5.773427e06,
        5.963569e06,
        6.159169e06,
        6.360361e06,
        6.567283e06,
        6.780068e06,
        6.998864e06,
    ]
)

#  ---------------------- M = 20, I = 2 ---------------------------
M = 20
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.519830e00,
        1.041424e02,
        2.906766e02,
        5.317342e02,
        8.170004e02,
        1.140498e03,
        1.498191e03,
        1.887134e03,
        2.305068e03,
        2.750313e03,
        3.221668e03,
        3.718356e03,
        4.240095e03,
        4.787152e03,
        5.360055e03,
        5.959825e03,
        6.587858e03,
        7.245886e03,
        7.935732e03,
        8.659593e03,
        9.420003e03,
        1.021942e04,
        1.106064e04,
        1.194646e04,
        1.288013e04,
        1.386475e04,
        1.490370e04,
        1.600056e04,
        1.715893e04,
        1.838256e04,
        1.967551e04,
        2.104202e04,
        2.248633e04,
        2.401319e04,
        2.562698e04,
        2.733280e04,
        2.913575e04,
        3.104133e04,
        3.305479e04,
        3.518252e04,
        3.743016e04,
        3.980401e04,
        4.231092e04,
        4.495767e04,
        4.775159e04,
        5.069997e04,
        5.381064e04,
        5.709169e04,
        6.055190e04,
        6.419956e04,
        6.804403e04,
        7.209494e04,
        7.636229e04,
        8.085600e04,
        8.558671e04,
        9.056622e04,
        9.580554e04,
        1.013168e05,
        1.071122e05,
        1.132050e05,
        1.196093e05,
        1.263378e05,
        1.334053e05,
        1.408275e05,
        1.486191e05,
        1.567972e05,
        1.653770e05,
        1.743773e05,
        1.838157e05,
        1.937100e05,
        2.040806e05,
        2.149463e05,
        2.263282e05,
        2.382475e05,
        2.507265e05,
        2.637882e05,
        2.774557e05,
        2.917531e05,
        3.067057e05,
        3.223406e05,
        3.386834e05,
        3.557626e05,
        3.736064e05,
        3.922448e05,
        4.117074e05,
        4.320273e05,
        4.532358e05,
        4.753672e05,
        4.984549e05,
        5.225361e05,
        5.476468e05,
        5.738251e05,
        6.011099e05,
        6.295411e05,
        6.591607e05,
        6.900115e05,
        7.221373e05,
        7.555835e05,
        7.903966e05,
        8.266243e05,
        8.643161e05,
        9.035230e05,
        9.442971e05,
        9.866935e05,
        1.030765e06,
        1.076570e06,
        1.124167e06,
        1.173615e06,
        1.224977e06,
        1.278317e06,
        1.333697e06,
        1.391187e06,
        1.450855e06,
        1.512772e06,
        1.577010e06,
        1.643643e06,
        1.712747e06,
        1.784403e06,
        1.858688e06,
        1.935688e06,
        2.015486e06,
        2.098169e06,
        2.183827e06,
        2.272550e06,
        2.364432e06,
        2.459570e06,
        2.558063e06,
        2.660012e06,
        2.765517e06,
        2.874690e06,
        2.987634e06,
        3.104464e06,
        3.225293e06,
        3.350239e06,
        3.479418e06,
        3.612957e06,
        3.750979e06,
        3.893612e06,
        4.040990e06,
        4.193245e06,
        4.350513e06,
        4.512941e06,
        4.680667e06,
        4.853844e06,
        5.032618e06,
        5.217145e06,
        5.407584e06,
        5.604095e06,
        5.806845e06,
        6.016000e06,
        6.231733e06,
        6.454222e06,
        6.683645e06,
        6.920189e06,
        7.164040e06,
        7.415389e06,
        7.674437e06,
        7.941381e06,
        8.216427e06,
        8.499785e06,
        8.791667e06,
        9.092294e06,
        9.401888e06,
        9.720676e06,
        1.004889e07,
        1.038677e07,
        1.073455e07,
        1.109249e07,
        1.146083e07,
        1.183984e07,
        1.222977e07,
        1.263090e07,
        1.304350e07,
        1.346784e07,
        1.390421e07,
        1.435290e07,
    ]
)

#  ---------------------- M = 20, I = 3 ---------------------------
M = 20
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        7.773000e-01,
        5.324867e01,
        1.486677e02,
        2.719834e02,
        4.179176e02,
        5.834117e02,
        7.664008e02,
        9.653781e02,
        1.179188e03,
        1.406969e03,
        1.648109e03,
        1.902210e03,
        2.169127e03,
        2.448996e03,
        2.742088e03,
        3.048926e03,
        3.370223e03,
        3.706865e03,
        4.059785e03,
        4.430108e03,
        4.819128e03,
        5.228105e03,
        5.658465e03,
        6.111648e03,
        6.589308e03,
        7.093032e03,
        7.624553e03,
        8.185700e03,
        8.778316e03,
        9.404317e03,
        1.006578e04,
        1.076488e04,
        1.150378e04,
        1.228491e04,
        1.311052e04,
        1.398321e04,
        1.490558e04,
        1.588047e04,
        1.691055e04,
        1.799908e04,
        1.914896e04,
        2.036341e04,
        2.164594e04,
        2.300000e04,
        2.442935e04,
        2.593773e04,
        2.752913e04,
        2.920771e04,
        3.097792e04,
        3.284406e04,
        3.481086e04,
        3.688330e04,
        3.906645e04,
        4.136541e04,
        4.378561e04,
        4.633311e04,
        4.901353e04,
        5.183307e04,
        5.479795e04,
        5.791503e04,
        6.119141e04,
        6.463369e04,
        6.824939e04,
        7.204656e04,
        7.603270e04,
        8.021661e04,
        8.460600e04,
        8.921050e04,
        9.403916e04,
        9.910103e04,
        1.044066e05,
        1.099654e05,
        1.157884e05,
        1.218862e05,
        1.282704e05,
        1.349528e05,
        1.419450e05,
        1.492595e05,
        1.569092e05,
        1.649080e05,
        1.732688e05,
        1.820065e05,
        1.911353e05,
        2.006707e05,
        2.106276e05,
        2.210232e05,
        2.318735e05,
        2.431958e05,
        2.550074e05,
        2.673273e05,
        2.801738e05,
        2.935665e05,
        3.075254e05,
        3.220707e05,
        3.372240e05,
        3.530071e05,
        3.694426e05,
        3.865535e05,
        4.043638e05,
        4.228977e05,
        4.421807e05,
        4.622389e05,
        4.830988e05,
        5.047886e05,
        5.273357e05,
        5.507693e05,
        5.751197e05,
        6.004172e05,
        6.266939e05,
        6.539820e05,
        6.823147e05,
        7.117262e05,
        7.422522e05,
        7.739285e05,
        8.067927e05,
        8.408819e05,
        8.762352e05,
        9.128942e05,
        9.508983e05,
        9.902916e05,
        1.031116e06,
        1.073416e06,
        1.117238e06,
        1.162629e06,
        1.209636e06,
        1.258308e06,
        1.308697e06,
        1.360853e06,
        1.414829e06,
        1.470682e06,
        1.528464e06,
        1.588234e06,
        1.650050e06,
        1.713972e06,
        1.780059e06,
        1.848378e06,
        1.918989e06,
        1.991960e06,
        2.067358e06,
        2.145251e06,
        2.225709e06,
        2.308807e06,
        2.394615e06,
        2.483212e06,
        2.574672e06,
        2.669076e06,
        2.766504e06,
        2.867038e06,
        2.970764e06,
        3.077768e06,
        3.188136e06,
        3.301961e06,
        3.419333e06,
        3.540348e06,
        3.665102e06,
        3.793692e06,
        3.926220e06,
        4.062788e06,
        4.203501e06,
        4.348466e06,
        4.497792e06,
        4.651592e06,
        4.809980e06,
        4.973071e06,
        5.140983e06,
        5.313842e06,
        5.491767e06,
        5.674888e06,
        5.863331e06,
        6.057231e06,
        6.256719e06,
        6.461935e06,
        6.673017e06,
        6.890111e06,
        7.113357e06,
        7.342907e06,
    ]
)

#  ---------------------- M = 21, I = 1 ---------------------------
M = 21
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.981460e00,
        3.304167e02,
        9.292313e02,
        1.704088e03,
        2.621559e03,
        3.662421e03,
        4.814121e03,
        6.068541e03,
        7.421071e03,
        8.869781e03,
        1.041512e04,
        1.205911e04,
        1.380519e04,
        1.565730e04,
        1.762056e04,
        1.970014e04,
        2.190181e04,
        2.423163e04,
        2.669554e04,
        2.929991e04,
        3.205132e04,
        3.495586e04,
        3.802056e04,
        4.125226e04,
        4.465708e04,
        4.824259e04,
        5.201564e04,
        5.598309e04,
        6.015219e04,
        6.453072e04,
        6.912550e04,
        7.394438e04,
        7.899525e04,
        8.428610e04,
        8.982435e04,
        9.561869e04,
        1.016773e05,
        1.080083e05,
        1.146215e05,
        1.215237e05,
        1.287266e05,
        1.362371e05,
        1.440654e05,
        1.522203e05,
        1.607132e05,
        1.695523e05,
        1.787484e05,
        1.883127e05,
        1.982535e05,
        2.085833e05,
        2.193115e05,
        2.304511e05,
        2.420107e05,
        2.540037e05,
        2.664413e05,
        2.793348e05,
        2.926958e05,
        3.065372e05,
        3.208723e05,
        3.357116e05,
        3.510703e05,
        3.669592e05,
        3.833922e05,
        4.003837e05,
        4.179467e05,
        4.360939e05,
        4.548404e05,
        4.741996e05,
        4.941865e05,
        5.148171e05,
        5.361032e05,
        5.580627e05,
        5.807100e05,
        6.040616e05,
        6.281301e05,
        6.529321e05,
        6.784872e05,
        7.048083e05,
        7.319154e05,
        7.598219e05,
        7.885455e05,
        8.181023e05,
        8.485133e05,
        8.797949e05,
        9.119639e05,
        9.450366e05,
        9.790353e05,
        1.013977e06,
        1.049882e06,
        1.086768e06,
        1.124652e06,
        1.163556e06,
        1.203500e06,
        1.244505e06,
        1.286588e06,
        1.329770e06,
        1.374075e06,
        1.419521e06,
        1.466130e06,
        1.513921e06,
        1.562920e06,
        1.613148e06,
        1.664626e06,
        1.717375e06,
        1.771419e06,
        1.826780e06,
        1.883484e06,
        1.941552e06,
        2.001009e06,
        2.061877e06,
        2.124181e06,
        2.187948e06,
        2.253196e06,
        2.319956e06,
        2.388251e06,
        2.458107e06,
        2.529549e06,
        2.602607e06,
        2.677298e06,
        2.753658e06,
        2.831706e06,
        2.911473e06,
        2.992987e06,
        3.076272e06,
        3.161364e06,
        3.248277e06,
        3.337053e06,
        3.427717e06,
        3.520289e06,
        3.614807e06,
        3.711301e06,
        3.809798e06,
        3.910326e06,
        4.012918e06,
        4.117603e06,
        4.224413e06,
        4.333378e06,
        4.444528e06,
        4.557903e06,
        4.673519e06,
        4.791422e06,
        4.911642e06,
        5.034208e06,
        5.159155e06,
        5.286513e06,
        5.416319e06,
        5.548609e06,
        5.683412e06,
        5.820768e06,
        5.960706e06,
        6.103265e06,
        6.248481e06,
        6.396387e06,
        6.547017e06,
        6.700413e06,
        6.856604e06,
        7.015634e06,
        7.177539e06,
        7.342350e06,
        7.510115e06,
        7.680862e06,
        7.854632e06,
        8.031473e06,
        8.211412e06,
        8.394491e06,
        8.580756e06,
        8.770230e06,
        8.962977e06,
        9.159022e06,
        9.358408e06,
        9.561181e06,
        9.767369e06,
        9.977034e06,
        1.019021e07,
        1.040692e07,
        1.062723e07,
    ]
)

#  ---------------------- M = 21, I = 2 ---------------------------
M = 21
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.058120e00,
        3.362054e02,
        9.456074e02,
        1.734179e03,
        2.667896e03,
        3.727193e03,
        4.899294e03,
        6.175937e03,
        7.552431e03,
        9.026809e03,
        1.059953e04,
        1.227265e04,
        1.404968e04,
        1.593461e04,
        1.793265e04,
        2.004908e04,
        2.228977e04,
        2.466088e04,
        2.716846e04,
        2.981898e04,
        3.261916e04,
        3.557517e04,
        3.869418e04,
        4.198316e04,
        4.544832e04,
        4.909737e04,
        5.293730e04,
        5.697506e04,
        6.121805e04,
        6.567419e04,
        7.035040e04,
        7.525467e04,
        8.039507e04,
        8.577969e04,
        9.141609e04,
        9.731312e04,
        1.034791e05,
        1.099223e05,
        1.166527e05,
        1.236773e05,
        1.310079e05,
        1.386514e05,
        1.466185e05,
        1.549179e05,
        1.635614e05,
        1.725571e05,
        1.819162e05,
        1.916501e05,
        2.017671e05,
        2.122799e05,
        2.231982e05,
        2.345353e05,
        2.462997e05,
        2.585053e05,
        2.711634e05,
        2.842854e05,
        2.978833e05,
        3.119700e05,
        3.265592e05,
        3.416615e05,
        3.572924e05,
        3.734629e05,
        3.901872e05,
        4.074799e05,
        4.253541e05,
        4.438230e05,
        4.629018e05,
        4.826041e05,
        5.029453e05,
        5.239416e05,
        5.456049e05,
        5.679538e05,
        5.910025e05,
        6.147679e05,
        6.392630e05,
        6.645047e05,
        6.905128e05,
        7.173004e05,
        7.448879e05,
        7.732890e05,
        8.025217e05,
        8.326025e05,
        8.635525e05,
        8.953886e05,
        9.281278e05,
        9.617867e05,
        9.963880e05,
        1.031949e06,
        1.068491e06,
        1.106030e06,
        1.144586e06,
        1.184179e06,
        1.224831e06,
        1.266563e06,
        1.309392e06,
        1.353339e06,
        1.398430e06,
        1.444682e06,
        1.492116e06,
        1.540754e06,
        1.590622e06,
        1.641741e06,
        1.694130e06,
        1.747816e06,
        1.802817e06,
        1.859159e06,
        1.916869e06,
        1.975965e06,
        2.036476e06,
        2.098423e06,
        2.161832e06,
        2.226729e06,
        2.293134e06,
        2.361077e06,
        2.430583e06,
        2.501677e06,
        2.574385e06,
        2.648739e06,
        2.724753e06,
        2.802466e06,
        2.881898e06,
        2.963079e06,
        3.046038e06,
        3.130799e06,
        3.217399e06,
        3.305853e06,
        3.396203e06,
        3.488473e06,
        3.582687e06,
        3.678880e06,
        3.777084e06,
        3.877327e06,
        3.979638e06,
        4.084047e06,
        4.190589e06,
        4.299291e06,
        4.410188e06,
        4.523309e06,
        4.638693e06,
        4.756358e06,
        4.876351e06,
        4.998702e06,
        5.123440e06,
        5.250602e06,
        5.380218e06,
        5.512325e06,
        5.646960e06,
        5.784152e06,
        5.923943e06,
        6.066361e06,
        6.211446e06,
        6.359237e06,
        6.509766e06,
        6.663065e06,
        6.819180e06,
        6.978140e06,
        7.139989e06,
        7.304764e06,
        7.472497e06,
        7.643236e06,
        7.817009e06,
        7.993858e06,
        8.173833e06,
        8.356963e06,
        8.543287e06,
        8.732853e06,
        8.925687e06,
        9.121849e06,
        9.321369e06,
        9.524290e06,
        9.730657e06,
        9.940501e06,
        1.015388e07,
        1.037083e07,
        1.059139e07,
        1.081561e07,
    ]
)

#  ---------------------- M = 22, I = 1 ---------------------------
M = 22
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.029370e00,
        3.298562e01,
        6.440722e01,
        9.584644e01,
        1.272919e02,
        1.587414e02,
        1.901941e02,
        2.216498e02,
        2.531083e02,
        2.845695e02,
        3.160334e02,
        3.475000e02,
        3.789694e02,
        4.104418e02,
        4.419180e02,
        4.733988e02,
        5.048860e02,
        5.363820e02,
        5.678901e02,
        5.994148e02,
        6.309613e02,
        6.625362e02,
        6.941467e02,
        7.258012e02,
        7.575086e02,
        7.892788e02,
        8.211221e02,
        8.530492e02,
        8.850710e02,
        9.171988e02,
        9.494439e02,
        9.818175e02,
        1.014331e03,
        1.046995e03,
        1.079820e03,
        1.112818e03,
        1.145998e03,
        1.179370e03,
        1.212943e03,
        1.246728e03,
        1.280732e03,
        1.314964e03,
        1.349432e03,
        1.384144e03,
        1.419107e03,
        1.454327e03,
        1.489813e03,
        1.525569e03,
        1.561602e03,
        1.597917e03,
        1.634520e03,
        1.671416e03,
        1.708610e03,
        1.746106e03,
        1.783909e03,
        1.822022e03,
        1.860449e03,
        1.899195e03,
        1.938262e03,
        1.977654e03,
        2.017374e03,
        2.057425e03,
        2.097810e03,
        2.138531e03,
        2.179590e03,
        2.220991e03,
        2.262736e03,
        2.304826e03,
        2.347264e03,
        2.390051e03,
        2.433189e03,
        2.476681e03,
        2.520527e03,
        2.564729e03,
        2.609289e03,
        2.654208e03,
        2.699487e03,
        2.745128e03,
        2.791131e03,
        2.837498e03,
        2.884230e03,
        2.931327e03,
        2.978791e03,
        3.026622e03,
        3.074822e03,
        3.123390e03,
        3.172328e03,
        3.221636e03,
        3.271315e03,
        3.321366e03,
        3.371788e03,
        3.422582e03,
        3.473749e03,
        3.525290e03,
        3.577203e03,
        3.629490e03,
        3.682151e03,
        3.735186e03,
        3.788596e03,
        3.842379e03,
        3.896538e03,
        3.951070e03,
        4.005977e03,
        4.061259e03,
        4.116915e03,
        4.172946e03,
        4.229351e03,
        4.286130e03,
        4.343283e03,
        4.400810e03,
        4.458710e03,
        4.516984e03,
        4.575631e03,
        4.634651e03,
        4.694043e03,
        4.753807e03,
        4.813944e03,
        4.874451e03,
        4.935329e03,
        4.996578e03,
        5.058196e03,
        5.120184e03,
        5.182541e03,
        5.245267e03,
        5.308360e03,
        5.371821e03,
        5.435648e03,
        5.499841e03,
        5.564399e03,
        5.629323e03,
        5.694610e03,
        5.760261e03,
        5.826274e03,
        5.892649e03,
        5.959385e03,
        6.026482e03,
        6.093938e03,
        6.161753e03,
        6.229926e03,
        6.298457e03,
        6.367343e03,
        6.436585e03,
        6.506181e03,
        6.576131e03,
        6.646434e03,
        6.717089e03,
        6.788095e03,
        6.859450e03,
        6.931155e03,
        7.003207e03,
        7.075607e03,
        7.148353e03,
        7.221444e03,
        7.294879e03,
        7.368657e03,
        7.442778e03,
        7.517239e03,
        7.592040e03,
        7.667180e03,
        7.742658e03,
        7.818473e03,
        7.894623e03,
        7.971108e03,
        8.047926e03,
        8.125077e03,
        8.202560e03,
        8.280372e03,
        8.358513e03,
        8.436983e03,
        8.515779e03,
        8.594900e03,
        8.674346e03,
        8.754116e03,
        8.834207e03,
        8.914620e03,
        8.995352e03,
        9.076403e03,
        9.157772e03,
        9.239456e03,
        9.321456e03,
        9.403770e03,
        9.486396e03,
        9.569334e03,
        9.652582e03,
        9.736138e03,
        9.820003e03,
        9.904175e03,
        9.988651e03,
        1.007343e04,
        1.015852e04,
        1.024390e04,
        1.032959e04,
        1.041557e04,
        1.050186e04,
        1.058844e04,
        1.067531e04,
        1.076248e04,
        1.084994e04,
        1.093770e04,
        1.102574e04,
        1.111408e04,
        1.120270e04,
        1.129161e04,
        1.138080e04,
        1.147028e04,
        1.156004e04,
        1.165009e04,
        1.174041e04,
        1.183101e04,
        1.192189e04,
        1.201305e04,
        1.210448e04,
        1.219619e04,
        1.228817e04,
        1.238042e04,
        1.247295e04,
        1.256574e04,
        1.265880e04,
        1.275212e04,
        1.284571e04,
        1.293957e04,
        1.303369e04,
        1.312807e04,
        1.322271e04,
        1.331760e04,
        1.341276e04,
        1.350817e04,
        1.360384e04,
        1.369976e04,
        1.379594e04,
        1.389237e04,
        1.398904e04,
        1.408597e04,
        1.418314e04,
        1.428056e04,
        1.437823e04,
        1.447614e04,
        1.457429e04,
        1.467269e04,
        1.477132e04,
        1.487019e04,
        1.496930e04,
        1.506865e04,
        1.516823e04,
        1.526805e04,
        1.536810e04,
        1.546838e04,
        1.556890e04,
        1.566964e04,
        1.577061e04,
        1.587180e04,
        1.597322e04,
        1.607487e04,
        1.617674e04,
        1.627883e04,
        1.638114e04,
        1.648367e04,
        1.658642e04,
        1.668939e04,
        1.679257e04,
        1.689597e04,
        1.699958e04,
        1.710340e04,
        1.720744e04,
        1.731168e04,
        1.741613e04,
        1.752079e04,
        1.762566e04,
        1.773073e04,
        1.783601e04,
        1.794149e04,
        1.804717e04,
        1.815305e04,
        1.825913e04,
        1.836541e04,
        1.847189e04,
        1.857856e04,
        1.868542e04,
        1.879248e04,
        1.889974e04,
        1.900718e04,
        1.911481e04,
        1.922264e04,
        1.933065e04,
        1.943885e04,
        1.954723e04,
        1.965580e04,
        1.976455e04,
        1.987348e04,
        1.998260e04,
        2.009189e04,
        2.020137e04,
        2.031102e04,
        2.042085e04,
        2.053085e04,
        2.064103e04,
        2.075138e04,
        2.086191e04,
        2.097260e04,
        2.108347e04,
        2.119450e04,
        2.130571e04,
        2.141708e04,
        2.152862e04,
        2.164032e04,
        2.175218e04,
        2.186421e04,
        2.197640e04,
        2.208875e04,
        2.220126e04,
        2.231393e04,
        2.242675e04,
        2.253974e04,
        2.265287e04,
        2.276617e04,
        2.287961e04,
        2.299321e04,
        2.310696e04,
        2.322086e04,
        2.333491e04,
        2.344911e04,
        2.356345e04,
        2.367794e04,
        2.379258e04,
        2.390736e04,
        2.402228e04,
        2.413735e04,
        2.425256e04,
        2.436791e04,
        2.448339e04,
        2.459902e04,
        2.471478e04,
        2.483069e04,
        2.494672e04,
        2.506289e04,
        2.517920e04,
        2.529563e04,
        2.541220e04,
        2.552890e04,
        2.564573e04,
        2.576269e04,
        2.587978e04,
        2.599699e04,
        2.611433e04,
        2.623180e04,
        2.634939e04,
        2.646710e04,
        2.658493e04,
        2.670289e04,
        2.682097e04,
        2.693917e04,
        2.705748e04,
        2.717592e04,
        2.729447e04,
        2.741314e04,
        2.753192e04,
        2.765082e04,
        2.776984e04,
        2.788896e04,
        2.800820e04,
        2.812754e04,
        2.824700e04,
        2.836657e04,
        2.848625e04,
        2.860603e04,
        2.872592e04,
        2.884592e04,
        2.896602e04,
        2.908623e04,
        2.920654e04,
        2.932695e04,
        2.944746e04,
        2.956808e04,
        2.968880e04,
        2.980961e04,
        2.993053e04,
        3.005154e04,
        3.017265e04,
        3.029385e04,
        3.041515e04,
        3.053655e04,
        3.065804e04,
        3.077962e04,
        3.090129e04,
        3.102306e04,
        3.114492e04,
        3.126686e04,
        3.138890e04,
        3.151103e04,
        3.163324e04,
        3.175554e04,
        3.187793e04,
        3.200040e04,
        3.212295e04,
        3.224560e04,
        3.236832e04,
        3.249113e04,
        3.261402e04,
        3.273698e04,
        3.286004e04,
        3.298317e04,
        3.310637e04,
        3.322966e04,
        3.335303e04,
        3.347647e04,
        3.359999e04,
        3.372358e04,
        3.384725e04,
        3.397099e04,
        3.409481e04,
        3.421870e04,
        3.434266e04,
        3.446669e04,
        3.459079e04,
        3.471497e04,
        3.483921e04,
        3.496352e04,
        3.508790e04,
        3.521235e04,
        3.533686e04,
        3.546144e04,
        3.558609e04,
        3.571080e04,
        3.583558e04,
        3.596041e04,
        3.608532e04,
        3.621028e04,
        3.633531e04,
        3.646039e04,
        3.658554e04,
        3.671075e04,
        3.683601e04,
        3.696134e04,
        3.708672e04,
        3.721216e04,
        3.733766e04,
        3.746321e04,
        3.758882e04,
        3.771449e04,
        3.784021e04,
        3.796598e04,
        3.809181e04,
        3.821769e04,
        3.834362e04,
        3.846960e04,
        3.859563e04,
        3.872172e04,
        3.884785e04,
        3.897404e04,
        3.910027e04,
        3.922655e04,
    ]
)

#  ---------------------- M = 22, I = 2 ---------------------------
M = 22
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.071020e00,
        4.541678e01,
        8.875137e01,
        1.321089e02,
        1.754746e02,
        2.188458e02,
        2.622213e02,
        3.056010e02,
        3.489845e02,
        3.923717e02,
        4.357626e02,
        4.791572e02,
        5.225558e02,
        5.659587e02,
        6.093669e02,
        6.527822e02,
        6.962070e02,
        7.396453e02,
        7.831022e02,
        8.265842e02,
        8.700997e02,
        9.136581e02,
        9.572704e02,
        1.000949e03,
        1.044707e03,
        1.088558e03,
        1.132518e03,
        1.176603e03,
        1.220827e03,
        1.265207e03,
        1.309760e03,
        1.354500e03,
        1.399444e03,
        1.444608e03,
        1.490006e03,
        1.535654e03,
        1.581565e03,
        1.627754e03,
        1.674233e03,
        1.721016e03,
        1.768115e03,
        1.815541e03,
        1.863305e03,
        1.911418e03,
        1.959890e03,
        2.008730e03,
        2.057948e03,
        2.107552e03,
        2.157550e03,
        2.207950e03,
        2.258760e03,
        2.309985e03,
        2.361634e03,
        2.413711e03,
        2.466223e03,
        2.519175e03,
        2.572573e03,
        2.626421e03,
        2.680724e03,
        2.735487e03,
        2.790713e03,
        2.846407e03,
        2.902573e03,
        2.959214e03,
        3.016333e03,
        3.073933e03,
        3.132018e03,
        3.190590e03,
        3.249653e03,
        3.309208e03,
        3.369258e03,
        3.429805e03,
        3.490852e03,
        3.552400e03,
        3.614451e03,
        3.677007e03,
        3.740070e03,
        3.803642e03,
        3.867723e03,
        3.932316e03,
        3.997421e03,
        4.063040e03,
        4.129174e03,
        4.195823e03,
        4.262990e03,
        4.330675e03,
        4.398878e03,
        4.467600e03,
        4.536843e03,
        4.606606e03,
        4.676891e03,
        4.747698e03,
        4.819026e03,
        4.890878e03,
        4.963252e03,
        5.036150e03,
        5.109571e03,
        5.183515e03,
        5.257983e03,
        5.332975e03,
        5.408491e03,
        5.484530e03,
        5.561093e03,
        5.638179e03,
        5.715789e03,
        5.793921e03,
        5.872577e03,
        5.951754e03,
        6.031454e03,
        6.111676e03,
        6.192419e03,
        6.273682e03,
        6.355466e03,
        6.437769e03,
        6.520592e03,
        6.603933e03,
        6.687791e03,
        6.772167e03,
        6.857060e03,
        6.942467e03,
        7.028390e03,
        7.114827e03,
        7.201776e03,
        7.289238e03,
        7.377212e03,
        7.465695e03,
        7.554688e03,
        7.644190e03,
        7.734198e03,
        7.824713e03,
        7.915734e03,
        8.007258e03,
        8.099285e03,
        8.191814e03,
        8.284844e03,
        8.378373e03,
        8.472401e03,
        8.566925e03,
        8.661945e03,
        8.757460e03,
        8.853467e03,
        8.949967e03,
        9.046956e03,
        9.144435e03,
        9.242402e03,
        9.340855e03,
        9.439793e03,
        9.539214e03,
        9.639117e03,
        9.739501e03,
        9.840364e03,
        9.941705e03,
        1.004352e04,
        1.014581e04,
        1.024858e04,
        1.035181e04,
        1.045552e04,
        1.055969e04,
        1.066433e04,
        1.076944e04,
        1.087501e04,
        1.098104e04,
        1.108753e04,
        1.119448e04,
        1.130189e04,
        1.140975e04,
        1.151807e04,
        1.162684e04,
        1.173606e04,
        1.184573e04,
        1.195584e04,
        1.206641e04,
        1.217741e04,
        1.228886e04,
        1.240074e04,
        1.251307e04,
        1.262583e04,
        1.273903e04,
        1.285266e04,
        1.296672e04,
        1.308121e04,
        1.319613e04,
        1.331148e04,
        1.342725e04,
        1.354344e04,
        1.366005e04,
        1.377709e04,
        1.389454e04,
        1.401240e04,
        1.413069e04,
        1.424938e04,
        1.436848e04,
        1.448799e04,
        1.460791e04,
        1.472823e04,
        1.484896e04,
        1.497009e04,
        1.509161e04,
        1.521354e04,
        1.533586e04,
        1.545857e04,
        1.558168e04,
        1.570518e04,
        1.582906e04,
        1.595333e04,
        1.607799e04,
        1.620303e04,
        1.632846e04,
        1.645426e04,
        1.658044e04,
        1.670699e04,
        1.683392e04,
        1.696123e04,
        1.708890e04,
        1.721694e04,
        1.734535e04,
        1.747412e04,
        1.760326e04,
        1.773276e04,
        1.786262e04,
        1.799284e04,
        1.812341e04,
        1.825434e04,
        1.838562e04,
        1.851725e04,
        1.864923e04,
        1.878155e04,
        1.891423e04,
        1.904724e04,
        1.918060e04,
        1.931430e04,
        1.944833e04,
        1.958271e04,
        1.971742e04,
        1.985246e04,
        1.998783e04,
        2.012353e04,
        2.025956e04,
        2.039591e04,
        2.053259e04,
        2.066960e04,
        2.080692e04,
        2.094456e04,
        2.108252e04,
        2.122079e04,
        2.135938e04,
        2.149828e04,
        2.163749e04,
        2.177701e04,
        2.191683e04,
        2.205696e04,
        2.219740e04,
        2.233813e04,
        2.247917e04,
        2.262050e04,
        2.276213e04,
        2.290406e04,
        2.304628e04,
        2.318879e04,
        2.333159e04,
        2.347468e04,
        2.361805e04,
        2.376171e04,
        2.390565e04,
        2.404987e04,
        2.419438e04,
        2.433916e04,
        2.448422e04,
        2.462955e04,
        2.477516e04,
        2.492103e04,
        2.506718e04,
        2.521360e04,
        2.536028e04,
        2.550723e04,
        2.565444e04,
        2.580191e04,
        2.594964e04,
        2.609763e04,
        2.624588e04,
        2.639439e04,
        2.654314e04,
        2.669215e04,
        2.684141e04,
        2.699092e04,
        2.714068e04,
        2.729068e04,
        2.744093e04,
        2.759142e04,
        2.774215e04,
        2.789312e04,
        2.804433e04,
        2.819578e04,
        2.834746e04,
        2.849937e04,
        2.865152e04,
        2.880390e04,
        2.895650e04,
        2.910934e04,
        2.926240e04,
        2.941568e04,
        2.956919e04,
        2.972292e04,
        2.987687e04,
        3.003104e04,
        3.018542e04,
        3.034002e04,
        3.049484e04,
        3.064987e04,
        3.080511e04,
        3.096055e04,
        3.111621e04,
        3.127208e04,
        3.142815e04,
        3.158442e04,
        3.174090e04,
        3.189758e04,
        3.205446e04,
        3.221153e04,
        3.236881e04,
        3.252628e04,
        3.268394e04,
        3.284180e04,
        3.299985e04,
        3.315809e04,
        3.331652e04,
        3.347514e04,
        3.363394e04,
        3.379293e04,
        3.395210e04,
        3.411145e04,
        3.427098e04,
        3.443070e04,
        3.459059e04,
        3.475066e04,
        3.491090e04,
        3.507132e04,
        3.523191e04,
        3.539268e04,
        3.555361e04,
        3.571471e04,
        3.587598e04,
        3.603742e04,
        3.619902e04,
        3.636079e04,
        3.652272e04,
        3.668481e04,
        3.684706e04,
        3.700947e04,
        3.717204e04,
        3.733477e04,
        3.749765e04,
        3.766069e04,
        3.782387e04,
        3.798721e04,
        3.815070e04,
        3.831434e04,
        3.847813e04,
        3.864207e04,
        3.880615e04,
        3.897037e04,
        3.913474e04,
        3.929926e04,
        3.946391e04,
        3.962870e04,
        3.979363e04,
        3.995870e04,
        4.012391e04,
        4.028925e04,
        4.045473e04,
        4.062034e04,
        4.078608e04,
        4.095195e04,
        4.111796e04,
        4.128409e04,
        4.145035e04,
        4.161673e04,
        4.178324e04,
        4.194988e04,
        4.211664e04,
        4.228352e04,
        4.245053e04,
        4.261765e04,
        4.278489e04,
        4.295225e04,
        4.311973e04,
        4.328733e04,
        4.345503e04,
        4.362286e04,
        4.379079e04,
        4.395884e04,
        4.412700e04,
        4.429527e04,
        4.446365e04,
        4.463213e04,
        4.480073e04,
        4.496943e04,
        4.513823e04,
        4.530714e04,
        4.547615e04,
        4.564526e04,
        4.581448e04,
        4.598379e04,
        4.615320e04,
        4.632272e04,
        4.649233e04,
        4.666203e04,
        4.683183e04,
        4.700173e04,
        4.717172e04,
        4.734180e04,
        4.751197e04,
        4.768224e04,
        4.785259e04,
        4.802304e04,
        4.819357e04,
        4.836419e04,
        4.853489e04,
        4.870568e04,
        4.887656e04,
        4.904752e04,
        4.921856e04,
        4.938969e04,
        4.956089e04,
        4.973218e04,
        4.990354e04,
        5.007499e04,
        5.024651e04,
        5.041811e04,
        5.058978e04,
        5.076153e04,
        5.093336e04,
        5.110526e04,
        5.127723e04,
        5.144927e04,
        5.162139e04,
        5.179357e04,
        5.196583e04,
        5.213815e04,
        5.231054e04,
        5.248300e04,
        5.265553e04,
        5.282812e04,
        5.300078e04,
        5.317350e04,
        5.334628e04,
        5.351913e04,
        5.369204e04,
        5.386501e04,
        5.403804e04,
        5.421113e04,
    ]
)

#  ---------------------- M = 22, I = 3 ---------------------------
M = 22
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[3]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.042930e00,
        1.565169e01,
        3.061038e01,
        4.557650e01,
        6.054536e01,
        7.551604e01,
        9.048823e01,
        1.054618e02,
        1.204367e02,
        1.354129e02,
        1.503903e02,
        1.653691e02,
        1.803492e02,
        1.953309e02,
        2.103145e02,
        2.253008e02,
        2.402907e02,
        2.552858e02,
        2.702880e02,
        2.852999e02,
        3.003246e02,
        3.153656e02,
        3.304270e02,
        3.455134e02,
        3.606296e02,
        3.757809e02,
        3.909726e02,
        4.062104e02,
        4.214999e02,
        4.368470e02,
        4.522573e02,
        4.677366e02,
        4.832903e02,
        4.989241e02,
        5.146432e02,
        5.304529e02,
        5.463581e02,
        5.623636e02,
        5.784740e02,
        5.946939e02,
        6.110273e02,
        6.274783e02,
        6.440507e02,
        6.607482e02,
        6.775743e02,
        6.945321e02,
        7.116249e02,
        7.288554e02,
        7.462266e02,
        7.637410e02,
        7.814012e02,
        7.992095e02,
        8.171680e02,
        8.352790e02,
        8.535443e02,
        8.719660e02,
        8.905456e02,
        9.092849e02,
        9.281856e02,
        9.472490e02,
        9.664766e02,
        9.858697e02,
        1.005430e03,
        1.025157e03,
        1.045054e03,
        1.065122e03,
        1.085360e03,
        1.105770e03,
        1.126354e03,
        1.147111e03,
        1.168043e03,
        1.189150e03,
        1.210433e03,
        1.231893e03,
        1.253530e03,
        1.275346e03,
        1.297340e03,
        1.319512e03,
        1.341865e03,
        1.364397e03,
        1.387110e03,
        1.410003e03,
        1.433077e03,
        1.456333e03,
        1.479771e03,
        1.503390e03,
        1.527192e03,
        1.551176e03,
        1.575343e03,
        1.599692e03,
        1.624225e03,
        1.648941e03,
        1.673840e03,
        1.698922e03,
        1.724188e03,
        1.749637e03,
        1.775269e03,
        1.801085e03,
        1.827085e03,
        1.853267e03,
        1.879634e03,
        1.906183e03,
        1.932916e03,
        1.959832e03,
        1.986931e03,
        2.014212e03,
        2.041677e03,
        2.069324e03,
        2.097154e03,
        2.125166e03,
        2.153359e03,
        2.181735e03,
        2.210292e03,
        2.239031e03,
        2.267951e03,
        2.297051e03,
        2.326332e03,
        2.355794e03,
        2.385435e03,
        2.415256e03,
        2.445256e03,
        2.475436e03,
        2.505794e03,
        2.536330e03,
        2.567044e03,
        2.597935e03,
        2.629004e03,
        2.660250e03,
        2.691671e03,
        2.723269e03,
        2.755043e03,
        2.786991e03,
        2.819114e03,
        2.851411e03,
        2.883882e03,
        2.916526e03,
        2.949343e03,
        2.982332e03,
        3.015493e03,
        3.048826e03,
        3.082329e03,
        3.116002e03,
        3.149846e03,
        3.183859e03,
        3.218040e03,
        3.252390e03,
        3.286907e03,
        3.321592e03,
        3.356443e03,
        3.391461e03,
        3.426643e03,
        3.461991e03,
        3.497504e03,
        3.533180e03,
        3.569019e03,
        3.605021e03,
        3.641186e03,
        3.677511e03,
        3.713998e03,
        3.750645e03,
        3.787452e03,
        3.824418e03,
        3.861542e03,
        3.898825e03,
        3.936265e03,
        3.973861e03,
        4.011614e03,
        4.049522e03,
        4.087585e03,
        4.125803e03,
        4.164174e03,
        4.202698e03,
        4.241375e03,
        4.280203e03,
        4.319182e03,
        4.358312e03,
        4.397592e03,
        4.437021e03,
        4.476599e03,
        4.516325e03,
        4.556198e03,
        4.596218e03,
        4.636384e03,
        4.676695e03,
        4.717151e03,
        4.757752e03,
        4.798495e03,
        4.839382e03,
        4.880411e03,
        4.921581e03,
        4.962892e03,
        5.004344e03,
        5.045935e03,
        5.087665e03,
        5.129534e03,
        5.171540e03,
        5.213683e03,
        5.255963e03,
        5.298378e03,
        5.340928e03,
        5.383613e03,
        5.426432e03,
        5.469384e03,
        5.512468e03,
        5.555684e03,
        5.599031e03,
        5.642509e03,
        5.686116e03,
        5.729853e03,
        5.773719e03,
        5.817712e03,
        5.861833e03,
        5.906080e03,
        5.950453e03,
        5.994952e03,
        6.039576e03,
        6.084323e03,
        6.129194e03,
        6.174188e03,
        6.219304e03,
        6.264541e03,
        6.309899e03,
        6.355378e03,
        6.400976e03,
        6.446693e03,
        6.492528e03,
        6.538481e03,
        6.584551e03,
        6.630738e03,
        6.677040e03,
        6.723457e03,
        6.769989e03,
        6.816635e03,
        6.863394e03,
        6.910266e03,
        6.957250e03,
        7.004345e03,
        7.051551e03,
        7.098867e03,
        7.146292e03,
        7.193827e03,
        7.241469e03,
        7.289220e03,
        7.337077e03,
        7.385041e03,
        7.433111e03,
        7.481286e03,
        7.529565e03,
        7.577949e03,
        7.626436e03,
        7.675025e03,
        7.723717e03,
        7.772511e03,
        7.821405e03,
        7.870400e03,
        7.919495e03,
        7.968689e03,
        8.017981e03,
        8.067371e03,
        8.116859e03,
        8.166444e03,
        8.216125e03,
        8.265901e03,
        8.315773e03,
        8.365739e03,
        8.415798e03,
        8.465952e03,
        8.516198e03,
        8.566536e03,
        8.616965e03,
        8.667486e03,
        8.718097e03,
        8.768798e03,
        8.819588e03,
        8.870467e03,
        8.921434e03,
        8.972489e03,
        9.023631e03,
        9.074859e03,
        9.126174e03,
        9.177573e03,
        9.229058e03,
        9.280626e03,
        9.332279e03,
        9.384014e03,
        9.435833e03,
        9.487733e03,
        9.539715e03,
        9.591778e03,
        9.643921e03,
        9.696144e03,
        9.748447e03,
        9.800828e03,
        9.853288e03,
        9.905826e03,
        9.958440e03,
        1.001113e04,
        1.006390e04,
        1.011674e04,
        1.016966e04,
        1.022266e04,
        1.027572e04,
        1.032886e04,
        1.038208e04,
        1.043536e04,
        1.048872e04,
        1.054215e04,
        1.059566e04,
        1.064923e04,
        1.070287e04,
        1.075658e04,
        1.081036e04,
        1.086421e04,
        1.091813e04,
        1.097212e04,
        1.102617e04,
        1.108029e04,
        1.113447e04,
        1.118872e04,
        1.124304e04,
        1.129742e04,
        1.135187e04,
        1.140637e04,
        1.146095e04,
        1.151558e04,
        1.157028e04,
        1.162504e04,
        1.167986e04,
        1.173474e04,
        1.178968e04,
        1.184468e04,
        1.189975e04,
        1.195487e04,
        1.201005e04,
        1.206528e04,
        1.212058e04,
        1.217593e04,
        1.223134e04,
        1.228681e04,
        1.234233e04,
        1.239791e04,
        1.245354e04,
        1.250923e04,
        1.256497e04,
        1.262077e04,
        1.267661e04,
        1.273252e04,
        1.278847e04,
        1.284448e04,
        1.290054e04,
        1.295665e04,
        1.301281e04,
        1.306902e04,
        1.312528e04,
        1.318159e04,
        1.323795e04,
        1.329436e04,
        1.335081e04,
        1.340732e04,
        1.346387e04,
        1.352047e04,
        1.357712e04,
        1.363381e04,
        1.369055e04,
        1.374734e04,
        1.380417e04,
        1.386104e04,
        1.391796e04,
        1.397492e04,
        1.403193e04,
        1.408898e04,
        1.414607e04,
        1.420321e04,
        1.426039e04,
        1.431761e04,
        1.437487e04,
        1.443217e04,
        1.448951e04,
        1.454690e04,
        1.460432e04,
        1.466178e04,
        1.471928e04,
        1.477682e04,
        1.483440e04,
        1.489202e04,
        1.494968e04,
        1.500737e04,
        1.506510e04,
        1.512287e04,
        1.518067e04,
        1.523851e04,
        1.529638e04,
        1.535429e04,
        1.541224e04,
        1.547022e04,
        1.552823e04,
        1.558628e04,
        1.564436e04,
        1.570248e04,
        1.576063e04,
        1.581881e04,
        1.587702e04,
        1.593527e04,
        1.599354e04,
        1.605185e04,
        1.611019e04,
        1.616856e04,
        1.622697e04,
        1.628540e04,
        1.634386e04,
        1.640235e04,
        1.646087e04,
        1.651942e04,
        1.657800e04,
        1.663660e04,
        1.669524e04,
        1.675390e04,
        1.681259e04,
        1.687130e04,
        1.693005e04,
        1.698882e04,
        1.704761e04,
        1.710643e04,
        1.716528e04,
        1.722415e04,
        1.728305e04,
        1.734197e04,
        1.740092e04,
        1.745989e04,
        1.751889e04,
        1.757791e04,
        1.763695e04,
        1.769602e04,
        1.775510e04,
        1.781422e04,
        1.787335e04,
        1.793250e04,
        1.799168e04,
        1.805088e04,
        1.811010e04,
        1.816934e04,
        1.822860e04,
        1.828789e04,
        1.834719e04,
        1.840651e04,
        1.846585e04,
        1.852522e04,
        1.858460e04,
        1.864400e04,
        1.870342e04,
        1.876285e04,
    ]
)

#  ---------------------- M = 23, I = 1 ---------------------------
M = 23
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.255910e00,
        5.846743e01,
        1.148737e02,
        1.712988e02,
        2.277330e02,
        2.841901e02,
        3.407448e02,
        3.975806e02,
        4.549981e02,
        5.133834e02,
        5.731623e02,
        6.347625e02,
        6.985902e02,
        7.650186e02,
        8.343861e02,
        9.069982e02,
        9.831325e02,
        1.063044e03,
        1.146969e03,
        1.235132e03,
        1.327747e03,
        1.425022e03,
        1.527162e03,
        1.634371e03,
        1.746850e03,
        1.864805e03,
        1.988442e03,
        2.117972e03,
        2.253608e03,
        2.395569e03,
        2.544078e03,
        2.699363e03,
        2.861660e03,
        3.031206e03,
        3.208249e03,
        3.393039e03,
        3.585834e03,
        3.786899e03,
        3.996503e03,
        4.214924e03,
        4.442444e03,
        4.679352e03,
        4.925946e03,
        5.182528e03,
        5.449407e03,
        5.726899e03,
        6.015328e03,
        6.315021e03,
        6.626316e03,
        6.949556e03,
        7.285090e03,
        7.644438e03,
        8.017771e03,
        8.405197e03,
        8.807106e03,
        9.223898e03,
        9.655973e03,
        1.010375e04,
        1.056765e04,
        1.104809e04,
        1.154553e04,
        1.206039e04,
        1.259313e04,
        1.314422e04,
        1.371412e04,
        1.430330e04,
        1.491225e04,
        1.554147e04,
        1.619144e04,
        1.686268e04,
        1.755572e04,
        1.827106e04,
        1.900924e04,
        1.977081e04,
        2.055631e04,
        2.136630e04,
        2.220136e04,
        2.306204e04,
        2.394895e04,
        2.486265e04,
        2.580377e04,
        2.677291e04,
        2.777069e04,
        2.879773e04,
        2.985468e04,
        3.094216e04,
        3.206084e04,
        3.321139e04,
        3.439446e04,
        3.561075e04,
        3.686094e04,
        3.814573e04,
        3.946582e04,
        4.082193e04,
        4.221480e04,
        4.364516e04,
        4.511375e04,
        4.662130e04,
        4.816861e04,
        4.975646e04,
        5.138558e04,
        5.305681e04,
        5.477092e04,
        5.652873e04,
        5.833107e04,
        6.017876e04,
        6.207265e04,
        6.401357e04,
        6.600238e04,
        6.803996e04,
        7.012718e04,
        7.226494e04,
        7.445411e04,
        7.669563e04,
        7.899039e04,
        8.133932e04,
        8.374336e04,
        8.620347e04,
        8.872059e04,
        9.129568e04,
        9.392974e04,
        9.662374e04,
        9.937866e04,
        1.021955e05,
        1.050753e05,
        1.080191e05,
        1.110280e05,
        1.141028e05,
        1.172448e05,
        1.204550e05,
        1.237344e05,
        1.270842e05,
        1.305054e05,
        1.339991e05,
        1.375665e05,
        1.412087e05,
        1.449268e05,
        1.487220e05,
        1.525953e05,
        1.565481e05,
        1.605814e05,
        1.646964e05,
        1.688944e05,
        1.731765e05,
        1.775439e05,
        1.819979e05,
        1.865398e05,
        1.911707e05,
        1.958919e05,
        2.007047e05,
        2.056102e05,
        2.106100e05,
        2.157051e05,
        2.208970e05,
        2.261869e05,
        2.315762e05,
        2.370662e05,
        2.426582e05,
        2.483535e05,
        2.541537e05,
        2.600599e05,
        2.660736e05,
        2.721962e05,
        2.784291e05,
        2.847737e05,
        2.912314e05,
        2.978036e05,
        3.044918e05,
        3.112975e05,
        3.182219e05,
        3.252667e05,
        3.324334e05,
        3.397233e05,
        3.471381e05,
        3.546790e05,
        3.623478e05,
    ]
)

#  ---------------------- M = 23, I = 2 ---------------------------
M = 23
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.256912e01,
        1.198179e02,
        2.355169e02,
        3.512532e02,
        4.670077e02,
        5.828098e02,
        6.988156e02,
        8.154062e02,
        9.332049e02,
        1.053010e03,
        1.175699e03,
        1.302157e03,
        1.433218e03,
        1.569655e03,
        1.712166e03,
        1.861382e03,
        2.017879e03,
        2.182186e03,
        2.354797e03,
        2.536179e03,
        2.726782e03,
        2.927041e03,
        3.137388e03,
        3.358249e03,
        3.590052e03,
        3.833228e03,
        4.088213e03,
        4.355451e03,
        4.635393e03,
        4.928501e03,
        5.235245e03,
        5.556109e03,
        5.891584e03,
        6.242178e03,
        6.608407e03,
        6.990802e03,
        7.389906e03,
        7.806274e03,
        8.240476e03,
        8.693093e03,
        9.164721e03,
        9.655968e03,
        1.016746e04,
        1.069982e04,
        1.125372e04,
        1.182980e04,
        1.242875e04,
        1.305125e04,
        1.369802e04,
        1.436977e04,
        1.506723e04,
        1.581858e04,
        1.659528e04,
        1.740150e04,
        1.823806e04,
        1.910581e04,
        2.000560e04,
        2.093831e04,
        2.190483e04,
        2.290607e04,
        2.394295e04,
        2.501642e04,
        2.612743e04,
        2.727695e04,
        2.846597e04,
        2.969552e04,
        3.096661e04,
        3.228030e04,
        3.363762e04,
        3.503967e04,
        3.648755e04,
        3.798238e04,
        3.952527e04,
        4.111738e04,
        4.275989e04,
        4.445397e04,
        4.620085e04,
        4.800173e04,
        4.985785e04,
        5.177049e04,
        5.374092e04,
        5.577045e04,
        5.786038e04,
        6.001205e04,
        6.222683e04,
        6.450609e04,
        6.685123e04,
        6.926364e04,
        7.174476e04,
        7.429607e04,
        7.691903e04,
        7.961513e04,
        8.238587e04,
        8.523279e04,
        8.815748e04,
        9.116146e04,
        9.424635e04,
        9.741373e04,
        1.006653e05,
        1.040027e05,
        1.074275e05,
        1.109415e05,
        1.145465e05,
        1.182440e05,
        1.220360e05,
        1.259241e05,
        1.299102e05,
        1.339961e05,
        1.381836e05,
        1.424746e05,
        1.468710e05,
        1.513747e05,
        1.559876e05,
        1.607117e05,
        1.655489e05,
        1.705012e05,
        1.755707e05,
        1.807593e05,
        1.860692e05,
        1.915024e05,
        1.970610e05,
        2.027471e05,
        2.085628e05,
        2.145104e05,
        2.205921e05,
        2.268099e05,
        2.331663e05,
        2.396632e05,
        2.463032e05,
        2.530885e05,
        2.600213e05,
        2.671041e05,
        2.743392e05,
        2.817289e05,
        2.892757e05,
        2.969820e05,
        3.048502e05,
        3.128829e05,
        3.210824e05,
        3.294513e05,
        3.379922e05,
        3.467075e05,
        3.556000e05,
        3.646721e05,
        3.739265e05,
        3.833658e05,
        3.929927e05,
        4.028098e05,
        4.128199e05,
        4.230257e05,
        4.334300e05,
        4.440355e05,
        4.548450e05,
        4.658613e05,
        4.770871e05,
        4.885256e05,
        5.001793e05,
        5.120512e05,
        5.241444e05,
        5.364618e05,
        5.490060e05,
        5.617803e05,
        5.747876e05,
        5.880310e05,
        6.015134e05,
        6.152380e05,
        6.292077e05,
        6.434256e05,
        6.578952e05,
        6.726192e05,
        6.876007e05,
        7.028432e05,
        7.183499e05,
        7.341236e05,
        7.501680e05,
        7.664860e05,
    ]
)

#  ---------------------- M = 23, I = 3 ---------------------------
M = 23
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.705510e00,
        4.011176e01,
        7.886627e01,
        1.176487e02,
        1.564527e02,
        1.952881e02,
        2.342069e02,
        2.733368e02,
        3.128870e02,
        3.531270e02,
        3.943565e02,
        4.368808e02,
        4.809954e02,
        5.269788e02,
        5.750913e02,
        6.255753e02,
        6.786581e02,
        7.345535e02,
        7.934654e02,
        8.555889e02,
        9.211128e02,
        9.902210e02,
        1.063094e03,
        1.139909e03,
        1.220842e03,
        1.306069e03,
        1.395765e03,
        1.490107e03,
        1.589273e03,
        1.693442e03,
        1.802795e03,
        1.917518e03,
        2.037796e03,
        2.163821e03,
        2.295788e03,
        2.433892e03,
        2.578337e03,
        2.729329e03,
        2.887077e03,
        3.051796e03,
        3.223707e03,
        3.403033e03,
        3.590003e03,
        3.784852e03,
        3.987816e03,
        4.199140e03,
        4.419076e03,
        4.647874e03,
        4.885797e03,
        5.133106e03,
        5.390076e03,
        5.656980e03,
        5.934099e03,
        6.221720e03,
        6.520136e03,
        6.829645e03,
        7.150549e03,
        7.483158e03,
        7.827786e03,
        8.184755e03,
        8.554390e03,
        8.937025e03,
        9.332999e03,
        9.742652e03,
        1.016634e04,
        1.060441e04,
        1.105723e04,
        1.152517e04,
        1.200860e04,
        1.250790e04,
        1.302346e04,
        1.355567e04,
        1.410492e04,
        1.467163e04,
        1.525621e04,
        1.585907e04,
        1.648063e04,
        1.712133e04,
        1.778161e04,
        1.846190e04,
        1.916266e04,
        1.988433e04,
        2.062740e04,
        2.139232e04,
        2.217957e04,
        2.298962e04,
        2.382298e04,
        2.468014e04,
        2.556160e04,
        2.646787e04,
        2.739946e04,
        2.835689e04,
        2.934071e04,
        3.035144e04,
        3.138963e04,
        3.245582e04,
        3.355059e04,
        3.467448e04,
        3.582807e04,
        3.701195e04,
        3.822668e04,
        3.947288e04,
        4.075113e04,
        4.206204e04,
        4.340624e04,
        4.478434e04,
        4.619696e04,
        4.764476e04,
        4.912835e04,
        5.064840e04,
        5.220557e04,
        5.380051e04,
        5.543391e04,
        5.710644e04,
        5.881878e04,
        6.057165e04,
        6.236571e04,
        6.420171e04,
        6.608034e04,
        6.800233e04,
        6.996841e04,
        7.197933e04,
        7.403584e04,
        7.613867e04,
        7.828858e04,
        8.048637e04,
        8.273280e04,
        8.502866e04,
        8.737470e04,
        8.977178e04,
        9.222067e04,
        9.472220e04,
        9.727719e04,
        9.988645e04,
        1.025508e05,
        1.052712e05,
        1.080484e05,
        1.108832e05,
        1.137766e05,
        1.167294e05,
        1.197425e05,
        1.228168e05,
        1.259531e05,
        1.291525e05,
        1.324157e05,
        1.357438e05,
        1.391376e05,
        1.425981e05,
        1.461262e05,
        1.497229e05,
        1.533892e05,
        1.571259e05,
        1.609341e05,
        1.648147e05,
        1.687687e05,
        1.727973e05,
        1.769011e05,
        1.810815e05,
        1.853392e05,
        1.896755e05,
        1.940913e05,
        1.985876e05,
        2.031654e05,
        2.078260e05,
        2.125702e05,
        2.173992e05,
        2.223140e05,
        2.273157e05,
        2.324055e05,
        2.375843e05,
        2.428533e05,
        2.482137e05,
        2.536665e05,
        2.592128e05,
        2.648538e05,
        2.705906e05,
    ]
)

#  ---------------------- M = 24, I = 1 ---------------------------
M = 24
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.292033e01,
        1.005064e03,
        2.758565e03,
        5.052901e03,
        7.773275e03,
        1.085963e04,
        1.427439e04,
        1.799370e04,
        2.200520e04,
        2.630720e04,
        3.090790e04,
        3.582448e04,
        4.108212e04,
        4.671306e04,
        5.275584e04,
        5.925467e04,
        6.625898e04,
        7.382313e04,
        8.200629e04,
        9.087247e04,
        1.004906e05,
        1.109347e05,
        1.222845e05,
        1.346250e05,
        1.480481e05,
        1.626518e05,
        1.785416e05,
        1.958306e05,
        2.146405e05,
        2.351016e05,
        2.573542e05,
        2.815485e05,
        3.078462e05,
        3.364206e05,
        3.674579e05,
        4.011576e05,
        4.377339e05,
        4.774164e05,
        5.204511e05,
        5.671017e05,
        6.176507e05,
        6.724001e05,
        7.316734e05,
        7.958165e05,
        8.651993e05,
        9.402168e05,
        1.021291e06,
        1.108873e06,
        1.203444e06,
        1.305515e06,
        1.415636e06,
        1.534387e06,
        1.662391e06,
        1.800308e06,
        1.948842e06,
        2.108742e06,
        2.280804e06,
        2.465875e06,
        2.664853e06,
        2.878694e06,
        3.108412e06,
        3.355083e06,
        3.619849e06,
        3.903920e06,
        4.208579e06,
        4.535186e06,
        4.885181e06,
        5.260089e06,
        5.661522e06,
        6.091189e06,
        6.550894e06,
        7.042545e06,
        7.568161e06,
        8.129872e06,
        8.729927e06,
        9.370703e06,
        1.005471e07,
        1.078458e07,
        1.156312e07,
        1.239325e07,
        1.327809e07,
        1.422089e07,
        1.522509e07,
        1.629431e07,
        1.743237e07,
        1.864327e07,
        1.993123e07,
        2.130068e07,
        2.275629e07,
        2.430295e07,
        2.594581e07,
        2.769028e07,
        2.954203e07,
        3.150702e07,
        3.359151e07,
        3.580204e07,
        3.814551e07,
        4.062912e07,
        4.326044e07,
        4.604738e07,
        4.899825e07,
        5.212174e07,
        5.542695e07,
        5.892342e07,
        6.262112e07,
        6.653048e07,
        7.066241e07,
        7.502834e07,
        7.964020e07,
        8.451045e07,
        8.965214e07,
        9.507889e07,
        1.008049e08,
        1.068451e08,
        1.132149e08,
        1.199306e08,
        1.270089e08,
        1.344676e08,
        1.423251e08,
        1.506005e08,
        1.593137e08,
        1.684857e08,
        1.781381e08,
        1.882936e08,
        1.989757e08,
        2.102091e08,
        2.220191e08,
        2.344325e08,
        2.474770e08,
        2.611813e08,
        2.755755e08,
        2.906907e08,
        3.065595e08,
        3.232155e08,
        3.406938e08,
        3.590310e08,
        3.782647e08,
        3.984346e08,
        4.195814e08,
        4.417476e08,
        4.649774e08,
        4.893165e08,
        5.148126e08,
        5.415149e08,
        5.694747e08,
        5.987452e08,
        6.293814e08,
        6.614407e08,
        6.949822e08,
        7.300674e08,
        7.667602e08,
        8.051266e08,
        8.452350e08,
        8.871565e08,
        9.309645e08,
        9.767353e08,
        1.024548e09,
        1.074483e09,
        1.126626e09,
        1.181065e09,
        1.237890e09,
        1.297194e09,
        1.359076e09,
        1.423634e09,
        1.490973e09,
        1.561201e09,
        1.634429e09,
        1.710770e09,
        1.790345e09,
        1.873276e09,
        1.959690e09,
        2.049717e09,
        2.143494e09,
        2.241160e09,
        2.342859e09,
        2.448743e09,
    ]
)

#  ---------------------- M = 24, I = 2 ---------------------------
M = 24
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.320610e01,
        1.020802e03,
        2.802064e03,
        5.132731e03,
        7.896193e03,
        1.103144e04,
        1.450032e04,
        1.827857e04,
        2.235364e04,
        2.672383e04,
        3.139746e04,
        3.639199e04,
        4.173298e04,
        4.745320e04,
        5.359179e04,
        6.019368e04,
        6.730905e04,
        7.499315e04,
        8.330609e04,
        9.231288e04,
        1.020835e05,
        1.126934e05,
        1.242231e05,
        1.367594e05,
        1.503953e05,
        1.652307e05,
        1.813726e05,
        1.989359e05,
        2.180442e05,
        2.388299e05,
        2.614355e05,
        2.860137e05,
        3.127287e05,
        3.417565e05,
        3.732862e05,
        4.075207e05,
        4.446774e05,
        4.849896e05,
        5.287073e05,
        5.760983e05,
        6.274494e05,
        6.830678e05,
        7.432819e05,
        8.084431e05,
        8.789272e05,
        9.551356e05,
        1.037497e06,
        1.126469e06,
        1.222541e06,
        1.326233e06,
        1.438102e06,
        1.558738e06,
        1.688774e06,
        1.828881e06,
        1.979774e06,
        2.142213e06,
        2.317007e06,
        2.505017e06,
        2.707155e06,
        2.924392e06,
        3.157758e06,
        3.408347e06,
        3.677317e06,
        3.965900e06,
        4.275399e06,
        4.607193e06,
        4.962748e06,
        5.343611e06,
        5.751421e06,
        6.187913e06,
        6.654922e06,
        7.154384e06,
        7.688351e06,
        8.258986e06,
        8.868575e06,
        9.519533e06,
        1.021440e07,
        1.095588e07,
        1.174678e07,
        1.259011e07,
        1.348901e07,
        1.444679e07,
        1.546695e07,
        1.655317e07,
        1.770932e07,
        1.893946e07,
        2.024790e07,
        2.163912e07,
        2.311786e07,
        2.468911e07,
        2.635809e07,
        2.813029e07,
        3.001148e07,
        3.200771e07,
        3.412534e07,
        3.637102e07,
        3.875175e07,
        4.127485e07,
        4.394801e07,
        4.677927e07,
        4.977706e07,
        5.295023e07,
        5.630800e07,
        5.986008e07,
        6.361659e07,
        6.758813e07,
        7.178578e07,
        7.622116e07,
        8.090637e07,
        8.585410e07,
        9.107759e07,
        9.659067e07,
        1.024078e08,
        1.085441e08,
        1.150152e08,
        1.218377e08,
        1.290287e08,
        1.366061e08,
        1.445886e08,
        1.529956e08,
        1.618476e08,
        1.711655e08,
        1.809715e08,
        1.912887e08,
        2.021408e08,
        2.135529e08,
        2.255509e08,
        2.381619e08,
        2.514140e08,
        2.653365e08,
        2.799598e08,
        2.953157e08,
        3.114371e08,
        3.283583e08,
        3.461149e08,
        3.647439e08,
        3.842840e08,
        4.047750e08,
        4.262585e08,
        4.487777e08,
        4.723774e08,
        4.971041e08,
        5.230062e08,
        5.501338e08,
        5.785389e08,
        6.082756e08,
        6.393998e08,
        6.719697e08,
        7.060455e08,
        7.416896e08,
        7.789669e08,
        8.179445e08,
        8.586919e08,
        9.012813e08,
        9.457873e08,
        9.922872e08,
        1.040861e09,
        1.091593e09,
        1.144567e09,
        1.199873e09,
        1.257603e09,
        1.317853e09,
        1.380720e09,
        1.446308e09,
        1.514720e09,
        1.586067e09,
        1.660462e09,
        1.738021e09,
        1.818864e09,
        1.903117e09,
        1.990908e09,
        2.082370e09,
        2.177642e09,
        2.276865e09,
        2.380187e09,
        2.487758e09,
    ]
)

#  ---------------------- M = 25, I = 1 ---------------------------
M = 25
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.770090e00,
        9.937734e01,
        3.215728e02,
        6.242169e02,
        9.940464e02,
        1.428783e03,
        1.930438e03,
        2.502407e03,
        3.148468e03,
        3.872571e03,
        4.678893e03,
        5.571933e03,
        6.556583e03,
        7.638169e03,
        8.822458e03,
        1.011566e04,
        1.152440e04,
        1.305573e04,
        1.471706e04,
        1.651621e04,
        1.846133e04,
        2.056093e04,
        2.282389e04,
        2.525940e04,
        2.787700e04,
        3.068660e04,
        3.369842e04,
        3.692304e04,
        4.037142e04,
        4.405485e04,
        4.798501e04,
        5.217394e04,
        5.663409e04,
        6.137826e04,
        6.641968e04,
        7.177196e04,
        7.744912e04,
        8.346559e04,
        8.983619e04,
        9.657618e04,
        1.037012e05,
        1.112273e05,
        1.191709e05,
        1.275489e05,
        1.363785e05,
        1.456772e05,
        1.554631e05,
        1.657543e05,
        1.765695e05,
        1.879275e05,
        1.998476e05,
        2.123492e05,
        2.254519e05,
        2.391757e05,
        2.535406e05,
        2.685667e05,
        2.842744e05,
        3.006842e05,
        3.178165e05,
        3.356919e05,
        3.543309e05,
        3.737539e05,
        3.939815e05,
        4.150340e05,
        4.369316e05,
        4.596945e05,
        4.833425e05,
        5.078955e05,
        5.333729e05,
        5.597939e05,
        5.871776e05,
        6.155426e05,
        6.449072e05,
        6.752896e05,
        7.067073e05,
        7.391776e05,
        7.727174e05,
        8.073431e05,
        8.430708e05,
        8.799161e05,
        9.178940e05,
        9.570193e05,
        9.973060e05,
        1.038768e06,
        1.081418e06,
        1.125270e06,
        1.170335e06,
        1.216625e06,
        1.264150e06,
        1.312923e06,
        1.362953e06,
        1.414249e06,
        1.466821e06,
        1.520677e06,
        1.575826e06,
        1.632274e06,
        1.690030e06,
        1.749098e06,
        1.809486e06,
        1.871200e06,
        1.934243e06,
        1.998620e06,
        2.064337e06,
        2.131395e06,
        2.199799e06,
        2.269551e06,
        2.340654e06,
        2.413108e06,
        2.486916e06,
        2.562078e06,
        2.638594e06,
        2.716466e06,
        2.795692e06,
        2.876272e06,
        2.958205e06,
        3.041488e06,
        3.126122e06,
        3.212102e06,
        3.299428e06,
        3.388095e06,
        3.478101e06,
        3.569442e06,
        3.662114e06,
        3.756113e06,
        3.851435e06,
        3.948076e06,
        4.046029e06,
        4.145290e06,
        4.245854e06,
        4.347714e06,
        4.450865e06,
        4.555301e06,
        4.661014e06,
        4.767999e06,
        4.876249e06,
        4.985756e06,
        5.096513e06,
        5.208514e06,
        5.321749e06,
        5.436213e06,
        5.551896e06,
        5.668791e06,
        5.786890e06,
        5.906183e06,
        6.026663e06,
        6.148322e06,
        6.271150e06,
        6.395138e06,
        6.520279e06,
        6.646561e06,
        6.773978e06,
        6.902519e06,
        7.032175e06,
        7.162937e06,
        7.294795e06,
        7.427739e06,
        7.561761e06,
        7.696851e06,
        7.832999e06,
        7.970195e06,
        8.108429e06,
        8.247692e06,
        8.387974e06,
        8.529265e06,
        8.671555e06,
        8.814834e06,
        8.959093e06,
        9.104320e06,
        9.250507e06,
        9.397644e06,
        9.545720e06,
        9.694725e06,
        9.844650e06,
        9.995484e06,
        1.014722e07,
        1.029984e07,
        1.045334e07,
        1.060772e07,
        1.076295e07,
        1.091903e07,
        1.107595e07,
        1.123370e07,
        1.139227e07,
        1.155166e07,
        1.171184e07,
        1.187281e07,
        1.203457e07,
        1.219709e07,
        1.236038e07,
        1.252442e07,
        1.268921e07,
        1.285472e07,
        1.302096e07,
        1.318792e07,
        1.335558e07,
        1.352393e07,
        1.369297e07,
        1.386269e07,
        1.403307e07,
        1.420412e07,
        1.437581e07,
        1.454814e07,
        1.472111e07,
        1.489470e07,
        1.506890e07,
        1.524370e07,
        1.541910e07,
        1.559509e07,
        1.577166e07,
        1.594880e07,
        1.612649e07,
        1.630475e07,
        1.648354e07,
        1.666287e07,
        1.684273e07,
        1.702311e07,
        1.720400e07,
        1.738539e07,
        1.756728e07,
        1.774966e07,
        1.793251e07,
        1.811584e07,
        1.829962e07,
        1.848387e07,
        1.866856e07,
        1.885369e07,
        1.903926e07,
        1.922525e07,
        1.941166e07,
        1.959847e07,
        1.978569e07,
        1.997331e07,
        2.016131e07,
        2.034970e07,
        2.053846e07,
        2.072759e07,
        2.091708e07,
        2.110692e07,
        2.129710e07,
        2.148763e07,
        2.167849e07,
        2.186967e07,
        2.206118e07,
        2.225300e07,
        2.244512e07,
        2.263755e07,
        2.283027e07,
        2.302327e07,
        2.321656e07,
        2.341012e07,
        2.360396e07,
        2.379805e07,
        2.399240e07,
        2.418700e07,
        2.438185e07,
        2.457694e07,
        2.477226e07,
        2.496781e07,
        2.516358e07,
        2.535956e07,
        2.555576e07,
        2.575216e07,
        2.594876e07,
        2.614556e07,
        2.634255e07,
        2.653972e07,
        2.673707e07,
        2.693459e07,
        2.713228e07,
        2.733013e07,
        2.752815e07,
        2.772631e07,
        2.792462e07,
        2.812308e07,
        2.832168e07,
        2.852041e07,
        2.871927e07,
        2.891825e07,
        2.911736e07,
        2.931658e07,
        2.951591e07,
        2.971535e07,
        2.991488e07,
        3.011452e07,
        3.031425e07,
        3.051407e07,
        3.071398e07,
        3.091396e07,
        3.111402e07,
        3.131416e07,
        3.151436e07,
        3.171463e07,
        3.191495e07,
        3.211534e07,
        3.231577e07,
        3.251626e07,
        3.271679e07,
        3.291736e07,
        3.311797e07,
        3.331861e07,
        3.351929e07,
    ]
)

#  ---------------------- M = 26, I = 1 ---------------------------
M = 26
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.304830e00,
        2.430655e01,
        4.793073e01,
        7.156039e01,
        9.519594e01,
        1.188684e02,
        1.426920e02,
        1.668995e02,
        1.918282e02,
        2.178787e02,
        2.454753e02,
        2.750411e02,
        3.069871e02,
        3.417113e02,
        3.796013e02,
        4.210401e02,
        4.664113e02,
        5.161047e02,
        5.705201e02,
        6.300721e02,
        6.951927e02,
        7.663344e02,
        8.439731e02,
        9.286097e02,
        1.020773e03,
        1.121022e03,
        1.229946e03,
        1.348169e03,
        1.476351e03,
        1.615189e03,
        1.765420e03,
        1.927822e03,
        2.103220e03,
        2.292482e03,
        2.496526e03,
        2.716320e03,
        2.952886e03,
        3.207303e03,
        3.480706e03,
        3.774293e03,
        4.089326e03,
        4.427131e03,
        4.789107e03,
        5.176724e03,
        5.591528e03,
        6.035144e03,
        6.509280e03,
        7.015728e03,
        7.556371e03,
        8.133184e03,
        8.748238e03,
        9.403705e03,
        1.010186e04,
        1.084508e04,
        1.163587e04,
        1.247683e04,
        1.337069e04,
        1.432031e04,
        1.532865e04,
        1.639884e04,
        1.753411e04,
        1.873786e04,
        2.001359e04,
        2.136500e04,
        2.279588e04,
        2.431024e04,
        2.591218e04,
        2.760600e04,
        2.939617e04,
        3.128728e04,
        3.328414e04,
        3.539170e04,
        3.761510e04,
        3.995963e04,
        4.243078e04,
        4.503422e04,
        4.777578e04,
        5.066149e04,
        5.369755e04,
        5.689035e04,
        6.024647e04,
        6.377264e04,
        6.747581e04,
        7.136309e04,
        7.544178e04,
        7.971935e04,
        8.420347e04,
        8.890196e04,
        9.382283e04,
        9.897425e04,
        1.043646e05,
        1.100024e05,
        1.158962e05,
        1.220551e05,
        1.284878e05,
        1.352037e05,
        1.422121e05,
        1.495223e05,
        1.571439e05,
        1.650868e05,
        1.733608e05,
        1.819759e05,
        1.909421e05,
        2.002699e05,
        2.099695e05,
        2.200513e05,
        2.305261e05,
        2.414044e05,
        2.526970e05,
        2.644148e05,
        2.765688e05,
        2.891699e05,
        3.022293e05,
        3.157581e05,
        3.297675e05,
        3.442689e05,
        3.592735e05,
        3.747927e05,
        3.908380e05,
        4.074208e05,
        4.245525e05,
        4.422448e05,
        4.605090e05,
        4.793568e05,
        4.987996e05,
        5.188490e05,
        5.395165e05,
        5.608137e05,
        5.827520e05,
        6.053430e05,
        6.285981e05,
        6.525288e05,
        6.771464e05,
        7.024624e05,
        7.284880e05,
        7.552345e05,
        7.827132e05,
        8.109352e05,
        8.399115e05,
        8.696534e05,
        9.001717e05,
        9.314773e05,
        9.635811e05,
        9.964938e05,
        1.030226e06,
        1.064788e06,
        1.100191e06,
        1.136445e06,
        1.173561e06,
        1.211548e06,
        1.250416e06,
        1.290176e06,
        1.330837e06,
        1.372410e06,
        1.414904e06,
        1.458328e06,
        1.502692e06,
        1.548005e06,
        1.594276e06,
        1.641515e06,
        1.689730e06,
        1.738930e06,
        1.789124e06,
        1.840321e06,
        1.892528e06,
        1.945754e06,
        2.000007e06,
        2.055296e06,
        2.111627e06,
        2.169010e06,
        2.227450e06,
        2.286957e06,
        2.347537e06,
        2.409197e06,
        2.471944e06,
        2.535786e06,
        2.600728e06,
        2.666778e06,
        2.733942e06,
        2.802227e06,
        2.871638e06,
        2.942181e06,
        3.013863e06,
        3.086689e06,
        3.160664e06,
        3.235795e06,
        3.312086e06,
        3.389542e06,
        3.468170e06,
        3.547972e06,
        3.628955e06,
        3.711122e06,
        3.794479e06,
        3.879029e06,
        3.964776e06,
        4.051725e06,
        4.139880e06,
        4.229243e06,
        4.319820e06,
        4.411612e06,
        4.504625e06,
        4.598859e06,
        4.694320e06,
        4.791009e06,
        4.888930e06,
        4.988084e06,
        5.088475e06,
        5.190105e06,
        5.292976e06,
        5.397090e06,
        5.502450e06,
        5.609057e06,
        5.716912e06,
        5.826018e06,
        5.936376e06,
        6.047987e06,
        6.160852e06,
        6.274973e06,
        6.390351e06,
        6.506986e06,
        6.624880e06,
        6.744032e06,
        6.864444e06,
        6.986115e06,
        7.109047e06,
        7.233239e06,
        7.358692e06,
        7.485405e06,
        7.613378e06,
        7.742611e06,
        7.873104e06,
        8.004857e06,
        8.137868e06,
        8.272137e06,
        8.407663e06,
        8.544446e06,
        8.682485e06,
        8.821778e06,
        8.962325e06,
        9.104124e06,
        9.247174e06,
        9.391473e06,
        9.537021e06,
        9.683815e06,
        9.831853e06,
        9.981135e06,
        1.013166e07,
        1.028342e07,
        1.043642e07,
        1.059066e07,
        1.074612e07,
    ]
)

#  ---------------------- M = 26, I = 2 ---------------------------
M = 26
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.814510e00,
        9.724635e01,
        1.917632e02,
        2.864734e02,
        3.811700e02,
        4.760528e02,
        5.715776e02,
        6.686900e02,
        7.687384e02,
        8.733388e02,
        9.841987e02,
        1.103046e03,
        1.231520e03,
        1.371261e03,
        1.523833e03,
        1.690802e03,
        1.873730e03,
        2.074207e03,
        2.293885e03,
        2.534441e03,
        2.797671e03,
        3.085414e03,
        3.399618e03,
        3.742372e03,
        4.115810e03,
        4.522255e03,
        4.964139e03,
        5.444011e03,
        5.964565e03,
        6.528734e03,
        7.139491e03,
        7.800087e03,
        8.513884e03,
        9.284496e03,
        1.011567e04,
        1.101143e04,
        1.197594e04,
        1.301371e04,
        1.412933e04,
        1.532784e04,
        1.661437e04,
        1.799441e04,
        1.947370e04,
        2.105830e04,
        2.275461e04,
        2.456929e04,
        2.650943e04,
        2.858230e04,
        3.079576e04,
        3.315789e04,
        3.567723e04,
        3.836273e04,
        4.122372e04,
        4.427006e04,
        4.751198e04,
        5.096026e04,
        5.462619e04,
        5.852141e04,
        6.265841e04,
        6.704991e04,
        7.170941e04,
        7.665096e04,
        8.188914e04,
        8.743929e04,
        9.331736e04,
        9.953997e04,
        1.061245e05,
        1.130890e05,
        1.204523e05,
        1.282340e05,
        1.364547e05,
        1.451355e05,
        1.542986e05,
        1.639671e05,
        1.741648e05,
        1.849166e05,
        1.962486e05,
        2.081876e05,
        2.207615e05,
        2.339994e05,
        2.479314e05,
        2.625888e05,
        2.780041e05,
        2.942110e05,
        3.112445e05,
        3.291406e05,
        3.479371e05,
        3.676729e05,
        3.883884e05,
        4.101252e05,
        4.329270e05,
        4.568381e05,
        4.819053e05,
        5.081766e05,
        5.357017e05,
        5.645321e05,
        5.947207e05,
        6.263228e05,
        6.593952e05,
        6.939969e05,
        7.301883e05,
        7.680325e05,
        8.075944e05,
        8.489406e05,
        8.921407e05,
        9.372660e05,
        9.843902e05,
        1.033589e06,
        1.084942e06,
        1.138530e06,
        1.194435e06,
        1.252745e06,
        1.313548e06,
        1.376935e06,
        1.443002e06,
        1.511846e06,
        1.583566e06,
        1.658265e06,
        1.736052e06,
        1.817034e06,
        1.901325e06,
        1.989042e06,
        2.080302e06,
        2.175231e06,
        2.273953e06,
        2.376600e06,
        2.483305e06,
        2.594207e06,
        2.709447e06,
        2.829171e06,
        2.953528e06,
        3.082674e06,
        3.216765e06,
        3.355965e06,
        3.500442e06,
        3.650366e06,
        3.805915e06,
        3.967268e06,
        4.134614e06,
        4.308144e06,
        4.488050e06,
        4.674537e06,
        4.867812e06,
        5.068086e06,
        5.275577e06,
        5.490508e06,
        5.713108e06,
        5.943613e06,
        6.182262e06,
        6.429305e06,
        6.684995e06,
        6.949588e06,
        7.223356e06,
        7.506568e06,
        7.799506e06,
        8.102456e06,
        8.415711e06,
        8.739574e06,
        9.074353e06,
        9.420361e06,
        9.777928e06,
        1.014738e07,
        1.052905e07,
        1.092330e07,
        1.133048e07,
        1.175095e07,
        1.218509e07,
        1.263327e07,
        1.309589e07,
        1.357335e07,
        1.406605e07,
        1.457441e07,
        1.509887e07,
        1.563985e07,
        1.619781e07,
        1.677320e07,
    ]
)

#  ---------------------- M = 26, I = 3 ---------------------------
M = 26
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.044140e00,
        8.016384e01,
        1.642897e02,
        2.484331e02,
        3.326393e02,
        4.172555e02,
        5.031646e02,
        5.918139e02,
        6.849749e02,
        7.845357e02,
        8.923827e02,
        1.010349e03,
        1.140206e03,
        1.283685e03,
        1.442530e03,
        1.618488e03,
        1.813370e03,
        2.029067e03,
        2.267536e03,
        2.550029e03,
        2.842636e03,
        3.164913e03,
        3.519348e03,
        3.908620e03,
        4.335576e03,
        4.803251e03,
        5.314814e03,
        5.873741e03,
        6.483650e03,
        7.148457e03,
        7.872235e03,
        8.659382e03,
        9.514548e03,
        1.044272e04,
        1.144906e04,
        1.253918e04,
        1.371897e04,
        1.499462e04,
        1.637280e04,
        1.786041e04,
        1.946491e04,
        2.119405e04,
        2.305609e04,
        2.505975e04,
        2.721420e04,
        2.952910e04,
        3.201468e04,
        3.468164e04,
        3.754137e04,
        4.060572e04,
        4.388721e04,
        4.739912e04,
        5.115514e04,
        5.516994e04,
        5.945871e04,
        6.403752e04,
        6.892318e04,
        7.413333e04,
        7.968642e04,
        8.560184e04,
        9.189984e04,
        9.860168e04,
        1.057296e05,
        1.133067e05,
        1.213575e05,
        1.299074e05,
        1.389828e05,
        1.486115e05,
        1.588224e05,
        1.696459e05,
        1.811134e05,
        1.932580e05,
        2.061137e05,
        2.197165e05,
        2.341036e05,
        2.493138e05,
        2.653877e05,
        2.823672e05,
        3.002963e05,
        3.192205e05,
        3.391872e05,
        3.602457e05,
        3.824474e05,
        4.058456e05,
        4.304954e05,
        4.564546e05,
        4.837827e05,
        5.125418e05,
        5.427962e05,
        5.746128e05,
        6.080607e05,
        6.432115e05,
        6.801401e05,
        7.189233e05,
        7.596412e05,
        8.023769e05,
        8.472160e05,
        8.942474e05,
        9.435629e05,
        9.952583e05,
        1.049431e06,
        1.106185e06,
        1.165624e06,
        1.227858e06,
        1.292999e06,
        1.361164e06,
        1.432473e06,
        1.507052e06,
        1.585028e06,
        1.666535e06,
        1.751710e06,
        1.840694e06,
        1.933633e06,
        2.030680e06,
        2.131987e06,
        2.237718e06,
        2.348038e06,
        2.463117e06,
        2.583132e06,
        2.708264e06,
        2.838701e06,
        2.974635e06,
        3.116266e06,
        3.263798e06,
        3.417442e06,
        3.577415e06,
        3.743943e06,
        3.917253e06,
        4.097585e06,
        4.285180e06,
        4.480292e06,
        4.683179e06,
        4.894105e06,
        5.113345e06,
        5.341180e06,
        5.577898e06,
        5.823797e06,
        6.079183e06,
        6.344370e06,
        6.619679e06,
        6.905443e06,
        7.202001e06,
        7.509705e06,
        7.828915e06,
        8.159999e06,
        8.503333e06,
        8.859312e06,
        9.228330e06,
        9.610799e06,
        1.000714e07,
        1.041778e07,
        1.084317e07,
        1.128377e07,
        1.174002e07,
        1.221242e07,
        1.270146e07,
        1.320763e07,
        1.373146e07,
        1.427346e07,
        1.483419e07,
        1.541419e07,
        1.601404e07,
        1.663432e07,
        1.727563e07,
        1.793856e07,
        1.862376e07,
        1.933187e07,
        2.006354e07,
        2.081943e07,
        2.160025e07,
        2.240670e07,
        2.323950e07,
        2.409938e07,
        2.498711e07,
        2.590344e07,
        2.684920e07,
    ]
)

#  ---------------------- M = 27, I = 1 ---------------------------
M = 27
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.500304e01,
        9.183261e02,
        2.577299e03,
        4.726665e03,
        7.295077e03,
        1.027634e04,
        1.369384e04,
        1.758296e04,
        2.198535e04,
        2.695083e04,
        3.253906e04,
        3.882423e04,
        4.589599e04,
        5.386197e04,
        6.285216e04,
        7.301797e04,
        8.453841e04,
        9.762032e04,
        1.125046e05,
        1.294682e05,
        1.488302e05,
        1.709580e05,
        1.962724e05,
        2.252593e05,
        2.584720e05,
        2.965481e05,
        3.402164e05,
        3.903158e05,
        4.478043e05,
        5.137787e05,
        5.894956e05,
        6.763969e05,
        7.761243e05,
        8.905622e05,
        1.021863e06,
        1.172482e06,
        1.345229e06,
        1.543303e06,
        1.770360e06,
        2.030568e06,
        2.328675e06,
        2.670086e06,
        3.060957e06,
        3.508289e06,
        4.020046e06,
        4.605271e06,
        5.274240e06,
        6.038612e06,
        6.911616e06,
        7.908245e06,
        9.045487e06,
        1.034258e07,
        1.182128e07,
        1.350621e07,
        1.542519e07,
        1.760965e07,
        2.009505e07,
        2.292142e07,
        2.613387e07,
        2.978325e07,
        3.392680e07,
        3.862896e07,
        4.396218e07,
        5.000792e07,
        5.685769e07,
        6.461421e07,
        7.339274e07,
        8.332252e07,
        9.454840e07,
        1.072326e08,
        1.215567e08,
        1.377238e08,
        1.559610e08,
        1.765221e08,
        1.996904e08,
        2.257822e08,
        2.551502e08,
        2.881877e08,
        3.253328e08,
        3.670735e08,
        4.139525e08,
        4.665738e08,
        5.256087e08,
        5.918032e08,
        6.659852e08,
        7.490741e08,
        8.420894e08,
        9.461613e08,
        1.062542e09,
        1.192619e09,
        1.337927e09,
        1.500164e09,
        1.681208e09,
        1.883134e09,
        2.108234e09,
        2.359039e09,
        2.638341e09,
        2.949219e09,
        3.295067e09,
        3.679627e09,
        4.107016e09,
        4.581768e09,
        5.108871e09,
        5.693809e09,
        6.342612e09,
        7.061902e09,
        7.858951e09,
        8.741742e09,
        9.719033e09,
        1.080043e10,
        1.199645e10,
        1.331863e10,
        1.477960e10,
        1.639318e10,
        1.817449e10,
        2.014008e10,
        2.230804e10,
        2.469810e10,
        2.733187e10,
        3.023290e10,
        3.342690e10,
        3.694193e10,
        4.080858e10,
        4.506017e10,
        4.973304e10,
        5.486675e10,
        6.050436e10,
        6.669275e10,
        7.348290e10,
        8.093024e10,
        8.909503e10,
        9.804276e10,
        1.078445e11,
        1.185775e11,
        1.303256e11,
        1.431796e11,
        1.572382e11,
        1.726082e11,
        1.894054e11,
        2.077554e11,
        2.277941e11,
        2.496685e11,
        2.735379e11,
        2.995744e11,
        3.279644e11,
        3.589092e11,
        3.926263e11,
        4.293508e11,
        4.693366e11,
        5.128578e11,
        5.602101e11,
        6.117127e11,
        6.677096e11,
        7.285721e11,
        7.947001e11,
        8.665246e11,
        9.445098e11,
        1.029156e12,
        1.121000e12,
        1.220623e12,
        1.328646e12,
        1.445740e12,
        1.572626e12,
        1.710077e12,
        1.858927e12,
        2.020068e12,
        2.194462e12,
        2.383137e12,
        2.587201e12,
        2.807841e12,
        3.046329e12,
        3.304031e12,
        3.582410e12,
        3.883036e12,
        4.207589e12,
        4.557870e12,
    ]
)

#  ---------------------- M = 27, I = 2 ---------------------------
M = 27
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        7.614480e00,
        4.686721e02,
        1.315543e03,
        2.412801e03,
        3.724027e03,
        5.246064e03,
        6.990860e03,
        8.976483e03,
        1.122421e04,
        1.375949e04,
        1.661280e04,
        1.982202e04,
        2.343294e04,
        2.750053e04,
        3.209119e04,
        3.728225e04,
        4.316512e04,
        4.984547e04,
        5.744633e04,
        6.610916e04,
        7.599690e04,
        8.729731e04,
        1.002252e05,
        1.150289e05,
        1.319909e05,
        1.514370e05,
        1.737394e05,
        1.993267e05,
        2.286883e05,
        2.623844e05,
        3.010571e05,
        3.454428e05,
        3.963803e05,
        4.548324e05,
        5.218983e05,
        5.988332e05,
        6.870716e05,
        7.882488e05,
        9.042323e05,
        1.037152e06,
        1.189433e06,
        1.363837e06,
        1.563510e06,
        1.792029e06,
        2.053463e06,
        2.352434e06,
        2.694190e06,
        3.084692e06,
        3.530698e06,
        4.039869e06,
        4.620887e06,
        5.283581e06,
        6.039074e06,
        6.899946e06,
        7.880414e06,
        8.996537e06,
        1.026644e07,
        1.171059e07,
        1.335203e07,
        1.521675e07,
        1.733400e07,
        1.973673e07,
        2.246196e07,
        2.555133e07,
        2.905161e07,
        3.301531e07,
        3.750133e07,
        4.257574e07,
        4.831258e07,
        5.479478e07,
        6.211514e07,
        7.037750e07,
        7.969796e07,
        9.020622e07,
        1.020472e08,
        1.153824e08,
        1.303924e08,
        1.472781e08,
        1.662635e08,
        1.875980e08,
        2.115592e08,
        2.384560e08,
        2.686314e08,
        3.024668e08,
        3.403857e08,
        3.828581e08,
        4.304053e08,
        4.836051e08,
        5.430980e08,
        6.095931e08,
        6.838754e08,
        7.668134e08,
        8.593671e08,
        9.625978e08,
        1.077678e09,
        1.205900e09,
        1.348694e09,
        1.507634e09,
        1.684456e09,
        1.881072e09,
        2.099589e09,
        2.342326e09,
        2.611834e09,
        2.910918e09,
        3.242661e09,
        3.610451e09,
        4.018007e09,
        4.469413e09,
        4.969148e09,
        5.522123e09,
        6.133724e09,
        6.809848e09,
        7.556956e09,
        8.382119e09,
        9.293073e09,
        1.029828e10,
        1.140699e10,
        1.262932e10,
        1.397629e10,
        1.545998e10,
        1.709352e10,
        1.889128e10,
        2.086891e10,
        2.304345e10,
        2.543350e10,
        2.805929e10,
        3.094287e10,
        3.410821e10,
        3.758140e10,
        4.139081e10,
        4.556728e10,
        5.014429e10,
        5.515826e10,
        6.064867e10,
        6.665842e10,
        7.323403e10,
        8.042594e10,
        8.828887e10,
        9.688209e10,
        1.062698e11,
        1.165216e11,
        1.277127e11,
        1.399247e11,
        1.532456e11,
        1.677709e11,
        1.836035e11,
        2.008548e11,
        2.196451e11,
        2.401044e11,
        2.623730e11,
        2.866023e11,
        3.129555e11,
        3.416090e11,
        3.727526e11,
        4.065911e11,
        4.433452e11,
        4.832525e11,
        5.265688e11,
        5.735698e11,
        6.245518e11,
        6.798340e11,
        7.397592e11,
        8.046964e11,
        8.750421e11,
        9.512223e11,
        1.033695e12,
        1.122951e12,
        1.219518e12,
        1.323963e12,
        1.436894e12,
        1.558962e12,
        1.690867e12,
        1.833358e12,
        1.987238e12,
        2.153368e12,
        2.332671e12,
    ]
)

#  ---------------------- M = 28, I = 1 ---------------------------
M = 28
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[4]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.000210e00,
        6.080058e01,
        1.634756e02,
        2.965282e02,
        4.537635e02,
        6.319162e02,
        8.288067e02,
        1.042867e03,
        1.272974e03,
        1.518410e03,
        1.778850e03,
        2.054349e03,
        2.345319e03,
        2.652478e03,
        2.976809e03,
        3.319511e03,
        3.681956e03,
        4.065668e03,
        4.472291e03,
        4.903585e03,
        5.361415e03,
        5.847747e03,
        6.364650e03,
        6.914302e03,
        7.498988e03,
        8.121115e03,
        8.783208e03,
        9.487927e03,
        1.023807e04,
        1.103656e04,
        1.188652e04,
        1.279117e04,
        1.375395e04,
        1.477846e04,
        1.586846e04,
        1.702794e04,
        1.826107e04,
        1.957224e04,
        2.096604e04,
        2.244732e04,
        2.402115e04,
        2.569284e04,
        2.746798e04,
        2.935242e04,
        3.135229e04,
        3.347401e04,
        3.572430e04,
        3.811021e04,
        4.063911e04,
        4.331870e04,
        4.615704e04,
        4.916257e04,
        5.234409e04,
        5.571079e04,
        5.927230e04,
        6.303863e04,
        6.702025e04,
        7.122808e04,
        7.567351e04,
        8.036840e04,
        8.532511e04,
        9.055653e04,
        9.607607e04,
        1.018977e05,
        1.080359e05,
        1.145057e05,
        1.213230e05,
        1.285039e05,
        1.360654e05,
        1.440252e05,
        1.524013e05,
        1.612128e05,
        1.704793e05,
        1.802210e05,
        1.904590e05,
        2.012151e05,
        2.125118e05,
        2.243723e05,
        2.368209e05,
        2.498822e05,
        2.635820e05,
        2.779468e05,
        2.930039e05,
        3.087813e05,
        3.253080e05,
        3.426140e05,
        3.607297e05,
        3.796869e05,
        3.995178e05,
        4.202557e05,
        4.419347e05,
        4.645899e05,
        4.882572e05,
        5.129732e05,
        5.387755e05,
        5.657027e05,
        5.937941e05,
        6.230898e05,
        6.536308e05,
        6.854591e05,
        7.186173e05,
        7.531488e05,
        7.890981e05,
        8.265101e05,
        8.654309e05,
        9.059069e05,
        9.479856e05,
        9.917151e05,
        1.037144e06,
        1.084322e06,
        1.133300e06,
        1.184128e06,
        1.236857e06,
        1.291540e06,
        1.348229e06,
        1.406978e06,
        1.467840e06,
        1.530870e06,
        1.596122e06,
        1.663652e06,
        1.733515e06,
        1.805768e06,
        1.880466e06,
        1.957667e06,
        2.037427e06,
        2.119805e06,
        2.204858e06,
        2.292643e06,
        2.383220e06,
        2.476646e06,
        2.572979e06,
        2.672280e06,
        2.774606e06,
        2.880016e06,
        2.988569e06,
        3.100324e06,
        3.215340e06,
        3.333676e06,
        3.455390e06,
        3.580542e06,
        3.709190e06,
        3.841392e06,
        3.977207e06,
        4.116693e06,
        4.259908e06,
        4.406909e06,
        4.557755e06,
        4.712501e06,
        4.871206e06,
        5.033924e06,
        5.200714e06,
        5.371630e06,
        5.546727e06,
        5.726062e06,
        5.909687e06,
        6.097659e06,
        6.290029e06,
        6.486851e06,
        6.688177e06,
        6.894061e06,
        7.104553e06,
        7.319705e06,
        7.539566e06,
        7.764186e06,
        7.993616e06,
        8.227903e06,
        8.467096e06,
        8.711241e06,
        8.960386e06,
        9.214576e06,
        9.473858e06,
        9.738275e06,
        1.000787e07,
        1.028269e07,
        1.056277e07,
        1.084817e07,
        1.113891e07,
        1.143504e07,
        1.173659e07,
        1.204362e07,
        1.235615e07,
        1.267422e07,
        1.299787e07,
        1.332714e07,
        1.366206e07,
        1.400266e07,
        1.434898e07,
        1.470106e07,
        1.505891e07,
        1.542258e07,
        1.579209e07,
        1.616748e07,
        1.654877e07,
        1.693599e07,
        1.732917e07,
        1.772834e07,
        1.813351e07,
        1.854472e07,
        1.896199e07,
        1.938534e07,
        1.981480e07,
        2.025039e07,
        2.069212e07,
        2.114002e07,
        2.159411e07,
        2.205441e07,
        2.252093e07,
        2.299369e07,
        2.347271e07,
        2.395800e07,
        2.444958e07,
        2.494747e07,
        2.545167e07,
        2.596220e07,
        2.647907e07,
        2.700230e07,
        2.753188e07,
        2.806784e07,
        2.861019e07,
        2.915892e07,
        2.971405e07,
        3.027559e07,
        3.084354e07,
        3.141790e07,
        3.199869e07,
        3.258591e07,
    ]
)

#  ---------------------- M = 29, I = 1 ---------------------------
M = 29
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.300330e01,
        1.060780e03,
        2.994480e03,
        5.499119e03,
        8.466905e03,
        1.183885e04,
        1.558590e04,
        1.970577e04,
        2.422011e04,
        2.917030e04,
        3.461299e04,
        4.061669e04,
        4.725957e04,
        5.462826e04,
        6.281747e04,
        7.193003e04,
        8.207734e04,
        9.337996e04,
        1.059684e05,
        1.199837e05,
        1.355789e05,
        1.529192e05,
        1.721835e05,
        1.935653e05,
        2.172735e05,
        2.435340e05,
        2.725902e05,
        3.047047e05,
        3.401604e05,
        3.792616e05,
        4.223355e05,
        4.697336e05,
        5.218332e05,
        5.790385e05,
        6.417827e05,
        7.105294e05,
        7.857744e05,
        8.680471e05,
        9.579127e05,
        1.055974e06,
        1.162873e06,
        1.279295e06,
        1.405966e06,
        1.543660e06,
        1.693200e06,
        1.855457e06,
        2.031357e06,
        2.221881e06,
        2.428067e06,
        2.651016e06,
        2.891891e06,
        3.151923e06,
        3.432411e06,
        3.734728e06,
        4.060320e06,
        4.410715e06,
        4.787525e06,
        5.192441e06,
        5.627252e06,
        6.093834e06,
        6.594162e06,
        7.130313e06,
        7.704467e06,
        8.318917e06,
        8.976065e06,
        9.678431e06,
        1.042866e07,
        1.122953e07,
        1.208393e07,
        1.299491e07,
        1.396564e07,
        1.499946e07,
        1.609985e07,
        1.727043e07,
        1.851502e07,
        1.983759e07,
        2.124227e07,
        2.273339e07,
        2.431547e07,
        2.599322e07,
        2.777152e07,
        2.965551e07,
        3.165049e07,
        3.376202e07,
        3.599588e07,
        3.835806e07,
        4.085482e07,
        4.349265e07,
        4.627831e07,
        4.921882e07,
        5.232149e07,
        5.559387e07,
        5.904385e07,
        6.267958e07,
        6.650956e07,
        7.054254e07,
        7.478767e07,
        7.925441e07,
        8.395253e07,
        8.889220e07,
        9.408394e07,
        9.953866e07,
        1.052676e08,
        1.112825e08,
        1.175954e08,
        1.242189e08,
        1.311658e08,
        1.384496e08,
        1.460840e08,
        1.540834e08,
        1.624626e08,
        1.712367e08,
        1.804217e08,
        1.900338e08,
        2.000898e08,
        2.106070e08,
        2.216035e08,
        2.330976e08,
        2.451085e08,
        2.576558e08,
        2.707598e08,
        2.844415e08,
        2.987224e08,
        3.136247e08,
        3.291713e08,
        3.453860e08,
        3.622928e08,
        3.799169e08,
        3.982840e08,
        4.174208e08,
        4.373543e08,
        4.581129e08,
        4.797253e08,
        5.022216e08,
        5.256319e08,
        5.499880e08,
        5.753222e08,
        6.016678e08,
        6.290589e08,
        6.575307e08,
        6.871194e08,
        7.178619e08,
        7.497965e08,
        7.829623e08,
        8.173995e08,
        8.531493e08,
        8.902543e08,
        9.287578e08,
        9.687047e08,
        1.010141e09,
        1.053113e09,
        1.097669e09,
        1.143859e09,
        1.191734e09,
        1.241345e09,
        1.292747e09,
        1.345992e09,
        1.401139e09,
        1.458245e09,
        1.517367e09,
        1.578567e09,
        1.641907e09,
        1.707449e09,
        1.775259e09,
        1.845404e09,
        1.917950e09,
        1.992969e09,
        2.070532e09,
        2.150711e09,
        2.233580e09,
        2.319218e09,
        2.407703e09,
        2.499113e09,
        2.593533e09,
        2.691044e09,
        2.791734e09,
    ]
)

#  ---------------------- M = 29, I = 2 ---------------------------
M = 29
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.600659e01,
        2.121560e03,
        5.988960e03,
        1.099824e04,
        1.693381e04,
        2.367770e04,
        3.117187e04,
        3.941173e04,
        4.844066e04,
        5.834143e04,
        6.922734e04,
        8.123543e04,
        9.452204e04,
        1.092604e05,
        1.256400e05,
        1.438665e05,
        1.641626e05,
        1.867695e05,
        2.119482e05,
        2.399810e05,
        2.711735e05,
        3.058566e05,
        3.443879e05,
        3.871544e05,
        4.345740e05,
        4.870983e05,
        5.452144e05,
        6.094476e05,
        6.803632e05,
        7.585704e05,
        8.447233e05,
        9.395250e05,
        1.043730e06,
        1.158147e06,
        1.283642e06,
        1.421143e06,
        1.571641e06,
        1.736195e06,
        1.915934e06,
        2.112067e06,
        2.325876e06,
        2.558730e06,
        2.812083e06,
        3.087485e06,
        3.386577e06,
        3.711105e06,
        4.062920e06,
        4.443983e06,
        4.856372e06,
        5.302289e06,
        5.784058e06,
        6.304143e06,
        6.865140e06,
        7.469795e06,
        8.121003e06,
        8.821819e06,
        9.575464e06,
        1.038532e07,
        1.125497e07,
        1.218817e07,
        1.318886e07,
        1.426120e07,
        1.540954e07,
        1.663848e07,
        1.795281e07,
        1.935759e07,
        2.085809e07,
        2.245987e07,
        2.416872e07,
        2.599072e07,
        2.793224e07,
        2.999994e07,
        3.220077e07,
        3.454200e07,
        3.703124e07,
        3.967644e07,
        4.248586e07,
        4.546818e07,
        4.863242e07,
        5.198798e07,
        5.554466e07,
        5.931272e07,
        6.330278e07,
        6.752592e07,
        7.199374e07,
        7.671818e07,
        8.171180e07,
        8.698757e07,
        9.255900e07,
        9.844013e07,
        1.046456e08,
        1.111905e08,
        1.180905e08,
        1.253621e08,
        1.330222e08,
        1.410883e08,
        1.495787e08,
        1.585123e08,
        1.679087e08,
        1.777882e08,
        1.881719e08,
        1.990815e08,
        2.105395e08,
        2.225695e08,
        2.351955e08,
        2.484426e08,
        2.623366e08,
        2.769043e08,
        2.921733e08,
        3.081724e08,
        3.249309e08,
        3.424795e08,
        3.608497e08,
        3.800740e08,
        4.001862e08,
        4.212210e08,
        4.432141e08,
        4.662025e08,
        4.902245e08,
        5.153195e08,
        5.415277e08,
        5.688914e08,
        5.974535e08,
        6.272584e08,
        6.583520e08,
        6.907814e08,
        7.245953e08,
        7.598439e08,
        7.965784e08,
        8.348521e08,
        8.747197e08,
        9.162371e08,
        9.594623e08,
        1.004455e09,
        1.051276e09,
        1.099989e09,
        1.150657e09,
        1.203349e09,
        1.258132e09,
        1.315075e09,
        1.374253e09,
        1.435738e09,
        1.499608e09,
        1.565940e09,
        1.634815e09,
        1.706315e09,
        1.780525e09,
        1.857533e09,
        1.937427e09,
        2.020299e09,
        2.106243e09,
        2.195356e09,
        2.287737e09,
        2.383486e09,
        2.482710e09,
        2.585513e09,
        2.692005e09,
        2.802299e09,
        2.916510e09,
        3.034755e09,
        3.157156e09,
        3.283835e09,
        3.414921e09,
        3.550541e09,
        3.690830e09,
        3.835924e09,
        3.985962e09,
        4.141087e09,
        4.301445e09,
        4.467185e09,
        4.638461e09,
        4.815431e09,
        4.998252e09,
        5.187090e09,
        5.382113e09,
        5.583493e09,
    ]
)

#  ---------------------- M = 30, I = 1 ---------------------------
M = 30
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.021972e02,
        8.926883e03,
        2.522955e04,
        4.637336e04,
        7.178418e04,
        1.020099e05,
        1.386432e05,
        1.842557e05,
        2.424692e05,
        3.181910e05,
        4.180157e05,
        5.508060e05,
        7.284907e05,
        9.671311e05,
        1.288340e06,
        1.721151e06,
        2.304480e06,
        3.090346e06,
        4.148075e06,
        5.569754e06,
        7.477295e06,
        1.003153e07,
        1.344388e07,
        1.799125e07,
        2.403505e07,
        3.204519e07,
        4.263047e07,
        5.657681e07,
        7.489511e07,
        9.888099e07,
        1.301893e08,
        1.709260e08,
        2.237627e08,
        2.920765e08,
        3.801222e08,
        4.932437e08,
        6.381305e08,
        8.231307e08,
        1.058630e09,
        1.357512e09,
        1.735707e09,
        2.212863e09,
        2.813136e09,
        3.566151e09,
        4.508136e09,
        5.683276e09,
        7.145326e09,
        8.959512e09,
        1.120479e10,
        1.397648e10,
        1.738943e10,
        2.158165e10,
        2.671863e10,
        3.299836e10,
        4.065719e10,
        4.997670e10,
        6.129157e10,
        7.499890e10,
        9.156880e10,
        1.115568e11,
        1.356180e11,
        1.645237e11,
        1.991801e11,
        2.406500e11,
        2.901778e11,
        3.492179e11,
        4.194675e11,
        5.029034e11,
        6.018245e11,
        7.189005e11,
        8.572261e11,
        1.020383e12,
        1.212513e12,
        1.438393e12,
        1.703531e12,
        2.014262e12,
        2.377871e12,
        2.802713e12,
        3.298368e12,
        3.875798e12,
        4.547536e12,
        5.327887e12,
        6.233164e12,
        7.281945e12,
        8.495361e12,
        9.897418e12,
        1.151536e13,
        1.338007e13,
        1.552651e13,
        1.799421e13,
        2.082787e13,
        2.407789e13,
        2.780112e13,
        3.206156e13,
        3.693125e13,
        4.249113e13,
        4.883210e13,
        5.605613e13,
        6.427748e13,
        7.362411e13,
        8.423914e13,
        9.628255e13,
        1.099330e14,
        1.253896e14,
        1.428748e14,
        1.626357e14,
        1.849479e14,
        2.101173e14,
        2.384842e14,
        2.704260e14,
        3.063617e14,
        3.467555e14,
        3.921214e14,
        4.430285e14,
        5.001060e14,
        5.640492e14,
        6.356260e14,
        7.156838e14,
        8.051568e14,
        9.050747e14,
        1.016571e15,
        1.140894e15,
        1.279415e15,
        1.433643e15,
        1.605233e15,
        1.796004e15,
        2.007949e15,
        2.243255e15,
        2.504315e15,
        2.793752e15,
        3.114435e15,
        3.469502e15,
        3.862381e15,
        4.296819e15,
        4.776905e15,
        5.307101e15,
        5.892273e15,
        6.537723e15,
        7.249229e15,
        8.033080e15,
        8.896120e15,
        9.845792e15,
        1.089019e16,
        1.203810e16,
        1.329907e16,
        1.468347e16,
        1.620253e16,
        1.786845e16,
        1.969444e16,
        2.169481e16,
        2.388505e16,
        2.628195e16,
        2.890364e16,
        3.176975e16,
        3.490150e16,
        3.832178e16,
        4.205536e16,
        4.612893e16,
        5.057131e16,
        5.541360e16,
        6.068930e16,
        6.643451e16,
        7.268815e16,
        7.949209e16,
        8.689142e16,
        9.493463e16,
        1.036739e17,
        1.131653e17,
        1.234691e17,
        1.346500e17,
        1.467777e17,
        1.599265e17,
        1.741768e17,
        1.896144e17,
        2.063313e17,
        2.244263e17,
    ]
)

#  ---------------------- M = 31, I = 1 ---------------------------
M = 31
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[6]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.000000e00,
        9.577640e00,
        2.619804e01,
        4.723879e01,
        7.205446e01,
        1.001556e02,
        1.312023e02,
        1.649444e02,
        2.011901e02,
        2.397898e02,
        2.806276e02,
        3.236172e02,
        3.686976e02,
        4.158306e02,
        4.649971e02,
        5.161940e02,
        5.694318e02,
        6.247317e02,
        6.821239e02,
        7.416459e02,
        8.033414e02,
        8.672592e02,
        9.334532e02,
        1.001981e03,
        1.072904e03,
        1.146289e03,
        1.222203e03,
        1.300719e03,
        1.381913e03,
        1.465863e03,
        1.552650e03,
        1.642361e03,
        1.735081e03,
        1.830901e03,
        1.929915e03,
        2.032218e03,
        2.137907e03,
        2.247085e03,
        2.359854e03,
        2.476320e03,
        2.596589e03,
        2.720774e03,
        2.848985e03,
        2.981338e03,
        3.117948e03,
        3.258936e03,
        3.404422e03,
        3.554529e03,
        3.709382e03,
        3.869109e03,
        4.033838e03,
        4.203702e03,
        4.378833e03,
        4.559368e03,
        4.745444e03,
        4.937200e03,
        5.134779e03,
        5.338325e03,
        5.547982e03,
        5.763900e03,
        5.986229e03,
        6.215121e03,
        6.450730e03,
        6.693213e03,
        6.942728e03,
        7.199438e03,
        7.463503e03,
        7.735091e03,
        8.014367e03,
        8.301502e03,
        8.596667e03,
        8.900036e03,
        9.211786e03,
        9.532093e03,
        9.861140e03,
        1.019911e04,
        1.054618e04,
        1.090255e04,
        1.126840e04,
        1.164392e04,
        1.202931e04,
        1.242476e04,
        1.283047e04,
        1.324664e04,
        1.367348e04,
        1.411118e04,
        1.455995e04,
        1.502000e04,
        1.549154e04,
        1.597478e04,
        1.646995e04,
        1.697724e04,
        1.749688e04,
        1.802909e04,
        1.857410e04,
        1.913212e04,
        1.970338e04,
        2.028811e04,
        2.088653e04,
        2.149888e04,
        2.212539e04,
        2.276628e04,
        2.342180e04,
        2.409219e04,
        2.477767e04,
        2.547848e04,
        2.619488e04,
        2.692709e04,
        2.767536e04,
        2.843993e04,
        2.922104e04,
        3.001895e04,
        3.083389e04,
        3.166610e04,
        3.251585e04,
        3.338337e04,
        3.426891e04,
        3.517272e04,
        3.609505e04,
        3.703614e04,
        3.799625e04,
        3.897562e04,
        3.997449e04,
        4.099313e04,
        4.203177e04,
        4.309066e04,
        4.417005e04,
        4.527018e04,
        4.639131e04,
        4.753367e04,
        4.869751e04,
        4.988308e04,
        5.109061e04,
        5.232035e04,
        5.357253e04,
        5.484740e04,
        5.614520e04,
        5.746615e04,
        5.881050e04,
        6.017847e04,
        6.157031e04,
        6.298623e04,
        6.442647e04,
        6.589125e04,
        6.738080e04,
        6.889533e04,
        7.043508e04,
        7.200025e04,
        7.359107e04,
        7.520774e04,
        7.685048e04,
        7.851950e04,
        8.021500e04,
        8.193718e04,
        8.368625e04,
        8.546241e04,
        8.726584e04,
        8.909676e04,
        9.095533e04,
        9.284176e04,
        9.475623e04,
        9.669891e04,
        9.866999e04,
        1.006696e05,
        1.026980e05,
        1.047553e05,
        1.068417e05,
        1.089574e05,
        1.111024e05,
        1.132770e05,
        1.154813e05,
        1.177155e05,
        1.199797e05,
        1.222740e05,
        1.245986e05,
        1.269537e05,
        1.293393e05,
        1.317557e05,
        1.342028e05,
        1.366809e05,
        1.391901e05,
        1.417304e05,
        1.443021e05,
        1.469051e05,
        1.495397e05,
        1.522058e05,
        1.549037e05,
        1.576334e05,
        1.603950e05,
        1.631886e05,
        1.660143e05,
        1.688721e05,
        1.717622e05,
        1.746846e05,
        1.776393e05,
        1.806266e05,
        1.836463e05,
        1.866986e05,
        1.897836e05,
        1.929013e05,
        1.960517e05,
    ]
)

#  ---------------------- M = 31, I = 2 ---------------------------
M = 31
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.000000e00,
        9.858680e00,
        2.626126e01,
        4.730993e01,
        7.213596e01,
        1.002319e02,
        1.312533e02,
        1.649477e02,
        2.011172e02,
        2.396146e02,
        2.803171e02,
        3.231407e02,
        3.680172e02,
        4.149141e02,
        4.638055e02,
        5.146919e02,
        5.675764e02,
        6.224870e02,
        6.794483e02,
        7.384938e02,
        7.996744e02,
        8.630347e02,
        9.286157e02,
        9.964913e02,
        1.066714e03,
        1.139338e03,
        1.214443e03,
        1.292091e03,
        1.372359e03,
        1.455313e03,
        1.541049e03,
        1.629623e03,
        1.721154e03,
        1.815684e03,
        1.913338e03,
        2.014177e03,
        2.118315e03,
        2.225852e03,
        2.336870e03,
        2.451471e03,
        2.569761e03,
        2.691824e03,
        2.817792e03,
        2.947774e03,
        3.081835e03,
        3.220139e03,
        3.362775e03,
        3.509861e03,
        3.661488e03,
        3.817802e03,
        3.978929e03,
        4.144958e03,
        4.316016e03,
        4.492262e03,
        4.673789e03,
        4.860762e03,
        5.053242e03,
        5.251395e03,
        5.455392e03,
        5.665333e03,
        5.881313e03,
        6.103551e03,
        6.332104e03,
        6.567196e03,
        6.808930e03,
        7.057402e03,
        7.312850e03,
        7.575326e03,
        7.845073e03,
        8.122195e03,
        8.406841e03,
        8.699164e03,
        8.999319e03,
        9.307513e03,
        9.623851e03,
        9.948547e03,
        1.028170e04,
        1.062348e04,
        1.097410e04,
        1.133374e04,
        1.170255e04,
        1.208063e04,
        1.246830e04,
        1.286558e04,
        1.327280e04,
        1.369003e04,
        1.411755e04,
        1.455545e04,
        1.500391e04,
        1.546326e04,
        1.593352e04,
        1.641497e04,
        1.690779e04,
        1.741224e04,
        1.792835e04,
        1.845655e04,
        1.899688e04,
        1.954952e04,
        2.011484e04,
        2.069287e04,
        2.128398e04,
        2.188828e04,
        2.250597e04,
        2.313735e04,
        2.378263e04,
        2.444192e04,
        2.511562e04,
        2.580384e04,
        2.650680e04,
        2.722481e04,
        2.795798e04,
        2.870665e04,
        2.947101e04,
        3.025131e04,
        3.104787e04,
        3.186080e04,
        3.269035e04,
        3.353694e04,
        3.440060e04,
        3.528166e04,
        3.618048e04,
        3.709719e04,
        3.803214e04,
        3.898543e04,
        3.995757e04,
        4.094855e04,
        4.195886e04,
        4.298876e04,
        4.403836e04,
        4.510792e04,
        4.619795e04,
        4.730858e04,
        4.844006e04,
        4.959280e04,
        5.076704e04,
        5.196291e04,
        5.318083e04,
        5.442120e04,
        5.568414e04,
        5.697007e04,
        5.827913e04,
        5.961172e04,
        6.096828e04,
        6.234896e04,
        6.375399e04,
        6.518386e04,
        6.663882e04,
        6.811918e04,
        6.962521e04,
        7.115721e04,
        7.271564e04,
        7.430080e04,
        7.591297e04,
        7.755248e04,
        7.921976e04,
        8.091481e04,
        8.263842e04,
        8.439059e04,
        8.617196e04,
        8.798264e04,
        8.982298e04,
        9.169347e04,
        9.359443e04,
        9.552618e04,
        9.748903e04,
        9.948332e04,
        1.015096e05,
        1.035681e05,
        1.056590e05,
        1.077831e05,
        1.099405e05,
        1.121316e05,
        1.143570e05,
        1.166166e05,
        1.189111e05,
        1.212410e05,
    ]
)

#  ---------------------- M = 31, I = 3 ---------------------------
M = 31
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.000000e00,
        3.938981e01,
        1.049203e02,
        1.890120e02,
        2.881945e02,
        4.004404e02,
        5.243733e02,
        6.589857e02,
        8.034856e02,
        9.572857e02,
        1.119896e03,
        1.290979e03,
        1.470264e03,
        1.657621e03,
        1.852946e03,
        2.056241e03,
        2.267518e03,
        2.486890e03,
        2.714455e03,
        2.950346e03,
        3.194767e03,
        3.447896e03,
        3.709897e03,
        3.981065e03,
        4.261609e03,
        4.551747e03,
        4.851797e03,
        5.162008e03,
        5.482685e03,
        5.814092e03,
        6.156613e03,
        6.510473e03,
        6.876144e03,
        7.253798e03,
        7.643934e03,
        8.046793e03,
        8.462831e03,
        8.892449e03,
        9.335972e03,
        9.793812e03,
        1.026639e04,
        1.075404e04,
        1.125729e04,
        1.177658e04,
        1.231216e04,
        1.286470e04,
        1.343454e04,
        1.402216e04,
        1.462791e04,
        1.525240e04,
        1.589611e04,
        1.655942e04,
        1.724280e04,
        1.794692e04,
        1.867213e04,
        1.941910e04,
        2.018807e04,
        2.097971e04,
        2.179469e04,
        2.263342e04,
        2.349628e04,
        2.438413e04,
        2.529722e04,
        2.623643e04,
        2.720217e04,
        2.819483e04,
        2.921536e04,
        3.026397e04,
        3.134163e04,
        3.244875e04,
        3.358594e04,
        3.475379e04,
        3.595293e04,
        3.718418e04,
        3.844797e04,
        3.974515e04,
        4.107614e04,
        4.244157e04,
        4.384233e04,
        4.527909e04,
        4.675250e04,
        4.826299e04,
        4.981175e04,
        5.139893e04,
        5.302576e04,
        5.469267e04,
        5.640061e04,
        5.815005e04,
        5.994168e04,
        6.177680e04,
        6.365556e04,
        6.557899e04,
        6.754782e04,
        6.956311e04,
        7.162501e04,
        7.373522e04,
        7.589386e04,
        7.810171e04,
        8.036020e04,
        8.266947e04,
        8.503099e04,
        8.744521e04,
        8.991295e04,
        9.243536e04,
        9.501329e04,
        9.764719e04,
        1.003387e05,
        1.030882e05,
        1.058965e05,
        1.087650e05,
        1.116941e05,
        1.146851e05,
        1.177388e05,
        1.208561e05,
        1.240384e05,
        1.272861e05,
        1.306002e05,
        1.339824e05,
        1.374328e05,
        1.409527e05,
        1.445436e05,
        1.482059e05,
        1.519411e05,
        1.557495e05,
        1.596333e05,
        1.635923e05,
        1.676286e05,
        1.717431e05,
        1.759363e05,
        1.802093e05,
        1.845641e05,
        1.890011e05,
        1.935214e05,
        1.981267e05,
        2.028178e05,
        2.075955e05,
        2.124611e05,
        2.174165e05,
        2.224620e05,
        2.275994e05,
        2.328292e05,
        2.381530e05,
        2.435725e05,
        2.490884e05,
        2.547017e05,
        2.604140e05,
        2.662267e05,
        2.721408e05,
        2.781576e05,
        2.842780e05,
        2.905041e05,
        2.968369e05,
        3.032776e05,
        3.098275e05,
        3.164884e05,
        3.232603e05,
        3.301462e05,
        3.371462e05,
        3.442629e05,
        3.514967e05,
        3.588490e05,
        3.663217e05,
        3.739162e05,
        3.816337e05,
        3.894754e05,
        3.974428e05,
        4.055377e05,
        4.137616e05,
        4.221151e05,
        4.306009e05,
        4.392197e05,
        4.479736e05,
        4.568640e05,
        4.658915e05,
        4.750581e05,
        4.843661e05,
    ]
)

#  ---------------------- M = 32, I = 1 ---------------------------
M = 32
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        8.098530e00,
        6.168274e02,
        1.738066e03,
        3.189875e03,
        4.909798e03,
        6.862997e03,
        9.030079e03,
        1.140495e04,
        1.399259e04,
        1.680815e04,
        1.987372e04,
        2.321812e04,
        2.687559e04,
        3.088517e04,
        3.529073e04,
        4.014075e04,
        4.548994e04,
        5.139632e04,
        5.792593e04,
        6.514813e04,
        7.314122e04,
        8.198985e04,
        9.178577e04,
        1.026295e05,
        1.146311e05,
        1.279089e05,
        1.425943e05,
        1.588277e05,
        1.767626e05,
        1.965672e05,
        2.184237e05,
        2.425277e05,
        2.690945e05,
        2.983565e05,
        3.305651e05,
        3.659933e05,
        4.049357e05,
        4.477128e05,
        4.946682e05,
        5.461776e05,
        6.026400e05,
        6.644928e05,
        7.322038e05,
        8.062787e05,
        8.872603e05,
        9.757342e05,
        1.072333e06,
        1.177728e06,
        1.292652e06,
        1.417886e06,
        1.554264e06,
        1.702691e06,
        1.864125e06,
        2.039604e06,
        2.230231e06,
        2.437189e06,
        2.661747e06,
        2.905255e06,
        3.169158e06,
        3.455004e06,
        3.764439e06,
        4.099224e06,
        4.461229e06,
        4.852460e06,
        5.275039e06,
        5.731238e06,
        6.223470e06,
        6.754297e06,
        7.326455e06,
        7.942838e06,
        8.606536e06,
        9.320818e06,
        1.008916e07,
        1.091524e07,
        1.180298e07,
        1.275651e07,
        1.378023e07,
        1.487879e07,
        1.605711e07,
        1.732042e07,
        1.867421e07,
        2.012433e07,
        2.167694e07,
        2.333855e07,
        2.511606e07,
        2.701671e07,
        2.904820e07,
        3.121862e07,
        3.353650e07,
        3.601086e07,
        3.865118e07,
        4.146747e07,
        4.447026e07,
        4.767066e07,
        5.108035e07,
        5.471163e07,
        5.857740e07,
        6.269129e07,
        6.706761e07,
        7.172137e07,
        7.666838e07,
        8.192520e07,
        8.750927e07,
        9.343889e07,
        9.973322e07,
        1.064124e08,
        1.134976e08,
        1.210109e08,
        1.289756e08,
        1.374159e08,
        1.463573e08,
        1.558267e08,
        1.658518e08,
        1.764620e08,
        1.876879e08,
        1.995616e08,
        2.121165e08,
        2.253878e08,
        2.394120e08,
        2.542275e08,
        2.698744e08,
        2.863944e08,
        3.038314e08,
        3.222307e08,
        3.416402e08,
        3.621095e08,
        3.836906e08,
        4.064374e08,
        4.304066e08,
        4.556569e08,
        4.822498e08,
        5.102492e08,
        5.397218e08,
        5.707372e08,
        6.033677e08,
        6.376886e08,
        6.737783e08,
        7.117187e08,
        7.515949e08,
        7.934953e08,
        8.375118e08,
        8.837404e08,
        9.322806e08,
        9.832362e08,
        1.036715e09,
        1.092828e09,
        1.151692e09,
        1.213428e09,
        1.278162e09,
        1.346024e09,
        1.417150e09,
        1.491679e09,
        1.569758e09,
        1.651538e09,
        1.737177e09,
        1.826838e09,
        1.920689e09,
        2.018907e09,
        2.121673e09,
        2.229176e09,
        2.341612e09,
        2.459182e09,
        2.582099e09,
        2.710579e09,
        2.844846e09,
        2.985137e09,
        3.131691e09,
        3.284760e09,
        3.444603e09,
        3.611489e09,
        3.785695e09,
        3.967509e09,
        4.157229e09,
        4.355164e09,
        4.561629e09,
        4.776956e09,
    ]
)

#  ---------------------- M = 33, I = 1 ---------------------------
M = 33
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.594200e-01,
        7.688782e01,
        2.147062e02,
        3.927665e02,
        6.034216e02,
        8.422352e02,
        1.106209e03,
        1.393154e03,
        1.701421e03,
        2.029715e03,
        2.377155e03,
        2.743100e03,
        3.127307e03,
        3.529659e03,
        3.950367e03,
        4.389807e03,
        4.848487e03,
        5.327087e03,
        5.826359e03,
        6.347192e03,
        6.890410e03,
        7.456986e03,
        8.047900e03,
        8.664120e03,
        9.306654e03,
        9.976636e03,
        1.067496e04,
        1.140281e04,
        1.216121e04,
        1.295117e04,
        1.377383e04,
        1.463032e04,
        1.552167e04,
        1.644903e04,
        1.741356e04,
        1.841643e04,
        1.945864e04,
        2.054151e04,
        2.166621e04,
        2.283391e04,
        2.404598e04,
        2.530358e04,
        2.660771e04,
        2.796015e04,
        2.936189e04,
        3.081411e04,
        3.231868e04,
        3.387635e04,
        3.548880e04,
        3.715773e04,
        3.888414e04,
        4.066950e04,
        4.251530e04,
        4.442335e04,
        4.639489e04,
        4.843149e04,
        5.053503e04,
        5.270646e04,
        5.494802e04,
        5.726067e04,
        5.964671e04,
        6.210782e04,
        6.464494e04,
        6.726087e04,
        6.995658e04,
        7.273377e04,
        7.559498e04,
        7.854117e04,
        8.157495e04,
        8.469771e04,
        8.791125e04,
        9.121830e04,
        9.461985e04,
        9.811822e04,
        1.017153e05,
        1.054135e05,
        1.092148e05,
        1.131206e05,
        1.171339e05,
        1.212563e05,
        1.254897e05,
        1.298368e05,
        1.342996e05,
        1.388801e05,
        1.435812e05,
        1.484048e05,
        1.533526e05,
        1.584280e05,
        1.636325e05,
        1.689691e05,
        1.744392e05,
        1.800464e05,
        1.857931e05,
        1.916809e05,
        1.977128e05,
        2.038912e05,
        2.102190e05,
        2.166981e05,
        2.233322e05,
        2.301232e05,
        2.370735e05,
        2.441870e05,
        2.514648e05,
        2.589109e05,
        2.665280e05,
        2.743178e05,
        2.822846e05,
        2.904301e05,
        2.987578e05,
        3.072706e05,
        3.159718e05,
        3.248634e05,
        3.339491e05,
        3.432315e05,
        3.527136e05,
        3.623999e05,
        3.722915e05,
        3.823931e05,
        3.927067e05,
        4.032371e05,
        4.139854e05,
        4.249565e05,
        4.361534e05,
        4.475791e05,
        4.592368e05,
        4.711305e05,
        4.832632e05,
        4.956373e05,
        5.082588e05,
        5.211290e05,
        5.342531e05,
        5.476335e05,
        5.612732e05,
        5.751779e05,
        5.893485e05,
        6.037919e05,
        6.185091e05,
        6.335047e05,
        6.487834e05,
        6.643485e05,
        6.802023e05,
        6.963508e05,
        7.127974e05,
        7.295461e05,
        7.465986e05,
        7.639627e05,
        7.816395e05,
        7.996338e05,
        8.179508e05,
        8.365924e05,
        8.555657e05,
        8.748729e05,
        8.945175e05,
        9.145066e05,
        9.348407e05,
        9.555269e05,
        9.765689e05,
        9.979710e05,
        1.019738e06,
        1.041873e06,
        1.064382e06,
        1.087269e06,
        1.110538e06,
        1.134193e06,
        1.158240e06,
        1.182684e06,
        1.207529e06,
        1.232780e06,
        1.258440e06,
        1.284515e06,
        1.311010e06,
        1.337930e06,
        1.365279e06,
        1.393063e06,
        1.421286e06,
        1.449955e06,
    ]
)

#  ---------------------- M = 35, I = 1 ---------------------------
M = 35
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.408818e02,
        2.081987e04,
        5.959366e04,
        1.144363e05,
        1.889620e05,
        2.880202e05,
        4.176320e05,
        5.853070e05,
        8.004051e05,
        1.074538e06,
        1.422010e06,
        1.860338e06,
        2.410828e06,
        3.099228e06,
        3.956556e06,
        5.019996e06,
        6.333930e06,
        7.951208e06,
        9.934433e06,
        1.235765e07,
        1.530808e07,
        1.888813e07,
        2.321778e07,
        2.843710e07,
        3.470920e07,
        4.222351e07,
        5.119940e07,
        6.189045e07,
        7.458876e07,
        8.963031e07,
        1.074004e08,
        1.283401e08,
        1.529530e08,
        1.818133e08,
        2.155737e08,
        2.549750e08,
        3.008566e08,
        3.541675e08,
        4.159785e08,
        4.874961e08,
        5.700773e08,
        6.652451e08,
        7.747069e08,
        9.003730e08,
        1.044378e09,
        1.209104e09,
        1.397202e09,
        1.611625e09,
        1.855648e09,
        2.132908e09,
        2.447432e09,
        2.803673e09,
        3.206556e09,
        3.661513e09,
        4.174529e09,
        4.752195e09,
        5.401760e09,
        6.131182e09,
        6.949194e09,
        7.865367e09,
        8.890177e09,
        1.003509e10,
        1.131261e10,
        1.273641e10,
        1.432140e10,
        1.608379e10,
        1.804126e10,
        2.021301e10,
        2.261991e10,
        2.528461e10,
        2.823167e10,
        3.148772e10,
        3.508157e10,
        3.904440e10,
        4.340993e10,
        4.821455e10,
        5.349755e10,
        5.930134e10,
        6.567158e10,
        7.265748e10,
        8.031197e10,
        8.869200e10,
        9.785877e10,
        1.078780e11,
        1.188203e11,
        1.307613e11,
        1.437821e11,
        1.579696e11,
        1.734170e11,
        1.902238e11,
        2.084964e11,
        2.283487e11,
        2.499022e11,
        2.732868e11,
        2.986409e11,
        3.261123e11,
        3.558583e11,
        3.880465e11,
        4.228556e11,
        4.604755e11,
        5.011085e11,
        5.449694e11,
        5.922865e11,
        6.433023e11,
        6.982744e11,
        7.574760e11,
        8.211970e11,
        8.897447e11,
        9.634444e11,
        1.042642e12,
        1.127701e12,
        1.219010e12,
        1.316977e12,
        1.422034e12,
        1.534639e12,
        1.655275e12,
        1.784452e12,
        1.922709e12,
        2.070615e12,
        2.228770e12,
        2.397806e12,
        2.578390e12,
        2.771227e12,
        2.977056e12,
        3.196658e12,
        3.430854e12,
        3.680508e12,
        3.946531e12,
        4.229878e12,
        4.531554e12,
        4.852619e12,
        5.194181e12,
        5.557407e12,
        5.943522e12,
        6.353813e12,
        6.789628e12,
        7.252383e12,
        7.743565e12,
        8.264728e12,
        8.817504e12,
        9.403604e12,
        1.002482e13,
        1.068303e13,
        1.138019e13,
        1.211836e13,
        1.289970e13,
        1.372645e13,
        1.460097e13,
        1.552571e13,
        1.650326e13,
        1.753631e13,
        1.862765e13,
        1.978023e13,
        2.099711e13,
        2.228149e13,
        2.363672e13,
        2.506627e13,
        2.657379e13,
        2.816307e13,
        2.983806e13,
        3.160289e13,
        3.346185e13,
        3.541944e13,
        3.748031e13,
        3.964933e13,
        4.193156e13,
        4.433228e13,
        4.685697e13,
        4.951135e13,
        5.230137e13,
        5.523320e13,
        5.831329e13,
        6.154832e13,
        6.494525e13,
        6.851131e13,
        7.225402e13,
    ]
)

#  ---------------------- M = 35, I = 2 ---------------------------
M = 35
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.468098e02,
        2.134900e04,
        6.110945e04,
        1.173478e05,
        1.937703e05,
        2.953497e05,
        4.282605e05,
        6.002031e05,
        8.207761e05,
        1.101887e06,
        1.458203e06,
        1.907688e06,
        2.472190e06,
        3.178113e06,
        4.057263e06,
        5.147772e06,
        6.495151e06,
        8.153595e06,
        1.018730e07,
        1.267221e07,
        1.569774e07,
        1.936891e07,
        2.380877e07,
        2.916094e07,
        3.559270e07,
        4.329828e07,
        5.250266e07,
        6.346585e07,
        7.648739e07,
        9.191183e07,
        1.101343e08,
        1.316070e08,
        1.568465e08,
        1.864414e08,
        2.210611e08,
        2.614653e08,
        3.085149e08,
        3.631828e08,
        4.265672e08,
        4.999054e08,
        5.845887e08,
        6.821789e08,
        7.944272e08,
        9.232921e08,
        1.070963e09,
        1.239882e09,
        1.432769e09,
        1.652649e09,
        1.902884e09,
        2.187202e09,
        2.509732e09,
        2.875042e09,
        3.288180e09,
        3.754718e09,
        4.280793e09,
        4.873164e09,
        5.539263e09,
        6.287254e09,
        7.126088e09,
        8.065583e09,
        9.116481e09,
        1.029053e10,
        1.160058e10,
        1.306063e10,
        1.468596e10,
        1.649322e10,
        1.850051e10,
        2.072754e10,
        2.319571e10,
        2.592825e10,
        2.895033e10,
        3.228926e10,
        3.597459e10,
        4.003830e10,
        4.451495e10,
        4.944187e10,
        5.485937e10,
        6.081089e10,
        6.734329e10,
        7.450702e10,
        8.235636e10,
        9.094971e10,
        1.003498e11,
        1.106241e11,
        1.218449e11,
        1.340899e11,
        1.474421e11,
        1.619909e11,
        1.778314e11,
        1.950660e11,
        2.138038e11,
        2.341615e11,
        2.562637e11,
        2.802435e11,
        3.062431e11,
        3.344137e11,
        3.649168e11,
        3.979245e11,
        4.336196e11,
        4.721973e11,
        5.138646e11,
        5.588420e11,
        6.073635e11,
        6.596780e11,
        7.160494e11,
        7.767581e11,
        8.421012e11,
        9.123937e11,
        9.879697e11,
        1.069183e12,
        1.156408e12,
        1.250041e12,
        1.350501e12,
        1.458233e12,
        1.573704e12,
        1.697411e12,
        1.829877e12,
        1.971654e12,
        2.123324e12,
        2.285505e12,
        2.458844e12,
        2.644025e12,
        2.841771e12,
        3.052839e12,
        3.278031e12,
        3.518189e12,
        3.774199e12,
        4.046993e12,
        4.337553e12,
        4.646909e12,
        4.976146e12,
        5.326403e12,
        5.698874e12,
        6.094819e12,
        6.515555e12,
        6.962464e12,
        7.436999e12,
        7.940684e12,
        8.475113e12,
        9.041962e12,
        9.642982e12,
        1.028001e13,
        1.095497e13,
        1.166988e13,
        1.242685e13,
        1.322807e13,
        1.407587e13,
        1.497265e13,
        1.592093e13,
        1.692337e13,
        1.798271e13,
        1.910183e13,
        2.028375e13,
        2.153161e13,
        2.284869e13,
        2.423842e13,
        2.570436e13,
        2.725025e13,
        2.887999e13,
        3.059761e13,
        3.240737e13,
        3.431365e13,
        3.632107e13,
        3.843441e13,
        4.065863e13,
        4.299897e13,
        4.546079e13,
        4.804976e13,
        5.077171e13,
        5.363275e13,
        5.663921e13,
        5.979770e13,
        6.311508e13,
        6.659849e13,
        7.025532e13,
        7.409331e13,
    ]
)

#  ---------------------- M = 36, I = 1 ---------------------------
M = 36
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.029540e00,
        2.200969e01,
        4.297675e01,
        6.395552e01,
        8.493845e01,
        1.059240e02,
        1.269117e02,
        1.479015e02,
        1.688930e02,
        1.898864e02,
        2.108815e02,
        2.318784e02,
        2.528769e02,
        2.738772e02,
        2.948822e02,
        3.158861e02,
        3.368985e02,
        3.579134e02,
        3.789385e02,
        3.999708e02,
        4.210197e02,
        4.420868e02,
        4.631741e02,
        4.842933e02,
        5.054422e02,
        5.266341e02,
        5.478727e02,
        5.691675e02,
        5.905169e02,
        6.119432e02,
        6.334393e02,
        6.550162e02,
        6.766925e02,
        6.984603e02,
        7.203322e02,
        7.423211e02,
        7.644255e02,
        7.866515e02,
        8.090126e02,
        8.315068e02,
        8.541484e02,
        8.769350e02,
        8.998723e02,
        9.229750e02,
        9.462310e02,
        9.696643e02,
        9.932616e02,
        1.017048e03,
        1.041000e03,
        1.065141e03,
        1.089479e03,
        1.113997e03,
        1.138710e03,
        1.163612e03,
        1.188731e03,
        1.214038e03,
        1.239547e03,
        1.265277e03,
        1.291206e03,
        1.317352e03,
        1.343706e03,
        1.370272e03,
        1.397067e03,
        1.424069e03,
        1.451294e03,
        1.478747e03,
        1.506416e03,
        1.534307e03,
        1.562435e03,
        1.590776e03,
        1.619347e03,
        1.648150e03,
        1.677191e03,
        1.706455e03,
        1.735962e03,
        1.765682e03,
        1.795650e03,
        1.825853e03,
        1.856277e03,
        1.886958e03,
        1.917863e03,
        1.949013e03,
        1.980393e03,
        2.012022e03,
        2.043868e03,
        2.075985e03,
        2.108322e03,
        2.140900e03,
        2.173719e03,
        2.206782e03,
        2.240090e03,
        2.273646e03,
        2.307451e03,
        2.341488e03,
        2.375759e03,
        2.410284e03,
        2.445065e03,
        2.480064e03,
        2.515321e03,
        2.550840e03,
        2.586581e03,
        2.622585e03,
        2.658813e03,
        2.695308e03,
        2.732051e03,
        2.769042e03,
        2.806260e03,
        2.843730e03,
        2.881473e03,
        2.919448e03,
        2.957655e03,
        2.996140e03,
        3.034859e03,
        3.073813e03,
        3.113025e03,
        3.152497e03,
        3.192207e03,
        3.232179e03,
        3.272390e03,
        3.312840e03,
        3.353556e03,
        3.394513e03,
        3.435739e03,
        3.477180e03,
        3.518892e03,
        3.560874e03,
        3.603075e03,
        3.645548e03,
        3.688268e03,
        3.731208e03,
        3.774424e03,
        3.817915e03,
        3.861629e03,
        3.905593e03,
        3.949807e03,
        3.994273e03,
        4.039020e03,
        4.083990e03,
        4.129214e03,
        4.174693e03,
        4.220425e03,
        4.266414e03,
        4.312628e03,
        4.359128e03,
        4.405856e03,
        4.452842e03,
        4.500085e03,
        4.547587e03,
        4.595349e03,
        4.643340e03,
        4.691592e03,
        4.740104e03,
        4.788878e03,
        4.837883e03,
        4.887149e03,
        4.936647e03,
        4.986441e03,
        5.036467e03,
        5.086725e03,
        5.137247e03,
        5.188036e03,
        5.239091e03,
        5.290379e03,
        5.341935e03,
        5.393723e03,
        5.445780e03,
        5.498071e03,
        5.550631e03,
        5.603462e03,
        5.656527e03,
        5.709827e03,
        5.763397e03,
        5.817240e03,
        5.871319e03,
        5.925670e03,
        5.980257e03,
    ]
)

#  ---------------------- M = 37, I = 1 ---------------------------
M = 37
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.785130e00,
        4.726760e02,
        1.331909e03,
        2.444466e03,
        3.762449e03,
        5.258748e03,
        6.916853e03,
        8.727864e03,
        1.068858e04,
        1.280031e04,
        1.506728e04,
        1.749553e04,
        2.009268e04,
        2.286748e04,
        2.582902e04,
        2.898719e04,
        3.235219e04,
        3.593458e04,
        3.974451e04,
        4.379322e04,
        4.809173e04,
        5.265152e04,
        5.748313e04,
        6.259898e04,
        6.800999e04,
        7.372804e04,
        7.976499e04,
        8.613334e04,
        9.284498e04,
        9.991164e04,
        1.073465e05,
        1.151622e05,
        1.233719e05,
        1.319883e05,
        1.410250e05,
        1.504953e05,
        1.604130e05,
        1.707918e05,
        1.816466e05,
        1.929925e05,
        2.048425e05,
        2.172130e05,
        2.301186e05,
        2.435762e05,
        2.576005e05,
        2.722077e05,
        2.874142e05,
        3.032379e05,
        3.196943e05,
        3.368020e05,
        3.545764e05,
        3.730385e05,
        3.922061e05,
        4.120955e05,
        4.327284e05,
        4.541215e05,
        4.762955e05,
        4.992694e05,
        5.230665e05,
        5.477044e05,
        5.732050e05,
        5.995885e05,
        6.268775e05,
        6.550925e05,
        6.842570e05,
        7.143946e05,
        7.455270e05,
        7.776759e05,
        8.108659e05,
        8.451225e05,
        8.804679e05,
        9.169282e05,
        9.545270e05,
        9.932902e05,
        1.033245e06,
        1.074416e06,
        1.116828e06,
        1.160511e06,
        1.205491e06,
        1.251794e06,
        1.299452e06,
        1.348487e06,
        1.398931e06,
        1.450812e06,
        1.504163e06,
        1.559011e06,
        1.615386e06,
        1.673318e06,
        1.732838e06,
        1.793976e06,
        1.856768e06,
        1.921245e06,
        1.987436e06,
        2.055375e06,
        2.125098e06,
        2.196636e06,
        2.270020e06,
        2.345293e06,
        2.422481e06,
        2.501629e06,
        2.582761e06,
        2.665923e06,
        2.751144e06,
        2.838463e06,
        2.927919e06,
        3.019552e06,
        3.113392e06,
        3.209490e06,
        3.307870e06,
        3.408585e06,
        3.511666e06,
        3.617155e06,
        3.725094e06,
        3.835528e06,
        3.948487e06,
        4.064024e06,
        4.182175e06,
        4.302986e06,
        4.426502e06,
        4.552764e06,
        4.681813e06,
        4.813699e06,
        4.948460e06,
        5.086155e06,
        5.226813e06,
        5.370497e06,
        5.517235e06,
        5.667093e06,
        5.820104e06,
        5.976328e06,
        6.135809e06,
        6.298591e06,
        6.464727e06,
        6.634271e06,
        6.807274e06,
        6.983775e06,
        7.163838e06,
        7.347517e06,
        7.534852e06,
        7.725898e06,
        7.920720e06,
        8.119366e06,
        8.321879e06,
        8.528331e06,
        8.738766e06,
        8.953250e06,
        9.171827e06,
        9.394565e06,
        9.621507e06,
        9.852731e06,
        1.008828e07,
        1.032821e07,
        1.057259e07,
        1.082148e07,
        1.107494e07,
        1.133303e07,
        1.159581e07,
        1.186333e07,
        1.213567e07,
        1.241289e07,
        1.269505e07,
        1.298221e07,
        1.327444e07,
        1.357180e07,
        1.387436e07,
        1.418219e07,
        1.449535e07,
        1.481390e07,
        1.513792e07,
        1.546748e07,
        1.580263e07,
        1.614346e07,
        1.649004e07,
        1.684241e07,
        1.720068e07,
        1.756490e07,
    ]
)

#  ---------------------- M = 37, I = 2 ---------------------------
M = 37
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.739990e00,
        4.708308e02,
        1.326733e03,
        2.434981e03,
        3.747861e03,
        5.238419e03,
        6.890124e03,
        8.694231e03,
        1.064761e04,
        1.275163e04,
        1.501028e04,
        1.743002e04,
        2.001840e04,
        2.278379e04,
        2.573568e04,
        2.888372e04,
        3.223779e04,
        3.580868e04,
        3.960721e04,
        4.364360e04,
        4.792918e04,
        5.247539e04,
        5.729323e04,
        6.239415e04,
        6.778948e04,
        7.349165e04,
        7.951198e04,
        8.586227e04,
        9.255496e04,
        9.960247e04,
        1.070173e05,
        1.148120e05,
        1.229998e05,
        1.315924e05,
        1.406050e05,
        1.500502e05,
        1.599417e05,
        1.702941e05,
        1.811203e05,
        1.924363e05,
        2.042563e05,
        2.165956e05,
        2.294686e05,
        2.428909e05,
        2.568798e05,
        2.714501e05,
        2.866181e05,
        3.024019e05,
        3.188166e05,
        3.358826e05,
        3.536137e05,
        3.720290e05,
        3.911480e05,
        4.109904e05,
        4.315709e05,
        4.529114e05,
        4.750329e05,
        4.979522e05,
        5.216906e05,
        5.462676e05,
        5.717072e05,
        5.980275e05,
        6.252486e05,
        6.533981e05,
        6.824923e05,
        7.125570e05,
        7.436139e05,
        7.756873e05,
        8.087991e05,
        8.429747e05,
        8.782365e05,
        9.146103e05,
        9.521193e05,
        9.907930e05,
        1.030652e06,
        1.071728e06,
        1.114040e06,
        1.157621e06,
        1.202496e06,
        1.248693e06,
        1.296235e06,
        1.345157e06,
        1.395485e06,
        1.447246e06,
        1.500473e06,
        1.555196e06,
        1.611440e06,
        1.669235e06,
        1.728620e06,
        1.789621e06,
        1.852269e06,
        1.916593e06,
        1.982635e06,
        2.050416e06,
        2.119981e06,
        2.191356e06,
        2.264576e06,
        2.339672e06,
        2.416687e06,
        2.495652e06,
        2.576605e06,
        2.659573e06,
        2.744601e06,
        2.831725e06,
        2.920982e06,
        3.012404e06,
        3.106038e06,
        3.201913e06,
        3.300075e06,
        3.400561e06,
        3.503412e06,
        3.608665e06,
        3.716362e06,
        3.826546e06,
        3.939250e06,
        4.054530e06,
        4.172418e06,
        4.292959e06,
        4.416198e06,
        4.542175e06,
        4.670937e06,
        4.802531e06,
        4.936999e06,
        5.074379e06,
        5.214727e06,
        5.358088e06,
        5.504508e06,
        5.654031e06,
        5.806702e06,
        5.962583e06,
        6.121705e06,
        6.284127e06,
        6.449902e06,
        6.619068e06,
        6.791685e06,
        6.967806e06,
        7.147471e06,
        7.330735e06,
        7.517662e06,
        7.708297e06,
        7.902682e06,
        8.100891e06,
        8.302962e06,
        8.508957e06,
        8.718940e06,
        8.932943e06,
        9.151047e06,
        9.373291e06,
        9.599747e06,
        9.830455e06,
        1.006549e07,
        1.030491e07,
        1.054875e07,
        1.079710e07,
        1.105000e07,
        1.130753e07,
        1.156973e07,
        1.183667e07,
        1.210843e07,
        1.238504e07,
        1.266658e07,
        1.295312e07,
        1.324472e07,
        1.354143e07,
        1.384333e07,
        1.415049e07,
        1.446297e07,
        1.478083e07,
        1.510415e07,
        1.543299e07,
        1.576743e07,
        1.610752e07,
        1.645334e07,
        1.680496e07,
        1.716245e07,
        1.752589e07,
    ]
)

#  ---------------------- M = 38, I = 1 ---------------------------
M = 38
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.964040e00,
        1.867813e02,
        5.232315e02,
        9.584283e02,
        1.473741e03,
        2.058415e03,
        2.705341e03,
        3.409831e03,
        4.169420e03,
        4.983909e03,
        5.855633e03,
        6.789060e03,
        7.791043e03,
        8.870171e03,
        1.003696e04,
        1.130344e04,
        1.268335e04,
        1.419187e04,
        1.584565e04,
        1.766292e04,
        1.966394e04,
        2.187063e04,
        2.430711e04,
        2.699984e04,
        2.997740e04,
        3.327167e04,
        3.691750e04,
        4.095290e04,
        4.541954e04,
        5.036362e04,
        5.583538e04,
        6.189039e04,
        6.858858e04,
        7.599728e04,
        8.418919e04,
        9.324438e04,
        1.032502e05,
        1.143029e05,
        1.265073e05,
        1.399784e05,
        1.548424e05,
        1.712363e05,
        1.893101e05,
        2.092280e05,
        2.311692e05,
        2.553286e05,
        2.819194e05,
        3.111737e05,
        3.433445e05,
        3.787068e05,
        4.175601e05,
        4.602299e05,
        5.070709e05,
        5.584681e05,
        6.148394e05,
        6.766383e05,
        7.443566e05,
        8.185285e05,
        8.997333e05,
        9.885977e05,
        1.085799e06,
        1.192073e06,
        1.308215e06,
        1.435085e06,
        1.573609e06,
        1.724794e06,
        1.889722e06,
        2.069561e06,
        2.265577e06,
        2.479128e06,
        2.711680e06,
        2.964814e06,
        3.240234e06,
        3.539768e06,
        3.865391e06,
        4.219220e06,
        4.603536e06,
        5.020787e06,
        5.473605e06,
        5.964816e06,
        6.497450e06,
        7.074761e06,
        7.700237e06,
        8.377621e06,
        9.110918e06,
        9.904421e06,
        1.076273e07,
        1.169076e07,
        1.269377e07,
        1.377741e07,
        1.494767e07,
        1.621101e07,
        1.757429e07,
        1.904485e07,
        2.063052e07,
        2.233968e07,
        2.418123e07,
        2.616470e07,
        2.830021e07,
        3.059859e07,
        3.307135e07,
        3.573073e07,
        3.858981e07,
        4.166247e07,
        4.496350e07,
        4.850860e07,
        5.231451e07,
        5.639898e07,
        6.078088e07,
        6.548028e07,
        7.051845e07,
        7.591801e07,
        8.170292e07,
        8.789865e07,
        9.453217e07,
        1.016321e08,
        1.092288e08,
        1.173543e08,
        1.260428e08,
        1.353302e08,
        1.452548e08,
        1.558569e08,
        1.671794e08,
        1.792673e08,
        1.921686e08,
        2.059338e08,
        2.206164e08,
        2.362728e08,
        2.529626e08,
        2.707490e08,
        2.896984e08,
        3.098811e08,
        3.313711e08,
        3.542468e08,
        3.785905e08,
        4.044891e08,
        4.320345e08,
        4.613233e08,
        4.924573e08,
        5.255437e08,
        5.606957e08,
        5.980320e08,
        6.376782e08,
        6.797660e08,
        7.244340e08,
        7.718283e08,
        8.221023e08,
        8.754174e08,
        9.319435e08,
        9.918586e08,
        1.055351e09,
        1.122616e09,
        1.193862e09,
        1.269305e09,
        1.349174e09,
        1.433708e09,
        1.523159e09,
        1.617789e09,
        1.717876e09,
        1.823709e09,
        1.935593e09,
        2.053846e09,
        2.178804e09,
        2.310816e09,
        2.450248e09,
        2.597487e09,
        2.752934e09,
        2.917011e09,
        3.090161e09,
        3.272845e09,
        3.465547e09,
        3.668772e09,
        3.883052e09,
        4.108941e09,
        4.347015e09,
        4.597885e09,
    ]
)

#  ---------------------- M = 38, I = 2 ---------------------------
M = 38
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.204615e01,
        7.642634e02,
        2.141386e03,
        3.922752e03,
        6.032083e03,
        8.425355e03,
        1.107346e04,
        1.395721e04,
        1.706650e04,
        2.040053e04,
        2.396885e04,
        2.778974e04,
        3.189127e04,
        3.630859e04,
        4.108475e04,
        4.626896e04,
        5.191754e04,
        5.809252e04,
        6.486214e04,
        7.230097e04,
        8.049201e04,
        8.952494e04,
        9.949845e04,
        1.105209e05,
        1.227093e05,
        1.361942e05,
        1.511181e05,
        1.676367e05,
        1.859206e05,
        2.061588e05,
        2.285571e05,
        2.533428e05,
        2.807614e05,
        3.110884e05,
        3.446214e05,
        3.816882e05,
        4.226462e05,
        4.678897e05,
        5.178476e05,
        5.729908e05,
        6.338355e05,
        7.009427e05,
        7.749268e05,
        8.564597e05,
        9.462743e05,
        1.045169e06,
        1.154017e06,
        1.273768e06,
        1.405457e06,
        1.550210e06,
        1.709254e06,
        1.883920e06,
        2.075661e06,
        2.286052e06,
        2.516805e06,
        2.769775e06,
        3.046976e06,
        3.350594e06,
        3.683001e06,
        4.046763e06,
        4.444651e06,
        4.879678e06,
        5.355099e06,
        5.874432e06,
        6.441474e06,
        7.060342e06,
        7.735464e06,
        8.471627e06,
        9.274007e06,
        1.014816e07,
        1.110010e07,
        1.213630e07,
        1.326371e07,
        1.448984e07,
        1.582276e07,
        1.727114e07,
        1.884431e07,
        2.055231e07,
        2.240589e07,
        2.441664e07,
        2.659695e07,
        2.896014e07,
        3.152050e07,
        3.429333e07,
        3.729505e07,
        4.054321e07,
        4.405664e07,
        4.785548e07,
        5.196127e07,
        5.639707e07,
        6.118750e07,
        6.635891e07,
        7.193943e07,
        7.795909e07,
        8.444997e07,
        9.144632e07,
        9.898462e07,
        1.071038e08,
        1.158455e08,
        1.252538e08,
        1.353759e08,
        1.462619e08,
        1.579654e08,
        1.705432e08,
        1.840558e08,
        1.985675e08,
        2.141468e08,
        2.308664e08,
        2.488035e08,
        2.680402e08,
        2.886638e08,
        3.107666e08,
        3.344469e08,
        3.598088e08,
        3.869628e08,
        4.160260e08,
        4.471227e08,
        4.803842e08,
        5.159500e08,
        5.539677e08,
        5.945935e08,
        6.379928e08,
        6.843406e08,
        7.338221e08,
        7.866329e08,
        8.429801e08,
        9.030826e08,
        9.671712e08,
        1.035490e09,
        1.108298e09,
        1.185867e09,
        1.268484e09,
        1.356452e09,
        1.450092e09,
        1.549742e09,
        1.655757e09,
        1.768513e09,
        1.888406e09,
        2.015851e09,
        2.151289e09,
        2.295182e09,
        2.448017e09,
        2.610306e09,
        2.782591e09,
        2.965437e09,
        3.159443e09,
        3.365238e09,
        3.583481e09,
        3.814868e09,
        4.060128e09,
        4.320030e09,
        4.595378e09,
        4.887019e09,
        5.195844e09,
        5.522783e09,
        5.868820e09,
        6.234981e09,
        6.622346e09,
        7.032047e09,
        7.465271e09,
        7.923262e09,
        8.407328e09,
        8.918836e09,
        9.459220e09,
        1.002998e10,
        1.063270e10,
        1.126901e10,
        1.194066e10,
        1.264944e10,
        1.339724e10,
        1.418606e10,
        1.501796e10,
        1.589510e10,
        1.681977e10,
        1.779432e10,
        1.882124e10,
    ]
)

#  ---------------------- M = 39, I = 1 ---------------------------
M = 39
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.441130e01,
        8.984785e02,
        2.519098e03,
        4.622384e03,
        7.153276e03,
        1.012212e04,
        1.356235e04,
        1.751151e04,
        2.200662e04,
        2.708504e04,
        3.278708e04,
        3.915884e04,
        4.625465e04,
        5.413906e04,
        6.288836e04,
        7.259164e04,
        8.335181e04,
        9.528638e04,
        1.085284e05,
        1.232272e05,
        1.395500e05,
        1.576826e05,
        1.778316e05,
        2.002254e05,
        2.251168e05,
        2.527848e05,
        2.835372e05,
        3.177134e05,
        3.556871e05,
        3.978696e05,
        4.447142e05,
        4.967184e05,
        5.544300e05,
        6.184503e05,
        6.894398e05,
        7.681233e05,
        8.552960e05,
        9.518298e05,
        1.058680e06,
        1.176894e06,
        1.307616e06,
        1.452099e06,
        1.611715e06,
        1.787960e06,
        1.982471e06,
        2.197034e06,
        2.433598e06,
        2.694287e06,
        2.981419e06,
        3.297516e06,
        3.645326e06,
        4.027840e06,
        4.448308e06,
        4.910266e06,
        5.417556e06,
        5.974349e06,
        6.585171e06,
        7.254935e06,
        7.988968e06,
        8.793039e06,
        9.673404e06,
        1.063683e07,
        1.169064e07,
        1.284277e07,
        1.410177e07,
        1.547691e07,
        1.697818e07,
        1.861638e07,
        2.040317e07,
        2.235109e07,
        2.447370e07,
        2.678560e07,
        2.930251e07,
        3.204136e07,
        3.502035e07,
        3.825912e07,
        4.177870e07,
        4.560178e07,
        4.975264e07,
        5.425747e07,
        5.914429e07,
        6.444319e07,
        7.018647e07,
        7.640872e07,
        8.314707e07,
        9.044122e07,
        9.833376e07,
        1.068702e08,
        1.160993e08,
        1.260732e08,
        1.368476e08,
        1.484821e08,
        1.610404e08,
        1.745904e08,
        1.892048e08,
        2.049609e08,
        2.219414e08,
        2.402345e08,
        2.599341e08,
        2.811403e08,
        3.039598e08,
        3.285064e08,
        3.549009e08,
        3.832720e08,
        4.137567e08,
        4.465008e08,
        4.816591e08,
        5.193963e08,
        5.598872e08,
        6.033178e08,
        6.498853e08,
        6.997992e08,
        7.532821e08,
        8.105694e08,
        8.719115e08,
        9.375733e08,
        1.007836e09,
        1.082998e09,
        1.163375e09,
        1.249300e09,
        1.341128e09,
        1.439233e09,
        1.544011e09,
        1.655881e09,
        1.775287e09,
        1.902698e09,
        2.038608e09,
        2.183542e09,
        2.338052e09,
        2.502722e09,
        2.678169e09,
        2.865044e09,
        3.064034e09,
        3.275863e09,
        3.501296e09,
        3.741140e09,
        3.996242e09,
        4.267501e09,
        4.555859e09,
        4.862310e09,
        5.187903e09,
        5.533738e09,
        5.900977e09,
        6.290843e09,
        6.704620e09,
        7.143662e09,
        7.609388e09,
        8.103298e09,
        8.626961e09,
        9.182033e09,
        9.770245e09,
        1.039343e10,
        1.105349e10,
        1.175245e10,
        1.249242e10,
        1.327562e10,
        1.410437e10,
        1.498112e10,
        1.590843e10,
        1.688899e10,
        1.792560e10,
        1.902123e10,
        2.017898e10,
        2.140208e10,
        2.269394e10,
        2.405813e10,
        2.549835e10,
        2.701854e10,
        2.862278e10,
        3.031533e10,
        3.210070e10,
        3.398356e10,
        3.596882e10,
        3.806161e10,
        4.026729e10,
        4.259149e10,
    ]
)

#  ---------------------- M = 40, I = 1 ---------------------------
M = 40
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.004878e01,
        1.395096e03,
        3.835885e03,
        7.029882e03,
        1.081742e04,
        1.511632e04,
        1.987927e04,
        2.508270e04,
        3.072275e04,
        3.681224e04,
        4.337811e04,
        5.045934e04,
        5.810536e04,
        6.637497e04,
        7.533555e04,
        8.506260e04,
        9.563945e04,
        1.071573e05,
        1.197152e05,
        1.334205e05,
        1.483892e05,
        1.647463e05,
        1.826266e05,
        2.021755e05,
        2.235493e05,
        2.469166e05,
        2.724590e05,
        3.003719e05,
        3.308659e05,
        3.641678e05,
        4.005214e05,
        4.401896e05,
        4.834550e05,
        5.306217e05,
        5.820165e05,
        6.379909e05,
        6.989225e05,
        7.652168e05,
        8.373091e05,
        9.156666e05,
        1.000790e06,
        1.093217e06,
        1.193523e06,
        1.302323e06,
        1.420279e06,
        1.548095e06,
        1.686527e06,
        1.836381e06,
        1.998520e06,
        2.173864e06,
        2.363397e06,
        2.568166e06,
        2.789290e06,
        3.027961e06,
        3.285448e06,
        3.563104e06,
        3.862368e06,
        4.184771e06,
        4.531944e06,
        4.905616e06,
        5.307629e06,
        5.739936e06,
        6.204613e06,
        6.703863e06,
        7.240020e06,
        7.815564e06,
        8.433119e06,
        9.095469e06,
        9.805559e06,
        1.056651e07,
        1.138163e07,
        1.225440e07,
        1.318853e07,
        1.418791e07,
        1.525668e07,
        1.639920e07,
        1.762006e07,
        1.892414e07,
        2.031655e07,
        2.180272e07,
        2.338834e07,
        2.507943e07,
        2.688234e07,
        2.880373e07,
        3.085064e07,
        3.303048e07,
        3.535103e07,
        3.782050e07,
        4.044751e07,
        4.324112e07,
        4.621087e07,
        4.936677e07,
        5.271934e07,
        5.627963e07,
        6.005924e07,
        6.407034e07,
        6.832572e07,
        7.283878e07,
        7.762356e07,
        8.269480e07,
        8.806795e07,
        9.375919e07,
        9.978547e07,
        1.061645e08,
        1.129150e08,
        1.200563e08,
        1.276088e08,
        1.355938e08,
        1.440336e08,
        1.529514e08,
        1.623717e08,
        1.723198e08,
        1.828225e08,
        1.939074e08,
        2.056036e08,
        2.179413e08,
        2.309523e08,
        2.446695e08,
        2.591273e08,
        2.743617e08,
        2.904102e08,
        3.073119e08,
        3.251074e08,
        3.438393e08,
        3.635518e08,
        3.842910e08,
        4.061049e08,
        4.290435e08,
        4.531588e08,
        4.785052e08,
        5.051389e08,
        5.331187e08,
        5.625056e08,
        5.933632e08,
        6.257574e08,
        6.597570e08,
        6.954334e08,
        7.328607e08,
        7.721161e08,
        8.132796e08,
        8.564345e08,
        9.016672e08,
        9.490674e08,
        9.987283e08,
        1.050747e09,
        1.105223e09,
        1.162261e09,
        1.221968e09,
        1.284458e09,
        1.349847e09,
        1.418253e09,
        1.489804e09,
        1.564628e09,
        1.642860e09,
        1.724638e09,
        1.810107e09,
        1.899416e09,
        1.992720e09,
        2.090179e09,
        2.191959e09,
        2.298231e09,
        2.409173e09,
        2.524970e09,
        2.645811e09,
        2.771894e09,
        2.903422e09,
        3.040606e09,
        3.183664e09,
        3.332821e09,
        3.488310e09,
        3.650373e09,
        3.819257e09,
        3.995222e09,
        4.178531e09,
        4.369461e09,
        4.568295e09,
    ]
)

#  ---------------------- M = 40, I = 2 ---------------------------
M = 40
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.014586e01,
        1.400380e03,
        3.850470e03,
        7.056645e03,
        1.085863e04,
        1.517397e04,
        1.995524e04,
        2.517891e04,
        3.084126e04,
        3.695530e04,
        4.354822e04,
        5.065922e04,
        5.833802e04,
        6.664374e04,
        7.564409e04,
        8.541493e04,
        9.604001e04,
        1.076110e05,
        1.202274e05,
        1.339971e05,
        1.490367e05,
        1.654718e05,
        1.834380e05,
        2.030813e05,
        2.245589e05,
        2.480404e05,
        2.737081e05,
        3.017585e05,
        3.324034e05,
        3.658707e05,
        4.024056e05,
        4.422723e05,
        4.857550e05,
        5.331592e05,
        5.848137e05,
        6.410718e05,
        7.023131e05,
        7.689453e05,
        8.414060e05,
        9.201650e05,
        1.005726e06,
        1.098629e06,
        1.199452e06,
        1.308815e06,
        1.427382e06,
        1.555862e06,
        1.695014e06,
        1.845650e06,
        2.008636e06,
        2.184898e06,
        2.375424e06,
        2.581269e06,
        2.803557e06,
        3.043485e06,
        3.302331e06,
        3.581455e06,
        3.882303e06,
        4.206416e06,
        4.555432e06,
        4.931091e06,
        5.335245e06,
        5.769857e06,
        6.237015e06,
        6.738933e06,
        7.277960e06,
        7.856588e06,
        8.477456e06,
        9.143363e06,
        9.857272e06,
        1.062232e07,
        1.144183e07,
        1.231931e07,
        1.325848e07,
        1.426327e07,
        1.533782e07,
        1.648652e07,
        1.771400e07,
        1.902515e07,
        2.042513e07,
        2.191937e07,
        2.351362e07,
        2.521392e07,
        2.702665e07,
        2.895852e07,
        3.101660e07,
        3.320835e07,
        3.554159e07,
        3.802456e07,
        4.066595e07,
        4.347487e07,
        4.646089e07,
        4.963410e07,
        5.300508e07,
        5.658492e07,
        6.038531e07,
        6.441848e07,
        6.869728e07,
        7.323518e07,
        7.804633e07,
        8.314553e07,
        8.854833e07,
        9.427099e07,
        1.003306e08,
        1.067449e08,
        1.135327e08,
        1.207135e08,
        1.283078e08,
        1.363370e08,
        1.448235e08,
        1.537908e08,
        1.632633e08,
        1.732667e08,
        1.838276e08,
        1.949741e08,
        2.067353e08,
        2.191416e08,
        2.322250e08,
        2.460185e08,
        2.605568e08,
        2.758761e08,
        2.920141e08,
        3.090099e08,
        3.269047e08,
        3.457411e08,
        3.655636e08,
        3.864186e08,
        4.083543e08,
        4.314211e08,
        4.556712e08,
        4.811593e08,
        5.079420e08,
        5.360784e08,
        5.656298e08,
        5.966602e08,
        6.292359e08,
        6.634261e08,
        6.993024e08,
        7.369397e08,
        7.764152e08,
        8.178097e08,
        8.612069e08,
        9.066936e08,
        9.543600e08,
        1.004300e09,
        1.056611e09,
        1.111393e09,
        1.168752e09,
        1.228795e09,
        1.291637e09,
        1.357393e09,
        1.426185e09,
        1.498139e09,
        1.573384e09,
        1.652057e09,
        1.734296e09,
        1.820247e09,
        1.910060e09,
        2.003890e09,
        2.101899e09,
        2.204253e09,
        2.311125e09,
        2.422694e09,
        2.539145e09,
        2.660669e09,
        2.787464e09,
        2.919735e09,
        3.057694e09,
        3.201561e09,
        3.351562e09,
        3.507931e09,
        3.670911e09,
        3.840752e09,
        4.017712e09,
        4.202060e09,
        4.394071e09,
        4.594031e09,
    ]
)

#  ---------------------- M = 41, I = 1 ---------------------------
M = 41
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.315131e01,
        1.079811e03,
        2.965691e03,
        5.436069e03,
        8.385490e03,
        1.180644e04,
        1.574958e04,
        2.029388e04,
        2.553119e04,
        3.156166e04,
        3.849468e04,
        4.645162e04,
        5.556906e04,
        6.600179e04,
        7.792578e04,
        9.154102e04,
        1.070745e05,
        1.247831e05,
        1.449571e05,
        1.679240e05,
        1.940520e05,
        2.237552e05,
        2.574980e05,
        2.958013e05,
        3.392479e05,
        3.884899e05,
        4.442559e05,
        5.073594e05,
        5.787080e05,
        6.593131e05,
        7.503014e05,
        8.529264e05,
        9.685822e05,
        1.098818e06,
        1.245353e06,
        1.410094e06,
        1.595158e06,
        1.802885e06,
        2.035868e06,
        2.296976e06,
        2.589376e06,
        2.916568e06,
        3.282415e06,
        3.691174e06,
        4.147540e06,
        4.656680e06,
        5.224279e06,
        5.856591e06,
        6.560485e06,
        7.343508e06,
        8.213936e06,
        9.180849e06,
        1.025420e07,
        1.144487e07,
        1.276479e07,
        1.422701e07,
        1.584577e07,
        1.763664e07,
        1.961662e07,
        2.180426e07,
        2.421975e07,
        2.688513e07,
        2.982439e07,
        3.306362e07,
        3.663123e07,
        4.055806e07,
        4.487764e07,
        4.962639e07,
        5.484381e07,
        6.057274e07,
        6.685963e07,
        7.375479e07,
        8.131271e07,
        8.959236e07,
        9.865750e07,
        1.085771e08,
        1.194257e08,
        1.312836e08,
        1.442379e08,
        1.583821e08,
        1.738174e08,
        1.906527e08,
        2.090052e08,
        2.290015e08,
        2.507774e08,
        2.744793e08,
        3.002646e08,
        3.283022e08,
        3.587741e08,
        3.918751e08,
        4.278148e08,
        4.668179e08,
        5.091253e08,
        5.549954e08,
        6.047049e08,
        6.585505e08,
        7.168495e08,
        7.799418e08,
        8.481907e08,
        9.219851e08,
        1.001740e09,
        1.087900e09,
        1.180939e09,
        1.281364e09,
        1.389714e09,
        1.506566e09,
        1.632536e09,
        1.768278e09,
        1.914492e09,
        2.071922e09,
        2.241360e09,
        2.423650e09,
        2.619690e09,
        2.830436e09,
        3.056904e09,
        3.300174e09,
        3.561394e09,
        3.841784e09,
        4.142639e09,
        4.465335e09,
        4.811331e09,
        5.182177e09,
        5.579515e09,
        6.005089e09,
        6.460744e09,
        6.948439e09,
        7.470246e09,
        8.028363e09,
        8.625114e09,
        9.262960e09,
        9.944506e09,
        1.067251e10,
        1.144988e10,
        1.227970e10,
        1.316522e10,
        1.410990e10,
        1.511735e10,
        1.619142e10,
        1.733617e10,
        1.855587e10,
        1.985503e10,
        2.123842e10,
        2.271106e10,
        2.427825e10,
        2.594556e10,
        2.771889e10,
        2.960444e10,
        3.160873e10,
        3.373864e10,
        3.600142e10,
        3.840468e10,
        4.095644e10,
        4.366516e10,
        4.653969e10,
        4.958938e10,
        5.282404e10,
        5.625398e10,
        5.989006e10,
        6.374364e10,
        6.782671e10,
        7.215183e10,
        7.673218e10,
        8.158161e10,
        8.671466e10,
        9.214658e10,
        9.789336e10,
        1.039718e11,
        1.103994e11,
        1.171948e11,
        1.243772e11,
        1.319668e11,
        1.399850e11,
        1.484539e11,
        1.573968e11,
        1.668382e11,
        1.768036e11,
    ]
)

#  ---------------------- M = 41, I = 2 ---------------------------
M = 41
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.756468e01,
        2.228120e03,
        6.122297e03,
        1.122300e04,
        1.731317e04,
        2.437845e04,
        3.252465e04,
        4.191614e04,
        5.274423e04,
        6.521817e04,
        7.956715e04,
        9.604612e04,
        1.149423e05,
        1.365814e05,
        1.613342e05,
        1.896217e05,
        2.219220e05,
        2.587765e05,
        3.007971e05,
        3.486737e05,
        4.031834e05,
        4.651993e05,
        5.357021e05,
        6.157912e05,
        7.066979e05,
        8.098005e05,
        9.266395e05,
        1.058936e06,
        1.208610e06,
        1.377803e06,
        1.568902e06,
        1.784563e06,
        2.027740e06,
        2.301720e06,
        2.610149e06,
        2.957077e06,
        3.346993e06,
        3.784872e06,
        4.276222e06,
        4.827137e06,
        5.444356e06,
        6.135322e06,
        6.908250e06,
        7.772205e06,
        8.737178e06,
        9.814173e06,
        1.101530e07,
        1.235389e07,
        1.384459e07,
        1.550347e07,
        1.734820e07,
        1.939814e07,
        2.167453e07,
        2.420060e07,
        2.700184e07,
        3.010607e07,
        3.354375e07,
        3.734815e07,
        4.155558e07,
        4.620567e07,
        5.134166e07,
        5.701064e07,
        6.326393e07,
        7.015737e07,
        7.775173e07,
        8.611306e07,
        9.531315e07,
        1.054300e08,
        1.165481e08,
        1.287594e08,
        1.421633e08,
        1.568678e08,
        1.729895e08,
        1.906549e08,
        2.100008e08,
        2.311751e08,
        2.543376e08,
        2.796608e08,
        3.073314e08,
        3.375503e08,
        3.705345e08,
        4.065179e08,
        4.457524e08,
        4.885096e08,
        5.350814e08,
        5.857824e08,
        6.409505e08,
        7.009493e08,
        7.661692e08,
        8.370298e08,
        9.139812e08,
        9.975068e08,
        1.088125e09,
        1.186391e09,
        1.292901e09,
        1.408292e09,
        1.533248e09,
        1.668500e09,
        1.814831e09,
        1.973077e09,
        2.144133e09,
        2.328955e09,
        2.528564e09,
        2.744052e09,
        2.976580e09,
        3.227394e09,
        3.497816e09,
        3.789260e09,
        4.103232e09,
        4.441336e09,
        4.805281e09,
        5.196886e09,
        5.618088e09,
        6.070948e09,
        6.557656e09,
        7.080543e09,
        7.642086e09,
        8.244916e09,
        8.891828e09,
        9.585791e09,
        1.032996e10,
        1.112766e10,
        1.198246e10,
        1.289812e10,
        1.387861e10,
        1.492818e10,
        1.605128e10,
        1.725268e10,
        1.853739e10,
        1.991072e10,
        2.137831e10,
        2.294611e10,
        2.462041e10,
        2.640788e10,
        2.831554e10,
        3.035083e10,
        3.252162e10,
        3.483620e10,
        3.730333e10,
        3.993226e10,
        4.273276e10,
        4.571512e10,
        4.889021e10,
        5.226948e10,
        5.586501e10,
        5.968954e10,
        6.375646e10,
        6.807992e10,
        7.267480e10,
        7.755676e10,
        8.274231e10,
        8.824879e10,
        9.409449e10,
        1.002986e11,
        1.068814e11,
        1.138640e11,
        1.212689e11,
        1.291194e11,
        1.374404e11,
        1.462576e11,
        1.555982e11,
        1.654910e11,
        1.759658e11,
        1.870541e11,
        1.987891e11,
        2.112053e11,
        2.243391e11,
        2.382286e11,
        2.529139e11,
        2.684368e11,
        2.848412e11,
        3.021733e11,
        3.204811e11,
        3.398152e11,
        3.602284e11,
        3.817762e11,
    ]
)

#  ---------------------- M = 41, I = 3 ---------------------------
M = 41
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.640829e01,
        2.165303e03,
        5.949088e03,
        1.090578e04,
        1.682930e04,
        2.371551e04,
        3.167737e04,
        4.088260e04,
        5.152311e04,
        6.380713e04,
        7.796181e04,
        9.423931e04,
        1.129235e05,
        1.343366e05,
        1.588447e05,
        1.868645e05,
        2.188692e05,
        2.553945e05,
        2.970463e05,
        3.445084e05,
        3.985504e05,
        4.600380e05,
        5.299431e05,
        6.093559e05,
        6.994976e05,
        8.017346e05,
        9.175952e05,
        1.048786e06,
        1.197212e06,
        1.364999e06,
        1.554512e06,
        1.768388e06,
        2.009559e06,
        2.281283e06,
        2.587180e06,
        2.931268e06,
        3.318001e06,
        3.752316e06,
        4.239679e06,
        4.786137e06,
        5.398376e06,
        6.083784e06,
        6.850514e06,
        7.707561e06,
        8.664841e06,
        9.733275e06,
        1.092489e07,
        1.225290e07,
        1.373184e07,
        1.537769e07,
        1.720796e07,
        1.924188e07,
        2.150051e07,
        2.400695e07,
        2.678645e07,
        2.986667e07,
        3.327782e07,
        3.705292e07,
        4.122803e07,
        4.584250e07,
        5.093921e07,
        5.656495e07,
        6.277064e07,
        6.961172e07,
        7.714850e07,
        8.544659e07,
        9.457722e07,
        1.046178e08,
        1.156524e08,
        1.277720e08,
        1.410755e08,
        1.556700e08,
        1.716714e08,
        1.892051e08,
        2.084071e08,
        2.294241e08,
        2.524148e08,
        2.775507e08,
        3.050167e08,
        3.350126e08,
        3.677537e08,
        4.034723e08,
        4.424186e08,
        4.848620e08,
        5.310927e08,
        5.814227e08,
        6.361877e08,
        6.957486e08,
        7.604932e08,
        8.308379e08,
        9.072299e08,
        9.901490e08,
        1.080110e09,
        1.177664e09,
        1.283403e09,
        1.397960e09,
        1.522014e09,
        1.656291e09,
        1.801568e09,
        1.958675e09,
        2.128501e09,
        2.311996e09,
        2.510172e09,
        2.724114e09,
        2.954978e09,
        3.203997e09,
        3.472486e09,
        3.761848e09,
        4.073580e09,
        4.409273e09,
        4.770625e09,
        5.159443e09,
        5.577650e09,
        6.027291e09,
        6.510543e09,
        7.029720e09,
        7.587282e09,
        8.185841e09,
        8.828174e09,
        9.517228e09,
        1.025613e10,
        1.104820e10,
        1.189697e10,
        1.280617e10,
        1.377975e10,
        1.482192e10,
        1.593712e10,
        1.713006e10,
        1.840573e10,
        1.976942e10,
        2.122670e10,
        2.278350e10,
        2.444605e10,
        2.622098e10,
        2.811528e10,
        3.013632e10,
        3.229192e10,
        3.459030e10,
        3.704019e10,
        3.965075e10,
        4.243169e10,
        4.539323e10,
        4.854616e10,
        5.190187e10,
        5.547234e10,
        5.927022e10,
        6.330882e10,
        6.760219e10,
        7.216510e10,
        7.701311e10,
        8.216261e10,
        8.763084e10,
        9.343594e10,
        9.959700e10,
        1.061341e11,
        1.130683e11,
        1.204218e11,
        1.282180e11,
        1.364812e11,
        1.452374e11,
        1.545134e11,
        1.643377e11,
        1.747400e11,
        1.857517e11,
        1.974056e11,
        2.097360e11,
        2.227790e11,
        2.365727e11,
        2.511566e11,
        2.665724e11,
        2.828637e11,
        3.000762e11,
        3.182578e11,
        3.374587e11,
        3.577313e11,
        3.791307e11,
    ]
)

#  ---------------------- M = 41, I = 4 ---------------------------
M = 41
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        9.539916e01,
        4.470892e03,
        1.228501e04,
        2.252154e04,
        3.475468e04,
        4.897554e04,
        6.541725e04,
        8.442665e04,
        1.064017e05,
        1.317753e05,
        1.610212e05,
        1.946663e05,
        2.333045e05,
        2.776101e05,
        3.283502e05,
        3.863976e05,
        4.527432e05,
        5.285101e05,
        6.149681e05,
        7.135503e05,
        8.258710e05,
        9.537460e05,
        1.099215e06,
        1.264566e06,
        1.452364e06,
        1.665478e06,
        1.907122e06,
        2.180882e06,
        2.490766e06,
        2.841242e06,
        3.237293e06,
        3.684466e06,
        4.188938e06,
        4.757571e06,
        5.397996e06,
        6.118680e06,
        6.929018e06,
        7.839421e06,
        8.861424e06,
        1.000779e07,
        1.129264e07,
        1.273156e07,
        1.434179e07,
        1.614232e07,
        1.815412e07,
        2.040028e07,
        2.290621e07,
        2.569988e07,
        2.881206e07,
        3.227651e07,
        3.613034e07,
        4.041424e07,
        4.517284e07,
        5.045502e07,
        5.631431e07,
        6.280930e07,
        7.000402e07,
        7.796850e07,
        8.677916e07,
        9.651945e07,
        1.072804e08,
        1.191612e08,
        1.322698e08,
        1.467241e08,
        1.626520e08,
        1.801928e08,
        1.994978e08,
        2.207313e08,
        2.440718e08,
        2.697130e08,
        2.978648e08,
        3.287546e08,
        3.626291e08,
        3.997549e08,
        4.404208e08,
        4.849391e08,
        5.336473e08,
        5.869099e08,
        6.451208e08,
        7.087047e08,
        7.781201e08,
        8.538612e08,
        9.364606e08,
        1.026492e09,
        1.124573e09,
        1.231368e09,
        1.347593e09,
        1.474015e09,
        1.611462e09,
        1.760820e09,
        1.923041e09,
        2.099150e09,
        2.290241e09,
        2.497492e09,
        2.722164e09,
        2.965606e09,
        3.229265e09,
        3.514690e09,
        3.823537e09,
        4.157580e09,
        4.518712e09,
        4.908959e09,
        5.330485e09,
        5.785601e09,
        6.276774e09,
        6.806635e09,
        7.377994e09,
        7.993846e09,
        8.657381e09,
        9.372002e09,
        1.014133e10,
        1.096923e10,
        1.185980e10,
        1.281742e10,
        1.384672e10,
        1.495267e10,
        1.614050e10,
        1.741580e10,
        1.878451e10,
        2.025292e10,
        2.182772e10,
        2.351600e10,
        2.532529e10,
        2.726358e10,
        2.933934e10,
        3.156152e10,
        3.393966e10,
        3.648380e10,
        3.920463e10,
        4.211343e10,
        4.522214e10,
        4.854343e10,
        5.209065e10,
        5.587795e10,
        5.992028e10,
        6.423345e10,
        6.883414e10,
        7.373998e10,
        7.896960e10,
        8.454265e10,
        9.047989e10,
        9.680319e10,
        1.035357e11,
        1.107016e11,
        1.183268e11,
        1.264382e11,
        1.350644e11,
        1.442354e11,
        1.539828e11,
        1.643401e11,
        1.753422e11,
        1.870260e11,
        1.994305e11,
        2.125965e11,
        2.265670e11,
        2.413872e11,
        2.571045e11,
        2.737690e11,
        2.914332e11,
        3.101521e11,
        3.299836e11,
        3.509886e11,
        3.732309e11,
        3.967775e11,
        4.216988e11,
        4.480684e11,
        4.759638e11,
        5.054661e11,
        5.366605e11,
        5.696362e11,
        6.044865e11,
        6.413096e11,
        6.802081e11,
        7.212894e11,
        7.646663e11,
        8.104566e11,
    ]
)

#  ---------------------- M = 42, I = 1 ---------------------------
M = 42
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
        0.000000e00,
    ]
)

#  ---------------------- M = 43, I = 1 ---------------------------
M = 43
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.019112e01,
        1.905753e02,
        3.807665e02,
        5.762817e02,
        7.905060e02,
        1.038159e03,
        1.333345e03,
        1.691617e03,
        2.131702e03,
        2.676627e03,
        3.354709e03,
        4.200671e03,
        5.256974e03,
        6.575423e03,
        8.219051e03,
        1.026434e04,
        1.280384e04,
        1.594915e04,
        1.983447e04,
        2.462068e04,
        3.050003e04,
        3.770160e04,
        4.649756e04,
        5.721039e04,
        7.022113e04,
        8.597887e04,
        1.050115e05,
        1.279381e05,
        1.554830e05,
        1.884915e05,
        2.279483e05,
        2.749977e05,
        3.309668e05,
        3.973918e05,
        4.760472e05,
        5.689788e05,
        6.785415e05,
        8.074402e05,
        9.587774e05,
        1.136105e06,
        1.343483e06,
        1.585544e06,
        1.867567e06,
        2.195558e06,
        2.576338e06,
        3.017647e06,
        3.528251e06,
        4.118066e06,
        4.798292e06,
        5.581567e06,
        6.482126e06,
        7.515994e06,
        8.701176e06,
        1.005789e07,
        1.160879e07,
        1.337926e07,
        1.539769e07,
        1.769582e07,
        2.030904e07,
        2.327685e07,
        2.664322e07,
        3.045709e07,
        3.477285e07,
        3.965090e07,
        4.515827e07,
        5.136922e07,
        5.836599e07,
        6.623958e07,
        7.509054e07,
        8.502994e07,
        9.618032e07,
        1.086768e08,
        1.226681e08,
        1.383180e08,
        1.558067e08,
        1.753321e08,
        1.971114e08,
        2.213829e08,
        2.484083e08,
        2.784735e08,
        3.118921e08,
        3.490069e08,
        3.901925e08,
        4.358585e08,
        4.864516e08,
        5.424591e08,
        6.044125e08,
        6.728905e08,
        7.485237e08,
        8.319970e08,
        9.240564e08,
        1.025512e09,
        1.137243e09,
        1.260205e09,
        1.395433e09,
        1.544051e09,
        1.707273e09,
        1.886418e09,
        2.082910e09,
        2.298291e09,
        2.534229e09,
        2.792522e09,
        3.075116e09,
        3.384109e09,
        3.721764e09,
        4.090522e09,
        4.493014e09,
        4.932072e09,
        5.410747e09,
        5.932319e09,
        6.500319e09,
        7.118541e09,
        7.791064e09,
        8.522268e09,
        9.316850e09,
        1.017986e10,
        1.111670e10,
        1.213319e10,
        1.323554e10,
        1.443039e10,
        1.572490e10,
        1.712669e10,
        1.864393e10,
        2.028536e10,
        2.206030e10,
        2.397874e10,
        2.605133e10,
        2.828946e10,
        3.070527e10,
        3.331171e10,
        3.612261e10,
        3.915271e10,
        4.241771e10,
        4.593434e10,
        4.972043e10,
        5.379494e10,
        5.817805e10,
        6.289125e10,
        6.795741e10,
        7.340077e10,
        7.924717e10,
        8.552402e10,
        9.226047e10,
        9.948742e10,
        1.072377e11,
        1.155462e11,
        1.244497e11,
        1.339876e11,
        1.442013e11,
        1.551348e11,
        1.668348e11,
        1.793507e11,
        1.927348e11,
        2.070423e11,
        2.223319e11,
        2.386657e11,
        2.561090e11,
        2.747312e11,
        2.946056e11,
        3.158095e11,
        3.384248e11,
        3.625376e11,
        3.882395e11,
        4.156265e11,
        4.448002e11,
        4.758678e11,
        5.089422e11,
        5.441429e11,
        5.815953e11,
        6.214321e11,
        6.637927e11,
        7.088241e11,
        7.566812e11,
        8.075271e11,
        8.615336e11,
        9.188811e11,
    ]
)

#  ---------------------- M = 44, I = 1 ---------------------------
M = 44
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.957662e01,
        5.518291e02,
        1.102633e03,
        1.668279e03,
        2.286281e03,
        2.997450e03,
        3.838554e03,
        4.846743e03,
        6.063697e03,
        7.537981e03,
        9.326765e03,
        1.149723e04,
        1.412808e04,
        1.731129e04,
        2.115428e04,
        2.578174e04,
        3.133815e04,
        3.799064e04,
        4.593183e04,
        5.538330e04,
        6.659913e04,
        7.986998e04,
        9.552786e04,
        1.139507e05,
        1.355685e05,
        1.608685e05,
        1.904027e05,
        2.247946e05,
        2.647478e05,
        3.110535e05,
        3.646019e05,
        4.263913e05,
        4.975399e05,
        5.792987e05,
        6.730643e05,
        7.803938e05,
        9.030217e05,
        1.042876e06,
        1.202097e06,
        1.383060e06,
        1.588392e06,
        1.821003e06,
        2.084105e06,
        2.381241e06,
        2.716320e06,
        3.093641e06,
        3.517933e06,
        3.994391e06,
        4.528714e06,
        5.127151e06,
        5.796541e06,
        6.544370e06,
        7.378816e06,
        8.308808e06,
        9.344088e06,
        1.049527e07,
        1.177392e07,
        1.319260e07,
        1.476499e07,
        1.650593e07,
        1.843154e07,
        2.055927e07,
        2.290806e07,
        2.549840e07,
        2.835243e07,
        3.149414e07,
        3.494939e07,
        3.874612e07,
        4.291446e07,
        4.748690e07,
        5.249840e07,
        5.798665e07,
        6.399214e07,
        7.055842e07,
        7.773230e07,
        8.556400e07,
        9.410744e07,
        1.034204e08,
        1.135649e08,
        1.246073e08,
        1.366186e08,
        1.496748e08,
        1.638572e08,
        1.792528e08,
        1.959542e08,
        2.140605e08,
        2.336775e08,
        2.549180e08,
        2.779020e08,
        3.027576e08,
        3.296212e08,
        3.586378e08,
        3.899621e08,
        4.237580e08,
        4.602001e08,
        4.994740e08,
        5.417764e08,
        5.873165e08,
        6.363159e08,
        6.890100e08,
        7.456480e08,
        8.064942e08,
        8.718285e08,
        9.419473e08,
        1.017164e09,
        1.097811e09,
        1.184239e09,
        1.276819e09,
        1.375943e09,
        1.482026e09,
        1.595504e09,
        1.716839e09,
        1.846519e09,
        1.985058e09,
        2.132997e09,
        2.290908e09,
        2.459392e09,
        2.639085e09,
        2.830653e09,
        3.034800e09,
        3.252265e09,
        3.483827e09,
        3.730304e09,
        3.992557e09,
        4.271490e09,
        4.568055e09,
        4.883248e09,
        5.218118e09,
        5.573767e09,
        5.951348e09,
        6.352075e09,
        6.777217e09,
        7.228108e09,
        7.706145e09,
        8.212792e09,
        8.749583e09,
        9.318127e09,
        9.920104e09,
        1.055728e10,
        1.123149e10,
        1.194468e10,
        1.269885e10,
        1.349612e10,
        1.433869e10,
        1.522888e10,
        1.616909e10,
        1.716185e10,
        1.820978e10,
        1.931564e10,
        2.048228e10,
        2.171272e10,
        2.301006e10,
        2.437758e10,
        2.581868e10,
        2.733690e10,
        2.893594e10,
        3.061966e10,
        3.239208e10,
        3.425739e10,
        3.621994e10,
        3.828429e10,
        4.045517e10,
        4.273749e10,
        4.513640e10,
        4.765723e10,
        5.030553e10,
        5.308708e10,
        5.600790e10,
        5.907422e10,
        6.229255e10,
        6.566964e10,
        6.921252e10,
        7.292848e10,
        7.682509e10,
        8.091023e10,
        8.519208e10,
    ]
)

#  ---------------------- M = 44, I = 2 ---------------------------
M = 44
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.026479e01,
        3.788677e02,
        7.570816e02,
        1.145507e03,
        1.569915e03,
        2.058345e03,
        2.636068e03,
        3.328628e03,
        4.164690e03,
        5.177665e03,
        6.406892e03,
        7.898611e03,
        9.707022e03,
        1.189546e04,
        1.453793e04,
        1.772040e04,
        2.154245e04,
        2.611938e04,
        3.158409e04,
        3.808955e04,
        4.581120e04,
        5.494989e04,
        6.573509e04,
        7.842821e04,
        9.332667e04,
        1.107679e05,
        1.311340e05,
        1.548574e05,
        1.824256e05,
        2.143877e05,
        2.513616e05,
        2.940409e05,
        3.432024e05,
        3.997164e05,
        4.645548e05,
        5.388019e05,
        6.236663e05,
        7.204925e05,
        8.307742e05,
        9.561694e05,
        1.098515e06,
        1.259846e06,
        1.442409e06,
        1.648688e06,
        1.881421e06,
        2.143626e06,
        2.438622e06,
        2.770061e06,
        3.141951e06,
        3.558689e06,
        4.025097e06,
        4.546452e06,
        5.128527e06,
        5.777632e06,
        6.500654e06,
        7.305109e06,
        8.199187e06,
        9.191807e06,
        1.029267e07,
        1.151234e07,
        1.286226e07,
        1.435488e07,
        1.600369e07,
        1.782331e07,
        1.982959e07,
        2.203965e07,
        2.447203e07,
        2.714675e07,
        3.008544e07,
        3.331144e07,
        3.684992e07,
        4.072800e07,
        4.497489e07,
        4.962204e07,
        5.470328e07,
        6.025497e07,
        6.631617e07,
        7.292885e07,
        8.013801e07,
        8.799194e07,
        9.654241e07,
        1.058449e08,
        1.159587e08,
        1.269474e08,
        1.388789e08,
        1.518261e08,
        1.658664e08,
        1.810828e08,
        1.975638e08,
        2.154040e08,
        2.347039e08,
        2.555711e08,
        2.781199e08,
        3.024721e08,
        3.287576e08,
        3.571142e08,
        3.876889e08,
        4.206376e08,
        4.561262e08,
        4.943310e08,
        5.354389e08,
        5.796485e08,
        6.271706e08,
        6.782284e08,
        7.330590e08,
        7.919132e08,
        8.550571e08,
        9.227721e08,
        9.953563e08,
        1.073125e09,
        1.156413e09,
        1.245571e09,
        1.340974e09,
        1.443015e09,
        1.552110e09,
        1.668700e09,
        1.793248e09,
        1.926244e09,
        2.068205e09,
        2.219676e09,
        2.381232e09,
        2.553477e09,
        2.737051e09,
        2.932625e09,
        3.140908e09,
        3.362643e09,
        3.598617e09,
        3.849653e09,
        4.116620e09,
        4.400430e09,
        4.702043e09,
        5.022468e09,
        5.362763e09,
        5.724042e09,
        6.107473e09,
        6.514284e09,
        6.945762e09,
        7.403258e09,
        7.888191e09,
        8.402048e09,
        8.946386e09,
        9.522842e09,
        1.013313e10,
        1.077904e10,
        1.146245e10,
        1.218534e10,
        1.294977e10,
        1.375789e10,
        1.461196e10,
        1.551435e10,
        1.646753e10,
        1.747409e10,
        1.853673e10,
        1.965827e10,
        2.084169e10,
        2.209005e10,
        2.340660e10,
        2.479470e10,
        2.625787e10,
        2.779978e10,
        2.942429e10,
        3.113539e10,
        3.293726e10,
        3.483426e10,
        3.683096e10,
        3.893208e10,
        4.114258e10,
        4.346763e10,
        4.591259e10,
        4.848308e10,
        5.118493e10,
        5.402423e10,
        5.700733e10,
        6.014081e10,
        6.343157e10,
        6.688675e10,
    ]
)

#  ---------------------- M = 44, I = 3 ---------------------------
M = 44
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.938131e01,
        1.108247e03,
        2.214517e03,
        3.350727e03,
        4.592300e03,
        6.021313e03,
        7.711766e03,
        9.738490e03,
        1.218549e04,
        1.515071e04,
        1.874951e04,
        2.311752e04,
        2.841381e04,
        3.482427e04,
        4.256628e04,
        5.189234e04,
        6.309521e04,
        7.651387e04,
        9.253932e04,
        1.116218e05,
        1.342779e05,
        1.610995e05,
        1.927630e05,
        2.300395e05,
        2.738067e05,
        3.250609e05,
        3.849317e05,
        4.546970e05,
        5.357995e05,
        6.298651e05,
        7.387238e05,
        8.644319e05,
        1.009295e06,
        1.175895e06,
        1.367122e06,
        1.586198e06,
        1.836720e06,
        2.122693e06,
        2.448568e06,
        2.819290e06,
        3.240346e06,
        3.717812e06,
        4.258411e06,
        4.869576e06,
        5.559511e06,
        6.337263e06,
        7.212800e06,
        8.197089e06,
        9.302184e06,
        1.054133e07,
        1.192904e07,
        1.348124e07,
        1.521536e07,
        1.715048e07,
        1.930742e07,
        2.170896e07,
        2.437993e07,
        2.734741e07,
        3.064087e07,
        3.429243e07,
        3.833699e07,
        4.281248e07,
        4.776010e07,
        5.322453e07,
        5.925423e07,
        6.590171e07,
        7.322381e07,
        8.128204e07,
        9.014290e07,
        9.987824e07,
        1.105657e08,
        1.222889e08,
        1.351382e08,
        1.492109e08,
        1.646119e08,
        1.814539e08,
        1.998583e08,
        2.199558e08,
        2.418865e08,
        2.658011e08,
        2.918612e08,
        3.202405e08,
        3.511248e08,
        3.847136e08,
        4.212204e08,
        4.608738e08,
        5.039185e08,
        5.506162e08,
        6.012466e08,
        6.561088e08,
        7.155218e08,
        7.798268e08,
        8.493872e08,
        9.245912e08,
        1.005852e09,
        1.093611e09,
        1.188338e09,
        1.290532e09,
        1.400726e09,
        1.519485e09,
        1.647413e09,
        1.785148e09,
        1.933372e09,
        2.092806e09,
        2.264219e09,
        2.448424e09,
        2.646286e09,
        2.858721e09,
        3.086701e09,
        3.331257e09,
        3.593479e09,
        3.874525e09,
        4.175617e09,
        4.498052e09,
        4.843200e09,
        5.212513e09,
        5.607523e09,
        6.029851e09,
        6.481212e09,
        6.963415e09,
        7.478371e09,
        8.028099e09,
        8.614729e09,
        9.240508e09,
        9.907808e09,
        1.061913e10,
        1.137711e10,
        1.218453e10,
        1.304431e10,
        1.395953e10,
        1.493346e10,
        1.596950e10,
        1.707126e10,
        1.824252e10,
        1.948726e10,
        2.080968e10,
        2.221419e10,
        2.370541e10,
        2.528822e10,
        2.696772e10,
        2.874930e10,
        3.063859e10,
        3.264151e10,
        3.476429e10,
        3.701345e10,
        3.939584e10,
        4.191864e10,
        4.458939e10,
        4.741597e10,
        5.040668e10,
        5.357018e10,
        5.691557e10,
        6.045237e10,
        6.419056e10,
        6.814058e10,
        7.231337e10,
        7.672038e10,
        8.137359e10,
        8.628553e10,
        9.146932e10,
        9.693866e10,
        1.027079e11,
        1.087920e11,
        1.152067e11,
        1.219684e11,
        1.290941e11,
        1.366017e11,
        1.445099e11,
        1.528383e11,
        1.616071e11,
        1.708377e11,
        1.805521e11,
        1.907737e11,
        2.015265e11,
        2.128357e11,
        2.247276e11,
    ]
)

#  ---------------------- M = 44, I = 4 ---------------------------
M = 44
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.938661e01,
        1.108336e03,
        2.214589e03,
        3.350570e03,
        4.591574e03,
        6.019498e03,
        7.708091e03,
        9.731833e03,
        1.217425e04,
        1.513263e04,
        1.872146e04,
        2.307521e04,
        2.835138e04,
        3.473390e04,
        4.243751e04,
        5.171140e04,
        6.284408e04,
        7.616915e04,
        9.207088e04,
        1.109911e05,
        1.334360e05,
        1.599844e05,
        1.912971e05,
        2.281258e05,
        2.713248e05,
        3.218620e05,
        3.808325e05,
        4.494733e05,
        5.291779e05,
        6.215133e05,
        7.282402e05,
        8.513320e05,
        9.929969e05,
        1.155703e06,
        1.342204e06,
        1.555566e06,
        1.799202e06,
        2.076901e06,
        2.392867e06,
        2.751758e06,
        3.158724e06,
        3.619459e06,
        4.140242e06,
        4.727999e06,
        5.390348e06,
        6.135671e06,
        6.973171e06,
        7.912946e06,
        8.966061e06,
        1.014463e07,
        1.146190e07,
        1.293235e07,
        1.457177e07,
        1.639738e07,
        1.842795e07,
        2.068389e07,
        2.318741e07,
        2.596262e07,
        2.903569e07,
        3.243502e07,
        3.619134e07,
        4.033796e07,
        4.491089e07,
        4.994905e07,
        5.549449e07,
        6.159258e07,
        6.829223e07,
        7.564616e07,
        8.371114e07,
        9.254824e07,
        1.022231e08,
        1.128064e08,
        1.243737e08,
        1.370064e08,
        1.507918e08,
        1.658230e08,
        1.822004e08,
        2.000307e08,
        2.194287e08,
        2.405167e08,
        2.634254e08,
        2.882945e08,
        3.152730e08,
        3.445196e08,
        3.762037e08,
        4.105057e08,
        4.476175e08,
        4.877435e08,
        5.311009e08,
        5.779207e08,
        6.284482e08,
        6.829439e08,
        7.416843e08,
        8.049627e08,
        8.730900e08,
        9.463957e08,
        1.025229e09,
        1.109959e09,
        1.200977e09,
        1.298696e09,
        1.403554e09,
        1.516013e09,
        1.636560e09,
        1.765712e09,
        1.904012e09,
        2.052033e09,
        2.210381e09,
        2.379692e09,
        2.560640e09,
        2.753931e09,
        2.960311e09,
        3.180562e09,
        3.415509e09,
        3.666020e09,
        3.933004e09,
        4.217420e09,
        4.520273e09,
        4.842618e09,
        5.185562e09,
        5.550269e09,
        5.937956e09,
        6.349900e09,
        6.787441e09,
        7.251982e09,
        7.744989e09,
        8.268002e09,
        8.822629e09,
        9.410552e09,
        1.003353e10,
        1.069341e10,
        1.139211e10,
        1.213163e10,
        1.291408e10,
        1.374165e10,
        1.461662e10,
        1.554138e10,
        1.651842e10,
        1.755032e10,
        1.863980e10,
        1.978967e10,
        2.100286e10,
        2.228244e10,
        2.363158e10,
        2.505360e10,
        2.655195e10,
        2.813020e10,
        2.979208e10,
        3.154147e10,
        3.338240e10,
        3.531905e10,
        3.735576e10,
        3.949704e10,
        4.174758e10,
        4.411223e10,
        4.659605e10,
        4.920424e10,
        5.194225e10,
        5.481567e10,
        5.783035e10,
        6.099230e10,
        6.430779e10,
        6.778327e10,
        7.142544e10,
        7.524123e10,
        7.923781e10,
        8.342260e10,
        8.780325e10,
        9.238769e10,
        9.718412e10,
        1.022010e11,
        1.074470e11,
        1.129313e11,
        1.186630e11,
        1.246519e11,
        1.309079e11,
        1.374411e11,
    ]
)

#  ---------------------- M = 44, I = 5 ---------------------------
M = 44
I = 5
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.090077e01,
        1.138773e03,
        2.275792e03,
        3.443921e03,
        4.720878e03,
        6.191305e03,
        7.931657e03,
        1.001940e04,
        1.254164e04,
        1.560008e04,
        1.931466e04,
        2.382667e04,
        2.930200e04,
        3.593494e04,
        4.395300e04,
        5.362102e04,
        6.524665e04,
        7.918681e04,
        9.585408e04,
        1.157246e05,
        1.393459e05,
        1.673468e05,
        2.004476e05,
        2.394715e05,
        2.853580e05,
        3.391763e05,
        4.021417e05,
        4.756331e05,
        5.612115e05,
        6.606413e05,
        7.759143e05,
        9.092750e05,
        1.063248e06,
        1.240670e06,
        1.444723e06,
        1.678972e06,
        1.947406e06,
        2.254480e06,
        2.605165e06,
        3.005004e06,
        3.460163e06,
        3.977501e06,
        4.564632e06,
        5.230003e06,
        5.982976e06,
        6.833909e06,
        7.794262e06,
        8.876687e06,
        1.009515e07,
        1.146505e07,
        1.300334e07,
        1.472869e07,
        1.666160e07,
        1.882462e07,
        2.124247e07,
        2.394228e07,
        2.695376e07,
        3.030945e07,
        3.404492e07,
        3.819908e07,
        4.281440e07,
        4.793725e07,
        5.361820e07,
        5.991235e07,
        6.687972e07,
        7.458561e07,
        8.310104e07,
        9.250322e07,
        1.028760e08,
        1.143103e08,
        1.269049e08,
        1.407668e08,
        1.560118e08,
        1.727656e08,
        1.911638e08,
        2.113534e08,
        2.334931e08,
        2.577542e08,
        2.843221e08,
        3.133963e08,
        3.451922e08,
        3.799422e08,
        4.178961e08,
        4.593235e08,
        5.045140e08,
        5.537796e08,
        6.074553e08,
        6.659014e08,
        7.295048e08,
        7.986808e08,
        8.738752e08,
        9.555661e08,
        1.044266e09,
        1.140524e09,
        1.244930e09,
        1.358112e09,
        1.480745e09,
        1.613551e09,
        1.757301e09,
        1.912819e09,
        2.080987e09,
        2.262745e09,
        2.459099e09,
        2.671121e09,
        2.899954e09,
        3.146818e09,
        3.413014e09,
        3.699928e09,
        4.009035e09,
        4.341907e09,
        4.700218e09,
        5.085748e09,
        5.500390e09,
        5.946158e09,
        6.425194e09,
        6.939770e09,
        7.492304e09,
        8.085362e09,
        8.721666e09,
        9.404108e09,
        1.013575e10,
        1.091986e10,
        1.175986e10,
        1.265943e10,
        1.362243e10,
        1.465296e10,
        1.575536e10,
        1.693424e10,
        1.819446e10,
        1.954117e10,
        2.097981e10,
        2.251614e10,
        2.415625e10,
        2.590657e10,
        2.777389e10,
        2.976540e10,
        3.188867e10,
        3.415170e10,
        3.656294e10,
        3.913129e10,
        4.186616e10,
        4.477745e10,
        4.787562e10,
        5.117167e10,
        5.467720e10,
        5.840445e10,
        6.236629e10,
        6.657628e10,
        7.104869e10,
        7.579854e10,
        8.084163e10,
        8.619460e10,
        9.187493e10,
        9.790101e10,
        1.042922e11,
        1.110687e11,
        1.182520e11,
        1.258645e11,
        1.339296e11,
        1.424723e11,
        1.515183e11,
        1.610951e11,
        1.712311e11,
        1.819564e11,
        1.933025e11,
        2.053023e11,
        2.179905e11,
        2.314034e11,
        2.455790e11,
        2.605572e11,
        2.763796e11,
        2.930901e11,
        3.107345e11,
        3.293607e11,
        3.490188e11,
        3.697615e11,
    ]
)

#  ---------------------- M = 44, I = 6 ---------------------------
M = 44
I = 6
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        4.755283e01,
        8.917192e02,
        1.782495e03,
        2.702949e03,
        3.721375e03,
        4.909994e03,
        6.337485e03,
        8.078305e03,
        1.021922e04,
        1.286259e04,
        1.613004e04,
        2.016576e04,
        2.514031e04,
        3.125496e04,
        3.874699e04,
        4.789457e04,
        5.902344e04,
        7.251376e04,
        8.880723e04,
        1.084165e05,
        1.319339e05,
        1.600430e05,
        1.935301e05,
        2.332972e05,
        2.803772e05,
        3.359502e05,
        4.013610e05,
        4.781392e05,
        5.680217e05,
        6.729762e05,
        7.952284e05,
        9.372903e05,
        1.101993e06,
        1.292522e06,
        1.512454e06,
        1.765801e06,
        2.057055e06,
        2.391235e06,
        2.773948e06,
        3.211440e06,
        3.710667e06,
        4.279359e06,
        4.926097e06,
        5.660397e06,
        6.492793e06,
        7.434939e06,
        8.499703e06,
        9.701287e06,
        1.105534e07,
        1.257909e07,
        1.429147e07,
        1.621329e07,
        1.836739e07,
        2.077878e07,
        2.347487e07,
        2.648563e07,
        2.984384e07,
        3.358525e07,
        3.774889e07,
        4.237729e07,
        4.751677e07,
        5.321771e07,
        5.953488e07,
        6.652777e07,
        7.426095e07,
        8.280442e07,
        9.223405e07,
        1.026320e08,
        1.140870e08,
        1.266953e08,
        1.405605e08,
        1.557947e08,
        1.725188e08,
        1.908630e08,
        2.109676e08,
        2.329838e08,
        2.570740e08,
        2.834131e08,
        3.121888e08,
        3.436027e08,
        3.778713e08,
        4.152266e08,
        4.559173e08,
        5.002100e08,
        5.483899e08,
        6.007624e08,
        6.576539e08,
        7.194134e08,
        7.864137e08,
        8.590528e08,
        9.377556e08,
        1.022975e09,
        1.115194e09,
        1.214928e09,
        1.322724e09,
        1.439167e09,
        1.564877e09,
        1.700514e09,
        1.846781e09,
        2.004423e09,
        2.174233e09,
        2.357051e09,
        2.553770e09,
        2.765338e09,
        2.992756e09,
        3.237090e09,
        3.499466e09,
        3.781077e09,
        4.083186e09,
        4.407130e09,
        4.754323e09,
        5.126259e09,
        5.524518e09,
        5.950769e09,
        6.406775e09,
        6.894396e09,
        7.415596e09,
        7.972447e09,
        8.567134e09,
        9.201960e09,
        9.879354e09,
        1.060187e10,
        1.137221e10,
        1.219320e10,
        1.306783e10,
        1.399924e10,
        1.499073e10,
        1.604578e10,
        1.716804e10,
        1.836135e10,
        1.962973e10,
        2.097741e10,
        2.240886e10,
        2.392872e10,
        2.554190e10,
        2.725353e10,
        2.906899e10,
        3.099394e10,
        3.303430e10,
        3.519625e10,
        3.748631e10,
        3.991127e10,
        4.247826e10,
        4.519474e10,
        4.806852e10,
        5.110775e10,
        5.432098e10,
        5.771714e10,
        6.130557e10,
        6.509603e10,
        6.909872e10,
        7.332428e10,
        7.778385e10,
        8.248906e10,
        8.745202e10,
        9.268540e10,
        9.820242e10,
        1.040169e11,
        1.101431e11,
        1.165961e11,
        1.233916e11,
        1.305458e11,
        1.380757e11,
        1.459989e11,
        1.543341e11,
        1.631002e11,
        1.723174e11,
        1.820064e11,
        1.921888e11,
        2.028874e11,
        2.141254e11,
        2.259273e11,
        2.383185e11,
        2.513254e11,
        2.649754e11,
        2.792970e11,
    ]
)

#  ---------------------- M = 45, I = 1 ---------------------------
M = 45
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.000000e00,
        1.001788e00,
        1.126881e00,
        1.526206e00,
        2.077149e00,
        2.667730e00,
        3.249956e00,
        3.809254e00,
        4.344827e00,
        4.860660e00,
        5.361676e00,
        5.852264e00,
        6.335855e00,
        6.814950e00,
        7.291287e00,
        7.766034e00,
        8.239959e00,
        8.713552e00,
        9.187121e00,
        9.660856e00,
        1.013487e01,
        1.060924e01,
        1.108399e01,
        1.155914e01,
        1.203472e01,
        1.251071e01,
        1.298713e01,
        1.346397e01,
        1.394124e01,
        1.441895e01,
        1.489709e01,
        1.537567e01,
        1.585471e01,
        1.633422e01,
        1.681420e01,
        1.729468e01,
        1.777567e01,
        1.825719e01,
        1.873927e01,
        1.922193e01,
        1.970520e01,
        2.018910e01,
        2.067367e01,
        2.115894e01,
        2.164494e01,
        2.213171e01,
        2.261929e01,
        2.310771e01,
        2.359701e01,
        2.408724e01,
        2.457844e01,
        2.507064e01,
        2.556390e01,
        2.605825e01,
        2.655374e01,
        2.705042e01,
        2.754832e01,
        2.804751e01,
        2.854802e01,
        2.904991e01,
        2.955321e01,
        3.005797e01,
        3.056425e01,
        3.107208e01,
        3.158152e01,
        3.209261e01,
        3.260540e01,
        3.311994e01,
        3.363627e01,
        3.415443e01,
        3.467448e01,
        3.519645e01,
        3.572040e01,
        3.624636e01,
        3.677439e01,
        3.730452e01,
        3.783680e01,
        3.837127e01,
        3.890798e01,
        3.944696e01,
        3.998826e01,
        4.053192e01,
        4.107798e01,
        4.162648e01,
        4.217746e01,
        4.273095e01,
        4.328701e01,
        4.384566e01,
        4.440694e01,
        4.497089e01,
        4.553755e01,
        4.610696e01,
        4.667914e01,
        4.725414e01,
        4.783199e01,
        4.841272e01,
        4.899637e01,
        4.958297e01,
        5.017256e01,
        5.076516e01,
        5.136081e01,
        5.195955e01,
        5.256139e01,
        5.316638e01,
        5.377454e01,
        5.438591e01,
        5.500051e01,
        5.561837e01,
        5.623952e01,
        5.686400e01,
        5.749182e01,
        5.812302e01,
        5.875762e01,
        5.939565e01,
        6.003713e01,
        6.068210e01,
        6.133059e01,
        6.198260e01,
        6.263818e01,
        6.329734e01,
        6.396011e01,
        6.462652e01,
        6.529658e01,
        6.597033e01,
        6.664778e01,
        6.732897e01,
        6.801391e01,
        6.870262e01,
        6.939513e01,
        7.009147e01,
        7.079164e01,
        7.149568e01,
        7.220361e01,
        7.291544e01,
        7.363121e01,
        7.435092e01,
        7.507461e01,
        7.580228e01,
        7.653397e01,
        7.726969e01,
        7.800946e01,
        7.875330e01,
        7.950123e01,
        8.025328e01,
        8.100945e01,
        8.176978e01,
        8.253427e01,
        8.330295e01,
        8.407583e01,
        8.485294e01,
        8.563429e01,
        8.641990e01,
        8.720979e01,
        8.800398e01,
        8.880249e01,
        8.960532e01,
        9.041251e01,
        9.122406e01,
        9.204000e01,
        9.286034e01,
        9.368510e01,
        9.451430e01,
        9.534795e01,
        9.618607e01,
        9.702868e01,
        9.787579e01,
        9.872743e01,
        9.958360e01,
        1.004443e02,
        1.013096e02,
        1.021795e02,
        1.030540e02,
        1.039331e02,
        1.048168e02,
        1.057052e02,
        1.065983e02,
        1.074960e02,
        1.083984e02,
        1.093056e02,
        1.102175e02,
        1.111341e02,
        1.120555e02,
        1.129816e02,
        1.139126e02,
        1.148484e02,
        1.157890e02,
        1.167344e02,
        1.176847e02,
        1.186398e02,
        1.195998e02,
        1.205648e02,
        1.215346e02,
        1.225094e02,
        1.234891e02,
        1.244738e02,
        1.254635e02,
        1.264581e02,
        1.274578e02,
        1.284624e02,
        1.294721e02,
        1.304869e02,
        1.315067e02,
        1.325316e02,
        1.335616e02,
        1.345967e02,
        1.356369e02,
        1.366822e02,
        1.377327e02,
        1.387884e02,
        1.398492e02,
        1.409153e02,
        1.419865e02,
        1.430630e02,
        1.441447e02,
        1.452317e02,
        1.463239e02,
        1.474214e02,
        1.485242e02,
        1.496323e02,
        1.507458e02,
        1.518645e02,
        1.529887e02,
        1.541181e02,
        1.552530e02,
        1.563932e02,
        1.575389e02,
        1.586900e02,
        1.598465e02,
        1.610084e02,
        1.621758e02,
        1.633487e02,
        1.645271e02,
        1.657110e02,
        1.669004e02,
        1.680953e02,
        1.692957e02,
        1.705017e02,
        1.717133e02,
        1.729305e02,
        1.741532e02,
        1.753815e02,
        1.766155e02,
        1.778551e02,
        1.791004e02,
        1.803513e02,
        1.816078e02,
        1.828701e02,
        1.841380e02,
        1.854117e02,
        1.866910e02,
        1.879761e02,
        1.892670e02,
        1.905636e02,
        1.918659e02,
        1.931741e02,
        1.944880e02,
        1.958078e02,
        1.971333e02,
        1.984647e02,
        1.998019e02,
        2.011450e02,
        2.024939e02,
        2.038487e02,
        2.052094e02,
        2.065760e02,
        2.079485e02,
        2.093269e02,
        2.107112e02,
        2.121014e02,
        2.134977e02,
        2.148998e02,
        2.163080e02,
        2.177221e02,
        2.191422e02,
        2.205683e02,
        2.220004e02,
        2.234386e02,
        2.248827e02,
        2.263329e02,
        2.277892e02,
        2.292515e02,
        2.307199e02,
        2.321943e02,
        2.336749e02,
        2.351615e02,
        2.366543e02,
        2.381531e02,
        2.396581e02,
        2.411692e02,
        2.426864e02,
        2.442098e02,
        2.457394e02,
        2.472751e02,
        2.488169e02,
        2.503650e02,
        2.519192e02,
        2.534797e02,
        2.550463e02,
        2.566191e02,
        2.581982e02,
        2.597835e02,
    ]
)

#  ---------------------- M = 45, I = 2 ---------------------------
M = 45
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[1]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.000000e00,
        6.029347e00,
        6.728818e00,
        8.168283e00,
        9.865998e00,
        1.164890e01,
        1.346792e01,
        1.530608e01,
        1.715597e01,
        1.901383e01,
        2.087753e01,
        2.274575e01,
        2.461767e01,
        2.649271e01,
        2.837047e01,
        3.025068e01,
        3.213312e01,
        3.401765e01,
        3.590412e01,
        3.779247e01,
        3.968262e01,
        4.157454e01,
        4.346818e01,
        4.536356e01,
        4.726067e01,
        4.915955e01,
        5.106023e01,
        5.296280e01,
        5.486733e01,
        5.677392e01,
        5.868270e01,
        6.059382e01,
        6.250744e01,
        6.442372e01,
        6.634288e01,
        6.826512e01,
        7.019067e01,
        7.211977e01,
        7.405266e01,
        7.598962e01,
        7.793091e01,
        7.987682e01,
        8.182762e01,
        8.378361e01,
        8.574509e01,
        8.771234e01,
        8.968568e01,
        9.166539e01,
        9.365178e01,
        9.564515e01,
        9.764579e01,
        9.965399e01,
        1.016701e02,
        1.036943e02,
        1.057269e02,
        1.077682e02,
        1.098186e02,
        1.118781e02,
        1.139472e02,
        1.160261e02,
        1.181150e02,
        1.202141e02,
        1.223238e02,
        1.244442e02,
        1.265756e02,
        1.287182e02,
        1.308723e02,
        1.330380e02,
        1.352155e02,
        1.374051e02,
        1.396070e02,
        1.418213e02,
        1.440482e02,
        1.462879e02,
        1.485407e02,
        1.508066e02,
        1.530859e02,
        1.553786e02,
        1.576850e02,
        1.600053e02,
        1.623395e02,
        1.646878e02,
        1.670504e02,
        1.694274e02,
        1.718190e02,
        1.742252e02,
        1.766463e02,
        1.790823e02,
        1.815333e02,
        1.839996e02,
        1.864811e02,
        1.889781e02,
        1.914906e02,
        1.940188e02,
        1.965627e02,
        1.991225e02,
        2.016983e02,
        2.042901e02,
        2.068981e02,
        2.095224e02,
        2.121631e02,
        2.148202e02,
        2.174939e02,
        2.201843e02,
        2.228913e02,
        2.256153e02,
        2.283561e02,
        2.311140e02,
        2.338889e02,
        2.366811e02,
        2.394905e02,
        2.423172e02,
        2.451614e02,
        2.480230e02,
        2.509023e02,
        2.537992e02,
        2.567138e02,
        2.596462e02,
        2.625966e02,
        2.655649e02,
        2.685512e02,
        2.715556e02,
        2.745782e02,
        2.776191e02,
        2.806782e02,
        2.837558e02,
        2.868518e02,
        2.899664e02,
        2.930995e02,
        2.962513e02,
        2.994219e02,
        3.026112e02,
        3.058195e02,
        3.090466e02,
        3.122928e02,
        3.155580e02,
        3.188423e02,
        3.221459e02,
        3.254687e02,
        3.288109e02,
        3.321724e02,
        3.355534e02,
        3.389539e02,
        3.423740e02,
        3.458138e02,
        3.492732e02,
        3.527525e02,
        3.562516e02,
        3.597706e02,
        3.633095e02,
        3.668685e02,
        3.704476e02,
        3.740468e02,
        3.776663e02,
        3.813061e02,
        3.849662e02,
        3.886467e02,
        3.923476e02,
        3.960692e02,
        3.998113e02,
        4.035740e02,
        4.073576e02,
        4.111618e02,
        4.149870e02,
        4.188330e02,
        4.227001e02,
        4.265882e02,
        4.304974e02,
        4.344277e02,
        4.383793e02,
        4.423522e02,
        4.463464e02,
        4.503621e02,
        4.543992e02,
        4.584579e02,
        4.625383e02,
        4.666403e02,
        4.707640e02,
        4.749095e02,
        4.790770e02,
        4.832663e02,
        4.874777e02,
        4.917111e02,
        4.959667e02,
        5.002444e02,
        5.045444e02,
        5.088667e02,
        5.132115e02,
        5.175787e02,
        5.219684e02,
        5.263806e02,
        5.308156e02,
        5.352732e02,
        5.397537e02,
        5.442570e02,
        5.487832e02,
        5.533323e02,
        5.579046e02,
        5.624999e02,
        5.671184e02,
        5.717602e02,
        5.764253e02,
        5.811137e02,
        5.858256e02,
        5.905610e02,
        5.953200e02,
        6.001026e02,
        6.049090e02,
        6.097391e02,
        6.145930e02,
        6.194709e02,
        6.243727e02,
        6.292986e02,
        6.342486e02,
        6.392228e02,
        6.442212e02,
        6.492439e02,
        6.542909e02,
        6.593625e02,
        6.644585e02,
        6.695791e02,
        6.747243e02,
        6.798943e02,
        6.850890e02,
        6.903085e02,
        6.955530e02,
        7.008224e02,
        7.061168e02,
        7.114364e02,
        7.167811e02,
        7.221510e02,
        7.275463e02,
        7.329669e02,
        7.384129e02,
        7.438844e02,
        7.493815e02,
        7.549042e02,
        7.604525e02,
        7.660266e02,
        7.716266e02,
        7.772523e02,
        7.829041e02,
        7.885818e02,
        7.942856e02,
        8.000155e02,
        8.057716e02,
        8.115539e02,
        8.173626e02,
        8.231976e02,
        8.290591e02,
        8.349470e02,
        8.408615e02,
        8.468026e02,
        8.527704e02,
        8.587650e02,
        8.647863e02,
        8.708345e02,
        8.769095e02,
        8.830116e02,
        8.891406e02,
        8.952968e02,
        9.014801e02,
        9.076906e02,
        9.139283e02,
        9.201934e02,
        9.264858e02,
        9.328056e02,
        9.391529e02,
        9.455278e02,
        9.519302e02,
        9.583602e02,
        9.648179e02,
        9.713034e02,
        9.778167e02,
        9.843578e02,
        9.909268e02,
        9.975237e02,
        1.004149e03,
        1.010802e03,
        1.017483e03,
        1.024192e03,
        1.030929e03,
        1.037695e03,
        1.044489e03,
        1.051311e03,
        1.058162e03,
        1.065041e03,
        1.071948e03,
        1.078884e03,
        1.085849e03,
        1.092842e03,
        1.099863e03,
        1.106914e03,
        1.113993e03,
        1.121101e03,
        1.128237e03,
        1.135403e03,
        1.142597e03,
        1.149821e03,
        1.157073e03,
        1.164354e03,
    ]
)

#  ---------------------- M = 46, I = 1 ---------------------------
M = 46
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.290560e00,
        1.735586e01,
        3.438114e01,
        5.141645e01,
        6.846079e01,
        8.551397e01,
        1.025760e02,
        1.196469e02,
        1.367275e02,
        1.538201e02,
        1.709292e02,
        1.880624e02,
        2.052309e02,
        2.224487e02,
        2.397327e02,
        2.571016e02,
        2.745752e02,
        2.921739e02,
        3.099177e02,
        3.278264e02,
        3.459187e02,
        3.642124e02,
        3.827237e02,
        4.014681e02,
        4.204596e02,
        4.397109e02,
        4.592337e02,
        4.790386e02,
        4.991353e02,
        5.195323e02,
        5.402377e02,
        5.612585e02,
        5.826011e02,
        6.042715e02,
        6.262748e02,
        6.486160e02,
        6.712993e02,
        6.943287e02,
        7.177078e02,
        7.414400e02,
        7.655282e02,
        7.899751e02,
        8.147835e02,
        8.399554e02,
        8.654931e02,
        8.913986e02,
        9.176737e02,
        9.443201e02,
        9.713393e02,
        9.987328e02,
        1.026502e03,
        1.054648e03,
        1.083173e03,
        1.112076e03,
        1.141360e03,
        1.171026e03,
        1.201073e03,
        1.231504e03,
        1.262319e03,
        1.293518e03,
        1.325104e03,
        1.357075e03,
        1.389434e03,
        1.422180e03,
        1.455315e03,
        1.488838e03,
        1.522751e03,
        1.557055e03,
        1.591749e03,
        1.626834e03,
        1.662311e03,
        1.698180e03,
        1.734442e03,
        1.771097e03,
        1.808146e03,
        1.845590e03,
        1.883427e03,
        1.921660e03,
        1.960288e03,
        1.999313e03,
        2.038733e03,
        2.078551e03,
        2.118765e03,
        2.159377e03,
        2.200387e03,
        2.241795e03,
        2.283602e03,
        2.325808e03,
        2.368413e03,
        2.411418e03,
        2.454824e03,
        2.498630e03,
        2.542836e03,
        2.587444e03,
        2.632454e03,
        2.677865e03,
        2.723679e03,
        2.769895e03,
        2.816514e03,
        2.863536e03,
        2.910962e03,
        2.958792e03,
        3.007026e03,
        3.055665e03,
        3.104709e03,
        3.154158e03,
        3.204012e03,
        3.254272e03,
        3.304939e03,
        3.356012e03,
        3.407492e03,
        3.459379e03,
        3.511673e03,
        3.564376e03,
        3.617486e03,
        3.671005e03,
        3.724933e03,
        3.779269e03,
        3.834015e03,
        3.889171e03,
        3.944736e03,
        4.000712e03,
        4.057099e03,
        4.113896e03,
        4.171105e03,
        4.228725e03,
        4.286756e03,
        4.345200e03,
        4.404057e03,
        4.463326e03,
        4.523008e03,
        4.583104e03,
        4.643613e03,
        4.704536e03,
        4.765873e03,
        4.827625e03,
        4.889792e03,
        4.952374e03,
        5.015371e03,
        5.078784e03,
        5.142613e03,
        5.206859e03,
        5.271521e03,
        5.336600e03,
        5.402097e03,
        5.468011e03,
        5.534343e03,
        5.601093e03,
        5.668261e03,
        5.735848e03,
        5.803855e03,
        5.872280e03,
        5.941126e03,
        6.010391e03,
        6.080076e03,
        6.150183e03,
        6.220709e03,
        6.291658e03,
        6.363027e03,
        6.434819e03,
        6.507032e03,
        6.579668e03,
        6.652726e03,
        6.726207e03,
        6.800112e03,
        6.874440e03,
        6.949192e03,
        7.024368e03,
        7.099969e03,
        7.175994e03,
        7.252444e03,
        7.329320e03,
        7.406621e03,
        7.484349e03,
        7.562502e03,
        7.641082e03,
    ]
)

#  ---------------------- M = 46, I = 2 ---------------------------
M = 46
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.301900e00,
        1.763255e01,
        3.493474e01,
        5.224710e01,
        6.956862e01,
        8.689912e01,
        1.042386e02,
        1.215871e02,
        1.389456e02,
        1.563165e02,
        1.737047e02,
        1.911184e02,
        2.085692e02,
        2.260721e02,
        2.436447e02,
        2.613063e02,
        2.790777e02,
        2.969798e02,
        3.150333e02,
        3.332584e02,
        3.516744e02,
        3.702993e02,
        3.891500e02,
        4.082419e02,
        4.275893e02,
        4.472052e02,
        4.671014e02,
        4.872886e02,
        5.077767e02,
        5.285742e02,
        5.496893e02,
        5.711290e02,
        5.928998e02,
        6.150077e02,
        6.374580e02,
        6.602555e02,
        6.834045e02,
        7.069091e02,
        7.307729e02,
        7.549992e02,
        7.795910e02,
        8.045510e02,
        8.298819e02,
        8.555859e02,
        8.816653e02,
        9.081219e02,
        9.349576e02,
        9.621742e02,
        9.897732e02,
        1.017756e03,
        1.046124e03,
        1.074879e03,
        1.104021e03,
        1.133552e03,
        1.163473e03,
        1.193785e03,
        1.224489e03,
        1.255586e03,
        1.287076e03,
        1.318961e03,
        1.351240e03,
        1.383916e03,
        1.416989e03,
        1.450458e03,
        1.484326e03,
        1.518592e03,
        1.553258e03,
        1.588323e03,
        1.623789e03,
        1.659656e03,
        1.695923e03,
        1.732593e03,
        1.769666e03,
        1.807141e03,
        1.845020e03,
        1.883302e03,
        1.921989e03,
        1.961081e03,
        2.000577e03,
        2.040480e03,
        2.080788e03,
        2.121503e03,
        2.162625e03,
        2.204154e03,
        2.246091e03,
        2.288436e03,
        2.331189e03,
        2.374352e03,
        2.417923e03,
        2.461904e03,
        2.506295e03,
        2.551096e03,
        2.596308e03,
        2.641930e03,
        2.687965e03,
        2.734411e03,
        2.781269e03,
        2.828539e03,
        2.876222e03,
        2.924319e03,
        2.972829e03,
        3.021752e03,
        3.071090e03,
        3.120842e03,
        3.171009e03,
        3.221591e03,
        3.272589e03,
        3.324002e03,
        3.375832e03,
        3.428078e03,
        3.480740e03,
        3.533820e03,
        3.587317e03,
        3.641232e03,
        3.695565e03,
        3.750317e03,
        3.805487e03,
        3.861076e03,
        3.917084e03,
        3.973512e03,
        4.030360e03,
        4.087629e03,
        4.145318e03,
        4.203427e03,
        4.261959e03,
        4.320911e03,
        4.380286e03,
        4.440082e03,
        4.500301e03,
        4.560943e03,
        4.622008e03,
        4.683497e03,
        4.745409e03,
        4.807745e03,
        4.870506e03,
        4.933691e03,
        4.997301e03,
        5.061336e03,
        5.125797e03,
        5.190684e03,
        5.255997e03,
        5.321737e03,
        5.387903e03,
        5.454497e03,
        5.521518e03,
        5.588967e03,
        5.656843e03,
        5.725148e03,
        5.793882e03,
        5.863045e03,
        5.932637e03,
        6.002659e03,
        6.073110e03,
        6.143992e03,
        6.215304e03,
        6.287047e03,
        6.359221e03,
        6.431827e03,
        6.504864e03,
        6.578333e03,
        6.652235e03,
        6.726569e03,
        6.801336e03,
        6.876537e03,
        6.952171e03,
        7.028239e03,
        7.104741e03,
        7.181677e03,
        7.259049e03,
        7.336855e03,
        7.415097e03,
        7.493774e03,
        7.572888e03,
        7.652438e03,
        7.732424e03,
        7.812847e03,
    ]
)

#  ---------------------- M = 46, I = 3 ---------------------------
M = 46
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.665010e00,
        3.673026e01,
        7.280106e01,
        1.088928e02,
        1.450036e02,
        1.811332e02,
        2.172814e02,
        2.534487e02,
        2.896373e02,
        3.258533e02,
        3.621084e02,
        3.984219e02,
        4.348208e02,
        4.713391e02,
        5.080160e02,
        5.448948e02,
        5.820205e02,
        6.194387e02,
        6.571942e02,
        6.953301e02,
        7.338872e02,
        7.729036e02,
        8.124146e02,
        8.524529e02,
        8.930479e02,
        9.342266e02,
        9.760135e02,
        1.018431e03,
        1.061498e03,
        1.105234e03,
        1.149654e03,
        1.194773e03,
        1.240604e03,
        1.287160e03,
        1.334451e03,
        1.382487e03,
        1.431277e03,
        1.480828e03,
        1.531149e03,
        1.582246e03,
        1.634124e03,
        1.686790e03,
        1.740249e03,
        1.794505e03,
        1.849563e03,
        1.905427e03,
        1.962100e03,
        2.019586e03,
        2.077888e03,
        2.137009e03,
        2.196951e03,
        2.257718e03,
        2.319312e03,
        2.381735e03,
        2.444990e03,
        2.509077e03,
        2.574000e03,
        2.639760e03,
        2.706358e03,
        2.773797e03,
        2.842078e03,
        2.911202e03,
        2.981172e03,
        3.051987e03,
        3.123651e03,
        3.196163e03,
        3.269525e03,
        3.343739e03,
        3.418805e03,
        3.494725e03,
        3.571500e03,
        3.649130e03,
        3.727618e03,
        3.806963e03,
        3.887167e03,
        3.968231e03,
        4.050155e03,
        4.132942e03,
        4.216590e03,
        4.301103e03,
        4.386479e03,
        4.472721e03,
        4.559829e03,
        4.647804e03,
        4.736646e03,
        4.826357e03,
        4.916938e03,
        5.008388e03,
        5.100710e03,
        5.193903e03,
        5.287969e03,
        5.382908e03,
        5.478720e03,
        5.575408e03,
        5.672971e03,
        5.771411e03,
        5.870727e03,
        5.970921e03,
        6.071993e03,
        6.173945e03,
        6.276777e03,
        6.380489e03,
        6.485082e03,
        6.590557e03,
        6.696916e03,
        6.804157e03,
        6.912283e03,
        7.021293e03,
        7.131189e03,
        7.241971e03,
        7.353640e03,
        7.466197e03,
        7.579641e03,
        7.693975e03,
        7.809198e03,
        7.925312e03,
        8.042316e03,
        8.160212e03,
        8.279001e03,
        8.398682e03,
        8.519257e03,
        8.640727e03,
        8.763091e03,
        8.886351e03,
        9.010508e03,
        9.135561e03,
        9.261512e03,
        9.388361e03,
        9.516109e03,
        9.644757e03,
        9.774306e03,
        9.904755e03,
        1.003611e04,
        1.016836e04,
        1.030151e04,
        1.043557e04,
        1.057054e04,
        1.070641e04,
        1.084318e04,
        1.098086e04,
        1.111945e04,
        1.125894e04,
        1.139935e04,
        1.154066e04,
        1.168288e04,
        1.182601e04,
        1.197005e04,
        1.211501e04,
        1.226087e04,
        1.240765e04,
        1.255535e04,
        1.270395e04,
        1.285347e04,
        1.300391e04,
        1.315526e04,
        1.330753e04,
        1.346072e04,
        1.361482e04,
        1.376984e04,
        1.392579e04,
        1.408265e04,
        1.424043e04,
        1.439914e04,
        1.455876e04,
        1.471931e04,
        1.488078e04,
        1.504318e04,
        1.520650e04,
        1.537074e04,
        1.553591e04,
        1.570201e04,
        1.586903e04,
        1.603699e04,
        1.620587e04,
        1.637567e04,
        1.654641e04,
    ]
)

#  ---------------------- M = 46, I = 4 ---------------------------
M = 46
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        5.185410e00,
        6.999021e01,
        1.386585e02,
        2.073673e02,
        2.761123e02,
        3.448931e02,
        4.137093e02,
        4.825616e02,
        5.514533e02,
        6.203936e02,
        6.894014e02,
        7.585087e02,
        8.277606e02,
        8.972156e02,
        9.669423e02,
        1.037017e03,
        1.107521e03,
        1.178536e03,
        1.250145e03,
        1.322428e03,
        1.395459e03,
        1.469311e03,
        1.544051e03,
        1.619739e03,
        1.696433e03,
        1.774184e03,
        1.853038e03,
        1.933040e03,
        2.014227e03,
        2.096634e03,
        2.180293e03,
        2.265233e03,
        2.351479e03,
        2.439054e03,
        2.527982e03,
        2.618279e03,
        2.709964e03,
        2.803053e03,
        2.897560e03,
        2.993499e03,
        3.090881e03,
        3.189718e03,
        3.290019e03,
        3.391794e03,
        3.495052e03,
        3.599800e03,
        3.706046e03,
        3.813797e03,
        3.923059e03,
        4.033837e03,
        4.146138e03,
        4.259966e03,
        4.375326e03,
        4.492223e03,
        4.610661e03,
        4.730643e03,
        4.852175e03,
        4.975258e03,
        5.099898e03,
        5.226096e03,
        5.353856e03,
        5.483181e03,
        5.614074e03,
        5.746537e03,
        5.880573e03,
        6.016185e03,
        6.153375e03,
        6.292145e03,
        6.432497e03,
        6.574434e03,
        6.717958e03,
        6.863070e03,
        7.009774e03,
        7.158070e03,
        7.307961e03,
        7.459448e03,
        7.612533e03,
        7.767219e03,
        7.923506e03,
        8.081397e03,
        8.240893e03,
        8.401995e03,
        8.564707e03,
        8.729028e03,
        8.894960e03,
        9.062506e03,
        9.231667e03,
        9.402443e03,
        9.574837e03,
        9.748851e03,
        9.924485e03,
        1.010174e04,
        1.028062e04,
        1.046112e04,
        1.064325e04,
        1.082701e04,
        1.101240e04,
        1.119942e04,
        1.138807e04,
        1.157835e04,
        1.177027e04,
        1.196382e04,
        1.215901e04,
        1.235584e04,
        1.255431e04,
        1.275442e04,
        1.295617e04,
        1.315956e04,
        1.336460e04,
        1.357129e04,
        1.377962e04,
        1.398961e04,
        1.420124e04,
        1.441453e04,
        1.462946e04,
        1.484606e04,
        1.506430e04,
        1.528421e04,
        1.550577e04,
        1.572899e04,
        1.595387e04,
        1.618041e04,
        1.640861e04,
        1.663848e04,
        1.687002e04,
        1.710322e04,
        1.733808e04,
        1.757462e04,
        1.781283e04,
        1.805271e04,
        1.829426e04,
        1.853748e04,
        1.878238e04,
        1.902896e04,
        1.927721e04,
        1.952715e04,
        1.977876e04,
        2.003205e04,
        2.028703e04,
        2.054369e04,
        2.080203e04,
        2.106207e04,
        2.132378e04,
        2.158719e04,
        2.185229e04,
        2.211908e04,
        2.238756e04,
        2.265773e04,
        2.292960e04,
        2.320316e04,
        2.347842e04,
        2.375538e04,
        2.403404e04,
        2.431440e04,
        2.459646e04,
        2.488023e04,
        2.516569e04,
        2.545287e04,
        2.574175e04,
        2.603234e04,
        2.632464e04,
        2.661864e04,
        2.691436e04,
        2.721180e04,
        2.751094e04,
        2.781181e04,
        2.811438e04,
        2.841868e04,
        2.872470e04,
        2.903243e04,
        2.934189e04,
        2.965306e04,
        2.996597e04,
        3.028059e04,
        3.059695e04,
        3.091503e04,
    ]
)

#  ---------------------- M = 47, I = 1 ---------------------------
M = 47
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.414270e00,
        1.057361e02,
        2.984678e02,
        5.479928e02,
        8.436907e02,
        1.180696e03,
        1.558672e03,
        1.981177e03,
        2.454584e03,
        2.987094e03,
        3.588121e03,
        4.268040e03,
        5.038147e03,
        5.910737e03,
        6.899230e03,
        8.018317e03,
        9.284110e03,
        1.071430e04,
        1.232829e04,
        1.414738e04,
        1.619491e04,
        1.849642e04,
        2.107982e04,
        2.397557e04,
        2.721685e04,
        3.083979e04,
        3.488362e04,
        3.939089e04,
        4.440770e04,
        4.998392e04,
        5.617341e04,
        6.303426e04,
        7.062902e04,
        7.884530e04,
        8.807839e04,
        9.825772e04,
        1.094663e05,
        1.217930e05,
        1.353330e05,
        1.501882e05,
        1.664674e05,
        1.842866e05,
        2.037697e05,
        2.250484e05,
        2.482633e05,
        2.735634e05,
        3.011073e05,
        3.310633e05,
        3.636098e05,
        3.989359e05,
        4.372419e05,
        4.787394e05,
        5.236525e05,
        5.722175e05,
        6.246841e05,
        6.813156e05,
        7.423894e05,
        8.081977e05,
        8.790482e05,
        9.552643e05,
        1.037186e06,
        1.125171e06,
        1.219593e06,
        1.320847e06,
        1.429344e06,
        1.545517e06,
        1.669818e06,
        1.802721e06,
        1.944721e06,
        2.096336e06,
        2.258109e06,
        2.430603e06,
        2.614408e06,
        2.810141e06,
        3.018444e06,
        3.239985e06,
        3.475461e06,
        3.725598e06,
        3.991152e06,
        4.272907e06,
        4.571682e06,
        4.888326e06,
        5.223722e06,
        5.578785e06,
        5.954468e06,
        6.351757e06,
        6.771677e06,
        7.215291e06,
        7.683698e06,
        8.178039e06,
        8.699497e06,
        9.249293e06,
        9.828694e06,
        1.043901e07,
        1.108160e07,
        1.175785e07,
        1.246923e07,
        1.321721e07,
        1.400336e07,
        1.482927e07,
        1.569657e07,
        1.660698e07,
        1.756225e07,
        1.856419e07,
        1.961465e07,
        2.071558e07,
        2.186893e07,
        2.307677e07,
        2.434119e07,
        2.566435e07,
        2.704850e07,
        2.849591e07,
        3.000895e07,
        3.159005e07,
        3.324171e07,
        3.496649e07,
        3.676703e07,
        3.864605e07,
        4.060633e07,
        4.265074e07,
        4.478221e07,
        4.700377e07,
        4.931851e07,
        5.172961e07,
        5.424035e07,
        5.685405e07,
        5.957418e07,
        6.240423e07,
        6.534783e07,
        6.840867e07,
        7.159056e07,
        7.489738e07,
        7.833310e07,
        8.190183e07,
        8.560772e07,
        8.945507e07,
        9.344824e07,
        9.759174e07,
        1.018901e08,
        1.063481e08,
        1.109706e08,
        1.157623e08,
        1.207284e08,
        1.258740e08,
        1.312043e08,
        1.367248e08,
        1.424409e08,
        1.483582e08,
        1.544824e08,
        1.608195e08,
        1.673754e08,
        1.741563e08,
        1.811683e08,
        1.884179e08,
        1.959115e08,
        2.036558e08,
        2.116577e08,
        2.199239e08,
        2.284616e08,
        2.372780e08,
        2.463805e08,
        2.557765e08,
        2.654736e08,
        2.754798e08,
        2.858029e08,
        2.964510e08,
        3.074325e08,
        3.187557e08,
        3.304293e08,
        3.424619e08,
        3.548625e08,
        3.676402e08,
        3.808043e08,
        3.943641e08,
        4.083293e08,
        4.227097e08,
    ]
)

#  ---------------------- M = 48, I = 1 ---------------------------
M = 48
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.147898e01,
        3.996775e02,
        7.982281e02,
        1.204932e03,
        1.643306e03,
        2.140834e03,
        2.722097e03,
        3.410126e03,
        4.228639e03,
        5.203092e03,
        6.361663e03,
        7.735468e03,
        9.359297e03,
        1.127186e04,
        1.351617e04,
        1.614009e04,
        1.919639e04,
        2.274374e04,
        2.684666e04,
        3.157632e04,
        3.701089e04,
        4.323629e04,
        5.034661e04,
        5.844492e04,
        6.764383e04,
        7.806626e04,
        8.984612e04,
        1.031293e05,
        1.180743e05,
        1.348531e05,
        1.536525e05,
        1.746748e05,
        1.981385e05,
        2.242802e05,
        2.533549e05,
        2.856378e05,
        3.214253e05,
        3.610363e05,
        4.048136e05,
        4.531253e05,
        5.063665e05,
        5.649605e05,
        6.293605e05,
        7.000516e05,
        7.775523e05,
        8.624165e05,
        9.552351e05,
        1.056639e06,
        1.167298e06,
        1.287929e06,
        1.419291e06,
        1.562193e06,
        1.717494e06,
        1.886106e06,
        2.068996e06,
        2.267189e06,
        2.481773e06,
        2.713896e06,
        2.964776e06,
        3.235699e06,
        3.528026e06,
        3.843193e06,
        4.182715e06,
        4.548192e06,
        4.941312e06,
        5.363849e06,
        5.817677e06,
        6.304765e06,
        6.827188e06,
        7.387122e06,
        7.986861e06,
        8.628813e06,
        9.315504e06,
        1.004959e07,
        1.083385e07,
        1.167121e07,
        1.256472e07,
        1.351760e07,
        1.453319e07,
        1.561502e07,
        1.676676e07,
        1.799226e07,
        1.929555e07,
        2.068082e07,
        2.215247e07,
        2.371510e07,
        2.537348e07,
        2.713262e07,
        2.899773e07,
        3.097426e07,
        3.306787e07,
        3.528449e07,
        3.763024e07,
        4.011156e07,
        4.273513e07,
        4.550790e07,
        4.843709e07,
        5.153021e07,
        5.479511e07,
        5.823992e07,
        6.187306e07,
        6.570334e07,
        6.973986e07,
        7.399210e07,
        7.846990e07,
        8.318344e07,
        8.814330e07,
        9.336047e07,
        9.884634e07,
        1.046127e08,
        1.106718e08,
        1.170363e08,
        1.237193e08,
        1.307344e08,
        1.380958e08,
        1.458179e08,
        1.539159e08,
        1.624053e08,
        1.713024e08,
        1.806237e08,
        1.903866e08,
        2.006089e08,
        2.113091e08,
        2.225062e08,
        2.342199e08,
        2.464705e08,
        2.592791e08,
        2.726673e08,
        2.866575e08,
        3.012728e08,
        3.165370e08,
        3.324747e08,
        3.491113e08,
        3.664730e08,
        3.845867e08,
        4.034802e08,
        4.231821e08,
        4.437221e08,
        4.651304e08,
        4.874384e08,
        5.106785e08,
        5.348838e08,
        5.600887e08,
        5.863282e08,
        6.136387e08,
        6.420574e08,
        6.716228e08,
        7.023745e08,
        7.343529e08,
        7.675998e08,
        8.021584e08,
        8.380725e08,
        8.753878e08,
        9.141511e08,
        9.544098e08,
        9.962137e08,
        1.039613e09,
        1.084660e09,
        1.131409e09,
        1.179913e09,
        1.230230e09,
        1.282416e09,
        1.336532e09,
        1.392638e09,
        1.450797e09,
        1.511073e09,
        1.573532e09,
        1.638241e09,
        1.705270e09,
        1.774690e09,
        1.846572e09,
        1.920993e09,
        1.998028e09,
        2.077756e09,
        2.160258e09,
        2.245616e09,
    ]
)

#  ---------------------- M = 48, I = 2 ---------------------------
M = 48
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.010601e01,
        1.888698e02,
        3.772493e02,
        5.694819e02,
        7.766830e02,
        1.011842e03,
        1.286579e03,
        1.611778e03,
        1.998651e03,
        2.459229e03,
        3.006830e03,
        3.656162e03,
        4.423668e03,
        5.327646e03,
        6.388423e03,
        7.628619e03,
        9.073184e03,
        1.074984e04,
        1.268909e04,
        1.492457e04,
        1.749322e04,
        2.043566e04,
        2.379635e04,
        2.762402e04,
        3.197188e04,
        3.689804e04,
        4.246576e04,
        4.874404e04,
        5.580776e04,
        6.373828e04,
        7.262379e04,
        8.255991e04,
        9.364995e04,
        1.060058e05,
        1.197478e05,
        1.350062e05,
        1.519210e05,
        1.706431e05,
        1.913342e05,
        2.141685e05,
        2.393327e05,
        2.670268e05,
        2.974652e05,
        3.308769e05,
        3.675071e05,
        4.076176e05,
        4.514877e05,
        4.994153e05,
        5.517179e05,
        6.087329e05,
        6.708202e05,
        7.383616e05,
        8.117633e05,
        8.914563e05,
        9.778976e05,
        1.071572e06,
        1.172993e06,
        1.282703e06,
        1.401279e06,
        1.529328e06,
        1.667493e06,
        1.816453e06,
        1.976924e06,
        2.149662e06,
        2.335465e06,
        2.535172e06,
        2.749668e06,
        2.979884e06,
        3.226799e06,
        3.491445e06,
        3.774903e06,
        4.078312e06,
        4.402866e06,
        4.749820e06,
        5.120489e06,
        5.516252e06,
        5.938556e06,
        6.388917e06,
        6.868920e06,
        7.380229e06,
        7.924578e06,
        8.503790e06,
        9.119763e06,
        9.774486e06,
        1.047004e07,
        1.120858e07,
        1.199238e07,
        1.282380e07,
        1.370531e07,
        1.463948e07,
        1.562898e07,
        1.667661e07,
        1.778528e07,
        1.895802e07,
        2.019800e07,
        2.150848e07,
        2.289289e07,
        2.435479e07,
        2.589786e07,
        2.752596e07,
        2.924309e07,
        3.105337e07,
        3.296113e07,
        3.497084e07,
        3.708715e07,
        3.931488e07,
        4.165904e07,
        4.412480e07,
        4.671754e07,
        4.944286e07,
        5.230652e07,
        5.531451e07,
        5.847304e07,
        6.178856e07,
        6.526767e07,
        6.891730e07,
        7.274457e07,
        7.675684e07,
        8.096177e07,
        8.536722e07,
        8.998134e07,
        9.481260e07,
        9.986970e07,
        1.051616e08,
        1.106977e08,
        1.164876e08,
        1.225411e08,
        1.288686e08,
        1.354806e08,
        1.423880e08,
        1.496021e08,
        1.571345e08,
        1.649972e08,
        1.732026e08,
        1.817634e08,
        1.906927e08,
        2.000042e08,
        2.097116e08,
        2.198294e08,
        2.303725e08,
        2.413560e08,
        2.527958e08,
        2.647078e08,
        2.771089e08,
        2.900161e08,
        3.034471e08,
        3.174201e08,
        3.319536e08,
        3.470669e08,
        3.627796e08,
        3.791123e08,
        3.960856e08,
        4.137211e08,
        4.320410e08,
        4.510675e08,
        4.708244e08,
        4.913352e08,
        5.126249e08,
        5.347184e08,
        5.576418e08,
        5.814215e08,
        6.060851e08,
        6.316606e08,
        6.581766e08,
        6.856628e08,
        7.141496e08,
        7.436678e08,
        7.742496e08,
        8.059274e08,
        8.387350e08,
        8.727071e08,
        9.078783e08,
        9.442853e08,
        9.819650e08,
        1.020955e09,
        1.061295e09,
    ]
)

#  ---------------------- M = 49, I = 1 ---------------------------
M = 49
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.721481e02,
        1.484065e04,
        4.195358e04,
        7.716245e04,
        1.194582e05,
        1.691203e05,
        2.272411e05,
        2.954664e05,
        3.758697e05,
        4.709005e05,
        5.833741e05,
        7.164874e05,
        8.738508e05,
        1.059529e06,
        1.278091e06,
        1.534657e06,
        1.834964e06,
        2.185421e06,
        2.593175e06,
        3.066183e06,
        3.613284e06,
        4.244280e06,
        4.970014e06,
        5.802462e06,
        6.754827e06,
        7.841634e06,
        9.078840e06,
        1.048393e07,
        1.207606e07,
        1.387613e07,
        1.590698e07,
        1.819346e07,
        2.076262e07,
        2.364381e07,
        2.686889e07,
        3.047235e07,
        3.449152e07,
        3.896669e07,
        4.394135e07,
        4.946237e07,
        5.558021e07,
        6.234908e07,
        6.982725e07,
        7.807722e07,
        8.716595e07,
        9.716517e07,
        1.081516e08,
        1.202071e08,
        1.334193e08,
        1.478815e08,
        1.636932e08,
        1.809603e08,
        1.997955e08,
        2.203186e08,
        2.426568e08,
        2.669453e08,
        2.933272e08,
        3.219545e08,
        3.529879e08,
        3.865976e08,
        4.229636e08,
        4.622762e08,
        5.047363e08,
        5.505561e08,
        5.999592e08,
        6.531817e08,
        7.104720e08,
        7.720921e08,
        8.383173e08,
        9.094375e08,
        9.857572e08,
        1.067597e09,
        1.155292e09,
        1.249196e09,
        1.349679e09,
        1.457130e09,
        1.571954e09,
        1.694580e09,
        1.825452e09,
        1.965038e09,
        2.113827e09,
        2.272331e09,
        2.441083e09,
        2.620643e09,
        2.811592e09,
        3.014541e09,
        3.230126e09,
        3.459007e09,
        3.701878e09,
        3.959458e09,
        4.232500e09,
        4.521784e09,
        4.828127e09,
        5.152375e09,
        5.495412e09,
        5.858154e09,
        6.241558e09,
        6.646615e09,
        7.074357e09,
        7.525854e09,
        8.002221e09,
        8.504613e09,
        9.034227e09,
        9.592310e09,
        1.018015e10,
        1.079909e10,
        1.145051e10,
        1.213586e10,
        1.285662e10,
        1.361435e10,
        1.441063e10,
        1.524712e10,
        1.612554e10,
        1.704766e10,
        1.801533e10,
        1.903042e10,
        2.009491e10,
        2.121083e10,
        2.238027e10,
        2.360541e10,
        2.488848e10,
        2.623178e10,
        2.763772e10,
        2.910876e10,
        3.064744e10,
        3.225639e10,
        3.393831e10,
        3.569601e10,
        3.753238e10,
        3.945037e10,
        4.145306e10,
        4.354361e10,
        4.572526e10,
        4.800138e10,
        5.037543e10,
        5.285095e10,
        5.543162e10,
        5.812120e10,
        6.092359e10,
        6.384278e10,
        6.688289e10,
        7.004814e10,
        7.334289e10,
        7.677162e10,
        8.033894e10,
        8.404958e10,
        8.790839e10,
        9.192039e10,
        9.609072e10,
        1.004247e11,
        1.049276e11,
        1.096052e11,
        1.144631e11,
        1.195073e11,
        1.247437e11,
        1.301785e11,
        1.358181e11,
        1.416690e11,
        1.477380e11,
        1.540319e11,
        1.605577e11,
        1.673227e11,
        1.743343e11,
        1.816000e11,
        1.891278e11,
        1.969255e11,
        2.050014e11,
        2.133638e11,
        2.220214e11,
        2.309830e11,
        2.402576e11,
        2.498545e11,
        2.597830e11,
        2.700530e11,
        2.806744e11,
        2.916573e11,
        3.030122e11,
        3.147497e11,
        3.268807e11,
        3.394164e11,
        3.523683e11,
        3.657479e11,
        3.795672e11,
        3.938387e11,
        4.085747e11,
        4.237879e11,
        4.394915e11,
        4.556990e11,
        4.724240e11,
        4.896804e11,
        5.074825e11,
        5.258451e11,
        5.447830e11,
        5.643114e11,
        5.844460e11,
        6.052027e11,
        6.265977e11,
        6.486480e11,
        6.713700e11,
        6.947814e11,
        7.188998e11,
        7.437436e11,
        7.693308e11,
        7.956805e11,
        8.228118e11,
        8.507446e11,
        8.794988e11,
        9.090947e11,
        9.395534e11,
        9.708961e11,
        1.003145e12,
        1.036321e12,
        1.070448e12,
        1.105549e12,
        1.141647e12,
        1.178766e12,
        1.216931e12,
        1.256166e12,
        1.296498e12,
        1.337952e12,
        1.380554e12,
        1.424331e12,
        1.469312e12,
        1.515524e12,
        1.562995e12,
        1.611755e12,
        1.661833e12,
        1.713259e12,
        1.766065e12,
        1.820282e12,
        1.875941e12,
        1.933075e12,
        1.991718e12,
        2.051902e12,
        2.113663e12,
        2.177035e12,
        2.242055e12,
        2.308758e12,
        2.377181e12,
        2.447362e12,
        2.519339e12,
        2.593152e12,
        2.668840e12,
        2.746443e12,
        2.826002e12,
        2.907559e12,
        2.991157e12,
        3.076840e12,
        3.164651e12,
        3.254635e12,
        3.346837e12,
    ]
)

#  ---------------------- M = 49, I = 2 ---------------------------
M = 49
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[0]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.536788e02,
        3.051435e04,
        8.626393e04,
        1.586606e05,
        2.456296e05,
        3.477452e05,
        4.672541e05,
        6.075406e05,
        7.728694e05,
        9.682784e05,
        1.199558e06,
        1.473286e06,
        1.796889e06,
        2.178729e06,
        2.628202e06,
        3.155848e06,
        3.773466e06,
        4.494242e06,
        5.332883e06,
        6.305759e06,
        7.431058e06,
        8.728947e06,
        1.022174e07,
        1.193408e07,
        1.389313e07,
        1.612879e07,
        1.867388e07,
        2.156440e07,
        2.483975e07,
        2.854298e07,
        3.272105e07,
        3.742513e07,
        4.271087e07,
        4.863870e07,
        5.527418e07,
        6.268830e07,
        7.095785e07,
        8.016580e07,
        9.040167e07,
        1.017619e08,
        1.143503e08,
        1.282786e08,
        1.436666e08,
        1.606431e08,
        1.793457e08,
        1.999222e08,
        2.225305e08,
        2.473392e08,
        2.745284e08,
        3.042904e08,
        3.368300e08,
        3.723651e08,
        4.111276e08,
        4.533644e08,
        4.993372e08,
        5.493242e08,
        6.036203e08,
        6.625380e08,
        7.264084e08,
        7.955819e08,
        8.704289e08,
        9.513412e08,
        1.038732e09,
        1.133039e09,
        1.234722e09,
        1.344267e09,
        1.462186e09,
        1.589017e09,
        1.725329e09,
        1.871716e09,
        2.028808e09,
        2.197261e09,
        2.377770e09,
        2.571060e09,
        2.777894e09,
        2.999070e09,
        3.235427e09,
        3.487843e09,
        3.757235e09,
        4.044568e09,
        4.350846e09,
        4.677124e09,
        5.024499e09,
        5.394123e09,
        5.787198e09,
        6.204973e09,
        6.648762e09,
        7.119927e09,
        7.619892e09,
        8.150140e09,
        8.712220e09,
        9.307740e09,
        9.938379e09,
        1.060588e10,
        1.131207e10,
        1.205882e10,
        1.284811e10,
        1.368199e10,
        1.456256e10,
        1.549205e10,
        1.647274e10,
        1.750701e10,
        1.859732e10,
        1.974625e10,
        2.095645e10,
        2.223068e10,
        2.357178e10,
        2.498274e10,
        2.646661e10,
        2.802658e10,
        2.966593e10,
        3.138808e10,
        3.319655e10,
        3.509501e10,
        3.708723e10,
        3.917710e10,
        4.136869e10,
        4.366616e10,
        4.607384e10,
        4.859618e10,
        5.123780e10,
        5.400345e10,
        5.689808e10,
        5.992673e10,
        6.309465e10,
        6.640727e10,
        6.987015e10,
        7.348904e10,
        7.726990e10,
        8.121884e10,
        8.534217e10,
        8.964640e10,
        9.413822e10,
        9.882455e10,
        1.037125e11,
        1.088094e11,
        1.141229e11,
        1.196605e11,
        1.254305e11,
        1.314410e11,
        1.377004e11,
        1.442175e11,
        1.510013e11,
        1.580609e11,
        1.654059e11,
        1.730460e11,
        1.809912e11,
        1.892519e11,
        1.978386e11,
        2.067621e11,
        2.160338e11,
        2.256649e11,
        2.356674e11,
        2.460533e11,
        2.568351e11,
        2.680255e11,
        2.796376e11,
        2.916849e11,
        3.041811e11,
        3.171404e11,
        3.305773e11,
        3.445067e11,
        3.589439e11,
        3.739045e11,
        3.894045e11,
        4.054605e11,
        4.220892e11,
        4.393081e11,
        4.571347e11,
        4.755873e11,
        4.946844e11,
        5.144452e11,
        5.348889e11,
        5.560357e11,
        5.779061e11,
        6.005211e11,
        6.239019e11,
        6.480705e11,
        6.730496e11,
        6.988620e11,
        7.255312e11,
        7.530815e11,
        7.815372e11,
        8.109238e11,
        8.412671e11,
        8.725931e11,
        9.049290e11,
        9.383023e11,
        9.727413e11,
        1.008275e12,
        1.044932e12,
        1.082743e12,
        1.121739e12,
        1.161951e12,
        1.203411e12,
        1.246152e12,
        1.290208e12,
        1.335613e12,
        1.382402e12,
        1.430610e12,
        1.480274e12,
        1.531431e12,
        1.584120e12,
        1.638379e12,
        1.694247e12,
        1.751766e12,
        1.810976e12,
        1.871920e12,
        1.934640e12,
        1.999181e12,
        2.065587e12,
        2.133904e12,
        2.204179e12,
        2.276458e12,
        2.350791e12,
        2.427227e12,
        2.505817e12,
        2.586611e12,
        2.669663e12,
        2.755024e12,
        2.842752e12,
        2.932900e12,
        3.025525e12,
        3.120685e12,
        3.218439e12,
        3.318847e12,
        3.421969e12,
        3.527869e12,
        3.636609e12,
        3.748253e12,
        3.862869e12,
        3.980522e12,
        4.101281e12,
        4.225217e12,
        4.352398e12,
        4.482897e12,
        4.616789e12,
        4.754148e12,
        4.895049e12,
        5.039569e12,
        5.187790e12,
        5.339789e12,
        5.495649e12,
        5.655455e12,
        5.819289e12,
        5.987238e12,
        6.159389e12,
        6.335833e12,
        6.516660e12,
        6.701962e12,
        6.891832e12,
    ]
)

#  ---------------------- M = 50, I = 1 ---------------------------
M = 50
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.769600e00,
        4.269987e01,
        9.814561e01,
        1.552356e02,
        2.128150e02,
        2.706077e02,
        3.285146e02,
        3.864951e02,
        4.445326e02,
        5.026278e02,
        5.608132e02,
        6.191261e02,
        6.776212e02,
        7.363736e02,
        7.954647e02,
        8.549797e02,
        9.149952e02,
        9.755928e02,
        1.036859e03,
        1.098863e03,
        1.161685e03,
        1.225362e03,
        1.289972e03,
        1.355557e03,
        1.422167e03,
        1.489851e03,
        1.558626e03,
        1.628532e03,
        1.699607e03,
        1.771871e03,
        1.845355e03,
        1.920070e03,
        1.996043e03,
        2.073277e03,
        2.151791e03,
        2.231603e03,
        2.312747e03,
        2.395195e03,
        2.478975e03,
        2.564097e03,
        2.650564e03,
        2.738380e03,
        2.827570e03,
        2.918108e03,
        3.010041e03,
        3.103340e03,
        3.198024e03,
        3.294087e03,
        3.391545e03,
        3.490387e03,
        3.590631e03,
        3.692292e03,
        3.795325e03,
        3.899805e03,
        4.005654e03,
        4.112914e03,
        4.221598e03,
        4.331719e03,
        4.443221e03,
        4.556148e03,
        4.670476e03,
        4.786249e03,
        4.903443e03,
        5.022065e03,
        5.142089e03,
        5.263558e03,
        5.386445e03,
        5.510755e03,
        5.636496e03,
        5.763636e03,
        5.892261e03,
        6.022257e03,
        6.153753e03,
        6.286630e03,
        6.420936e03,
        6.556719e03,
        6.693898e03,
        6.832523e03,
        6.972598e03,
        7.114083e03,
        7.257028e03,
        7.401392e03,
        7.547226e03,
        7.694488e03,
        7.843181e03,
        7.993308e03,
        8.144875e03,
        8.297883e03,
        8.452338e03,
        8.608242e03,
        8.765548e03,
        8.924362e03,
        9.084530e03,
        9.246215e03,
        9.409312e03,
        9.573879e03,
        9.739863e03,
        9.907323e03,
        1.007621e04,
        1.024651e04,
        1.041830e04,
        1.059152e04,
        1.076618e04,
        1.094226e04,
        1.111984e04,
        1.129880e04,
        1.147925e04,
        1.166115e04,
        1.184449e04,
        1.202927e04,
        1.221551e04,
        1.240319e04,
        1.259232e04,
        1.278283e04,
        1.297487e04,
        1.316836e04,
        1.336323e04,
        1.355957e04,
        1.375736e04,
        1.395662e04,
        1.415733e04,
        1.435944e04,
        1.456301e04,
        1.476805e04,
        1.497455e04,
        1.518245e04,
        1.539182e04,
        1.560258e04,
        1.581489e04,
        1.602852e04,
        1.624369e04,
        1.646026e04,
        1.667823e04,
        1.689775e04,
        1.711859e04,
        1.734099e04,
        1.756470e04,
        1.778997e04,
        1.801664e04,
        1.824470e04,
        1.847424e04,
        1.870518e04,
        1.893760e04,
        1.917141e04,
        1.940670e04,
        1.964339e04,
        1.988156e04,
        2.012112e04,
        2.036208e04,
        2.060452e04,
        2.084835e04,
        2.109366e04,
        2.134037e04,
        2.158846e04,
        2.183804e04,
        2.208901e04,
        2.234136e04,
        2.259519e04,
        2.285042e04,
        2.310712e04,
        2.336520e04,
        2.362467e04,
        2.388553e04,
        2.414786e04,
        2.441157e04,
        2.467677e04,
        2.494324e04,
        2.521119e04,
        2.548061e04,
        2.575131e04,
        2.602348e04,
        2.629703e04,
        2.657195e04,
        2.684834e04,
        2.712610e04,
        2.740522e04,
    ]
)

#  ---------------------- M = 50, I = 2 ---------------------------
M = 50
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.784190e00,
        4.344159e01,
        9.997170e01,
        1.581917e02,
        2.169147e02,
        2.758572e02,
        3.349170e02,
        3.940525e02,
        4.532464e02,
        5.125045e02,
        5.718560e02,
        6.313451e02,
        6.910295e02,
        7.509947e02,
        8.113115e02,
        8.720752e02,
        9.333752e02,
        9.952881e02,
        1.057893e03,
        1.121284e03,
        1.185511e03,
        1.250646e03,
        1.316747e03,
        1.383869e03,
        1.452039e03,
        1.521334e03,
        1.591771e03,
        1.663379e03,
        1.736195e03,
        1.810241e03,
        1.885547e03,
        1.962127e03,
        2.039987e03,
        2.119187e03,
        2.199692e03,
        2.281556e03,
        2.364777e03,
        2.449343e03,
        2.535286e03,
        2.622613e03,
        2.711330e03,
        2.801463e03,
        2.892990e03,
        2.985909e03,
        3.080268e03,
        3.176036e03,
        3.273235e03,
        3.371855e03,
        3.471916e03,
        3.573406e03,
        3.676342e03,
        3.780709e03,
        3.886523e03,
        3.993797e03,
        4.102516e03,
        4.212690e03,
        4.324334e03,
        4.437392e03,
        4.551942e03,
        4.667963e03,
        4.785429e03,
        4.904350e03,
        5.024735e03,
        5.146593e03,
        5.269896e03,
        5.394689e03,
        5.520982e03,
        5.648704e03,
        5.777902e03,
        5.908582e03,
        6.040712e03,
        6.174338e03,
        6.309425e03,
        6.446022e03,
        6.584049e03,
        6.723599e03,
        6.864589e03,
        7.007068e03,
        7.151042e03,
        7.296470e03,
        7.443403e03,
        7.591798e03,
        7.741660e03,
        7.893042e03,
        8.045899e03,
        8.200235e03,
        8.356054e03,
        8.513307e03,
        8.672103e03,
        8.832393e03,
        8.994127e03,
        9.157362e03,
        9.322101e03,
        9.488294e03,
        9.655997e03,
        9.825158e03,
        9.995836e03,
        1.016798e04,
        1.034164e04,
        1.051677e04,
        1.069338e04,
        1.087151e04,
        1.105106e04,
        1.123214e04,
        1.141471e04,
        1.159882e04,
        1.178434e04,
        1.197142e04,
        1.215991e04,
        1.234990e04,
        1.254144e04,
        1.273440e04,
        1.292893e04,
        1.312488e04,
        1.332233e04,
        1.352128e04,
        1.372172e04,
        1.392367e04,
        1.412705e04,
        1.433200e04,
        1.453839e04,
        1.474621e04,
        1.495561e04,
        1.516644e04,
        1.537878e04,
        1.559263e04,
        1.580792e04,
        1.602472e04,
        1.624304e04,
        1.646279e04,
        1.668405e04,
        1.690675e04,
        1.713097e04,
        1.735671e04,
        1.758388e04,
        1.781249e04,
        1.804261e04,
        1.827426e04,
        1.850734e04,
        1.874195e04,
        1.897798e04,
        1.921554e04,
        1.945454e04,
        1.969497e04,
        1.993692e04,
        2.018039e04,
        2.042530e04,
        2.067164e04,
        2.091950e04,
        2.116879e04,
        2.141952e04,
        2.167176e04,
        2.192553e04,
        2.218063e04,
        2.243725e04,
        2.269540e04,
        2.295488e04,
        2.321596e04,
        2.347839e04,
        2.374232e04,
        2.400769e04,
        2.427447e04,
        2.454277e04,
        2.481249e04,
        2.508362e04,
        2.535627e04,
        2.563034e04,
        2.590582e04,
        2.618281e04,
        2.646111e04,
        2.674103e04,
        2.702225e04,
        2.730487e04,
        2.758901e04,
        2.787455e04,
        2.816159e04,
    ]
)

#  ---------------------- M = 50, I = 3 ---------------------------
M = 50
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        1.829360e00,
        4.567662e01,
        1.054716e02,
        1.670941e02,
        2.292611e02,
        2.916655e02,
        3.541968e02,
        4.168097e02,
        4.794904e02,
        5.422517e02,
        6.051222e02,
        6.681570e02,
        7.314428e02,
        7.950479e02,
        8.590830e02,
        9.236403e02,
        9.888198e02,
        1.054709e03,
        1.121396e03,
        1.188975e03,
        1.257504e03,
        1.327060e03,
        1.397697e03,
        1.469475e03,
        1.542453e03,
        1.616657e03,
        1.692120e03,
        1.768904e03,
        1.847020e03,
        1.926507e03,
        2.007363e03,
        2.089638e03,
        2.173342e03,
        2.258478e03,
        2.345089e03,
        2.433172e03,
        2.522743e03,
        2.613793e03,
        2.706354e03,
        2.800433e03,
        2.896036e03,
        2.993166e03,
        3.091851e03,
        3.192062e03,
        3.293823e03,
        3.397129e03,
        3.502001e03,
        3.608430e03,
        3.716436e03,
        3.826007e03,
        3.937129e03,
        4.049850e03,
        4.164154e03,
        4.280024e03,
        4.397473e03,
        4.516514e03,
        4.637127e03,
        4.759358e03,
        4.883149e03,
        5.008545e03,
        5.135559e03,
        5.264164e03,
        5.394332e03,
        5.526108e03,
        5.659504e03,
        5.794488e03,
        5.931067e03,
        6.069251e03,
        6.209046e03,
        6.350461e03,
        6.493459e03,
        6.638047e03,
        6.784276e03,
        6.932107e03,
        7.081546e03,
        7.232601e03,
        7.385228e03,
        7.539480e03,
        7.695363e03,
        7.852884e03,
        8.011947e03,
        8.172707e03,
        8.335018e03,
        8.498934e03,
        8.664511e03,
        8.831702e03,
        9.000458e03,
        9.170889e03,
        9.342891e03,
        9.516521e03,
        9.691784e03,
        9.868684e03,
        1.004717e04,
        1.022729e04,
        1.040901e04,
        1.059237e04,
        1.077733e04,
        1.096388e04,
        1.115209e04,
        1.134190e04,
        1.153338e04,
        1.172646e04,
        1.192108e04,
        1.211738e04,
        1.231535e04,
        1.251487e04,
        1.271601e04,
        1.291883e04,
        1.312320e04,
        1.332925e04,
        1.353687e04,
        1.374610e04,
        1.395703e04,
        1.416951e04,
        1.438362e04,
        1.459936e04,
        1.481666e04,
        1.503566e04,
        1.525623e04,
        1.547842e04,
        1.570225e04,
        1.592764e04,
        1.615467e04,
        1.638333e04,
        1.661363e04,
        1.684549e04,
        1.707899e04,
        1.731414e04,
        1.755084e04,
        1.778910e04,
        1.802909e04,
        1.827064e04,
        1.851375e04,
        1.875850e04,
        1.900489e04,
        1.925285e04,
        1.950236e04,
        1.975360e04,
        2.000631e04,
        2.026067e04,
        2.051667e04,
        2.077423e04,
        2.103334e04,
        2.129409e04,
        2.155649e04,
        2.182035e04,
        2.208594e04,
        2.235299e04,
        2.262168e04,
        2.289202e04,
        2.316380e04,
        2.343732e04,
        2.371229e04,
        2.398890e04,
        2.426705e04,
        2.454684e04,
        2.482816e04,
        2.511102e04,
        2.539552e04,
        2.568155e04,
        2.596912e04,
        2.625831e04,
        2.654893e04,
        2.684129e04,
        2.713506e04,
        2.743046e04,
        2.772739e04,
        2.802583e04,
        2.832590e04,
        2.862748e04,
        2.893058e04,
        2.923518e04,
        2.954141e04,
        2.984914e04,
        3.015838e04,
        3.046922e04,
    ]
)

#  ---------------------- M = 51, I = 1 ---------------------------
M = 51
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.242436e01,
        7.725486e02,
        2.121419e03,
        3.890178e03,
        6.013062e03,
        8.504252e03,
        1.142366e04,
        1.485658e04,
        1.890626e04,
        2.369326e04,
        2.935867e04,
        3.606709e04,
        4.401067e04,
        5.341521e04,
        6.454346e04,
        7.771136e04,
        9.328406e04,
        1.116825e05,
        1.334005e05,
        1.590135e05,
        1.891903e05,
        2.247090e05,
        2.664698e05,
        3.155170e05,
        3.730570e05,
        4.404840e05,
        5.194095e05,
        6.116882e05,
        7.194554e05,
        8.451682e05,
        9.916491e05,
        1.162137e06,
        1.360343e06,
        1.590521e06,
        1.857532e06,
        2.166934e06,
        2.525070e06,
        2.939175e06,
        3.417490e06,
        3.969394e06,
        4.605551e06,
        5.338073e06,
        6.180709e06,
        7.149044e06,
        8.260724e06,
        9.535725e06,
        1.099663e07,
        1.266894e07,
        1.458144e07,
        1.676658e07,
        1.926092e07,
        2.210560e07,
        2.534690e07,
        2.903680e07,
        3.323367e07,
        3.800297e07,
        4.341808e07,
        4.956117e07,
        5.652419e07,
        6.440992e07,
        7.333322e07,
        8.342230e07,
        9.482017e07,
        1.076862e08,
        1.221980e08,
        1.385530e08,
        1.569711e08,
        1.776964e08,
        2.010001e08,
        2.271832e08,
        2.565793e08,
        2.895582e08,
        3.265296e08,
        3.679465e08,
        4.143103e08,
        4.661747e08,
        5.241516e08,
        5.889162e08,
        6.612133e08,
        7.418637e08,
        8.317719e08,
        9.319336e08,
        1.043444e09,
        1.167508e09,
        1.305450e09,
        1.458722e09,
        1.628922e09,
        1.817798e09,
        2.027272e09,
        2.259444e09,
        2.516619e09,
        2.801317e09,
        3.116294e09,
        3.464566e09,
        3.849427e09,
        4.274473e09,
        4.743631e09,
        5.261186e09,
        5.831808e09,
        6.460589e09,
        7.153075e09,
        7.915304e09,
        8.753845e09,
        9.675848e09,
        1.068908e10,
        1.180199e10,
        1.302374e10,
        1.436429e10,
        1.583444e10,
        1.744592e10,
        1.921141e10,
        2.114470e10,
        2.326068e10,
        2.557551e10,
        2.810664e10,
        3.087298e10,
        3.389497e10,
        3.719468e10,
        4.079597e10,
        4.472462e10,
        4.900843e10,
        5.367742e10,
        5.876395e10,
        6.430294e10,
        7.033198e10,
        7.689160e10,
        8.402544e10,
        9.178048e10,
        1.002073e11,
        1.093602e11,
        1.192976e11,
        1.300825e11,
        1.417824e11,
        1.544698e11,
        1.682225e11,
        1.831241e11,
        1.992643e11,
        2.167394e11,
        2.356524e11,
        2.561139e11,
        2.782424e11,
        3.021646e11,
        3.280164e11,
        3.559434e11,
        3.861009e11,
        4.186556e11,
        4.537853e11,
        4.916803e11,
        5.325440e11,
        5.765937e11,
        6.240612e11,
        6.751945e11,
        7.302577e11,
        7.895332e11,
        8.533219e11,
        9.219446e11,
        9.957437e11,
        1.075084e12,
        1.160353e12,
        1.251966e12,
        1.350364e12,
        1.456014e12,
        1.569417e12,
        1.691105e12,
        1.821642e12,
        1.961629e12,
        2.111705e12,
        2.272549e12,
        2.444884e12,
        2.629474e12,
        2.827135e12,
        3.038731e12,
        3.265180e12,
        3.507453e12,
        3.766586e12,
        4.043672e12,
    ]
)

#  ---------------------- M = 52, I = 1 ---------------------------
M = 52
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.000000e-06,
        9.439835e00,
        2.871728e01,
        5.406319e01,
        8.449555e01,
        1.193488e02,
        1.582205e02,
        2.008949e02,
        2.472961e02,
        2.974472e02,
        3.514358e02,
        4.093897e02,
        4.714617e02,
        5.378208e02,
        6.086474e02,
        6.841307e02,
        7.644677e02,
        8.498620e02,
        9.405242e02,
        1.036671e03,
        1.138525e03,
        1.246317e03,
        1.360281e03,
        1.480661e03,
        1.607706e03,
        1.741671e03,
        1.882822e03,
        2.031428e03,
        2.187770e03,
        2.352137e03,
        2.524823e03,
        2.706136e03,
        2.896391e03,
        3.095913e03,
        3.305037e03,
        3.524108e03,
        3.753482e03,
        3.993526e03,
        4.244617e03,
        4.507146e03,
        4.781511e03,
        5.068125e03,
        5.367413e03,
        5.679810e03,
        6.005763e03,
        6.345735e03,
        6.700197e03,
        7.069636e03,
        7.454550e03,
        7.855452e03,
        8.272866e03,
        8.707330e03,
        9.159397e03,
        9.629633e03,
        1.011862e04,
        1.062694e04,
        1.115522e04,
        1.170407e04,
        1.227414e04,
        1.286606e04,
        1.348052e04,
        1.411819e04,
        1.477977e04,
        1.546598e04,
        1.617755e04,
        1.691522e04,
        1.767975e04,
        1.847193e04,
        1.929255e04,
        2.014242e04,
        2.102237e04,
        2.193326e04,
        2.287594e04,
        2.385130e04,
        2.486024e04,
        2.590368e04,
        2.698256e04,
        2.809783e04,
        2.925048e04,
        3.044150e04,
        3.167190e04,
        3.294272e04,
        3.425501e04,
        3.560985e04,
        3.700835e04,
        3.845160e04,
        3.994076e04,
        4.147698e04,
        4.306145e04,
        4.469536e04,
        4.637995e04,
        4.811646e04,
        4.990616e04,
        5.175035e04,
        5.365034e04,
        5.560747e04,
        5.762312e04,
        5.969865e04,
        6.183550e04,
        6.403509e04,
        6.629888e04,
        6.862837e04,
        7.102507e04,
        7.349051e04,
        7.602625e04,
        7.863389e04,
        8.131504e04,
        8.407135e04,
        8.690448e04,
        8.981613e04,
        9.280803e04,
        9.588192e04,
        9.903959e04,
        1.022828e05,
        1.056135e05,
        1.090335e05,
        1.125446e05,
        1.161488e05,
        1.198481e05,
        1.236444e05,
        1.275397e05,
        1.315362e05,
        1.356358e05,
        1.398406e05,
        1.441529e05,
        1.485747e05,
        1.531082e05,
        1.577558e05,
        1.625195e05,
        1.674018e05,
        1.724050e05,
        1.775314e05,
        1.827833e05,
        1.881633e05,
        1.936738e05,
        1.993172e05,
        2.050961e05,
        2.110130e05,
        2.170706e05,
        2.232714e05,
        2.296181e05,
        2.361134e05,
        2.427600e05,
        2.495607e05,
        2.565183e05,
        2.636356e05,
        2.709155e05,
        2.783609e05,
        2.859747e05,
        2.937599e05,
        3.017195e05,
        3.098566e05,
        3.181742e05,
        3.266755e05,
        3.353636e05,
        3.442417e05,
        3.533131e05,
        3.625811e05,
        3.720488e05,
        3.817198e05,
        3.915973e05,
        4.016848e05,
        4.119858e05,
        4.225038e05,
        4.332422e05,
        4.442047e05,
        4.553950e05,
        4.668165e05,
        4.784731e05,
        4.903685e05,
        5.025065e05,
        5.148908e05,
        5.275254e05,
        5.404141e05,
        5.535608e05,
        5.669696e05,
    ]
)

#  ---------------------- M = 53, I = 1 ---------------------------
M = 53
I = 1
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        3.357230e00,
        6.388395e01,
        1.276299e02,
        1.914331e02,
        2.556212e02,
        3.212115e02,
        3.897614e02,
        4.629667e02,
        5.424324e02,
        6.296189e02,
        7.258625e02,
        8.324166e02,
        9.504891e02,
        1.081274e03,
        1.225973e03,
        1.385815e03,
        1.562070e03,
        1.756055e03,
        1.969145e03,
        2.202779e03,
        2.458461e03,
        2.737768e03,
        3.042351e03,
        3.373938e03,
        3.734336e03,
        4.125436e03,
        4.549211e03,
        5.007721e03,
        5.503115e03,
        6.037631e03,
        6.613599e03,
        7.233444e03,
        7.899685e03,
        8.614941e03,
        9.381928e03,
        1.020347e04,
        1.108248e04,
        1.202199e04,
        1.302514e04,
        1.409517e04,
        1.523543e04,
        1.644939e04,
        1.774064e04,
        1.911288e04,
        2.056992e04,
        2.211570e04,
        2.375428e04,
        2.548986e04,
        2.732674e04,
        2.926936e04,
        3.132230e04,
        3.349026e04,
        3.577808e04,
        3.819073e04,
        4.073333e04,
        4.341113e04,
        4.622952e04,
        4.919405e04,
        5.231040e04,
        5.558441e04,
        5.902205e04,
        6.262946e04,
        6.641295e04,
        7.037894e04,
        7.453405e04,
        7.888504e04,
        8.343883e04,
        8.820253e04,
        9.318338e04,
        9.838881e04,
        1.038264e05,
        1.095040e05,
        1.154294e05,
        1.216108e05,
        1.280566e05,
        1.347751e05,
        1.417750e05,
        1.490652e05,
        1.566547e05,
        1.645527e05,
        1.727687e05,
        1.813122e05,
        1.901930e05,
        1.994211e05,
        2.090067e05,
        2.189602e05,
        2.292922e05,
        2.400135e05,
        2.511350e05,
        2.626681e05,
        2.746241e05,
        2.870146e05,
        2.998515e05,
        3.131469e05,
        3.269131e05,
        3.411625e05,
        3.559080e05,
        3.711624e05,
        3.869389e05,
        4.032510e05,
        4.201123e05,
        4.375367e05,
        4.555383e05,
        4.741314e05,
        4.933307e05,
        5.131510e05,
        5.336073e05,
        5.547150e05,
        5.764896e05,
        5.989470e05,
        6.221033e05,
        6.459748e05,
        6.705781e05,
        6.959299e05,
        7.220475e05,
        7.489482e05,
        7.766496e05,
        8.051697e05,
        8.345266e05,
        8.647387e05,
        8.958248e05,
        9.278039e05,
        9.606952e05,
        9.945184e05,
        1.029293e06,
        1.065040e06,
        1.101778e06,
        1.139530e06,
        1.178315e06,
        1.218156e06,
        1.259073e06,
        1.301088e06,
        1.344225e06,
        1.388504e06,
        1.433950e06,
        1.480585e06,
        1.528432e06,
        1.577515e06,
        1.627859e06,
        1.679487e06,
        1.732424e06,
        1.786695e06,
        1.842326e06,
        1.899341e06,
        1.957768e06,
        2.017632e06,
        2.078959e06,
        2.141778e06,
        2.206114e06,
        2.271996e06,
        2.339451e06,
        2.408509e06,
        2.479196e06,
        2.551543e06,
        2.625579e06,
        2.701333e06,
        2.778836e06,
        2.858117e06,
        2.939208e06,
        3.022139e06,
        3.106942e06,
        3.193650e06,
        3.282293e06,
        3.372905e06,
        3.465518e06,
        3.560166e06,
        3.656882e06,
        3.755701e06,
        3.856657e06,
        3.959784e06,
        4.065119e06,
        4.172696e06,
        4.282551e06,
        4.394721e06,
        4.509242e06,
        4.626152e06,
    ]
)

#  ---------------------- M = 53, I = 2 ---------------------------
M = 53
I = 2
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.908470e00,
        1.316557e02,
        2.630372e02,
        3.945385e02,
        5.268460e02,
        6.620835e02,
        8.034970e02,
        9.546200e02,
        1.118799e03,
        1.299078e03,
        1.498248e03,
        1.718924e03,
        1.963631e03,
        2.234865e03,
        2.535144e03,
        2.867044e03,
        3.233225e03,
        3.636454e03,
        4.079620e03,
        4.565744e03,
        5.097990e03,
        5.679674e03,
        6.314270e03,
        7.005414e03,
        7.756911e03,
        8.572742e03,
        9.457061e03,
        1.041421e04,
        1.144871e04,
        1.256529e04,
        1.376884e04,
        1.506449e04,
        1.645754e04,
        1.795352e04,
        1.955815e04,
        2.127738e04,
        2.311737e04,
        2.508451e04,
        2.718541e04,
        2.942693e04,
        3.181613e04,
        3.436034e04,
        3.706712e04,
        3.994428e04,
        4.299988e04,
        4.624224e04,
        4.967993e04,
        5.332180e04,
        5.717695e04,
        6.125477e04,
        6.556491e04,
        7.011731e04,
        7.492218e04,
        7.999005e04,
        8.533172e04,
        9.095828e04,
        9.688115e04,
        1.031120e05,
        1.096629e05,
        1.165462e05,
        1.237744e05,
        1.313607e05,
        1.393182e05,
        1.476606e05,
        1.564019e05,
        1.655564e05,
        1.751387e05,
        1.851638e05,
        1.956471e05,
        2.066043e05,
        2.180514e05,
        2.300049e05,
        2.424815e05,
        2.554985e05,
        2.690734e05,
        2.832241e05,
        2.979690e05,
        3.133267e05,
        3.293164e05,
        3.459575e05,
        3.632700e05,
        3.812742e05,
        3.999909e05,
        4.194410e05,
        4.396463e05,
        4.606288e05,
        4.824107e05,
        5.050151e05,
        5.284651e05,
        5.527846e05,
        5.779977e05,
        6.041290e05,
        6.312037e05,
        6.592472e05,
        6.882857e05,
        7.183455e05,
        7.494537e05,
        7.816377e05,
        8.149253e05,
        8.493451e05,
        8.849259e05,
        9.216971e05,
        9.596886e05,
        9.989308e05,
        1.039455e06,
        1.081291e06,
        1.124473e06,
        1.169032e06,
        1.215002e06,
        1.262415e06,
        1.311307e06,
        1.361711e06,
        1.413663e06,
        1.467198e06,
        1.522353e06,
        1.579164e06,
        1.637669e06,
        1.697906e06,
        1.759913e06,
        1.823730e06,
        1.889395e06,
        1.956950e06,
        2.026435e06,
        2.097891e06,
        2.171361e06,
        2.246887e06,
        2.324512e06,
        2.404281e06,
        2.486237e06,
        2.570426e06,
        2.656894e06,
        2.745687e06,
        2.836852e06,
        2.930436e06,
        3.026488e06,
        3.125057e06,
        3.226192e06,
        3.329943e06,
        3.436362e06,
        3.545501e06,
        3.657410e06,
        3.772143e06,
        3.889755e06,
        4.010298e06,
        4.133829e06,
        4.260402e06,
        4.390074e06,
        4.522903e06,
        4.658945e06,
        4.798260e06,
        4.940907e06,
        5.086945e06,
        5.236436e06,
        5.389440e06,
        5.546021e06,
        5.706240e06,
        5.870161e06,
        6.037850e06,
        6.209371e06,
        6.384789e06,
        6.564172e06,
        6.747587e06,
        6.935102e06,
        7.126787e06,
        7.322711e06,
        7.522944e06,
        7.727559e06,
        7.936627e06,
        8.150221e06,
        8.368415e06,
        8.591283e06,
        8.818902e06,
        9.051347e06,
        9.288696e06,
        9.531026e06,
        9.778416e06,
    ]
)

#  ---------------------- M = 53, I = 3 ---------------------------
M = 53
I = 3
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        2.724759e01,
        5.188821e02,
        1.036664e03,
        1.554914e03,
        2.076315e03,
        2.609185e03,
        3.166242e03,
        3.761337e03,
        4.407580e03,
        5.116904e03,
        5.900230e03,
        6.767805e03,
        7.729507e03,
        8.795104e03,
        9.974440e03,
        1.127758e04,
        1.271492e04,
        1.429726e04,
        1.603589e04,
        1.794258e04,
        2.002969e04,
        2.231015e04,
        2.479752e04,
        2.750597e04,
        3.045034e04,
        3.364615e04,
        3.710960e04,
        4.085761e04,
        4.490782e04,
        4.927862e04,
        5.398913e04,
        5.905927e04,
        6.450975e04,
        7.036207e04,
        7.663855e04,
        8.336236e04,
        9.055751e04,
        9.824887e04,
        1.064622e05,
        1.152242e05,
        1.245624e05,
        1.345053e05,
        1.450823e05,
        1.563239e05,
        1.682615e05,
        1.809275e05,
        1.943551e05,
        2.085790e05,
        2.236344e05,
        2.395580e05,
        2.563872e05,
        2.741609e05,
        2.929188e05,
        3.127018e05,
        3.335519e05,
        3.555124e05,
        3.786276e05,
        4.029431e05,
        4.285056e05,
        4.553632e05,
        4.835651e05,
        5.131617e05,
        5.442048e05,
        5.767474e05,
        6.108439e05,
        6.465498e05,
        6.839223e05,
        7.230196e05,
        7.639014e05,
        8.066289e05,
        8.512645e05,
        8.978721e05,
        9.465171e05,
        9.972663e05,
        1.050188e06,
        1.105352e06,
        1.162829e06,
        1.222692e06,
        1.285016e06,
        1.349877e06,
        1.417351e06,
        1.487518e06,
        1.560458e06,
        1.636254e06,
        1.714990e06,
        1.796750e06,
        1.881623e06,
        1.969697e06,
        2.061062e06,
        2.155812e06,
        2.254039e06,
        2.355840e06,
        2.461313e06,
        2.570556e06,
        2.683671e06,
        2.800761e06,
        2.921930e06,
        3.047286e06,
        3.176937e06,
        3.310992e06,
        3.449566e06,
        3.592771e06,
        3.740724e06,
        3.893544e06,
        4.051350e06,
        4.214264e06,
        4.382412e06,
        4.555918e06,
        4.734911e06,
        4.919521e06,
        5.109882e06,
        5.306126e06,
        5.508392e06,
        5.716817e06,
        5.931542e06,
        6.152711e06,
        6.380469e06,
        6.614963e06,
        6.856342e06,
        7.104760e06,
        7.360369e06,
        7.623326e06,
        7.893790e06,
        8.171922e06,
        8.457886e06,
        8.751846e06,
        9.053972e06,
        9.364433e06,
        9.683403e06,
        1.001106e07,
        1.034757e07,
        1.069313e07,
        1.104791e07,
        1.141209e07,
        1.178588e07,
        1.216945e07,
        1.256300e07,
        1.296673e07,
        1.338083e07,
        1.380550e07,
        1.424095e07,
        1.468738e07,
        1.514500e07,
        1.561402e07,
        1.609465e07,
        1.658712e07,
        1.709163e07,
        1.760842e07,
        1.813770e07,
        1.867971e07,
        1.923467e07,
        1.980281e07,
        2.038438e07,
        2.097961e07,
        2.158874e07,
        2.221202e07,
        2.284969e07,
        2.350201e07,
        2.416922e07,
        2.485159e07,
        2.554937e07,
        2.626282e07,
        2.699222e07,
        2.773782e07,
        2.849990e07,
        2.927873e07,
        3.007460e07,
        3.088777e07,
        3.171854e07,
        3.256719e07,
        3.343401e07,
        3.431930e07,
        3.522335e07,
        3.614645e07,
        3.708892e07,
        3.805106e07,
    ]
)

#  ---------------------- M = 53, I = 4 ---------------------------
M = 53
I = 4
TIPS_2017_ISOT_HASH[(M, I)] = TIPS_2017_ISOT[2]
TIPS_2017_ISOQ_HASH[(M, I)] = float64(
    [
        6.713360e00,
        1.277459e02,
        2.552158e02,
        3.828120e02,
        5.112785e02,
        6.428265e02,
        7.807297e02,
        9.284754e02,
        1.089325e03,
        1.266231e03,
        1.461891e03,
        1.678831e03,
        1.919481e03,
        2.186220e03,
        2.481426e03,
        2.807498e03,
        3.166878e03,
        3.562071e03,
        3.995649e03,
        4.470269e03,
        4.988676e03,
        5.553712e03,
        6.168321e03,
        6.835557e03,
        7.558585e03,
        8.340692e03,
        9.185283e03,
        1.009589e04,
        1.107619e04,
        1.212996e04,
        1.326116e04,
        1.447384e04,
        1.577225e04,
        1.716074e04,
        1.864383e04,
        2.022620e04,
        2.191268e04,
        2.370826e04,
        2.561808e04,
        2.764746e04,
        2.980188e04,
        3.208700e04,
        3.450865e04,
        3.707282e04,
        3.978569e04,
        4.265362e04,
        4.568317e04,
        4.888106e04,
        5.225421e04,
        5.580974e04,
        5.955495e04,
        6.349734e04,
        6.764462e04,
        7.200469e04,
        7.658567e04,
        8.139588e04,
        8.644384e04,
        9.173829e04,
        9.728821e04,
        1.031028e05,
        1.091913e05,
        1.155636e05,
        1.222293e05,
        1.291987e05,
        1.364819e05,
        1.440896e05,
        1.520325e05,
        1.603216e05,
        1.689683e05,
        1.779840e05,
        1.873805e05,
        1.971699e05,
        2.073643e05,
        2.179763e05,
        2.290187e05,
        2.405046e05,
        2.524472e05,
        2.648602e05,
        2.777574e05,
        2.911528e05,
        3.050611e05,
        3.194967e05,
        3.344747e05,
        3.500103e05,
        3.661191e05,
        3.828169e05,
        4.001198e05,
        4.180442e05,
        4.366069e05,
        4.558248e05,
        4.757153e05,
        4.962961e05,
        5.175850e05,
        5.396004e05,
        5.623607e05,
        5.858850e05,
        6.101923e05,
        6.353023e05,
        6.612348e05,
        6.880100e05,
        7.156484e05,
        7.441709e05,
        7.735987e05,
        8.039534e05,
        8.352568e05,
        8.675311e05,
        9.007991e05,
        9.350835e05,
        9.704078e05,
        1.006796e06,
        1.044271e06,
        1.082858e06,
        1.122582e06,
        1.163467e06,
        1.205540e06,
        1.248826e06,
        1.293351e06,
        1.339142e06,
        1.386227e06,
        1.434632e06,
        1.484385e06,
        1.535514e06,
        1.588049e06,
        1.642018e06,
        1.697450e06,
        1.754375e06,
        1.812824e06,
        1.872828e06,
        1.934416e06,
        1.997621e06,
        2.062474e06,
        2.129008e06,
        2.197256e06,
        2.267251e06,
        2.339026e06,
        2.412615e06,
        2.488053e06,
        2.565375e06,
        2.644616e06,
        2.725811e06,
        2.808998e06,
        2.894213e06,
        2.981493e06,
        3.070876e06,
        3.162399e06,
        3.256102e06,
        3.352023e06,
        3.450202e06,
        3.550679e06,
        3.653494e06,
        3.758688e06,
        3.866303e06,
        3.976381e06,
        4.088964e06,
        4.204094e06,
        4.321816e06,
        4.442173e06,
        4.565209e06,
        4.690970e06,
        4.819501e06,
        4.950847e06,
        5.085056e06,
        5.222174e06,
        5.362248e06,
        5.505328e06,
        5.651460e06,
        5.800694e06,
        5.953081e06,
        6.108669e06,
        6.267510e06,
        6.429655e06,
        6.595155e06,
        6.764063e06,
        6.936432e06,
        7.112315e06,
        7.291766e06,
    ]
)

#  --------------- /TIPS-2017 IMPLEMENTATION ----------------------


def BD_TIPS_2017_PYTHON(M, I, T):
    # get temperature grid
    TT = TIPS_2017_ISOT_HASH[(M, I)]
    Tmin = min(TT)
    Tmax = max(TT)

    # out of temperature range
    if T < Tmin or T > Tmax:
        raise Exception(
            "TIPS2017: T(%.1fK) must be between %.1fK and %.1fK." % (T, Tmin, Tmax)
        )

    try:
        # get statistical weight for specified isotopologue
        # gi = TIPS_GSI_HASH[(M,I)] # Take from TIPS-2011?
        # interpolate partition sum for specified isotopologue
        Qt = AtoB(T, TT, TIPS_2017_ISOQ_HASH[(M, I)], len(TT))
    except KeyError:
        raise Exception("TIPS2017: no data for M,I = %d,%d." % (M, I))

    return None, Qt


def BD_TIPS_2017_PYTHON_SLICE(M, I, T, n=20):  # testing
    """
    Calculate partition sum using Lagrange interpolation
    with slicing algorithm, taking (i_T-n,i_T+n) points,
    where i_T is the index of the array value closest to T.
    """
    # get temperature grid
    TT = TIPS_2017_ISOT_HASH[(M, I)]
    Tmin = min(TT)
    Tmax = max(TT)
    NT = len(TT)

    # get partition sum
    QQ = TIPS_2017_ISOQ_HASH[(M, I)]

    # slice temperature grid and partition sum
    i_T = np.searchsorted(TT, T)
    TT_ = TT[max(i_T - n, 0) : min(i_T + n, NT)]
    QQ_ = QQ[max(i_T - n, 0) : min(i_T + n, NT)]

    # out of temperature range
    if T < Tmin or T > Tmax:
        raise Exception(
            "TIPS2017: T(%.1fK) must be between %.1fK and %.1fK." % (T, Tmin, Tmax)
        )

    try:
        # get statistical weight for specified isotopologue
        # gi = TIPS_GSI_HASH[(M,I)] # Take from TIPS-2011?
        # interpolate partition sum for specified isotopologue
        Qt = AtoB(T, TT_, QQ_, len(TT_))
    except KeyError:
        raise Exception("TIPS2017: no data for M,I = %d,%d." % (M, I))

    return None, Qt


# ALIASES FOR TIPS
PYTIPS2011 = lambda M, I, T: BD_TIPS_2011_PYTHON(M, I, T)[1]
PYTIPS2017 = lambda M, I, T: BD_TIPS_2017_PYTHON(M, I, T)[1]
PYTIPS2017_SLICE = lambda M, I, T, n=20: BD_TIPS_2017_PYTHON_SLICE(M, I, T, n)[1]
PYTIPS = PYTIPS2017  # stub for backwards compatibility

# Total internal partition sum
# M - molecule number
# I - isotopologue number
# T - temperature (K)
# returns (StatWeight,PartitionSum)
def partitionSum(M, I, T, step=None, version=2017):
    """
    INPUT PARAMETERS:
        M: HITRAN molecule number              (required)
        I: HITRAN isotopologue number          (required)
        T: temperature conditions              (required)
        step:  step to calculate temperatures  (optional)
    OUTPUT PARAMETERS:
        TT: list of temperatures (present only if T is a list)
        PartSum: partition sums calculated on a list of temperatures
    ---
    DESCRIPTION:
        Calculate range of partition sums at different temperatures.
        This function uses a python implementation of TIPS-2011 code:

        References:

            TIPS-2011:
            Laraia AL, Gamache RR, Lamouroux J, Gordon IE, Rothman LS.
            Total internal partition sums to support planetary remote sensing.
            Icarus 2011;215:391–400.
            http://dx.doi.org/10.1016/j.icarus.2011.06.004

            TIPS-2017:
            Gamache RR, Roller C, Lopes E, Gordon IE, Rothman LS, Polyansky OL, et al.
            Total internal partition sums for 166 isotopologues of 51 molecules
            important in planetary atmospheres: Application to HITRAN2016 and beyond.
            J Quant Spectrosc Radiat Transf 2017;203:70–87.
            http://dx.doi.org/10.1016/j.jqsrt.2017.03.045

        Output depends on a structure of input parameter T so that:
            1) If T is a scalar/list and step IS NOT provided,
                then calculate partition sums over each value of T.
            2) If T is a list and step parameter IS provided,
                then calculate partition sums between T[0] and T[1]
                with a given step.
    ---
    EXAMPLE OF USAGE:
        PartSum = partitionSum(1,1,[296,1000])
        TT,PartSum = partitionSum(1,1,[296,1000],step=0.1)
    ---
    """
    # version selector
    if version == 2011:
        BD_TIPS = BD_TIPS_2011_PYTHON
    elif version == 2017:
        BD_TIPS = BD_TIPS_2017_PYTHON
    else:
        raise Exception("Unknown version of TIPS: %s" % str(version))
    # partitionSum
    if not step:
        if type(T) not in set([list, tuple]):
            return BD_TIPS(M, I, T)[1]
        else:
            return [BD_TIPS(M, I, temp)[1] for temp in T]
    else:
        TT = arange(T[0], T[1], step)
        return TT, array([BD_TIPS(M, I, temp)[1] for temp in TT])


# ------------------ partition sum --------------------------------------


# ------------------ LINESHAPES -----------------------------------------

# ------------------ complex probability function -----------------------
# define static data
zone = __ComplexType__(1.0e0 + 0.0e0j)
zi = __ComplexType__(0.0e0 + 1.0e0j)
tt = __FloatType__(
    [
        0.5e0,
        1.5e0,
        2.5e0,
        3.5e0,
        4.5e0,
        5.5e0,
        6.5e0,
        7.5e0,
        8.5e0,
        9.5e0,
        10.5e0,
        11.5e0,
        12.5e0,
        13.5e0,
        14.5e0,
    ]
)
pipwoeronehalf = __FloatType__(0.564189583547756e0)

# "naive" implementation for benchmarks
def cpf3(X, Y):

    # X,Y,WR,WI - numpy arrays
    if type(X) != ndarray:
        if type(X) not in set([list, tuple]):
            X = array([X])
        else:
            X = array(X)
    if type(Y) != ndarray:
        if type(Y) not in set([list, tuple]):
            Y = array([Y])
        else:
            Y = array(Y)

    zm1 = zone / __ComplexType__(X + zi * Y)  # maybe redundant
    zm2 = zm1 ** 2
    zsum = zone
    zterm = zone

    for tt_i in tt:
        zterm *= zm2 * tt_i
        zsum += zterm

    zsum *= zi * zm1 * pipwoeronehalf

    return zsum.real, zsum.imag


T = __FloatType__(
    [
        0.314240376e0,
        0.947788391e0,
        1.59768264e0,
        2.27950708e0,
        3.02063703e0,
        3.8897249e0,
    ]
)
U = __FloatType__(
    [
        1.01172805e0,
        -0.75197147e0,
        1.2557727e-2,
        1.00220082e-2,
        -2.42068135e-4,
        5.00848061e-7,
    ]
)
S = __FloatType__(
    [
        1.393237e0,
        0.231152406e0,
        -0.155351466e0,
        6.21836624e-3,
        9.19082986e-5,
        -6.27525958e-7,
    ]
)

# Complex probability function implementation (Humlicek)
def cpf(X, Y):

    # X,Y,WR,WI - numpy arrays
    if type(X) != ndarray:
        if type(X) not in set([list, tuple]):
            X = array([X])
        else:
            X = array(X)
    if type(Y) != ndarray:
        if type(Y) not in set([list, tuple]):
            Y = array([Y])
        else:
            Y = array(Y)

    # REGION3
    index_REGION3 = where(sqrt(X ** 2 + Y ** 2) > __FloatType__(8.0e0))
    X_REGION3 = X[index_REGION3]
    Y_REGION3 = Y[index_REGION3]
    zm1 = zone / __ComplexType__(X_REGION3 + zi * Y_REGION3)
    zm2 = zm1 ** 2
    zsum_REGION3 = zone
    zterm = zone
    for tt_i in tt:
        zterm *= zm2 * tt_i
        zsum_REGION3 += zterm
    zsum_REGION3 *= zi * zm1 * pipwoeronehalf

    index_REGION12 = setdiff1d(array(arange(len(X))), array(index_REGION3))
    X_REGION12 = X[index_REGION12]
    Y_REGION12 = Y[index_REGION12]

    WR = __FloatType__(0.0e0)
    WI = __FloatType__(0.0e0)

    # REGION12
    Y1_REGION12 = Y_REGION12 + __FloatType__(1.5e0)
    Y2_REGION12 = Y1_REGION12 ** 2

    # REGION2
    subindex_REGION2 = where(
        (Y_REGION12 <= 0.85e0) & (abs(X_REGION12) >= (18.1e0 * Y_REGION12 + 1.65e0))
    )

    index_REGION2 = index_REGION12[subindex_REGION2]

    X_REGION2 = X[index_REGION2]
    Y_REGION2 = Y[index_REGION2]
    Y1_REGION2 = Y1_REGION12[subindex_REGION2]
    Y2_REGION2 = Y2_REGION12[subindex_REGION2]
    Y3_REGION2 = Y_REGION2 + __FloatType__(3.0e0)

    WR_REGION2 = WR
    WI_REGION2 = WI

    WR_REGION2 = zeros(len(X_REGION2))
    ii = abs(X_REGION2) < __FloatType__(12.0e0)
    WR_REGION2[ii] = exp(-X_REGION2[ii] ** 2)
    WR_REGION2[~ii] = WR

    for I in range(6):
        R_REGION2 = X_REGION2 - T[I]
        R2_REGION2 = R_REGION2 ** 2
        D_REGION2 = __FloatType__(1.0e0) / (R2_REGION2 + Y2_REGION2)
        D1_REGION2 = Y1_REGION2 * D_REGION2
        D2_REGION2 = R_REGION2 * D_REGION2
        WR_REGION2 = WR_REGION2 + Y_REGION2 * (
            U[I] * (R_REGION2 * D2_REGION2 - 1.5e0 * D1_REGION2)
            + S[I] * Y3_REGION2 * D2_REGION2
        ) / (R2_REGION2 + 2.25e0)
        R_REGION2 = X_REGION2 + T[I]
        R2_REGION2 = R_REGION2 ** 2
        D_REGION2 = __FloatType__(1.0e0) / (R2_REGION2 + Y2_REGION2)
        D3_REGION2 = Y1_REGION2 * D_REGION2
        D4_REGION2 = R_REGION2 * D_REGION2
        WR_REGION2 = WR_REGION2 + Y_REGION2 * (
            U[I] * (R_REGION2 * D4_REGION2 - 1.5e0 * D3_REGION2)
            - S[I] * Y3_REGION2 * D4_REGION2
        ) / (R2_REGION2 + 2.25e0)
        WI_REGION2 = (
            WI_REGION2
            + U[I] * (D2_REGION2 + D4_REGION2)
            + S[I] * (D1_REGION2 - D3_REGION2)
        )

    # REGION3
    index_REGION1 = setdiff1d(array(index_REGION12), array(index_REGION2))
    X_REGION1 = X[index_REGION1]
    Y_REGION1 = X[index_REGION1]

    subindex_REGION1 = setdiff1d(
        array(arange(len(index_REGION12))), array(subindex_REGION2)
    )
    Y1_REGION1 = Y1_REGION12[subindex_REGION1]
    Y2_REGION1 = Y2_REGION12[subindex_REGION1]

    WR_REGION1 = WR
    WI_REGION1 = WI

    for I in range(6):
        R_REGION1 = X_REGION1 - T[I]
        D_REGION1 = __FloatType__(1.0e0) / (R_REGION1 ** 2 + Y2_REGION1)
        D1_REGION1 = Y1_REGION1 * D_REGION1
        D2_REGION1 = R_REGION1 * D_REGION1
        R_REGION1 = X_REGION1 + T[I]
        D_REGION1 = __FloatType__(1.0e0) / (R_REGION1 ** 2 + Y2_REGION1)
        D3_REGION1 = Y1_REGION1 * D_REGION1
        D4_REGION1 = R_REGION1 * D_REGION1

        WR_REGION1 = (
            WR_REGION1
            + U[I] * (D1_REGION1 + D3_REGION1)
            - S[I] * (D2_REGION1 - D4_REGION1)
        )
        WI_REGION1 = (
            WI_REGION1
            + U[I] * (D2_REGION1 + D4_REGION1)
            + S[I] * (D1_REGION1 - D3_REGION1)
        )

    # total result
    WR_TOTAL = zeros(len(X))
    WI_TOTAL = zeros(len(X))
    # REGION3
    WR_TOTAL[index_REGION3] = zsum_REGION3.real
    WI_TOTAL[index_REGION3] = zsum_REGION3.imag
    # REGION2
    WR_TOTAL[index_REGION2] = WR_REGION2
    WI_TOTAL[index_REGION2] = WI_REGION2
    # REGION1
    WR_TOTAL[index_REGION1] = WR_REGION1
    WI_TOTAL[index_REGION1] = WI_REGION1

    return WR_TOTAL, WI_TOTAL


hcpf = cpf  # stub for initial cpf

# ------------------ Schreier CPF ------------------------

# "Optimized implementations of rational approximations
#  for the Voigt and complex error function".
# Franz Schreier. JQSRT 112 (2011) 1010-10250
# doi:10.1016/j.jqsrt.2010.12.010

# Enable this if numpy.polyval doesn't perform well.
"""
def polyval(p, x):
    y = zeros(x.shape, dtype=float)
    for i, v in enumerate(p):
        y *= x
        y += v
    return y
"""


def cef(x, y, N):
    # Computes the function w(z) = exp(-zA2) erfc(-iz) using a rational
    # series with N terms. It is assumed that Im(z) > 0 or Im(z) = 0.
    z = x + 1.0j * y
    M = 2 * N
    M2 = 2 * M
    k = arange(-M + 1, M)  #'; # M2 = no. of sampling points.
    L = sqrt(N / sqrt(2))
    # Optimal choice of L.
    theta = k * pi / M
    t = L * tan(theta / 2)
    # Variables theta and t.
    # f = exp(-t.A2)*(LA2+t.A2); f = [0; f]; # Function to be transformed.
    f = zeros(len(t) + 1)
    f[0] = 0
    f[1:] = exp(-(t ** 2)) * (L ** 2 + t ** 2)
    # f = insert(exp(-t**2)*(L**2+t**2),0,0)
    a = real(fft(fftshift(f))) / M2
    # Coefficients of transform.
    a = flipud(a[1 : N + 1])
    # Reorder coefficients.
    Z = (L + 1.0j * z) / (L - 1.0j * z)
    p = polyval(a, Z)
    # Polynomial evaluation.
    w = 2 * p / (L - 1.0j * z) ** 2 + (1 / sqrt(pi)) / (L - 1.0j * z)
    # Evaluate w(z).
    return w


# weideman24 by default
# weideman24 = lambda x,y: cef(x,y,24)
weideman = lambda x, y, n: cef(x, y, n)


def hum1_wei(x, y, n=24):
    t = y - 1.0j * x
    cerf = 1 / sqrt(pi) * t / (0.5 + t ** 2)
    """
    z = x+1j*y
    cerf = 1j*z/sqrt(pi)/(z**2-0.5)
    """
    mask = abs(x) + y < 15.0
    if any(mask):
        w24 = weideman(x[mask], y[mask], n)
        place(cerf, mask, w24)
    return cerf.real, cerf.imag


VARIABLES["CPF"] = hum1_wei
# VARIABLES['CPF'] = cpf

# ------------------ Hartmann-Tran Profile (HTP) ------------------------
def pcqsdhc(sg0, GamD, Gam0, Gam2, Shift0, Shift2, anuVC, eta, sg, Ylm=0.0):
    # -------------------------------------------------
    #      "pCqSDHC": partially-Correlated quadratic-Speed-Dependent Hard-Collision
    #      Subroutine to Compute the complex normalized spectral shape of an
    #      isolated line by the pCqSDHC model
    #
    #      Reference:
    #      H. Tran, N.H. Ngo, J.-M. Hartmann.
    #      Efficient computation of some speed-dependent isolated line profiles.
    #      JQSRT, Volume 129, November 2013, Pages 199–203
    #      http://dx.doi.org/10.1016/j.jqsrt.2013.06.015
    #
    #      Input/Output Parameters of Routine (Arguments or Common)
    #      ---------------------------------
    #      T          : Temperature in Kelvin (Input).
    #      amM1       : Molar mass of the absorber in g/mol(Input).
    #      sg0        : Unperturbed line position in cm-1 (Input).
    #      GamD       : Doppler HWHM in cm-1 (Input)
    #      Gam0       : Speed-averaged line-width in cm-1 (Input).
    #      Gam2       : Speed dependence of the line-width in cm-1 (Input).
    #      anuVC      : Velocity-changing frequency in cm-1 (Input).
    #      eta        : Correlation parameter, No unit (Input).
    #      Shift0     : Speed-averaged line-shift in cm-1 (Input).
    #      Shift2     : Speed dependence of the line-shift in cm-1 (Input)
    #      sg         : Current WaveNumber of the Computation in cm-1 (Input).
    #      Ylm        : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    #
    #      Output Quantities (through Common Statements)
    #      -----------------
    #      LS_pCqSDHC_R: Real part of the normalized spectral shape (cm)
    #      LS_pCqSDHC_I: Imaginary part of the normalized spectral shape (cm)
    #
    #      Called Routines: 'CPF'      (Complex Probability Function)
    #      ---------------  'CPF3'      (Complex Probability Function for the region 3)
    #
    #      Called By: Main Program
    #      ---------
    #
    #     Double Precision Version
    #
    # -------------------------------------------------

    # sg is the only vector argument which is passed to function

    if type(sg) not in set([array, ndarray, list, tuple]):
        sg = array([sg])

    number_of_points = len(sg)
    Aterm_GLOBAL = zeros(number_of_points, dtype=__ComplexType__)
    Bterm_GLOBAL = zeros(number_of_points, dtype=__ComplexType__)

    cte = sqrt(log(2.0e0)) / GamD
    rpi = sqrt(pi)
    iz = __ComplexType__(0.0e0 + 1.0e0j)

    c0 = __ComplexType__(Gam0 + 1.0e0j * Shift0)
    c2 = __ComplexType__(Gam2 + 1.0e0j * Shift2)
    c0t = __ComplexType__((1.0e0 - eta) * (c0 - 1.5e0 * c2) + anuVC)
    c2t = __ComplexType__((1.0e0 - eta) * c2)

    # PART1
    if abs(c2t) == 0.0e0:
        Z1 = (iz * (sg0 - sg) + c0t) * cte
        xZ1 = -Z1.imag
        yZ1 = Z1.real
        WR1, WI1 = VARIABLES["CPF"](xZ1, yZ1)
        Aterm_GLOBAL = rpi * cte * __ComplexType__(WR1 + 1.0e0j * WI1)
        index_Z1 = abs(Z1) <= 4.0e3
        index_NOT_Z1 = ~index_Z1
        if any(index_Z1):
            Bterm_GLOBAL = (
                rpi
                * cte
                * ((1.0e0 - Z1 ** 2) * __ComplexType__(WR1 + 1.0e0j * WI1) + Z1 / rpi)
            )
        if any(index_NOT_Z1):
            Bterm_GLOBAL = cte * (
                rpi * __ComplexType__(WR1 + 1.0e0j * WI1)
                + 0.5e0 / Z1
                - 0.75e0 / (Z1 ** 3)
            )
    else:
        # PART2, PART3 AND PART4   (PART4 IS A MAIN PART)

        # X - vector, Y - scalar
        X = (iz * (sg0 - sg) + c0t) / c2t
        Y = __ComplexType__(1.0e0 / ((2.0e0 * cte * c2t)) ** 2)
        csqrtY = (Gam2 - iz * Shift2) / (
            2.0e0 * cte * (1.0e0 - eta) * (Gam2 ** 2 + Shift2 ** 2)
        )

        index_PART2 = abs(X) <= 3.0e-8 * abs(Y)
        index_PART3 = (abs(Y) <= 1.0e-15 * abs(X)) & ~index_PART2
        index_PART4 = ~(index_PART2 | index_PART3)

        # PART4
        if any(index_PART4):
            X_TMP = X[index_PART4]
            Z1 = sqrt(X_TMP + Y) - csqrtY
            Z2 = Z1 + __FloatType__(2.0e0) * csqrtY
            xZ1 = -Z1.imag
            yZ1 = Z1.real
            xZ2 = -Z2.imag
            yZ2 = Z2.real
            SZ1 = sqrt(xZ1 ** 2 + yZ1 ** 2)
            SZ2 = sqrt(xZ2 ** 2 + yZ2 ** 2)
            DSZ = abs(SZ1 - SZ2)
            SZmx = maximum(SZ1, SZ2)
            SZmn = minimum(SZ1, SZ2)
            length_PART4 = len(index_PART4)
            WR1_PART4 = zeros(length_PART4)
            WI1_PART4 = zeros(length_PART4)
            WR2_PART4 = zeros(length_PART4)
            WI2_PART4 = zeros(length_PART4)
            index_CPF3 = (DSZ <= 1.0e0) & (SZmx > 8.0e0) & (SZmn <= 8.0e0)
            index_CPF = ~index_CPF3  # can be removed
            if any(index_CPF3):
                WR1, WI1 = cpf3(xZ1[index_CPF3], yZ1[index_CPF3])
                WR2, WI2 = cpf3(xZ2[index_CPF3], yZ2[index_CPF3])
                WR1_PART4[index_CPF3] = WR1
                WI1_PART4[index_CPF3] = WI1
                WR2_PART4[index_CPF3] = WR2
                WI2_PART4[index_CPF3] = WI2
            if any(index_CPF):
                WR1, WI1 = VARIABLES["CPF"](xZ1[index_CPF], yZ1[index_CPF])
                WR2, WI2 = VARIABLES["CPF"](xZ2[index_CPF], yZ2[index_CPF])
                WR1_PART4[index_CPF] = WR1
                WI1_PART4[index_CPF] = WI1
                WR2_PART4[index_CPF] = WR2
                WI2_PART4[index_CPF] = WI2

            Aterm = (
                rpi
                * cte
                * (
                    __ComplexType__(WR1_PART4 + 1.0e0j * WI1_PART4)
                    - __ComplexType__(WR2_PART4 + 1.0e0j * WI2_PART4)
                )
            )
            Bterm = (
                -1.0e0
                + rpi
                / (2.0e0 * csqrtY)
                * (1.0e0 - Z1 ** 2)
                * __ComplexType__(WR1_PART4 + 1.0e0j * WI1_PART4)
                - rpi
                / (2.0e0 * csqrtY)
                * (1.0e0 - Z2 ** 2)
                * __ComplexType__(WR2_PART4 + 1.0e0j * WI2_PART4)
            ) / c2t
            Aterm_GLOBAL[index_PART4] = Aterm
            Bterm_GLOBAL[index_PART4] = Bterm

        # PART2
        if any(index_PART2):
            X_TMP = X[index_PART2]
            Z1 = (iz * (sg0 - sg[index_PART2]) + c0t) * cte
            Z2 = sqrt(X_TMP + Y) + csqrtY
            xZ1 = -Z1.imag
            yZ1 = Z1.real
            xZ2 = -Z2.imag
            yZ2 = Z2.real
            WR1_PART2, WI1_PART2 = VARIABLES["CPF"](xZ1, yZ1)
            WR2_PART2, WI2_PART2 = VARIABLES["CPF"](xZ2, yZ2)
            Aterm = (
                rpi
                * cte
                * (
                    __ComplexType__(WR1_PART2 + 1.0e0j * WI1_PART2)
                    - __ComplexType__(WR2_PART2 + 1.0e0j * WI2_PART2)
                )
            )
            Bterm = (
                -1.0e0
                + rpi
                / (2.0e0 * csqrtY)
                * (1.0e0 - Z1 ** 2)
                * __ComplexType__(WR1_PART2 + 1.0e0j * WI1_PART2)
                - rpi
                / (2.0e0 * csqrtY)
                * (1.0e0 - Z2 ** 2)
                * __ComplexType__(WR2_PART2 + 1.0e0j * WI2_PART2)
            ) / c2t
            Aterm_GLOBAL[index_PART2] = Aterm
            Bterm_GLOBAL[index_PART2] = Bterm

        # PART3
        if any(index_PART3):
            X_TMP = X[index_PART3]
            xZ1 = -sqrt(X_TMP + Y).imag
            yZ1 = sqrt(X_TMP + Y).real
            WR1_PART3, WI1_PART3 = VARIABLES["CPF"](xZ1, yZ1)
            index_ABS = abs(sqrt(X_TMP)) <= 4.0e3
            index_NOT_ABS = ~index_ABS
            Aterm = zeros(len(index_PART3), dtype=__ComplexType__)
            Bterm = zeros(len(index_PART3), dtype=__ComplexType__)
            if any(index_ABS):
                xXb = -sqrt(X).imag
                yXb = sqrt(X).real
                WRb, WIb = VARIABLES["CPF"](xXb, yXb)
                Aterm[index_ABS] = (2.0e0 * rpi / c2t) * (
                    1.0e0 / rpi
                    - sqrt(X_TMP[index_ABS]) * __ComplexType__(WRb + 1.0e0j * WIb)
                )
                Bterm[index_ABS] = (1.0e0 / c2t) * (
                    -1.0e0
                    + 2.0e0
                    * rpi
                    * (1.0e0 - X_TMP[index_ABS] - 2.0e0 * Y)
                    * (
                        1.0e0 / rpi
                        - sqrt(X_TMP[index_ABS]) * __ComplexType__(WRb + 1.0e0j * WIb)
                    )
                    + 2.0e0
                    * rpi
                    * sqrt(X_TMP[index_ABS] + Y)
                    * __ComplexType__(WR1_PART3 + 1.0e0j * WI1_PART3)
                )
            if any(index_NOT_ABS):
                Aterm[index_NOT_ABS] = (1.0e0 / c2t) * (
                    1.0e0 / X_TMP[index_NOT_ABS] - 1.5e0 / (X_TMP[index_NOT_ABS] ** 2)
                )
                Bterm[index_NOT_ABS] = (1.0e0 / c2t) * (
                    -1.0e0
                    + (1.0e0 - X_TMP[index_NOT_ABS] - 2.0e0 * Y)
                    * (
                        1.0e0 / X_TMP[index_NOT_ABS]
                        - 1.5e0 / (X_TMP[index_NOT_ABS] ** 2)
                    )
                    + 2.0e0
                    * rpi
                    * sqrt(X_TMP[index_NOT_ABS] + Y)
                    * __ComplexType__(WR1 + 1.0e0j * WI1)
                )
            Aterm_GLOBAL[index_PART3] = Aterm
            Bterm_GLOBAL[index_PART3] = Bterm

    # common part
    # LINE MIXING PART NEEDS FURTHER TESTING, USE WITH CAUTION!!!
    LS_pCqSDHC = (1.0e0 / pi) * (
        Aterm_GLOBAL
        / (
            1.0e0
            - (anuVC - eta * (c0 - 1.5e0 * c2)) * Aterm_GLOBAL
            + eta * c2 * Bterm_GLOBAL
        )
    )
    return LS_pCqSDHC.real + Ylm * LS_pCqSDHC.imag, LS_pCqSDHC.imag


# ------------------  CROSS-SECTIONS, XSECT.PY --------------------------------

# set interfaces for profiles


def PROFILE_HT(sg0, GamD, Gam0, Gam2, Shift0, Shift2, anuVC, eta, sg, Ylm=0.0):
    """
    #-------------------------------------------------
    #      "pCqSDHC": partially-Correlated quadratic-Speed-Dependent Hard-Collision
    #      Subroutine to Compute the complex normalized spectral shape of an
    #      isolated line by the pCqSDHC model
    #
    #      References:
    #
    #      1) N.H. Ngo, D. Lisak, H. Tran, J.-M. Hartmann.
    #         An isolated line-shape model to go beyond the Voigt profile in
    #         spectroscopic databases and radiative transfer codes.
    #         JQSRT, Volume 129, November 2013, Pages 89–100
    #         http://dx.doi.org/10.1016/j.jqsrt.2013.05.034
    #
    #      2) H. Tran, N.H. Ngo, J.-M. Hartmann.
    #         Efficient computation of some speed-dependent isolated line profiles.
    #         JQSRT, Volume 129, November 2013, Pages 199–203
    #         http://dx.doi.org/10.1016/j.jqsrt.2013.06.015
    #
    #      3) H. Tran, N.H. Ngo, J.-M. Hartmann.
    #         Erratum to “Efficient computation of some speed-dependent isolated line profiles”.
    #         JQSRT, Volume 134, February 2014, Pages 104
    #         http://dx.doi.org/10.1016/j.jqsrt.2013.10.015
    #
    #      Input/Output Parameters of Routine (Arguments or Common)
    #      ---------------------------------
    #      T       : Temperature in Kelvin (Input).
    #      amM1    : Molar mass of the absorber in g/mol(Input).
    #      sg0     : Unperturbed line position in cm-1 (Input).
    #      GamD    : Doppler HWHM in cm-1 (Input)
    #      Gam0    : Speed-averaged line-width in cm-1 (Input).
    #      Gam2    : Speed dependence of the line-width in cm-1 (Input).
    #      anuVC   : Velocity-changing frequency in cm-1 (Input).
    #      eta     : Correlation parameter, No unit (Input).
    #      Shift0  : Speed-averaged line-shift in cm-1 (Input).
    #      Shift2  : Speed dependence of the line-shift in cm-1 (Input)
    #      sg      : Current WaveNumber of the Computation in cm-1 (Input).
    #      Ylm     : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    #
    #      The function has two outputs:
    #      -----------------
    #      (1): Real part of the normalized spectral shape (cm)
    #      (2): Imaginary part of the normalized spectral shape (cm)
    #
    #      Called Routines: 'CPF'       (Complex Probability Function)
    #      ---------------  'CPF3'      (Complex Probability Function for the region 3)
    #
    #      Based on a double precision Fortran version
    #
    #-------------------------------------------------
    """
    return pcqsdhc(sg0, GamD, Gam0, Gam2, Shift0, Shift2, anuVC, eta, sg, Ylm)


PROFILE_HTP = PROFILE_HT  # stub for backwards compatibility


def PROFILE_SDRAUTIAN(sg0, GamD, Gam0, Gam2, Shift0, Shift2, anuVC, sg, Ylm=0.0):
    """
    # Speed dependent Rautian profile based on HTP.
    # Input parameters:
    #      sg0     : Unperturbed line position in cm-1 (Input).
    #      GamD    : Doppler HWHM in cm-1 (Input)
    #      Gam0    : Speed-averaged line-width in cm-1 (Input).
    #      Gam2    : Speed dependence of the line-width in cm-1 (Input).
    #      anuVC   : Velocity-changing frequency in cm-1 (Input).
    #      Shift0  : Speed-averaged line-shift in cm-1 (Input).
    #      Shift2  : Speed dependence of the line-shift in cm-1 (Input)
    #      sg      : Current WaveNumber of the Computation in cm-1 (Input).
    #      Ylm     : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    """
    return pcqsdhc(sg0, GamD, Gam0, Gam2, Shift0, Shift2, anuVC, cZero, sg, Ylm)


def PROFILE_RAUTIAN(sg0, GamD, Gam0, Shift0, anuVC, eta, sg, Ylm=0.0):
    """
    # Rautian profile based on HTP.
    # Input parameters:
    #      sg0     : Unperturbed line position in cm-1 (Input).
    #      GamD    : Doppler HWHM in cm-1 (Input)
    #      Gam0    : Speed-averaged line-width in cm-1 (Input).
    #      anuVC   : Velocity-changing frequency in cm-1 (Input).
    #      Shift0  : Speed-averaged line-shift in cm-1 (Input).
    #      sg      : Current WaveNumber of the Computation in cm-1 (Input).
    #      Ylm     : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    """
    return pcqsdhc(sg0, GamD, Gam0, cZero, Shift0, cZero, anuVC, cZero, sg, Ylm)


def PROFILE_SDVOIGT(sg0, GamD, Gam0, Gam2, Shift0, Shift2, sg, Ylm=0.0):
    """
    # Speed dependent Voigt profile based on HTP.
    # Input parameters:
    #      sg0     : Unperturbed line position in cm-1 (Input).
    #      GamD    : Doppler HWHM in cm-1 (Input)
    #      Gam0    : Speed-averaged line-width in cm-1 (Input).
    #      Gam2    : Speed dependence of the line-width in cm-1 (Input).
    #      Shift0  : Speed-averaged line-shift in cm-1 (Input).
    #      Shift2  : Speed dependence of the line-shift in cm-1 (Input)
    #      sg      : Current WaveNumber of the Computation in cm-1 (Input).
    #      Ylm     : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    """
    return pcqsdhc(sg0, GamD, Gam0, Gam2, Shift0, Shift2, cZero, cZero, sg, Ylm)


def PROFILE_VOIGT(sg0, GamD, Gam0, sg, Ylm=0.0):
    """
    # Voigt profile based on HTP.
    # Input parameters:
    #   sg0  : Unperturbed line position in cm-1 (Input).
    #   GamD : Doppler HWHM in cm-1 (Input)
    #   Gam0 : Speed-averaged line-width in cm-1 (Input).
    #   sg   : Current WaveNumber of the Computation in cm-1 (Input).
    #   Ylm  : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    """
    return PROFILE_HTP(sg0, GamD, Gam0, cZero, cZero, cZero, cZero, cZero, sg, Ylm)


def PROFILE_LORENTZ(sg0, Gam0, sg, Ylm=0.0):
    """
    # Lorentz profile.
    # Input parameters:
    #   sg0  : Unperturbed line position in cm-1 (Input).
    #   Gam0 : Speed-averaged line-width in cm-1 (Input).
    #   sg   : Current WaveNumber of the Computation in cm-1 (Input).
    #   Ylm  : 1st order (Rosenkranz) line mixing coefficients in cm-1 (Input)
    """
    # reduce the extra calculations in the case if Ylm is zero:
    if Ylm == 0.0:
        return Gam0 / (pi * (Gam0 ** 2 + (sg - sg0) ** 2))
    else:
        return (Gam0 + Ylm * (sg - sg0)) / (pi * (Gam0 ** 2 + (sg - sg0) ** 2))


def PROFILE_DOPPLER(sg0, GamD, sg):
    """
    # Doppler profile.
    # Input parameters:
    #   sg0: Unperturbed line position in cm-1 (Input).
    #   GamD: Doppler HWHM in cm-1 (Input)
    #   sg: Current WaveNumber of the Computation in cm-1 (Input).
    """
    return cSqrtLn2divSqrtPi * exp(-cLn2 * ((sg - sg0) / GamD) ** 2) / GamD


# Volume concentration of all gas molecules at the pressure p and temperature T
def volumeConcentration(p, T):
    return (p / 9.869233e-7) / (cBolts * T)  # CGS


# ------------------------------- PARAMETER DEPENDENCIES --------------------------------

# temperature dependence for intencities (HITRAN)
def EnvironmentDependency_Intensity(
    LineIntensityRef, T, Tref, SigmaT, SigmaTref, LowerStateEnergy, LineCenter
):
    const = __FloatType__(1.4388028496642257)
    ch = exp(-const * LowerStateEnergy / T) * (1 - exp(-const * LineCenter / T))
    zn = exp(-const * LowerStateEnergy / Tref) * (1 - exp(-const * LineCenter / Tref))
    LineIntensity = LineIntensityRef * SigmaTref / SigmaT * ch / zn
    return LineIntensity


# environmental dependence for GammaD (HTP, Voigt)    # Tref/T ????
def EnvironmentDependency_GammaD(GammaD_ref, T, Tref):
    # Doppler parameters do not depend on pressure!
    return GammaD_ref * sqrt(T / Tref)


# environmental dependence for Gamma0 (HTP, Voigt)
def EnvironmentDependency_Gamma0(Gamma0_ref, T, Tref, p, pref, TempRatioPower):
    return Gamma0_ref * p / pref * (Tref / T) ** TempRatioPower


# environmental dependence for Gamma2 (HTP)
def EnvironmentDependency_Gamma2(Gamma2_ref, T, Tref, p, pref, TempRatioPower):
    return Gamma2_ref * p / pref * (Tref / T) ** TempRatioPower


# environmental dependence for Delta0 (HTP)
def EnvironmentDependency_Delta0(Delta0_ref, p, pref):
    return Delta0_ref * p / pref


# environmental dependence for Delta2 (HTP)
def EnvironmentDependency_Delta2(Delta2_ref, p, pref):
    return Delta2_ref * p / pref


# environmental dependence for anuVC (HTP)
def EnvironmentDependency_anuVC(anuVC_ref, T, Tref, p, pref):
    return anuVC_ref * Tref / T * p / pref


# ------------------------------- /PARAMETER DEPENDENCIES --------------------------------

# ------------------------------- BINGINGS --------------------------------

# default parameter bindings
DefaultParameterBindings = {}

# default temperature dependencies
DefaultEnvironmentDependencyBindings = {}

# ------------------------------- /BINGINGS --------------------------------

# default values for intensity threshold
DefaultIntensityThreshold = 0.0  # cm*molec

# default value for omega wing in halfwidths (from center)
DefaultOmegaWingHW = 50.0  # cm-1    HOTW default


# check and argument for being a tuple or list
# this is connected with a "bug" that in Python
# (val) is not a tuple, but (val,) is a tuple
def listOfTuples(a):
    if type(a) not in set([list, tuple]):
        a = [a]
    return a


# determine default parameters from those which are passed to absorptionCoefficient_...
def getDefaultValuesForXsect(
    Components,
    SourceTables,
    Environment,
    OmegaRange,
    OmegaStep,
    OmegaWing,
    IntensityThreshold,
    Format,
):
    if SourceTables[0] == None:
        SourceTables = [
            "__BUFFER__",
        ]
    if Environment == None:
        Environment = {"T": 296.0, "p": 1.0}
    if Components == [None]:
        CompDict = {}
        for TableName in SourceTables:
            # check table existance
            if TableName not in LOCAL_TABLE_CACHE.keys():
                raise Exception(
                    "%s: no such table. Check tableList() for more info." % TableName
                )
            mol_ids = LOCAL_TABLE_CACHE[TableName]["data"]["molec_id"]
            iso_ids = LOCAL_TABLE_CACHE[TableName]["data"]["local_iso_id"]
            if len(mol_ids) != len(iso_ids):
                raise Exception("Lengths if mol_ids and iso_ids differ!")
            MI_zip = zip(mol_ids, iso_ids)
            MI_zip = set(MI_zip)
            for mol_id, iso_id in MI_zip:
                CompDict[(mol_id, iso_id)] = None
        Components = CompDict.keys()
    if OmegaRange == None:
        omega_min = float("inf")
        omega_max = float("-inf")
        for TableName in SourceTables:
            nu = LOCAL_TABLE_CACHE[TableName]["data"]["nu"]
            numin = min(nu)
            numax = max(nu)
            if omega_min > numin:
                omega_min = numin
            if omega_max < numax:
                omega_max = numax
        OmegaRange = (omega_min, omega_max)
    if OmegaStep == None:
        OmegaStep = 0.01  # cm-1
    if OmegaWing == None:
        OmegaWing = 0.0  # cm-1
    if not Format:
        """
        Infinitesimal = 1e-14 # put this to header in next version!
        min_number_of_digits = 4 # minimal number of digits after dec. pnt.
        last_digit_pos = 0
        while modf(OmegaStep * 10**last_digit_pos)[0] > Infinitesimal:
            last_digit_pos += 1
        actual_number_of_digits = max(min_number_of_digits,last_digit_pos)
        Format = '%%.%df %%e' % actual_number_of_digits
        """
        Format = "%.12f %e"
    return (
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    )


# save numpy arrays to file
# arrays must have same dimensions
def save_to_file(fname, fformat, *arg):
    f = open(fname, "w")
    for i in range(len(arg[0])):
        argline = []
        for j in range(len(arg)):
            argline.append(arg[j][i])
        f.write((fformat + "\n") % tuple(argline))
    f.close()


# ==========================================================================================
# =========================== NEW ABSORPTION COEFFICIENT ===================================
# ==========================================================================================


def absorptionCoefficient_HT(
    Components=None,
    SourceTables=None,
    partitionFunction=PYTIPS2017,
    Environment=None,
    OmegaRange=None,
    OmegaStep=None,
    OmegaWing=None,
    IntensityThreshold=DefaultIntensityThreshold,
    OmegaWingHW=DefaultOmegaWingHW,
    GammaL="gamma_air",
    HITRAN_units=True,
    LineShift=True,
    File=None,
    Format=None,
    OmegaGrid=None,
    WavenumberRange=None,
    WavenumberStep=None,
    WavenumberWing=None,
    WavenumberWingHW=None,
    WavenumberGrid=None,
    Diluent={},
    EnvDependences=None,
    LineMixingRosen=False,
):
    """
    INPUT PARAMETERS:
        Components:  list of tuples [(M,I,D)], where
                        M - HITRAN molecule number,
                        I - HITRAN isotopologue number,
                        D - relative abundance (optional)
        SourceTables:  list of tables from which to calculate cross-section   (optional)
        partitionFunction:  pointer to partition function (default is PYTIPS) (optional)
        Environment:  dictionary containing thermodynamic parameters.
                        'p' - pressure in atmospheres,
                        'T' - temperature in Kelvin
                        Default={'p':1.,'T':296.}
        WavenumberRange:  wavenumber range to consider.
        WavenumberStep:   wavenumber step to consider.
        WavenumberWing:   absolute wing for calculating a lineshape (in cm-1)
        WavenumberWingHW:  relative wing for calculating a lineshape (in halfwidths)
        IntensityThreshold:  threshold for intensities
        GammaL:  specifies broadening parameter ('gamma_air' or 'gamma_self')
        HITRAN_units:  use cm2/molecule (True) or cm-1 (False) for absorption coefficient
        File:   write output to file (if specified)
        Format:  c-format of file output (accounts for significant digits in WavenumberStep)
        LineMixingRosen: include 1st order line mixing to calculation
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid with respect to parameters WavenumberRange and WavenumberStep
        Xsect: absorption coefficient calculated on the grid
    ---
    DESCRIPTION:
        Calculate absorption coefficient using HT profile.
        Absorption coefficient is calculated at arbitrary temperature and pressure.
        User can vary a wide range of parameters to control a process of calculation.
        The choise of these parameters depends on properties of a particular linelist.
        Default values are a sort of guess which gives a decent precision (on average)
        for a reasonable amount of cpu time. To increase calculation accuracy,
        user should use a trial and error method.
    ---
    EXAMPLE OF USAGE:
        nu,coef = absorptionCoefficient_HT(((2,1),),'co2',WavenumberStep=0.01,
                                              HITRAN_units=False,GammaL='gamma_self')
    ---
    """

    if LineMixingRosen is True:
        raise NotImplementedError(
            "line mixing is not implemented yet for this function"
        )

    # Parameters OmegaRange,OmegaStep,OmegaWing,OmegaWingHW, and OmegaGrid
    # are deprecated and given for backward compatibility with the older versions.
    if WavenumberRange:
        OmegaRange = WavenumberRange
    if WavenumberStep:
        OmegaStep = WavenumberStep
    if WavenumberWing:
        OmegaWing = WavenumberWing
    if WavenumberWingHW:
        OmegaWingHW = WavenumberWingHW
    if WavenumberGrid:
        OmegaGrid = WavenumberGrid

    # "bug" with 1-element list
    Components = listOfTuples(Components)
    SourceTables = listOfTuples(SourceTables)

    # determine final input values
    (
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    ) = getDefaultValuesForXsect(
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    )

    # warn user about too large omega step
    if OmegaStep > 0.1:
        warn("Big wavenumber step: possible accuracy decline")

    # get uniform linespace for cross-section
    # number_of_points = (OmegaRange[1]-OmegaRange[0])/OmegaStep + 1
    # Omegas = linspace(OmegaRange[0],OmegaRange[1],number_of_points)
    if OmegaGrid is not None:
        Omegas = npsort(OmegaGrid)
    else:
        # Omegas = arange(OmegaRange[0],OmegaRange[1],OmegaStep)
        Omegas = arange_(OmegaRange[0], OmegaRange[1], OmegaStep)  # fix
    number_of_points = len(Omegas)
    Xsect = zeros(number_of_points)

    # reference temperature and pressure
    Tref = __FloatType__(296.0)  # K
    pref = __FloatType__(1.0)  # atm

    # actual temperature and pressure
    T = Environment["T"]  # K
    p = Environment["p"]  # atm

    # Find reference temperature
    TRanges = [(0, 100), (100, 200), (200, 400), (400, float("inf"))]
    Trefs = [50.0, 150.0, 296.0, 700.0]
    for TRange, TrefHT in zip(TRanges, Trefs):
        if T >= TRange[0] and T < TRange[1]:
            break
    if VARIABLES["DEBUG"]:
        print("absorptionCoefficient_HT: TrefHT=%f" % TrefHT)

    # create dictionary from Components
    ABUNDANCES = {}
    NATURAL_ABUNDANCES = {}
    for Component in Components:
        M = Component[0]
        I = Component[1]
        if len(Component) >= 3:
            ni = Component[2]
        else:
            try:
                ni = ISO[(M, I)][ISO_INDEX["abundance"]]
            except KeyError:
                raise Exception("cannot find component M,I = %d,%d." % (M, I))
        ABUNDANCES[(M, I)] = ni
        NATURAL_ABUNDANCES[(M, I)] = ISO[(M, I)][ISO_INDEX["abundance"]]

    # precalculation of volume concentration
    if HITRAN_units:
        factor = __FloatType__(1.0)
    else:
        factor = volumeConcentration(p, T)
    if VARIABLES["DEBUG"]:
        print("absorptionCoefficient_HT: factor=%f" % factor)

    # setup the default empty environment dependence function
    if not EnvDependences:
        EnvDependences = lambda ENV, LINE: {}
    Env = Environment.copy()
    Env["Tref"] = Tref
    Env["pref"] = pref

    # setup the Diluent variable
    GammaL = GammaL.lower()
    if not Diluent:
        if GammaL == "gamma_air":
            Diluent = {"air": 1.0}
        elif GammaL == "gamma_self":
            Diluent = {"self": 1.0}
        else:
            raise Exception("Unknown GammaL value: %s" % GammaL)
    if VARIABLES["DEBUG"]:
        print("absorptionCoefficient_HT: Diluent=%s" % Diluent)

    # Simple check
    print(Diluent)  # Added print statement # CHANGED RJH 23MAR18  # Simple check
    for key in Diluent:
        val = Diluent[key]
        if val < 0 or val > 1:  # if val < 0 and val > 1:# CHANGED RJH 23MAR18
            raise Exception("Diluent fraction must be in [0,1]")

    # SourceTables contain multiple tables
    for TableName in SourceTables:

        # get the number of rows
        nline = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]

        # get parameter names for each table
        parnames = LOCAL_TABLE_CACHE[TableName]["data"].keys()

        # loop through line centers (single stream)
        for RowID in range(nline):

            # Get the custom environment dependences
            Line = {}
            for parname in parnames:
                Line[parname] = LOCAL_TABLE_CACHE[TableName]["data"][parname][RowID]
            CustomEnvDependences = EnvDependences(Env, Line)

            # get basic line parameters (lower level)
            LineCenterDB = LOCAL_TABLE_CACHE[TableName]["data"]["nu"][RowID]
            LineIntensityDB = LOCAL_TABLE_CACHE[TableName]["data"]["sw"][RowID]
            LowerStateEnergyDB = LOCAL_TABLE_CACHE[TableName]["data"]["elower"][RowID]
            MoleculeNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["molec_id"][RowID]
            IsoNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["local_iso_id"][RowID]

            # filter by molecule and isotopologue
            if (MoleculeNumberDB, IsoNumberDB) not in ABUNDANCES:
                continue

            # partition functions for T and Tref
            SigmaT = partitionFunction(MoleculeNumberDB, IsoNumberDB, T)
            SigmaTref = partitionFunction(MoleculeNumberDB, IsoNumberDB, Tref)

            # get all environment dependences from voigt parameters

            #   intensity
            if "sw" in CustomEnvDependences:
                LineIntensity = CustomEnvDependences["sw"]
            else:
                LineIntensity = EnvironmentDependency_Intensity(
                    LineIntensityDB,
                    T,
                    Tref,
                    SigmaT,
                    SigmaTref,
                    LowerStateEnergyDB,
                    LineCenterDB,
                )

            #   FILTER by LineIntensity: compare it with IntencityThreshold
            if LineIntensity < IntensityThreshold:
                continue

            #   doppler broadening coefficient (GammaD)
            cMassMol = 1.66053873e-27  # hapi
            m = molecularMass(MoleculeNumberDB, IsoNumberDB) * cMassMol * 1000
            GammaD = sqrt(2 * cBolts * T * log(2) / m / cc ** 2) * LineCenterDB

            #   pressure broadening coefficients
            Gamma0 = 0.0
            Shift0 = 0.0
            Gamma2 = 0.0
            Shift2 = 0.0
            Eta = 0
            NuVC = 0.0
            for species in Diluent:
                species_lower = (
                    species  # species_lower = species.lower() # CHANGED RJH 23MAR18
                )

                abun = Diluent[species]

                # Search for broadening HWHM.
                try:
                    # search for HT-style name
                    Gamma0DB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "gamma_HT_0_%s_%d" % (species_lower, TrefHT)
                    ][RowID]
                    if Gamma0DB == 0.0:
                        raise KeyError
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: Gamma0DB=%f (found as %s)"
                            % (Gamma0DB, "gamma_HT_0_%s_%d" % (species_lower, TrefHT))
                        )
                except KeyError:
                    try:
                        # search for Voigt-style name
                        Gamma0DB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "gamma_%s" % species_lower
                        ][RowID]
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: Gamma0DB=%f (found as %s)"
                                % (Gamma0DB, "gamma_%s" % species_lower)
                            )
                    except KeyError:
                        Gamma0DB = 0.0
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: Gamma0DB=%f (not found in database)"
                                % Gamma0DB
                            )

                # Search for temperature exponent for broadening HWHM.
                try:
                    # search for HT-style name
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "n_HT_%s_%d" % (species_lower, TrefHT)
                    ][RowID]
                    if TempRatioPowerDB == 0.0:
                        raise KeyError
                    Tref = TrefHT
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: TempRatioPowerDB=%f (found as %s)"
                            % (TempRatioPowerDB, "n_HT_%s_%d" % (species_lower, TrefHT))
                        )
                except KeyError:
                    Tref = 296.0
                    try:
                        # search for Voigt-style name
                        TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "n_%s" % species_lower
                        ][RowID]
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: TempRatioPowerDB=%f (found as %s). Tref is set to 296K."
                                % (TempRatioPowerDB, "n_%s" % species_lower)
                            )
                        if species_lower == "self" and TempRatioPowerDB == 0.0:
                            TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                                "n_air"
                            ][
                                RowID
                            ]  # same for self as for air
                            if VARIABLES["DEBUG"]:
                                print(
                                    "absorptionCoefficient_HT: using n_air for self species because n_self=0.0"
                                )
                    except KeyError:
                        # print('TempRatioPowerDB is set to zero')
                        # TempRatioPowerDB = 0
                        TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "n_air"
                        ][RowID]
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: TempRatioPowerDB=%f (found as n_air). Tref is set to 296K."
                                % TempRatioPowerDB
                            )

                # Add to the final Gamma0
                Gamma0T = CustomEnvDependences.get(
                    "gamma_HT_0_%s_%d" % (species_lower, TrefHT),
                    CustomEnvDependences.get(
                        "gamma_%s" % species_lower,
                        EnvironmentDependency_Gamma0(
                            Gamma0DB, T, Tref, p, pref, TempRatioPowerDB
                        ),
                    ),
                )
                Gamma0 += abun * Gamma0T

                # Search for shift.
                try:
                    # search for HT-style name
                    Shift0DB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "delta_HT_0_%s_%d" % (species_lower, TrefHT)
                    ][RowID]
                    if Shift0DB == 0.0:
                        raise KeyError
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: Shift0DB=%f (found as %s)"
                            % (Shift0DB, "delta_HT_0_%s_%d" % (species_lower, TrefHT))
                        )
                except KeyError:
                    try:
                        # search for Voigt-style name
                        Shift0DB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "delta_%s" % species_lower
                        ][RowID]
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: Shift0DB=%f (found as %s)"
                                % (Shift0DB, "delta_%s" % species_lower)
                            )
                    except KeyError:
                        Shift0DB = 0.0
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: Shift0DB=%f (not found in database)"
                                % Shift0DB
                            )

                # Search for temperature dependence for shift.
                try:
                    # search for HT-style name
                    deltap = LOCAL_TABLE_CACHE[TableName]["data"][
                        "deltap_HT_%s_%d" % (species_lower, TrefHT)
                    ][RowID]
                    if deltap == 0.0:
                        raise KeyError
                    Tref = TrefHT
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: deltap=%f (found as %s)"
                            % (deltap, "deltap_HT_%s_%d" % (species_lower, TrefHT))
                        )
                except KeyError:
                    Tref = 296.0
                    try:
                        # search for Voigt-style name
                        deltap = LOCAL_TABLE_CACHE[TableName]["data"][
                            "deltap_%s" % species_lower
                        ][RowID]
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: deltap=%f (found as %s). Tref is set to 296K."
                                % (deltap, "deltap_%s" % species_lower)
                            )
                    except KeyError:
                        deltap = 0.0
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: deltap=%f (not found in database)"
                                % deltap
                            )

                Shift0T = CustomEnvDependences.get(
                    "deltap_HT_%s_%d" % (species_lower, TrefHT),
                    CustomEnvDependences.get(
                        "deltap_%s" % species_lower,
                        ((Shift0DB + deltap * (T - Tref)) * p / pref),
                    ),
                )
                Shift0 += abun * Shift0T

                # Search for speed dependence for HWHM.
                try:
                    Gamma2DB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "gamma_HT_2_%s_%d" % (species_lower, TrefHT)
                    ][RowID]
                    # if Gamma2DB ==0.: raise KeyError
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: Gamma2DB=%f (found as %s)"
                            % (Gamma2DB, "gamma_HT_2_%s_%d" % (species_lower, TrefHT))
                        )
                except KeyError:
                    try:
                        SDDB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "SD_%s" % species_lower
                        ][RowID]
                        Gamma2DB = SDDB * Gamma0DB
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: SDDB=%f (found as %s)"
                                % (SDDB, "SD_%s" % species_lower)
                            )
                        if VARIABLES["DEBUG"]:
                            print("absorptionCoefficient_HT: Gamma2DB = SDDB*Gamma0DB")
                    except KeyError:
                        Gamma2DB = 0.0
                        if VARIABLES["DEBUG"]:
                            print(
                                "absorptionCoefficient_HT: Gamma2DB=%f (not found in database)"
                                % Gamma2DB
                            )

                Gamma2T = CustomEnvDependences.get(
                    "gamma_HT_2_%s_%d" % (species_lower, TrefHT), Gamma2DB * (p / pref)
                )
                Gamma2 += abun * Gamma2T

                # Search for speed dependence for shift.
                try:
                    Shift2DB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "delta_HT_2_%s_%d" % (species_lower, TrefHT)
                    ][RowID]
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: Shift2DB=%f (found as %s)"
                            % (Shift2DB, "delta_HT_2_%s_%d" % (species_lower, TrefHT))
                        )
                except KeyError:
                    Shift2DB = 0.0
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: Shift2DB=%f (not found in database)"
                            % Shift2DB
                        )

                Shift2T = CustomEnvDependences.get(
                    "delta_HT_2_%s_%d" % (species_lower, TrefHT), Shift2DB * p / pref
                )
                Shift2 += abun * Shift2T

                # Setup correlation parameter
                try:
                    EtaDB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "eta_HT_%s" % species_lower
                    ][RowID]
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: EtaDB=%f (found as %s)"
                            % (EtaDB, "eta_HT_%s" % species_lower)
                        )
                except KeyError:
                    EtaDB = 0.0
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: EtaDB=%f (not found in database)"
                            % EtaDB
                        )

                Eta += EtaDB * abun * (Gamma2T - 1j * Shift2T)

                # Search for frequency of VC (general formula depends on Eta)
                try:
                    NuVCDB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "nu_HT_%s" % species_lower
                    ][RowID]
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: NuVCDB=%f (found as %s)"
                            % (NuVCDB, "nu_HT_%s" % species_lower)
                        )
                except KeyError:
                    NuVCDB = 0.0
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: NuVCDB=%f (not found in database)"
                            % NuVCDB
                        )

                # Search for temperature exponent for frequency of VC
                try:
                    KappaDB = LOCAL_TABLE_CACHE[TableName]["data"][
                        "kappa_HT_%s" % species_lower
                    ][RowID]
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: KappaDB=%f (found as %s)"
                            % (KappaDB, "kappa_HT_%s" % species_lower)
                        )
                except KeyError:
                    KappaDB = 0.0
                    if VARIABLES["DEBUG"]:
                        print(
                            "absorptionCoefficient_HT: KappaDB=%f (not found in database)"
                            % KappaDB
                        )

                # 1st NuVC component: weighted sum of NuVC_i
                NuVC += abun * CustomEnvDependences.get(
                    "nu_HT_%s" % species_lower, NuVCDB * (Tref / T) ** KappaDB * p
                )

                # 2nd NuVC component (with negative sign)
                NuVC -= EtaDB * abun * (Gamma0T - 1j * Shift0T)

            # Calculate Eta by dividing the sum on (Gamma2-1j*Shift2)
            if Eta != 0:
                Eta /= Gamma2 - 1j * Shift2  # (avoid division-by-zero ambiguity)

            # 3rd (final) NuVC component, depending on final Eta parameter
            NuVC += Eta * (Gamma0 - 1j * Shift0)

            # get final wing of the line according to Gamma0, OmegaWingHW and OmegaWing
            OmegaWingF = max(OmegaWing, OmegaWingHW * Gamma0, OmegaWingHW * GammaD)

            # convert to float type if imaginary parts are zero (avoiding warnings in pcqsdhc)
            # if Eta.imag==0: Eta=Eta.real
            # if NuVC.imag==0: NuVC=NuVC.real

            BoundIndexLower = bisect(Omegas, LineCenterDB - OmegaWingF)
            BoundIndexUpper = bisect(Omegas, LineCenterDB + OmegaWingF)
            lineshape_vals = PROFILE_HT(
                LineCenterDB,
                GammaD,
                Gamma0,
                Gamma2,
                Shift0,
                Shift2,
                NuVC,
                Eta,
                Omegas[BoundIndexLower:BoundIndexUpper],
            )[0]
            Xsect[BoundIndexLower:BoundIndexUpper] += (
                factor
                / NATURAL_ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * LineIntensity
                * lineshape_vals
            )

    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


def absorptionCoefficient_SDVoigt(
    Components=None,
    SourceTables=None,
    partitionFunction=PYTIPS2017,
    Environment=None,
    OmegaRange=None,
    OmegaStep=None,
    OmegaWing=None,
    IntensityThreshold=DefaultIntensityThreshold,
    OmegaWingHW=DefaultOmegaWingHW,
    GammaL="gamma_air",
    HITRAN_units=True,
    LineShift=True,
    File=None,
    Format=None,
    OmegaGrid=None,
    WavenumberRange=None,
    WavenumberStep=None,
    WavenumberWing=None,
    WavenumberWingHW=None,
    WavenumberGrid=None,
    Diluent={},
    EnvDependences=None,
    LineMixingRosen=False,
):
    """
    INPUT PARAMETERS:
        Components:  list of tuples [(M,I,D)], where
                        M - HITRAN molecule number,
                        I - HITRAN isotopologue number,
                        D - relative abundance (optional)
        SourceTables:  list of tables from which to calculate cross-section   (optional)
        partitionFunction:  pointer to partition function (default is PYTIPS) (optional)
        Environment:  dictionary containing thermodynamic parameters.
                        'p' - pressure in atmospheres,
                        'T' - temperature in Kelvin
                        Default={'p':1.,'T':296.}
        WavenumberRange:  wavenumber range to consider.
        WavenumberStep:   wavenumber step to consider.
        WavenumberWing:   absolute wing for calculating a lineshape (in cm-1)
        WavenumberWingHW:  relative wing for calculating a lineshape (in halfwidths)
        IntensityThreshold:  threshold for intensities
        GammaL:  specifies broadening parameter ('gamma_air' or 'gamma_self')
        HITRAN_units:  use cm2/molecule (True) or cm-1 (False) for absorption coefficient
        File:   write output to file (if specified)
        Format:  c-format of file output (accounts for significant digits in WavenumberStep)
        LineMixingRosen: include 1st order line mixing to calculation
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid with respect to parameters WavenumberRange and WavenumberStep
        Xsect: absorption coefficient calculated on the grid
    ---
    DESCRIPTION:
        Calculate absorption coefficient using SDVoigt profile.
        Absorption coefficient is calculated at arbitrary temperature and pressure.
        User can vary a wide range of parameters to control a process of calculation.
        The choise of these parameters depends on properties of a particular linelist.
        Default values are a sort of guess which gives a decent precision (on average)
        for a reasonable amount of cpu time. To increase calculation accuracy,
        user should use a trial and error method.
    ---
    EXAMPLE OF USAGE:
        nu,coef = absorptionCoefficient_SDVoigt(((2,1),),'co2',WavenumberStep=0.01,
                                              HITRAN_units=False,GammaL='gamma_self')
    ---
    """

    # Paremeters OmegaRange,OmegaStep,OmegaWing,OmegaWingHW, and OmegaGrid
    # are deprecated and given for backward compatibility with the older versions.
    if WavenumberRange:
        OmegaRange = WavenumberRange
    if WavenumberStep:
        OmegaStep = WavenumberStep
    if WavenumberWing:
        OmegaWing = WavenumberWing
    if WavenumberWingHW:
        OmegaWingHW = WavenumberWingHW
    if WavenumberGrid:
        OmegaGrid = WavenumberGrid

    # "bug" with 1-element list
    Components = listOfTuples(Components)
    SourceTables = listOfTuples(SourceTables)

    # determine final input values
    (
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    ) = getDefaultValuesForXsect(
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    )

    # warn user about too large omega step
    if OmegaStep > 0.1:
        warn("Big wavenumber step: possible accuracy decline")

    # get uniform linespace for cross-section
    # number_of_points = (OmegaRange[1]-OmegaRange[0])/OmegaStep + 1
    # Omegas = linspace(OmegaRange[0],OmegaRange[1],number_of_points)
    if OmegaGrid is not None:
        Omegas = npsort(OmegaGrid)
    else:
        # Omegas = arange(OmegaRange[0],OmegaRange[1],OmegaStep)
        Omegas = arange_(OmegaRange[0], OmegaRange[1], OmegaStep)  # fix
    number_of_points = len(Omegas)
    Xsect = zeros(number_of_points)

    # reference temperature and pressure
    Tref = __FloatType__(296.0)  # K
    pref = __FloatType__(1.0)  # atm

    # actual temperature and pressure
    T = Environment["T"]  # K
    p = Environment["p"]  # atm

    # create dictionary from Components
    ABUNDANCES = {}
    NATURAL_ABUNDANCES = {}
    for Component in Components:
        M = Component[0]
        I = Component[1]
        if len(Component) >= 3:
            ni = Component[2]
        else:
            try:
                ni = ISO[(M, I)][ISO_INDEX["abundance"]]
            except KeyError:
                raise Exception("cannot find component M,I = %d,%d." % (M, I))
        ABUNDANCES[(M, I)] = ni
        NATURAL_ABUNDANCES[(M, I)] = ISO[(M, I)][ISO_INDEX["abundance"]]

    # precalculation of volume concentration
    if HITRAN_units:
        factor = __FloatType__(1.0)
    else:
        factor = volumeConcentration(p, T)

    # setup the default empty environment dependence function
    if not EnvDependences:
        EnvDependences = lambda ENV, LINE: {}
    Env = Environment.copy()
    Env["Tref"] = Tref
    Env["pref"] = pref

    # setup the Diluent variable
    GammaL = GammaL.lower()
    if not Diluent:
        if GammaL == "gamma_air":
            Diluent = {"air": 1.0}
        elif GammaL == "gamma_self":
            Diluent = {"self": 1.0}
        else:
            raise Exception("Unknown GammaL value: %s" % GammaL)

    # Simple check
    print(Diluent)  # Added print statement # CHANGED RJH 23MAR18  # Simple check
    for key in Diluent:
        val = Diluent[key]
        if val < 0 or val > 1:  # if val < 0 and val > 1:# CHANGED RJH 23MAR18
            raise Exception("Diluent fraction must be in [0,1]")

    # SourceTables contain multiple tables
    for TableName in SourceTables:

        # get the number of rows
        nline = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]

        # get parameter names for each table
        parnames = LOCAL_TABLE_CACHE[TableName]["data"].keys()

        # loop through line centers (single stream)
        for RowID in range(nline):

            # Get the custom environment dependences
            Line = {}
            for parname in parnames:
                Line[parname] = LOCAL_TABLE_CACHE[TableName]["data"][parname][RowID]
            CustomEnvDependences = EnvDependences(Env, Line)

            # get basic line parameters (lower level)
            LineCenterDB = LOCAL_TABLE_CACHE[TableName]["data"]["nu"][RowID]
            LineIntensityDB = LOCAL_TABLE_CACHE[TableName]["data"]["sw"][RowID]
            LowerStateEnergyDB = LOCAL_TABLE_CACHE[TableName]["data"]["elower"][RowID]
            MoleculeNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["molec_id"][RowID]
            IsoNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["local_iso_id"][RowID]

            # filter by molecule and isotopologue
            if (MoleculeNumberDB, IsoNumberDB) not in ABUNDANCES:
                continue

            # partition functions for T and Tref
            SigmaT = partitionFunction(MoleculeNumberDB, IsoNumberDB, T)
            SigmaTref = partitionFunction(MoleculeNumberDB, IsoNumberDB, Tref)

            # get all environment dependences from voigt parameters

            #   intensity
            if "sw" in CustomEnvDependences:
                LineIntensity = CustomEnvDependences["sw"]
            else:
                LineIntensity = EnvironmentDependency_Intensity(
                    LineIntensityDB,
                    T,
                    Tref,
                    SigmaT,
                    SigmaTref,
                    LowerStateEnergyDB,
                    LineCenterDB,
                )

            #   FILTER by LineIntensity: compare it with IntencityThreshold
            if LineIntensity < IntensityThreshold:
                continue

            #   doppler broadening coefficient (GammaD)
            cMassMol = 1.66053873e-27  # hapi
            m = molecularMass(MoleculeNumberDB, IsoNumberDB) * cMassMol * 1000
            GammaD = sqrt(2 * cBolts * T * log(2) / m / cc ** 2) * LineCenterDB

            #   pressure broadening coefficient
            Gamma0 = 0.0
            Shift0 = 0.0
            Gamma2 = 0.0
            Shift2 = 0.0
            Ylm = 0.0
            for species in Diluent:
                species_lower = (
                    species  # species_lower = species.lower() # CHANGED RJH 23MAR18
                )

                abun = Diluent[species]

                gamma_name = "gamma_" + species_lower
                try:
                    Gamma0DB = LOCAL_TABLE_CACHE[TableName]["data"][gamma_name][RowID]
                except:
                    Gamma0DB = 0.0

                n_name = "n_" + species_lower
                try:
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][n_name][
                        RowID
                    ]
                    if species_lower == "self" and TempRatioPowerDB == 0.0:
                        TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "n_air"
                        ][
                            RowID
                        ]  # same for self as for air
                except:
                    # TempRatioPowerDB = 0
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"]["n_air"][
                        RowID
                    ]

                # Add to the final Gamma0
                Gamma0 += abun * CustomEnvDependences.get(
                    gamma_name,  # default ->
                    EnvironmentDependency_Gamma0(
                        Gamma0DB, T, Tref, p, pref, TempRatioPowerDB
                    ),
                )

                delta_name = "delta_" + species_lower
                try:
                    Shift0DB = LOCAL_TABLE_CACHE[TableName]["data"][delta_name][RowID]
                except:
                    Shift0DB = 0.0

                deltap_name = "deltap_" + species_lower
                try:
                    deltap = LOCAL_TABLE_CACHE[TableName]["data"][deltap_name][RowID]
                except:
                    deltap = 0.0

                Shift0 += abun * CustomEnvDependences.get(
                    delta_name,  # default ->
                    ((Shift0DB + deltap * (T - Tref)) * p / pref),
                )

                SD_name = "sd_" + species_lower
                try:
                    SDDB = LOCAL_TABLE_CACHE[TableName]["data"][SD_name][RowID]
                except:
                    SDDB = 0.0

                Gamma2 += (
                    abun
                    * CustomEnvDependences.get(SD_name, SDDB * p / pref)  # default ->
                    * Gamma0DB
                )  # SDDB IS DIMENSIONLESS (LIKE THE ONES M. DEVI USED)

                Y_name = (
                    "y_sdv_" + species_lower + "_296"
                )  # this time only 296K; should be remade in case of multiple temperature references!
                try:
                    YlmDB = LOCAL_TABLE_CACHE[TableName]["data"][Y_name][RowID]
                except:
                    YlmDB = 0.0

                Ylm += abun * CustomEnvDependences.get(
                    Y_name, YlmDB * p / pref  # default ->
                )  # TODO: CHECK

                if not LineMixingRosen:
                    Ylm = 0.0

            #   get final wing of the line according to Gamma0, OmegaWingHW and OmegaWing
            OmegaWingF = max(OmegaWing, OmegaWingHW * Gamma0, OmegaWingHW * GammaD)

            BoundIndexLower = bisect(Omegas, LineCenterDB - OmegaWingF)
            BoundIndexUpper = bisect(Omegas, LineCenterDB + OmegaWingF)
            lineshape_vals = PROFILE_SDVOIGT(
                LineCenterDB,
                GammaD,
                Gamma0,
                Gamma2,
                Shift0,
                Shift2,
                Omegas[BoundIndexLower:BoundIndexUpper],
                Ylm,
            )[0]
            Xsect[BoundIndexLower:BoundIndexUpper] += (
                factor
                / NATURAL_ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * LineIntensity
                * lineshape_vals
            )

    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


def absorptionCoefficient_Voigt(
    Components=None,
    SourceTables=None,
    partitionFunction=PYTIPS2017,
    Environment=None,
    OmegaRange=None,
    OmegaStep=None,
    OmegaWing=None,
    IntensityThreshold=DefaultIntensityThreshold,
    OmegaWingHW=DefaultOmegaWingHW,
    GammaL="gamma_air",
    HITRAN_units=True,
    LineShift=True,
    File=None,
    Format=None,
    OmegaGrid=None,
    WavenumberRange=None,
    WavenumberStep=None,
    WavenumberWing=None,
    WavenumberWingHW=None,
    WavenumberGrid=None,
    Diluent={},
    EnvDependences=None,
    LineMixingRosen=False,
):
    """
    INPUT PARAMETERS:
        Components:  list of tuples [(M,I,D)], where
                        M - HITRAN molecule number,
                        I - HITRAN isotopologue number,
                        D - relative abundance (optional)
        SourceTables:  list of tables from which to calculate cross-section   (optional)
        partitionFunction:  pointer to partition function (default is PYTIPS) (optional)
        Environment:  dictionary containing thermodynamic parameters.
                        'p' - pressure in atmospheres,
                        'T' - temperature in Kelvin
                        Default={'p':1.,'T':296.}
        WavenumberRange:  wavenumber range to consider.
        WavenumberStep:   wavenumber step to consider.
        WavenumberWing:   absolute wing for calculating a lineshape (in cm-1)
        WavenumberWingHW:  relative wing for calculating a lineshape (in halfwidths)
        IntensityThreshold:  threshold for intensities
        GammaL:  specifies broadening parameter ('gamma_air' or 'gamma_self')
        HITRAN_units:  use cm2/molecule (True) or cm-1 (False) for absorption coefficient
        File:   write output to file (if specified)
        Format:  c-format of file output (accounts for significant digits in WavenumberStep)
        LineMixingRosen: include 1st order line mixing to calculation
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid with respect to parameters WavenumberRange and WavenumberStep
        Xsect: absorption coefficient calculated on the grid
    ---
    DESCRIPTION:
        Calculate absorption coefficient using Voigt profile.
        Absorption coefficient is calculated at arbitrary temperature and pressure.
        User can vary a wide range of parameters to control a process of calculation.
        The choise of these parameters depends on properties of a particular linelist.
        Default values are a sort of guess which gives a decent precision (on average)
        for a reasonable amount of cpu time. To increase calculation accuracy,
        user should use a trial and error method.
    ---
    EXAMPLE OF USAGE:
        nu,coef = absorptionCoefficient_Voigt(((2,1),),'co2',WavenumberStep=0.01,
                                              HITRAN_units=False,GammaL='gamma_self')
    ---
    """

    if LineMixingRosen is True:
        raise NotImplementedError(
            "line mixing is not implemented yet for this function"
        )

    # Paremeters OmegaRange,OmegaStep,OmegaWing,OmegaWingHW, and OmegaGrid
    # are deprecated and given for backward compatibility with the older versions.
    if WavenumberRange:
        OmegaRange = WavenumberRange
    if WavenumberStep:
        OmegaStep = WavenumberStep
    if WavenumberWing:
        OmegaWing = WavenumberWing
    if WavenumberWingHW:
        OmegaWingHW = WavenumberWingHW
    if WavenumberGrid:
        OmegaGrid = WavenumberGrid

    # "bug" with 1-element list
    Components = listOfTuples(Components)
    SourceTables = listOfTuples(SourceTables)

    # determine final input values
    (
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    ) = getDefaultValuesForXsect(
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    )

    # warn user about too large omega step
    if OmegaStep > 0.1:
        warn("Big wavenumber step: possible accuracy decline")

    # get uniform linespace for cross-section
    # number_of_points = (OmegaRange[1]-OmegaRange[0])/OmegaStep + 1
    # Omegas = linspace(OmegaRange[0],OmegaRange[1],number_of_points)
    if OmegaGrid is not None:
        Omegas = npsort(OmegaGrid)
    else:
        # Omegas = arange(OmegaRange[0],OmegaRange[1],OmegaStep)
        Omegas = arange_(OmegaRange[0], OmegaRange[1], OmegaStep)  # fix
    number_of_points = len(Omegas)
    Xsect = zeros(number_of_points)

    # reference temperature and pressure
    Tref = __FloatType__(296.0)  # K
    pref = __FloatType__(1.0)  # atm

    # actual temperature and pressure
    T = Environment["T"]  # K
    p = Environment["p"]  # atm

    # create dictionary from Components
    ABUNDANCES = {}
    NATURAL_ABUNDANCES = {}
    for Component in Components:
        M = Component[0]
        I = Component[1]
        if len(Component) >= 3:
            ni = Component[2]
        else:
            try:
                ni = ISO[(M, I)][ISO_INDEX["abundance"]]
            except KeyError:
                raise Exception("cannot find component M,I = %d,%d." % (M, I))
        ABUNDANCES[(M, I)] = ni
        NATURAL_ABUNDANCES[(M, I)] = ISO[(M, I)][ISO_INDEX["abundance"]]

    # precalculation of volume concentration
    if HITRAN_units:
        factor = __FloatType__(1.0)
    else:
        factor = volumeConcentration(p, T)

    # setup the default empty environment dependence function
    if not EnvDependences:
        EnvDependences = lambda ENV, LINE: {}
    Env = Environment.copy()
    Env["Tref"] = Tref
    Env["pref"] = pref

    # setup the Diluent variable
    GammaL = GammaL.lower()
    if not Diluent:
        if GammaL == "gamma_air":
            Diluent = {"air": 1.0}
        elif GammaL == "gamma_self":
            Diluent = {"self": 1.0}
        else:
            raise Exception("Unknown GammaL value: %s" % GammaL)

    # Simple check
    print(Diluent)  # Added print statement # CHANGED RJH 23MAR18  # Simple check
    for key in Diluent:
        val = Diluent[key]
        if val < 0 or val > 1:  # if val < 0 and val > 1:# CHANGED RJH 23MAR18
            raise Exception("Diluent fraction must be in [0,1]")

    # SourceTables contain multiple tables
    for TableName in SourceTables:

        # get the number of rows
        nline = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]

        # get parameter names for each table
        parnames = LOCAL_TABLE_CACHE[TableName]["data"].keys()

        # loop through line centers (single stream)
        for RowID in range(nline):

            # Get the custom environment dependences
            Line = {}
            for parname in parnames:
                Line[parname] = LOCAL_TABLE_CACHE[TableName]["data"][parname][RowID]
            CustomEnvDependences = EnvDependences(Env, Line)

            # get basic line parameters (lower level)
            LineCenterDB = LOCAL_TABLE_CACHE[TableName]["data"]["nu"][RowID]
            LineIntensityDB = LOCAL_TABLE_CACHE[TableName]["data"]["sw"][RowID]
            LowerStateEnergyDB = LOCAL_TABLE_CACHE[TableName]["data"]["elower"][RowID]
            MoleculeNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["molec_id"][RowID]
            IsoNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["local_iso_id"][RowID]

            # filter by molecule and isotopologue
            if (MoleculeNumberDB, IsoNumberDB) not in ABUNDANCES:
                continue

            # partition functions for T and Tref
            SigmaT = partitionFunction(MoleculeNumberDB, IsoNumberDB, T)
            SigmaTref = partitionFunction(MoleculeNumberDB, IsoNumberDB, Tref)

            # get all environment dependences from voigt parameters

            #   intensity
            if "sw" in CustomEnvDependences:
                LineIntensity = CustomEnvDependences["sw"]
            else:
                LineIntensity = EnvironmentDependency_Intensity(
                    LineIntensityDB,
                    T,
                    Tref,
                    SigmaT,
                    SigmaTref,
                    LowerStateEnergyDB,
                    LineCenterDB,
                )

            #   FILTER by LineIntensity: compare it with IntencityThreshold
            if LineIntensity < IntensityThreshold:
                continue

            #   doppler broadening coefficient (GammaD)
            cMassMol = 1.66053873e-27  # hapi
            m = molecularMass(MoleculeNumberDB, IsoNumberDB) * cMassMol * 1000
            GammaD = sqrt(2 * cBolts * T * log(2) / m / cc ** 2) * LineCenterDB

            #   pressure broadening coefficient
            Gamma0 = 0.0
            Shift0 = 0.0
            for species in Diluent:
                species_lower = (
                    species  # species_lower = species.lower() # CHANGED RJH 23MAR18
                )

                abun = Diluent[species]

                gamma_name = "gamma_" + species_lower
                try:
                    Gamma0DB = LOCAL_TABLE_CACHE[TableName]["data"][gamma_name][RowID]
                except:
                    Gamma0DB = 0.0

                n_name = "n_" + species_lower
                try:
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][n_name][
                        RowID
                    ]
                    if species_lower == "self" and TempRatioPowerDB == 0.0:
                        TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "n_air"
                        ][
                            RowID
                        ]  # same for self as for air
                except:
                    # TempRatioPowerDB = 0
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"]["n_air"][
                        RowID
                    ]

                # Add to the final Gamma0
                Gamma0 += abun * CustomEnvDependences.get(
                    gamma_name,  # default ->
                    EnvironmentDependency_Gamma0(
                        Gamma0DB, T, Tref, p, pref, TempRatioPowerDB
                    ),
                )

                delta_name = "delta_" + species_lower
                try:
                    Shift0DB = LOCAL_TABLE_CACHE[TableName]["data"][delta_name][RowID]
                except:
                    Shift0DB = 0.0

                deltap_name = "deltap_" + species_lower
                try:
                    deltap = LOCAL_TABLE_CACHE[TableName]["data"][deltap_name][RowID]
                except:
                    deltap = 0.0

                Shift0 += abun * CustomEnvDependences.get(
                    delta_name,  # default ->
                    ((Shift0DB + deltap * (T - Tref)) * p / pref),
                )

            #   get final wing of the line according to Gamma0, OmegaWingHW and OmegaWing
            OmegaWingF = max(OmegaWing, OmegaWingHW * Gamma0, OmegaWingHW * GammaD)

            BoundIndexLower = bisect(Omegas, LineCenterDB - OmegaWingF)
            BoundIndexUpper = bisect(Omegas, LineCenterDB + OmegaWingF)
            lineshape_vals = PROFILE_VOIGT(
                LineCenterDB + Shift0,
                GammaD,
                Gamma0,
                Omegas[BoundIndexLower:BoundIndexUpper],
            )[0]
            Xsect[BoundIndexLower:BoundIndexUpper] += (
                factor
                / NATURAL_ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * LineIntensity
                * lineshape_vals
            )

    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


def absorptionCoefficient_Lorentz(
    Components=None,
    SourceTables=None,
    partitionFunction=PYTIPS2017,
    Environment=None,
    OmegaRange=None,
    OmegaStep=None,
    OmegaWing=None,
    IntensityThreshold=DefaultIntensityThreshold,
    OmegaWingHW=DefaultOmegaWingHW,
    GammaL="gamma_air",
    HITRAN_units=True,
    LineShift=True,
    File=None,
    Format=None,
    OmegaGrid=None,
    WavenumberRange=None,
    WavenumberStep=None,
    WavenumberWing=None,
    WavenumberWingHW=None,
    WavenumberGrid=None,
    Diluent={},
    EnvDependences=None,
):
    """
    INPUT PARAMETERS:
        Components:  list of tuples [(M,I,D)], where
                        M - HITRAN molecule number,
                        I - HITRAN isotopologue number,
                        D - relative abundance (optional)
        SourceTables:  list of tables from which to calculate cross-section   (optional)
        partitionFunction:  pointer to partition function (default is PYTIPS) (optional)
        Environment:  dictionary containing thermodynamic parameters.
                        'p' - pressure in atmospheres,
                        'T' - temperature in Kelvin
                        Default={'p':1.,'T':296.}
        WavenumberRange:  wavenumber range to consider.
        WavenumberStep:   wavenumber step to consider.
        WavenumberWing:   absolute wing for calculating a lineshape (in cm-1)
        WavenumberWingHW:  relative wing for calculating a lineshape (in halfwidths)
        IntensityThreshold:  threshold for intensities
        GammaL:  specifies broadening parameter ('gamma_air' or 'gamma_self')
        HITRAN_units:  use cm2/molecule (True) or cm-1 (False) for absorption coefficient
        File:   write output to file (if specified)
        Format:  c-format of file output (accounts for significant digits in WavenumberStep)
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid with respect to parameters WavenumberRange and WavenumberStep
        Xsect: absorption coefficient calculated on the grid
    ---
    DESCRIPTION:
        Calculate absorption coefficient using Lorentz profile.
        Absorption coefficient is calculated at arbitrary temperature and pressure.
        User can vary a wide range of parameters to control a process of calculation.
        The choise of these parameters depends on properties of a particular linelist.
        Default values are a sort of guess which gives a decent precision (on average)
        for a reasonable amount of cpu time. To increase calculation accuracy,
        user should use a trial and error method.
    ---
    EXAMPLE OF USAGE:
        nu,coef = absorptionCoefficient_Lorentz(((2,1),),'co2',WavenumberStep=0.01,
                                              HITRAN_units=False,GammaL='gamma_self')
    ---
    """

    # Paremeters OmegaRange,OmegaStep,OmegaWing,OmegaWingHW, and OmegaGrid
    # are deprecated and given for backward compatibility with the older versions.
    if WavenumberRange:
        OmegaRange = WavenumberRange
    if WavenumberStep:
        OmegaStep = WavenumberStep
    if WavenumberWing:
        OmegaWing = WavenumberWing
    if WavenumberWingHW:
        OmegaWingHW = WavenumberWingHW
    if WavenumberGrid:
        OmegaGrid = WavenumberGrid

    # "bug" with 1-element list
    Components = listOfTuples(Components)
    SourceTables = listOfTuples(SourceTables)

    # determine final input values
    (
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    ) = getDefaultValuesForXsect(
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    )

    # warn user about too large omega step
    if OmegaStep > 0.1:
        warn("Big wavenumber step: possible accuracy decline")

    # get uniform linespace for cross-section
    # number_of_points = (OmegaRange[1]-OmegaRange[0])/OmegaStep + 1
    # Omegas = linspace(OmegaRange[0],OmegaRange[1],number_of_points)
    if OmegaGrid is not None:
        Omegas = npsort(OmegaGrid)
    else:
        # Omegas = arange(OmegaRange[0],OmegaRange[1],OmegaStep)
        Omegas = arange_(OmegaRange[0], OmegaRange[1], OmegaStep)  # fix
    number_of_points = len(Omegas)
    Xsect = zeros(number_of_points)

    # reference temperature and pressure
    Tref = __FloatType__(296.0)  # K
    pref = __FloatType__(1.0)  # atm

    # actual temperature and pressure
    T = Environment["T"]  # K
    p = Environment["p"]  # atm

    # create dictionary from Components
    ABUNDANCES = {}
    NATURAL_ABUNDANCES = {}
    for Component in Components:
        M = Component[0]
        I = Component[1]
        if len(Component) >= 3:
            ni = Component[2]
        else:
            try:
                ni = ISO[(M, I)][ISO_INDEX["abundance"]]
            except KeyError:
                raise Exception("cannot find component M,I = %d,%d." % (M, I))
        ABUNDANCES[(M, I)] = ni
        NATURAL_ABUNDANCES[(M, I)] = ISO[(M, I)][ISO_INDEX["abundance"]]

    # precalculation of volume concentration
    if HITRAN_units:
        factor = __FloatType__(1.0)
    else:
        factor = volumeConcentration(p, T)

    # setup the default empty environment dependence function
    if not EnvDependences:
        EnvDependences = lambda ENV, LINE: {}
    Env = Environment.copy()
    Env["Tref"] = Tref
    Env["pref"] = pref

    # setup the Diluent variable
    GammaL = GammaL.lower()
    if not Diluent:
        if GammaL == "gamma_air":
            Diluent = {"air": 1.0}
        elif GammaL == "gamma_self":
            Diluent = {"self": 1.0}
        else:
            raise Exception("Unknown GammaL value: %s" % GammaL)

    # Simple check
    print(Diluent)  # Added print statement # CHANGED RJH 23MAR18  # Simple check
    for key in Diluent:
        val = Diluent[key]
        if val < 0 or val > 1:  # if val < 0 and val > 1:# CHANGED RJH 23MAR18
            raise Exception("Diluent fraction must be in [0,1]")

    # SourceTables contain multiple tables
    for TableName in SourceTables:

        # get the number of rows
        nline = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]

        # get parameter names for each table
        parnames = LOCAL_TABLE_CACHE[TableName]["data"].keys()

        # loop through line centers (single stream)
        for RowID in range(nline):

            # Get the custom environment dependences
            Line = {}
            for parname in parnames:
                Line[parname] = LOCAL_TABLE_CACHE[TableName]["data"][parname][RowID]
            CustomEnvDependences = EnvDependences(Env, Line)

            # get basic line parameters (lower level)
            LineCenterDB = LOCAL_TABLE_CACHE[TableName]["data"]["nu"][RowID]
            LineIntensityDB = LOCAL_TABLE_CACHE[TableName]["data"]["sw"][RowID]
            LowerStateEnergyDB = LOCAL_TABLE_CACHE[TableName]["data"]["elower"][RowID]
            MoleculeNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["molec_id"][RowID]
            IsoNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["local_iso_id"][RowID]

            # filter by molecule and isotopologue
            if (MoleculeNumberDB, IsoNumberDB) not in ABUNDANCES:
                continue

            # partition functions for T and Tref
            SigmaT = partitionFunction(MoleculeNumberDB, IsoNumberDB, T)
            SigmaTref = partitionFunction(MoleculeNumberDB, IsoNumberDB, Tref)

            # get all environment dependences from voigt parameters

            #   intensity
            if "sw" in CustomEnvDependences:
                LineIntensity = CustomEnvDependences["sw"]
            else:
                LineIntensity = EnvironmentDependency_Intensity(
                    LineIntensityDB,
                    T,
                    Tref,
                    SigmaT,
                    SigmaTref,
                    LowerStateEnergyDB,
                    LineCenterDB,
                )

            #   FILTER by LineIntensity: compare it with IntencityThreshold
            if LineIntensity < IntensityThreshold:
                continue

            #   pressure broadening coefficient
            Gamma0 = 0.0
            Shift0 = 0.0
            for species in Diluent:
                species_lower = (
                    species  # species_lower = species.lower() # CHANGED RJH 23MAR18
                )

                abun = Diluent[species]

                gamma_name = "gamma_" + species_lower
                try:
                    Gamma0DB = LOCAL_TABLE_CACHE[TableName]["data"][gamma_name][RowID]
                except:
                    Gamma0DB = 0.0

                n_name = "n_" + species_lower
                try:
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][n_name][
                        RowID
                    ]
                    if species_lower == "self" and TempRatioPowerDB == 0.0:
                        TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"][
                            "n_air"
                        ][
                            RowID
                        ]  # same for self as for air
                except:
                    # TempRatioPowerDB = 0
                    TempRatioPowerDB = LOCAL_TABLE_CACHE[TableName]["data"]["n_air"][
                        RowID
                    ]

                # Add to the final Gamma0
                Gamma0 += abun * CustomEnvDependences.get(
                    gamma_name,  # default ->
                    EnvironmentDependency_Gamma0(
                        Gamma0DB, T, Tref, p, pref, TempRatioPowerDB
                    ),
                )

                delta_name = "delta_" + species_lower
                try:
                    Shift0DB = LOCAL_TABLE_CACHE[TableName]["data"][delta_name][RowID]
                except:
                    Shift0DB = 0.0

                deltap_name = "deltap_" + species_lower
                try:
                    deltap = LOCAL_TABLE_CACHE[TableName]["data"][deltap_name][RowID]
                except:
                    deltap = 0.0

                Shift0 += abun * CustomEnvDependences.get(
                    delta_name,  # default ->
                    ((Shift0DB + deltap * (T - Tref)) * p / pref),
                )

            #   get final wing of the line according to Gamma0, OmegaWingHW and OmegaWing
            OmegaWingF = max(OmegaWing, OmegaWingHW * Gamma0)

            BoundIndexLower = bisect(Omegas, LineCenterDB - OmegaWingF)
            BoundIndexUpper = bisect(Omegas, LineCenterDB + OmegaWingF)
            lineshape_vals = PROFILE_LORENTZ(
                LineCenterDB + Shift0, Gamma0, Omegas[BoundIndexLower:BoundIndexUpper]
            )
            Xsect[BoundIndexLower:BoundIndexUpper] += (
                factor
                / NATURAL_ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * LineIntensity
                * lineshape_vals
            )

    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


# Alias for a profile selector
# absorptionCoefficient = absorptionCoefficient_HT

# ==========================================================================================
# =========================== /NEW ABSORPTION COEFFICIENT ===================================
# ==========================================================================================

# calculate apsorption for Doppler profile
def absorptionCoefficient_Doppler(
    Components=None,
    SourceTables=None,
    partitionFunction=PYTIPS2017,
    Environment=None,
    OmegaRange=None,
    OmegaStep=None,
    OmegaWing=None,
    IntensityThreshold=DefaultIntensityThreshold,
    OmegaWingHW=DefaultOmegaWingHW,
    ParameterBindings=DefaultParameterBindings,
    EnvironmentDependencyBindings=DefaultEnvironmentDependencyBindings,
    GammaL="dummy",
    HITRAN_units=True,
    LineShift=True,
    File=None,
    Format=None,
    OmegaGrid=None,
    WavenumberRange=None,
    WavenumberStep=None,
    WavenumberWing=None,
    WavenumberWingHW=None,
    WavenumberGrid=None,
    Diluent=None,
):
    """
    INPUT PARAMETERS:
        Components:  list of tuples [(M,I,D)], where
                        M - HITRAN molecule number,
                        I - HITRAN isotopologue number,
                        D - abundance (optional)
        SourceTables:  list of tables from which to calculate cross-section   (optional)
        partitionFunction:  pointer to partition function (default is PYTIPS) (optional)
        Environment:  dictionary containing thermodynamic parameters.
                        'p' - pressure in atmospheres,
                        'T' - temperature in Kelvin
                        Default={'p':1.,'T':296.}
        WavenumberRange:  wavenumber range to consider.
        WavenumberStep:   wavenumber step to consider.
        WavenumberWing:   absolute wing for calculating a lineshape (in cm-1)
        WavenumberWingHW:  relative wing for calculating a lineshape (in halfwidths)
        IntensityThreshold:  threshold for intensities
        GammaL:  specifies broadening parameter ('gamma_air' or 'gamma_self')
        HITRAN_units:  use cm2/molecule (True) or cm-1 (False) for absorption coefficient
        File:   write output to file (if specified)
        Format:  c-format of file output (accounts for significant digits in WavenumberStep)
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid with respect to parameters OmegaRange and OmegaStep
        Xsect: absorption coefficient calculated on the grid
    ---
    DESCRIPTION:
        Calculate absorption coefficient using Doppler (Gauss) profile.
        Absorption coefficient is calculated at arbitrary temperature and pressure.
        User can vary a wide range of parameters to control a process of calculation.
        The choise of these parameters depends on properties of a particular linelist.
        Default values are a sort of guess which give a decent precision (on average)
        for a reasonable amount of cpu time. To increase calculation accuracy,
        user should use a trial and error method.
    ---
    EXAMPLE OF USAGE:
        nu,coef = absorptionCoefficient_Doppler(((2,1),),'co2',WavenumberStep=0.01,
                                              HITRAN_units=False,GammaL='gamma_self')
    ---
    """

    if WavenumberRange:
        OmegaRange = WavenumberRange
    if WavenumberStep:
        OmegaStep = WavenumberStep
    if WavenumberWing:
        OmegaWing = WavenumberWing
    if WavenumberWingHW:
        OmegaWingHW = WavenumberWingHW
    if WavenumberGrid:
        OmegaGrid = WavenumberGrid

    # "bug" with 1-element list
    Components = listOfTuples(Components)
    SourceTables = listOfTuples(SourceTables)

    # determine final input values
    (
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    ) = getDefaultValuesForXsect(
        Components,
        SourceTables,
        Environment,
        OmegaRange,
        OmegaStep,
        OmegaWing,
        IntensityThreshold,
        Format,
    )
    # special for Doppler case: set OmegaStep to a smaller value
    if not OmegaStep:
        OmegaStep = 0.001

    # warn user about too large omega step
    if OmegaStep > 0.005:
        warn("Big wavenumber step: possible accuracy decline")

    # get uniform linespace for cross-section
    # number_of_points = (OmegaRange[1]-OmegaRange[0])/OmegaStep + 1
    # Omegas = linspace(OmegaRange[0],OmegaRange[1],number_of_points)
    if OmegaGrid is not None:
        Omegas = npsort(OmegaGrid)
    else:
        # Omegas = arange(OmegaRange[0],OmegaRange[1],OmegaStep)
        Omegas = arange_(OmegaRange[0], OmegaRange[1], OmegaStep)  # fix
    number_of_points = len(Omegas)
    Xsect = zeros(number_of_points)

    # reference temperature and pressure
    Tref = __FloatType__(296.0)  # K
    pref = __FloatType__(1.0)  # atm

    # actual temperature and pressure
    T = Environment["T"]  # K
    p = Environment["p"]  # atm

    # create dictionary from Components
    ABUNDANCES = {}
    NATURAL_ABUNDANCES = {}
    for Component in Components:
        M = Component[0]
        I = Component[1]
        if len(Component) >= 3:
            ni = Component[2]
        else:
            try:
                ni = ISO[(M, I)][ISO_INDEX["abundance"]]
            except KeyError:
                raise Exception("cannot find component M,I = %d,%d." % (M, I))
        ABUNDANCES[(M, I)] = ni
        NATURAL_ABUNDANCES[(M, I)] = ISO[(M, I)][ISO_INDEX["abundance"]]

    # precalculation of volume concentration
    if HITRAN_units:
        factor = __FloatType__(1.0)
    else:
        factor = volumeConcentration(p, T)

    # SourceTables contain multiple tables
    for TableName in SourceTables:

        # get line centers
        nline = LOCAL_TABLE_CACHE[TableName]["header"]["number_of_rows"]

        # loop through line centers (single stream)
        for RowID in range(nline):

            # get basic line parameters (lower level)
            LineCenterDB = LOCAL_TABLE_CACHE[TableName]["data"]["nu"][RowID]
            LineIntensityDB = LOCAL_TABLE_CACHE[TableName]["data"]["sw"][RowID]
            LowerStateEnergyDB = LOCAL_TABLE_CACHE[TableName]["data"]["elower"][RowID]
            MoleculeNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["molec_id"][RowID]
            IsoNumberDB = LOCAL_TABLE_CACHE[TableName]["data"]["local_iso_id"][RowID]
            if LineShift:
                Shift0DB = LOCAL_TABLE_CACHE[TableName]["data"]["delta_air"][RowID]
            else:
                Shift0DB = 0

            # filter by molecule and isotopologue
            if (MoleculeNumberDB, IsoNumberDB) not in ABUNDANCES:
                continue

            # partition functions for T and Tref
            # TODO: optimize
            SigmaT = partitionFunction(MoleculeNumberDB, IsoNumberDB, T)
            SigmaTref = partitionFunction(MoleculeNumberDB, IsoNumberDB, Tref)

            # get all environment dependences from voigt parameters

            #   intensity
            LineIntensity = EnvironmentDependency_Intensity(
                LineIntensityDB,
                T,
                Tref,
                SigmaT,
                SigmaTref,
                LowerStateEnergyDB,
                LineCenterDB,
            )

            #   FILTER by LineIntensity: compare it with IntencityThreshold
            # TODO: apply wing narrowing instead of filtering, this would be more appropriate
            if LineIntensity < IntensityThreshold:
                continue

            cMassMol = 1.66053873e-27
            fSqrtMass = sqrt(molecularMass(MoleculeNumberDB, IsoNumberDB))
            cc_ = 2.99792458e8
            cBolts_ = 1.3806503e-23
            GammaD = (
                (cSqrt2Ln2 / cc_)
                * sqrt(cBolts_ / cMassMol)
                * sqrt(T)
                * LineCenterDB
                / fSqrtMass
            )

            #   get final wing of the line according to GammaD, OmegaWingHW and OmegaWing
            OmegaWingF = max(OmegaWing, OmegaWingHW * GammaD)

            #   shift coefficient
            Shift0 = Shift0DB * p / pref

            BoundIndexLower = bisect(Omegas, LineCenterDB - OmegaWingF)
            BoundIndexUpper = bisect(Omegas, LineCenterDB + OmegaWingF)
            lineshape_vals = PROFILE_DOPPLER(
                LineCenterDB + Shift0, GammaD, Omegas[BoundIndexLower:BoundIndexUpper]
            )
            Xsect[BoundIndexLower:BoundIndexUpper] += (
                factor
                / NATURAL_ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * ABUNDANCES[(MoleculeNumberDB, IsoNumberDB)]
                * LineIntensity
                * lineshape_vals
            )

    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


# -------------------------------------------------------------------------------
# UNIFIED INTERFACE FOR THE ABSORPTION COEFFICIENT AND CROSS-SECTION CALCULATIONS
# -------------------------------------------------------------------------------
PROFILE_MAP = {
    "Voigt": absorptionCoefficient_Voigt,
    "Lorentz": absorptionCoefficient_Lorentz,
    "Doppler": absorptionCoefficient_Doppler,
    "SDV": absorptionCoefficient_SDVoigt,
    "HT": absorptionCoefficient_HT,
}


def absorptionCrossSection(profile="HT", **argv):
    argv["HITRAN_units"] = True
    return PROFILE_MAP[profile](**argv)


def absorptionCoefficient(profile="HT", **argv):
    argv["HITRAN_units"] = False
    return PROFILE_MAP[profile](**argv)


# ---------------------------------------------------------------------------
# SHORTCUTS AND ALIASES FOR ABSORPTION COEFFICIENTS
# ---------------------------------------------------------------------------

absorptionCoefficient_Gauss = absorptionCoefficient_Doppler


def abscoef_HT(table=None, step=None, grid=None, env={"T": 296.0, "p": 1.0}, file=None):
    return absorptionCoefficient_HT(
        SourceTables=table, OmegaStep=step, OmegaGrid=grid, Environment=env, File=file
    )


def abscoef_Voigt(
    table=None, step=None, grid=None, env={"T": 296.0, "p": 1.0}, file=None
):
    return absorptionCoefficient_Voigt(
        SourceTables=table, OmegaStep=step, OmegaGrid=grid, Environment=env, File=file
    )


def abscoef_Lorentz(
    table=None, step=None, grid=None, env={"T": 296.0, "p": 1.0}, file=None
):
    return absorptionCoefficient_Lorentz(
        SourceTables=table, OmegaStep=step, OmegaGrid=grid, Environment=env, File=file
    )


def abscoef_Doppler(
    table=None, step=None, grid=None, env={"T": 296.0, "p": 1.0}, file=None
):
    return absorptionCoefficient_Doppler(
        SourceTables=table, OmegaStep=step, OmegaGrid=grid, Environment=env, File=file
    )


abscoef_Gauss = abscoef_Doppler


def abscoef(
    table=None, step=None, grid=None, env={"T": 296.0, "p": 1.0}, file=None
):  # default
    return absorptionCoefficient_Lorentz(
        SourceTables=table, OmegaStep=step, OmegaGrid=grid, Environment=env, File=file
    )


# ---------------------------------------------------------------------------


def transmittanceSpectrum(
    Omegas,
    AbsorptionCoefficient,
    Environment={"l": 100.0},
    File=None,
    Format="%e %e",
    Wavenumber=None,
):
    """
    INPUT PARAMETERS:
        Wavenumber/Omegas:   wavenumber grid                    (required)
        AbsorptionCoefficient:  absorption coefficient on grid  (required)
        Environment:  dictionary containing path length in cm.
                      Default={'l':100.}
        File:         name of the output file                 (optional)
        Format: c format used in file output, default '%e %e' (optional)
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid
        Xsect:  transmittance spectrum calculated on the grid
    ---
    DESCRIPTION:
        Calculate a transmittance spectrum (dimensionless) based
        on previously calculated absorption coefficient.
        Transmittance spectrum is calculated at an arbitrary
        optical path length 'l' (1 m by default)
    ---
    EXAMPLE OF USAGE:
        nu,trans = transmittanceSpectrum(nu,coef)
    ---
    """
    # compatibility with older versions
    if Wavenumber:
        Omegas = Wavenumber
    l = Environment["l"]
    Xsect = exp(-AbsorptionCoefficient * l)
    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


def absorptionSpectrum(
    Omegas,
    AbsorptionCoefficient,
    Environment={"l": 100.0},
    File=None,
    Format="%e %e",
    Wavenumber=None,
):
    """
    INPUT PARAMETERS:
        Wavenumber/Omegas:   wavenumber grid                    (required)
        AbsorptionCoefficient:  absorption coefficient on grid  (required)
        Environment:  dictionary containing path length in cm.
                      Default={'l':100.}
        File:         name of the output file                 (optional)
        Format: c format used in file output, default '%e %e' (optional)
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid
        Xsect:  absorption spectrum calculated on the grid
    ---
    DESCRIPTION:
        Calculate an absorption spectrum (dimensionless) based
        on previously calculated absorption coefficient.
        Absorption spectrum is calculated at an arbitrary
        optical path length 'l' (1 m by default)
    ---
    EXAMPLE OF USAGE:
        nu,absorp = absorptionSpectrum(nu,coef)
    ---
    """
    # compatibility with older versions
    if Wavenumber:
        Omegas = Wavenumber
    l = Environment["l"]
    Xsect = 1 - exp(-AbsorptionCoefficient * l)
    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


def radianceSpectrum(
    Omegas,
    AbsorptionCoefficient,
    Environment={"l": 100.0, "T": 296.0},
    File=None,
    Format="%e %e",
    Wavenumber=None,
):
    """
    INPUT PARAMETERS:
        Wavenumber/Omegas:   wavenumber grid                   (required)
        AbsorptionCoefficient:  absorption coefficient on grid (required)
        Environment:  dictionary containing path length in cm.
                      and temperature in Kelvin.
                      Default={'l':100.,'T':296.}
        File:         name of the output file                 (optional)
        Format: c format used in file output, default '%e %e' (optional)
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid
        Xsect:  radiance spectrum calculated on the grid
    ---
    DESCRIPTION:
        Calculate a radiance spectrum (in W/sr/cm^2/cm-1) based
        on previously calculated absorption coefficient.
        Radiance spectrum is calculated at an arbitrary
        optical path length 'l' (1 m by default) and
        temperature 'T' (296 K by default). For obtaining a
        physically meaningful result 'T' must be the same
        as a temperature which was used in absorption coefficient.
    ---
    EXAMPLE OF USAGE:
        nu,radi = radianceSpectrum(nu,coef)
    ---
    """
    # compatibility with older versions
    if Wavenumber:
        Omegas = Wavenumber
    l = Environment["l"]
    T = Environment["T"]
    Alw = 1 - exp(-AbsorptionCoefficient * l)
    LBBTw = (
        2
        * hh
        * cc ** 2
        * Omegas ** 3
        / (exp(hh * cc * Omegas / (cBolts * T)) - 1)
        * 1.0e-7
    )
    Xsect = Alw * LBBTw  # W/sr/cm**2/cm**-1
    if File:
        save_to_file(File, Format, Omegas, Xsect)
    return Omegas, Xsect


# GET X,Y FOR FINE PLOTTING OF A STICK SPECTRUM
def getStickXY(TableName):
    """
    Get X and Y for fine plotting of a stick spectrum.
    Usage: X,Y = getStickXY(TableName).
    """
    cent, intens = getColumns(TableName, ("nu", "sw"))
    n = len(cent)
    cent_ = zeros(n * 3)
    intens_ = zeros(n * 3)
    for i in range(n):
        intens_[3 * i] = 0
        intens_[3 * i + 1] = intens[i]
        intens_[3 * i + 2] = 0
        cent_[(3 * i) : (3 * i + 3)] = cent[i]
    return cent_, intens_


# /GET X,Y FOR FINE PLOTTING OF A STICK SPECTRUM


# LOW-RES SPECTRA (CONVOLUTION WITH APPARATUS FUNCTION)

# /LOW-RES SPECTRA (CONVOLUTION WITH APPARATUS FUNCTION)

# /----------------------------------------------------------------------------


# ------------------  HITRAN-ON-THE-WEB COMPATIBILITY -------------------------


def read_hotw(filename):
    """
    Read cross-section file fetched from HITRAN-on-the-Web.
    The format of the file line must be as follows:
      nu, coef
    Other lines are omitted.
    """
    import sys

    f = open(filename, "r")
    nu = []
    coef = []
    for line in f:
        pars = line.split()
        try:
            nu.append(float(pars[0]))
            coef.append(float(pars[1]))
        except:
            if False:
                print(sys.exc_info())
            else:
                pass
    return array(nu), array(coef)


# alias for read_hotw for backwards compatibility
read_xsect = read_hotw

# /----------------------------------------------------------------------------

# ------------------  SPECTRAL CONVOLUTION -------------------------

# rectangular slit function
def SLIT_RECTANGULAR(x, g):
    """
    Instrumental (slit) function.
    B(x) = 1/γ , if |x| ≤ γ/2 & B(x) = 0, if |x| > γ/2,
    where γ is a slit width or the instrumental resolution.
    """
    index_inner = abs(x) <= g / 2
    index_outer = ~index_inner
    y = zeros(len(x))
    y[index_inner] = 1 / g
    y[index_outer] = 0
    return y


# triangular slit function
def SLIT_TRIANGULAR(x, g):
    """
    Instrumental (slit) function.
    B(x) = 1/γ*(1-|x|/γ), if |x| ≤ γ & B(x) = 0, if |x| > γ,
    where γ is the line width equal to the half base of the triangle.
    """
    index_inner = abs(x) <= g
    index_outer = ~index_inner
    y = zeros(len(x))
    y[index_inner] = 1 / g * (1 - abs(x[index_inner]) / g)
    y[index_outer] = 0
    return y


# gaussian slit function
def SLIT_GAUSSIAN(x, g):
    """
    Instrumental (slit) function.
    B(x) = sqrt(ln(2)/pi)/γ*exp(-ln(2)*(x/γ)**2),
    where γ/2 is a gaussian half-width at half-maximum.
    """
    g /= 2
    return sqrt(log(2)) / (sqrt(pi) * g) * exp(-log(2) * (x / g) ** 2)


# dispersion slit function
def SLIT_DISPERSION(x, g):
    """
    Instrumental (slit) function.
    B(x) = γ/pi/(x**2+γ**2),
    where γ/2 is a lorentzian half-width at half-maximum.
    """
    g /= 2
    return g / pi / (x ** 2 + g ** 2)


# cosinus slit function
def SLIT_COSINUS(x, g):
    return (cos(pi / g * x) + 1) / (2 * g)


# diffraction slit function
def SLIT_DIFFRACTION(x, g):
    """
    Instrumental (slit) function.
    """
    y = zeros(len(x))
    index_zero = x == 0
    index_nonzero = ~index_zero
    dk_ = pi / g
    x_ = dk_ * x[index_nonzero]
    w_ = sin(x_)
    r_ = w_ ** 2 / x_ ** 2
    y[index_zero] = 1
    y[index_nonzero] = r_ / g
    return y


# apparatus function of the ideal Michelson interferometer
def SLIT_MICHELSON(x, g):
    """
    Instrumental (slit) function.
    B(x) = 2/γ*sin(2pi*x/γ)/(2pi*x/γ) if x!=0 else 1,
    where 1/γ is the maximum optical path difference.
    """
    y = zeros(len(x))
    index_zero = x == 0
    index_nonzero = ~index_zero
    dk_ = 2 * pi / g
    x_ = dk_ * x[index_nonzero]
    y[index_zero] = 1
    y[index_nonzero] = 2 / g * sin(x_) / x_
    return y


# spectral convolution with an apparatus (slit) function
def convolveSpectrum(
    Omega,
    CrossSection,
    Resolution=0.1,
    AF_wing=10.0,
    SlitFunction=SLIT_RECTANGULAR,
    Wavenumber=None,
):
    """
    INPUT PARAMETERS:
        Wavenumber/Omega:    wavenumber grid                     (required)
        CrossSection:  high-res cross section calculated on grid (required)
        Resolution:    instrumental resolution γ                 (optional)
        AF_wing:       instrumental function wing                (optional)
        SlitFunction:  instrumental function for low-res spectra calculation (optional)
    OUTPUT PARAMETERS:
        Wavenum: wavenumber grid
        CrossSection: low-res cross section calculated on grid
        i1: lower index in Omega input
        i2: higher index in Omega input
        slit: slit function calculated over grid [-AF_wing; AF_wing]
                with the step equal to instrumental resolution.
    ---
    DESCRIPTION:
        Produce a simulation of experimental spectrum via the convolution
        of a “dry” spectrum with an instrumental function.
        Instrumental function is provided as a parameter and
        is calculated in a grid with the width=AF_wing and step=Resolution.
    ---
    EXAMPLE OF USAGE:
        nu_,radi_,i,j,slit = convolveSpectrum(nu,radi,Resolution=2.0,AF_wing=10.0,
                                                SlitFunction=SLIT_MICHELSON)
    ---
    """
    # compatibility with older versions
    if Wavenumber:
        Omega = Wavenumber
    step = Omega[1] - Omega[0]
    if step >= Resolution:
        raise Exception("step must be less than resolution")
    # x = arange(-AF_wing,AF_wing+step,step)
    x = arange_(-AF_wing, AF_wing + step, step)  # fix
    slit = SlitFunction(x, Resolution)
    slit /= sum(slit) * step  # simple normalization
    left_bnd = int(len(slit) / 2)  # new versions of Numpy don't support float indexing
    right_bnd = len(Omega) - int(
        len(slit) / 2
    )  # new versions of Numpy don't support float indexing
    CrossSectionLowRes = convolve(CrossSection, slit, mode="same") * step
    return (
        Omega[left_bnd:right_bnd],
        CrossSectionLowRes[left_bnd:right_bnd],
        left_bnd,
        right_bnd,
        slit,
    )


# spectral convolution with an apparatus (slit) function
def convolveSpectrumSame(
    Omega,
    CrossSection,
    Resolution=0.1,
    AF_wing=10.0,
    SlitFunction=SLIT_RECTANGULAR,
    Wavenumber=None,
):
    """
    Convolves cross section with a slit function with given parameters.
    """
    # compatibility with older versions
    if Wavenumber:
        Omega = Wavenumber
    step = Omega[1] - Omega[0]
    if step >= Resolution:
        raise Exception("step must be less than resolution")
    # x = arange(-AF_wing,AF_wing+step,step)
    x = arange_(-AF_wing, AF_wing + step, step)  # fix
    slit = SlitFunction(x, Resolution)
    slit /= sum(slit) * step  # simple normalization
    left_bnd = 0
    right_bnd = len(Omega)
    CrossSectionLowRes = convolve(CrossSection, slit, mode="same") * step
    return (
        Omega[left_bnd:right_bnd],
        CrossSectionLowRes[left_bnd:right_bnd],
        left_bnd,
        right_bnd,
        slit,
    )


def convolveSpectrumFull(
    Omega, CrossSection, Resolution=0.1, AF_wing=10.0, SlitFunction=SLIT_RECTANGULAR
):
    """
    Convolves cross section with a slit function with given parameters.
    """
    step = Omega[1] - Omega[0]
    x = arange(-AF_wing, AF_wing + step, step)
    slit = SlitFunction(x, Resolution)
    print("step=")
    print(step)
    print("x=")
    print(x)
    print("slitfunc=")
    print(SlitFunction)
    CrossSectionLowRes = convolve(CrossSection, slit, mode="full") * step
    return Omega, CrossSectionLowRes, None, None


# ------------------------------------------------------------------
