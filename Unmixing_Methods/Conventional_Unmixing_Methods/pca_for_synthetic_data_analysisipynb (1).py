# -*- coding: utf-8 -*-
"""PCA-for-synthetic-data-analysisipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UOedpVOcHZ3rWqxlV-gTl4l4KtY-JT5L
"""

"""
Author: Zoe, UTAT -SS - Science

The code's objective is to Graph GAN-generated (synthetic) data and real-world data to see how well the GAN is performing/ how useful it is in its current state.

To do this, we have the following secondary goals:
    - Apply PCA to reduce the dimensions of the data to be able to graph it
    - Determine how much variation/ information iis lost depending on the number of dimensions kept during PCA, to detemine how good are observations actually are.

We will be using Licheng's epoch 1,000 and epoch 5,000 data, but this can be changed (look for "#put data here")
TO change he number of principal components (=final number of dimensions), look for "#change number of PC here"

To understand the theory behind PCA, and how it works, I recommend watching this video: https://www.youtube.com/watch?v=FgakZw6K1QQ&t=784s. TL;DR: It compresses dimentions.

Useful link used: #https://www.kdnuggets.com/2023/05/principal-component-analysis-pca-scikitlearn.html

Note that although the same functions are applied to many data sets, this code is sepparated per data set, not function. THis was done so it would be easier to add/ eliminate data sets

"""

from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

from sklearn.decomposition import PCA

import statistics


"""Old, original data"""
# Load dataset
originial_dataset = pd.read_csv("/Users/zoe/Downloads/simpler_data.csv")  #insert your real data here


# Drop label and wavelengths that are beyond FINCH's
originial_dataset  = originial_dataset .drop(columns='Spectra')
originial_dataset  = originial_dataset .drop(originial_dataset .iloc[:, 3:54], axis=1)
originial_dataset  = originial_dataset .drop(originial_dataset .iloc[:, 84:10000], axis=1)

#have to scale data to aply pca
std_scaler = StandardScaler()
scaled_originial_dataset  = std_scaler.fit_transform(originial_dataset )


# PCA transformation
pca = PCA(n_components=3) #change number of PC here
pca_data = pca.fit_transform(scaled_originial_dataset )  # Apply PCA to the scaled data

"""new data epoch 100"""
# Load dataset
epoch_100 = pd.read_csv("/Users/zoe/Downloads/gan_data_epoch_100.csv")


# Drop label and wavelengths that are beyond FINCH's
epoch_100 = epoch_100.drop(columns='Spectra')
epoch_100 = epoch_100.drop(columns='use')
epoch_100 = epoch_100.drop(epoch_100.iloc[:, 3:53], axis=1)
epoch_100 = epoch_100.drop(epoch_100.iloc[:, 84:9999], axis=1)


scaled_epoch_100 = std_scaler.fit_transform(epoch_100)
pca_epoch_100 = PCA(n_components=3)
pca_data_syn = pca_epoch_100.fit_transform(scaled_epoch_100)  # Apply PCA to the scaled synthetic data


"""new data, epoch 5000"""

epoch_5000 = pd.read_csv("/Users/zoe/Downloads/gan_epoch_5000.csv")

epoch_5000 = epoch_5000.drop(columns='Spectra')
epoch_5000 = epoch_5000.drop(columns='use')
epoch_5000 = epoch_5000.drop(epoch_5000.iloc[:, 3:53], axis=1)
epoch_5000 = epoch_5000.drop(epoch_5000.iloc[:, 84:9999], axis=1)

scaled_epoch_5000 = std_scaler.fit_transform(epoch_5000)
pca_epoch_5000 = PCA(n_components=3)
pca_data_syn_f = pca_epoch_5000.fit_transform(scaled_epoch_5000)  # Apply PCA to the scaled synthetic data


"""The following steps are done to add data sets together to measure the explained variance of the data sets together"""

"""all together"""
tog=pd.concat([epoch_5000,epoch_100,originial_dataset ])
scaled_tog = std_scaler.fit_transform(tog)
pca_tog = PCA(n_components=3)
pca_data_syn_tog = pca_tog.fit_transform(tog)  # Apply PCA

"""OG+e100"""
eh_og=pd.concat([epoch_100,originial_dataset ])
eh_og = std_scaler.fit_transform(eh_og)
pca_eh = PCA(n_components=3)
pca_data_eh_og = pca_eh.fit_transform(eh_og)

"""OG+e5000"""
ef_og=pd.concat([epoch_5000,originial_dataset ])
ef_og = std_scaler.fit_transform(ef_og)
pca_ef = PCA(n_components=3)
pca_data_ef_og = pca_ef.fit_transform(ef_og)


"""calculating and printing explained variance"""

explained_variance_originial_dataset  = pca.explained_variance_
total_explained_variance_originial_dataset  = explained_variance_originial_dataset .sum()
print("Explained variance  for OG:", total_explained_variance_originial_dataset)

explained_variance_epoch_100 = pca_epoch_100.explained_variance_
total_explained_variance_epoch_100 = explained_variance_epoch_100.sum()
print("Explained variance  for e100:", total_explained_variance_epoch_100)

explained_variance_epoch_5000 = pca_epoch_5000.explained_variance_
total_explained_variance_epoch_5000 = explained_variance_epoch_5000.sum()
print("Explained variance  for e5000:", total_explained_variance_epoch_5000)

explained_variance_tog = pca_tog.explained_variance_
total_explained_variance_tog = explained_variance_tog.sum()
print("Explained variance  for all together:", total_explained_variance_tog)

explained_variance_eh = pca_eh.explained_variance_
total_explained_variance_eh = explained_variance_eh.sum()
print("Explained variance  for OG+e100:", total_explained_variance_eh)

explained_variance_ef = pca_ef.explained_variance_
total_explained_variance_ef = explained_variance_ef.sum()
print("Explained variance  for OG+5000:", total_explained_variance_ef)



"""plot pca"""


# Plotting
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Plot PCA with OG data
ax.scatter(pca_data[:, 0], pca_data[:, 1], pca_data[:, 2], alpha=0.5, label='PCA data')

#Plot PCA with SYN data epoch 100
ax.scatter(pca_data_syn[:, 0], pca_data_syn[:, 1], pca_data_syn[:, 2], alpha=0.5, label='PCA data synthetic epoch 100')

#plot PCA wth SYN data epoch 5000
ax.scatter(pca_data_syn_f[:, 0], pca_data_syn_f[:, 1], pca_data_syn_f[:, 2], alpha=0.5, label='PCA data synthetic epoch 5000')

# Set labels and title
ax.set_xlabel("Principal Component 1")
ax.set_ylabel("Principal Component 2")
ax.set_zlabel("Principal Component 3")
ax.set_title("3D PCA Plot")
ax.legend()

# Show plot